
H747_Queue_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d78  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800815c  0800815c  0001815c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008168  08008168  00018168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800816c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000035c  20000074  080081e0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003d0  080081e0  000203d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e01b  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000037ef  00000000  00000000  0003e0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f38  00000000  00000000  000418b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e20  00000000  00000000  000427e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ff6a  00000000  00000000  00043608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013846  00000000  00000000  00083572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019cb1f  00000000  00000000  00096db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002338d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004540  00000000  00000000  0023392c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008000 	.word	0x08008000

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	08008000 	.word	0x08008000

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <u8SL_CalculateCRC>:
uint16_t u16PacketType = 0;
uint16_t u16PacketLength = 0;
uint8_t au8LinkRxBuffer[256];

uint8_t u8SL_CalculateCRC(uint16_t u16Type, uint16_t u16Length, uint8_t *pu8Data)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	603a      	str	r2, [r7, #0]
 80007b6:	80fb      	strh	r3, [r7, #6]
 80007b8:	460b      	mov	r3, r1
 80007ba:	80bb      	strh	r3, [r7, #4]
    int n;
    uint8_t u8CRC;

    u8CRC  = (u16Type   >> 0) & 0xff;
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	72fb      	strb	r3, [r7, #11]
    u8CRC ^= (u16Type   >> 8) & 0xff;
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b25a      	sxtb	r2, r3
 80007c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80007cc:	4053      	eors	r3, r2
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	72fb      	strb	r3, [r7, #11]
    u8CRC ^= (u16Length >> 0) & 0xff;
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	b25a      	sxtb	r2, r3
 80007d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80007da:	4053      	eors	r3, r2
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	72fb      	strb	r3, [r7, #11]
    u8CRC ^= (u16Length >> 8) & 0xff;
 80007e0:	88bb      	ldrh	r3, [r7, #4]
 80007e2:	0a1b      	lsrs	r3, r3, #8
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80007ec:	4053      	eors	r3, r2
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	72fb      	strb	r3, [r7, #11]

    for(n = 0; n < u16Length; n++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	e009      	b.n	800080c <u8SL_CalculateCRC+0x60>
    {
        u8CRC ^= pu8Data[n];
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	7afb      	ldrb	r3, [r7, #11]
 8000802:	4053      	eors	r3, r2
 8000804:	72fb      	strb	r3, [r7, #11]
    for(n = 0; n < u16Length; n++)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3301      	adds	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	88bb      	ldrh	r3, [r7, #4]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbf1      	blt.n	80007f8 <u8SL_CalculateCRC+0x4c>
    }

    return(u8CRC);
 8000814:	7afb      	ldrb	r3, [r7, #11]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <vSL_TxByte>:

void vSL_TxByte(bool bSpecialCharacter, uint8_t u8Data)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
    if(!bSpecialCharacter && u8Data < 0x10)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f083 0301 	eor.w	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d00e      	beq.n	800085e <vSL_TxByte+0x3a>
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	2b0f      	cmp	r3, #15
 8000844:	d80b      	bhi.n	800085e <vSL_TxByte+0x3a>
    {
        /* Send escape character and escape byte */
        u8Data ^= 0x10;
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	f083 0310 	eor.w	r3, r3, #16
 800084c:	b2db      	uxtb	r3, r3
 800084e:	71bb      	strb	r3, [r7, #6]
        HAL_UART_Transmit(&huart1, &u8Data, 1, 1000);
 8000850:	1db9      	adds	r1, r7, #6
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	2201      	movs	r2, #1
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <vSL_TxByte+0x50>)
 800085a:	f004 fa93 	bl	8004d84 <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(&huart1, &u8Data, 1, 1000);
 800085e:	1db9      	adds	r1, r7, #6
 8000860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000864:	2201      	movs	r2, #1
 8000866:	4803      	ldr	r0, [pc, #12]	; (8000874 <vSL_TxByte+0x50>)
 8000868:	f004 fa8c 	bl	8004d84 <HAL_UART_Transmit>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000160 	.word	0x20000160

08000878 <vSL_WriteMessage>:

void vSL_WriteMessage(uint16_t u16Type, uint16_t u16Length, uint8_t *pu8Data)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	603a      	str	r2, [r7, #0]
 8000882:	80fb      	strh	r3, [r7, #6]
 8000884:	460b      	mov	r3, r1
 8000886:	80bb      	strh	r3, [r7, #4]
    int n;
    uint8_t u8CRC;

    u8CRC = u8SL_CalculateCRC(u16Type, u16Length, pu8Data);
 8000888:	88b9      	ldrh	r1, [r7, #4]
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff8c 	bl	80007ac <u8SL_CalculateCRC>
 8000894:	4603      	mov	r3, r0
 8000896:	72fb      	strb	r3, [r7, #11]

    //printf("\nvSL_WriteMessage(%d, %d, %02x)", u16Type, u16Length, u8CRC);

    /* Send start character */
    vSL_TxByte(true, SL_START_CHAR);
 8000898:	2101      	movs	r1, #1
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff ffc2 	bl	8000824 <vSL_TxByte>

    /* Send message type */
    vSL_TxByte(false, (u16Type >> 8) & 0xff);
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ffba 	bl	8000824 <vSL_TxByte>
    vSL_TxByte(false, (u16Type >> 0) & 0xff);
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4619      	mov	r1, r3
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff ffb4 	bl	8000824 <vSL_TxByte>

    /* Send message length */
    vSL_TxByte(false, (u16Length >> 8) & 0xff);
 80008bc:	88bb      	ldrh	r3, [r7, #4]
 80008be:	0a1b      	lsrs	r3, r3, #8
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4619      	mov	r1, r3
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffac 	bl	8000824 <vSL_TxByte>
    vSL_TxByte(false, (u16Length >> 0) & 0xff);
 80008cc:	88bb      	ldrh	r3, [r7, #4]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4619      	mov	r1, r3
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff ffa6 	bl	8000824 <vSL_TxByte>

    /* Send message checksum */
    vSL_TxByte(false, u8CRC);
 80008d8:	7afb      	ldrb	r3, [r7, #11]
 80008da:	4619      	mov	r1, r3
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff ffa1 	bl	8000824 <vSL_TxByte>

    /* Send message payload */
    for(n = 0; n < u16Length; n++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e00a      	b.n	80008fe <vSL_WriteMessage+0x86>
    {
        vSL_TxByte(false, pu8Data[n]);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff ff96 	bl	8000824 <vSL_TxByte>
    for(n = 0; n < u16Length; n++)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	88bb      	ldrh	r3, [r7, #4]
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	429a      	cmp	r2, r3
 8000904:	dbf0      	blt.n	80008e8 <vSL_WriteMessage+0x70>
    }

    /* Send end character */
    vSL_TxByte(true, SL_END_CHAR);
 8000906:	2103      	movs	r1, #3
 8000908:	2001      	movs	r0, #1
 800090a:	f7ff ff8b 	bl	8000824 <vSL_TxByte>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <bSL_ReadMessage>:

bool bSL_ReadMessage(uint16_t *pu16Type, uint16_t *pu16Length, uint16_t u16MaxLength, uint8_t *pu8Message, uint8_t u8Data)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	4613      	mov	r3, r2
 8000926:	80fb      	strh	r3, [r7, #6]
    static teSL_RxState eRxState = E_STATE_RX_WAIT_START;
    static uint8_t u8CRC = 0;
    static uint16_t u16Bytes = 0;
    static bool bInEsc = false;

    switch(u8Data)
 8000928:	7e3b      	ldrb	r3, [r7, #24]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d014      	beq.n	8000958 <bSL_ReadMessage+0x40>
 800092e:	2b03      	cmp	r3, #3
 8000930:	dc2c      	bgt.n	800098c <bSL_ReadMessage+0x74>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d002      	beq.n	800093c <bSL_ReadMessage+0x24>
 8000936:	2b02      	cmp	r3, #2
 8000938:	d00a      	beq.n	8000950 <bSL_ReadMessage+0x38>
 800093a:	e027      	b.n	800098c <bSL_ReadMessage+0x74>
    {
        case SL_START_CHAR:
            // Reset state machine
            u16Bytes = 0;
 800093c:	4b58      	ldr	r3, [pc, #352]	; (8000aa0 <bSL_ReadMessage+0x188>)
 800093e:	2200      	movs	r2, #0
 8000940:	801a      	strh	r2, [r3, #0]
            bInEsc = false;
 8000942:	4b58      	ldr	r3, [pc, #352]	; (8000aa4 <bSL_ReadMessage+0x18c>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
            //printf("\nRX Start ");
            eRxState = E_STATE_RX_WAIT_TYPEMSB;
 8000948:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <bSL_ReadMessage+0x190>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
            break;
 800094e:	e0a1      	b.n	8000a94 <bSL_ReadMessage+0x17c>

        case SL_ESC_CHAR:
            // Escape next character
            bInEsc = true;
 8000950:	4b54      	ldr	r3, [pc, #336]	; (8000aa4 <bSL_ReadMessage+0x18c>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
            break;
 8000956:	e09d      	b.n	8000a94 <bSL_ReadMessage+0x17c>

        case SL_END_CHAR:
            // End message
            //printf("\nGot END");
            eRxState = E_STATE_RX_WAIT_START;
 8000958:	4b53      	ldr	r3, [pc, #332]	; (8000aa8 <bSL_ReadMessage+0x190>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
            if(*pu16Length < u16MaxLength)
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	88fa      	ldrh	r2, [r7, #6]
 8000964:	429a      	cmp	r2, r3
 8000966:	f240 8092 	bls.w	8000a8e <bSL_ReadMessage+0x176>
            {
                if(u8CRC == u8SL_CalculateCRC(*pu16Type, *pu16Length, pu8Message))
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	8818      	ldrh	r0, [r3, #0]
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f7ff ff19 	bl	80007ac <u8SL_CalculateCRC>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	4b4b      	ldr	r3, [pc, #300]	; (8000aac <bSL_ReadMessage+0x194>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	429a      	cmp	r2, r3
 8000984:	f040 8083 	bne.w	8000a8e <bSL_ReadMessage+0x176>
                {
                    /* CRC matches - valid packet */
                    //printf("\nbSL_ReadMessage(%d, %d, %02x)", *pu16Type, *pu16Length, u8CRC);
                    return(true);
 8000988:	2301      	movs	r3, #1
 800098a:	e084      	b.n	8000a96 <bSL_ReadMessage+0x17e>
            }
            //printf("\nCRC BAD");
            break;

        default:
            if(bInEsc)
 800098c:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <bSL_ReadMessage+0x18c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <bSL_ReadMessage+0x8a>
            {
                /* Unescape the character */
                u8Data ^= 0x10;
 8000994:	7e3b      	ldrb	r3, [r7, #24]
 8000996:	f083 0310 	eor.w	r3, r3, #16
 800099a:	763b      	strb	r3, [r7, #24]
                bInEsc = false;
 800099c:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <bSL_ReadMessage+0x18c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
            }
            //printf("\nData 0x%x", u8Data & 0xFF);

            switch(eRxState)
 80009a2:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <bSL_ReadMessage+0x190>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d873      	bhi.n	8000a92 <bSL_ReadMessage+0x17a>
 80009aa:	a201      	add	r2, pc, #4	; (adr r2, 80009b0 <bSL_ReadMessage+0x98>)
 80009ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b0:	08000a87 	.word	0x08000a87
 80009b4:	080009cd 	.word	0x080009cd
 80009b8:	080009e7 	.word	0x080009e7
 80009bc:	08000a05 	.word	0x08000a05
 80009c0:	08000a1f 	.word	0x08000a1f
 80009c4:	08000a4f 	.word	0x08000a4f
 80009c8:	08000a63 	.word	0x08000a63

            case E_STATE_RX_WAIT_START:
                break;

            case E_STATE_RX_WAIT_TYPEMSB:
                *pu16Type = (uint16_t)u8Data << 8;
 80009cc:	7e3b      	ldrb	r3, [r7, #24]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	801a      	strh	r2, [r3, #0]
                eRxState++;
 80009d8:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <bSL_ReadMessage+0x190>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <bSL_ReadMessage+0x190>)
 80009e2:	701a      	strb	r2, [r3, #0]
                break;
 80009e4:	e052      	b.n	8000a8c <bSL_ReadMessage+0x174>

            case E_STATE_RX_WAIT_TYPELSB:
                *pu16Type += (uint16_t)u8Data;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	881a      	ldrh	r2, [r3, #0]
 80009ea:	7e3b      	ldrb	r3, [r7, #24]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	4413      	add	r3, r2
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	801a      	strh	r2, [r3, #0]
                //printf("\nType 0x%x", *pu16Type & 0xFFFF);
                eRxState++;
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <bSL_ReadMessage+0x190>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <bSL_ReadMessage+0x190>)
 8000a00:	701a      	strb	r2, [r3, #0]
                break;
 8000a02:	e043      	b.n	8000a8c <bSL_ReadMessage+0x174>

            case E_STATE_RX_WAIT_LENMSB:
                *pu16Length = (uint16_t)u8Data << 8;
 8000a04:	7e3b      	ldrb	r3, [r7, #24]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	021b      	lsls	r3, r3, #8
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	801a      	strh	r2, [r3, #0]
                eRxState++;
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <bSL_ReadMessage+0x190>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <bSL_ReadMessage+0x190>)
 8000a1a:	701a      	strb	r2, [r3, #0]
                break;
 8000a1c:	e036      	b.n	8000a8c <bSL_ReadMessage+0x174>

            case E_STATE_RX_WAIT_LENLSB:
                *pu16Length += (uint16_t)u8Data;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	881a      	ldrh	r2, [r3, #0]
 8000a22:	7e3b      	ldrb	r3, [r7, #24]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	4413      	add	r3, r2
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	801a      	strh	r2, [r3, #0]
                //printf("\nLength %d", *pu16Length);
                if(*pu16Length > u16MaxLength)
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	88fa      	ldrh	r2, [r7, #6]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d203      	bcs.n	8000a40 <bSL_ReadMessage+0x128>
                {
                    //printf("\nLength > MaxLength");
                    eRxState = E_STATE_RX_WAIT_START;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <bSL_ReadMessage+0x190>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
                }
                else
                {
                    eRxState++;
                }
                break;
 8000a3e:	e025      	b.n	8000a8c <bSL_ReadMessage+0x174>
                    eRxState++;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <bSL_ReadMessage+0x190>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <bSL_ReadMessage+0x190>)
 8000a4a:	701a      	strb	r2, [r3, #0]
                break;
 8000a4c:	e01e      	b.n	8000a8c <bSL_ReadMessage+0x174>

            case E_STATE_RX_WAIT_CRC:
                //printf("\nCRC %02x\n", u8Data);
                u8CRC = u8Data;
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <bSL_ReadMessage+0x194>)
 8000a50:	7e3b      	ldrb	r3, [r7, #24]
 8000a52:	7013      	strb	r3, [r2, #0]
                eRxState++;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <bSL_ReadMessage+0x190>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <bSL_ReadMessage+0x190>)
 8000a5e:	701a      	strb	r2, [r3, #0]
                break;
 8000a60:	e014      	b.n	8000a8c <bSL_ReadMessage+0x174>

            case E_STATE_RX_WAIT_DATA:
                if(u16Bytes < *pu16Length)
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	881a      	ldrh	r2, [r3, #0]
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <bSL_ReadMessage+0x188>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d90d      	bls.n	8000a8a <bSL_ReadMessage+0x172>
                {
                    //printf( "%02x ", u8Data);
                    pu8Message[u16Bytes++] = u8Data;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <bSL_ReadMessage+0x188>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	b291      	uxth	r1, r2
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <bSL_ReadMessage+0x188>)
 8000a78:	8011      	strh	r1, [r2, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	7e3a      	ldrb	r2, [r7, #24]
 8000a82:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000a84:	e001      	b.n	8000a8a <bSL_ReadMessage+0x172>
                break;
 8000a86:	bf00      	nop
 8000a88:	e003      	b.n	8000a92 <bSL_ReadMessage+0x17a>
                break;
 8000a8a:	bf00      	nop
            }
            break;
 8000a8c:	e001      	b.n	8000a92 <bSL_ReadMessage+0x17a>
            break;
 8000a8e:	bf00      	nop
 8000a90:	e000      	b.n	8000a94 <bSL_ReadMessage+0x17c>
            break;
 8000a92:	bf00      	nop
    }
    return(false);
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000094 	.word	0x20000094
 8000aa4:	20000096 	.word	0x20000096
 8000aa8:	20000097 	.word	0x20000097
 8000aac:	20000098 	.word	0x20000098

08000ab0 <APP_vProcessIncomingSerialCommands>:

void APP_vProcessIncomingSerialCommands(uint8_t u8RxByte)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t u8Length = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
	uint8_t au8values[4];

    if(true == bSL_ReadMessage(&u16PacketType, &u16PacketLength, MAX_PACKET_SIZE, au8LinkRxBuffer, u8RxByte))
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	4b40      	ldr	r3, [pc, #256]	; (8000bc4 <APP_vProcessIncomingSerialCommands+0x114>)
 8000ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac8:	493f      	ldr	r1, [pc, #252]	; (8000bc8 <APP_vProcessIncomingSerialCommands+0x118>)
 8000aca:	4840      	ldr	r0, [pc, #256]	; (8000bcc <APP_vProcessIncomingSerialCommands+0x11c>)
 8000acc:	f7ff ff24 	bl	8000918 <bSL_ReadMessage>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d070      	beq.n	8000bb8 <APP_vProcessIncomingSerialCommands+0x108>
    {
    	switch(u16PacketType)
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <APP_vProcessIncomingSerialCommands+0x11c>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	2b49      	cmp	r3, #73	; 0x49
 8000adc:	d006      	beq.n	8000aec <APP_vProcessIncomingSerialCommands+0x3c>
 8000ade:	2b49      	cmp	r3, #73	; 0x49
 8000ae0:	dc63      	bgt.n	8000baa <APP_vProcessIncomingSerialCommands+0xfa>
 8000ae2:	2b14      	cmp	r3, #20
 8000ae4:	d03d      	beq.n	8000b62 <APP_vProcessIncomingSerialCommands+0xb2>
 8000ae6:	2b24      	cmp	r3, #36	; 0x24
 8000ae8:	d004      	beq.n	8000af4 <APP_vProcessIncomingSerialCommands+0x44>
 8000aea:	e05e      	b.n	8000baa <APP_vProcessIncomingSerialCommands+0xfa>
		{
			case (E_SL_MSG_PERMIT_JOINING_REQUEST):
			{
				printf("E_SL_MSG_PERMIT_JOINING_REQUEST\n\r");
 8000aec:	4838      	ldr	r0, [pc, #224]	; (8000bd0 <APP_vProcessIncomingSerialCommands+0x120>)
 8000aee:	f006 fb31 	bl	8007154 <iprintf>
			}
			break;
 8000af2:	e062      	b.n	8000bba <APP_vProcessIncomingSerialCommands+0x10a>

			case (E_SL_MSG_START_NETWORK):
			{
				printf("E_SL_MSG_START_NETWORK\n\r");
 8000af4:	4837      	ldr	r0, [pc, #220]	; (8000bd4 <APP_vProcessIncomingSerialCommands+0x124>)
 8000af6:	f006 fb2d 	bl	8007154 <iprintf>
				u8Length = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]
                ZNC_BUF_U8_UPD ( &au8values[ u8Length ], 9, u8Length );
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	f107 0210 	add.w	r2, r7, #16
 8000b04:	4413      	add	r3, r2
 8000b06:	2209      	movs	r2, #9
 8000b08:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
                ZNC_BUF_U8_UPD ( &au8values[ u8Length ], 9, u8Length );
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	f107 0210 	add.w	r2, r7, #16
 8000b18:	4413      	add	r3, r2
 8000b1a:	2209      	movs	r2, #9
 8000b1c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	3301      	adds	r3, #1
 8000b24:	73fb      	strb	r3, [r7, #15]
                ZNC_BUF_U8_UPD ( &au8values[ u8Length ], 9, u8Length );
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	f107 0210 	add.w	r2, r7, #16
 8000b2c:	4413      	add	r3, r2
 8000b2e:	2209      	movs	r2, #9
 8000b30:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	3301      	adds	r3, #1
 8000b38:	73fb      	strb	r3, [r7, #15]
                ZNC_BUF_U8_UPD ( &au8values[ u8Length ], 9, u8Length );
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	f107 0210 	add.w	r2, r7, #16
 8000b40:	4413      	add	r3, r2
 8000b42:	2209      	movs	r2, #9
 8000b44:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
                vSL_WriteMessage ( 0x8011,
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	f107 0208 	add.w	r2, r7, #8
 8000b56:	4619      	mov	r1, r3
 8000b58:	f248 0011 	movw	r0, #32785	; 0x8011
 8000b5c:	f7ff fe8c 	bl	8000878 <vSL_WriteMessage>
                                   u8Length,
                                   au8values );
			}
			break;
 8000b60:	e02b      	b.n	8000bba <APP_vProcessIncomingSerialCommands+0x10a>

			case (E_SL_MSG_GET_PERMIT_JOIN):
			{
				printf("E_SL_MSG_GET_PERMIT_JOIN\n\r");
 8000b62:	481d      	ldr	r0, [pc, #116]	; (8000bd8 <APP_vProcessIncomingSerialCommands+0x128>)
 8000b64:	f006 faf6 	bl	8007154 <iprintf>
				u8Length    =  0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
				ZNC_BUF_U8_UPD  ( &au8values [ 0 ], 1, u8Length );
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	723b      	strb	r3, [r7, #8]
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	3301      	adds	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
				ZNC_BUF_U8_UPD  ( &au8values [ 1 ], 2, u8Length );
 8000b76:	2302      	movs	r3, #2
 8000b78:	727b      	strb	r3, [r7, #9]
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
				ZNC_BUF_U16_UPD ( &au8values [ 2 ], 3, u8Length );
 8000b80:	2300      	movs	r3, #0
 8000b82:	72bb      	strb	r3, [r7, #10]
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	3302      	adds	r3, #2
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	3302      	adds	r3, #2
 8000b94:	73fb      	strb	r3, [r7, #15]
				vSL_WriteMessage ( E_SL_MSG_STATUS,
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f107 0208 	add.w	r2, r7, #8
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ba4:	f7ff fe68 	bl	8000878 <vSL_WriteMessage>
								   u8Length,
								   au8values );
			}
			break;
 8000ba8:	e007      	b.n	8000bba <APP_vProcessIncomingSerialCommands+0x10a>
			default:
				printf("u16PacketType = %d \n\r",u16PacketType);
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <APP_vProcessIncomingSerialCommands+0x11c>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480a      	ldr	r0, [pc, #40]	; (8000bdc <APP_vProcessIncomingSerialCommands+0x12c>)
 8000bb2:	f006 facf 	bl	8007154 <iprintf>
			break;
 8000bb6:	e000      	b.n	8000bba <APP_vProcessIncomingSerialCommands+0x10a>
		}
    }
 8000bb8:	bf00      	nop
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200001f0 	.word	0x200001f0
 8000bc8:	20000092 	.word	0x20000092
 8000bcc:	20000090 	.word	0x20000090
 8000bd0:	08008018 	.word	0x08008018
 8000bd4:	0800803c 	.word	0x0800803c
 8000bd8:	08008058 	.word	0x08008058
 8000bdc:	08008074 	.word	0x08008074

08000be0 <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_UART8_Init(void);
static void MX_USART1_UART_Init(void);

int __io_putchar (int ch) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, HAL_MAX_DELAY);
 8000bee:	f107 010f 	add.w	r1, r7, #15
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <__io_putchar+0x28>)
 8000bfa:	f004 f8c3 	bl	8004d84 <HAL_UART_Transmit>
	return ch;
 8000bfe:	687b      	ldr	r3, [r7, #4]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200002f0 	.word	0x200002f0

08000c0c <main>:
void Receiver_Task (void *argument);

uint8_t Rx_data;

int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

	int32_t timeout;
	timeout = 0xFFFF;
 8000c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c16:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c18:	bf00      	nop
 8000c1a:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <main+0xa4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d004      	beq.n	8000c30 <main+0x24>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	1e5a      	subs	r2, r3, #1
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	dcf4      	bgt.n	8000c1a <main+0xe>
	if ( timeout < 0 )
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	da01      	bge.n	8000c3a <main+0x2e>
	{
		Error_Handler();
 8000c36:	f000 f9d7 	bl	8000fe8 <Error_Handler>
	}

	HAL_Init();
 8000c3a:	f000 fbc3 	bl	80013c4 <HAL_Init>

	SystemClock_Config();
 8000c3e:	f000 f859 	bl	8000cf4 <SystemClock_Config>

	__HAL_RCC_HSEM_CLK_ENABLE();
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <main+0xa4>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <main+0xa4>)
 8000c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <main+0xa4>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]

	HAL_HSEM_FastTake(HSEM_ID_0);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f001 fc89 	bl	8002578 <HAL_HSEM_FastTake>

	HAL_HSEM_Release(HSEM_ID_0,0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f001 fc9f 	bl	80025ac <HAL_HSEM_Release>
	timeout = 0xFFFF;
 8000c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c72:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c74:	bf00      	nop
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <main+0xa4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d104      	bne.n	8000c8c <main+0x80>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	1e5a      	subs	r2, r3, #1
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	dcf4      	bgt.n	8000c76 <main+0x6a>
	if ( timeout < 0 )
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	da01      	bge.n	8000c96 <main+0x8a>
	{
		Error_Handler();
 8000c92:	f000 f9a9 	bl	8000fe8 <Error_Handler>
	}

	MX_GPIO_Init();
 8000c96:	f000 f943 	bl	8000f20 <MX_GPIO_Init>
	MX_UART8_Init();
 8000c9a:	f000 f8a9 	bl	8000df0 <MX_UART8_Init>
	MX_USART1_UART_Init();
 8000c9e:	f000 f8f3 	bl	8000e88 <MX_USART1_UART_Init>

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4903      	ldr	r1, [pc, #12]	; (8000cb4 <main+0xa8>)
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <main+0xac>)
 8000ca8:	f004 f902 	bl	8004eb0 <HAL_UART_Receive_IT>

	//HAL_UART_Receive_IT(&huart8, &Rx_data, 1);

	//vTaskStartScheduler();

	while (1)
 8000cac:	e7fe      	b.n	8000cac <main+0xa0>
 8000cae:	bf00      	nop
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	20000380 	.word	0x20000380
 8000cb8:	20000160 	.word	0x20000160

08000cbc <HAL_UART_RxCpltCallback>:
    {
        vProcessCommand();
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart8, (uint8_t*)&UART8_RxBuffer, 1);
	//vProcessRxChar(UART1_RxBuffer);

	if(huart->Instance == huart1.Instance){
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_UART_RxCpltCallback+0x30>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d109      	bne.n	8000ce4 <HAL_UART_RxCpltCallback+0x28>
//		buf[indexd] = UART1_RxBuffer;
//		indexd++;
		APP_vProcessIncomingSerialCommands(UART1_RxBuffer);
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <HAL_UART_RxCpltCallback+0x34>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff feeb 	bl	8000ab0 <APP_vProcessIncomingSerialCommands>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4904      	ldr	r1, [pc, #16]	; (8000cf0 <HAL_UART_RxCpltCallback+0x34>)
 8000cde:	4803      	ldr	r0, [pc, #12]	; (8000cec <HAL_UART_RxCpltCallback+0x30>)
 8000ce0:	f004 f8e6 	bl	8004eb0 <HAL_UART_Receive_IT>
//	 then calling portEND_SWITCHING_ISR() will request a context switch. If
//	 xHigherPriorityTaskWoken is still pdFALSE then calling
//	 portEND_SWITCHING_ISR() will have no effect */
//
//	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000160 	.word	0x20000160
 8000cf0:	20000380 	.word	0x20000380

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b09e      	sub	sp, #120	; 0x78
 8000cf8:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	/*!< Supply configuration update enable */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d00:	2004      	movs	r0, #4
 8000d02:	f001 fc67 	bl	80025d4 <HAL_PWREx_ConfigSupply>

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <SystemClock_Config+0xf4>)
 8000d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0e:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <SystemClock_Config+0xf4>)
 8000d10:	f023 0301 	bic.w	r3, r3, #1
 8000d14:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <SystemClock_Config+0xf4>)
 8000d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <SystemClock_Config+0xf8>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a31      	ldr	r2, [pc, #196]	; (8000dec <SystemClock_Config+0xf8>)
 8000d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <SystemClock_Config+0xf8>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d38:	bf00      	nop
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <SystemClock_Config+0xf8>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d46:	d1f8      	bne.n	8000d3a <SystemClock_Config+0x46>

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d50:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30

	RCC_OscInitStruct.PLL.PLLM = 5;
 8000d62:	2305      	movs	r3, #5
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 160;
 8000d66:	23a0      	movs	r3, #160	; 0xa0
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d76:	2304      	movs	r3, #4
 8000d78:	643b      	str	r3, [r7, #64]	; 0x40

	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	64bb      	str	r3, [r7, #72]	; 0x48
	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 fc7e 	bl	8002688 <HAL_RCC_OscConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 8000d92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xaa>
	{
	Error_Handler();
 8000d9a:	f000 f925 	bl	8000fe8 <Error_Handler>
	}

	/* Select PLL as system clock source and configure  bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000d9e:	233f      	movs	r3, #63	; 0x3f
 8000da0:	657b      	str	r3, [r7, #84]	; 0x54
								 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da2:	2303      	movs	r3, #3
 8000da4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000daa:	2308      	movs	r3, #8
 8000dac:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dae:	2340      	movs	r3, #64	; 0x40
 8000db0:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000db2:	2340      	movs	r3, #64	; 0x40
 8000db4:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dba:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dbc:	2340      	movs	r3, #64	; 0x40
 8000dbe:	673b      	str	r3, [r7, #112]	; 0x70
	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000dc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 f86e 	bl	8002ea8 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 8000dd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0xea>
	{
	Error_Handler();
 8000dda:	f000 f905 	bl	8000fe8 <Error_Handler>

	__HAL_RCC_SYSCFG_CLK_ENABLE() ;

	HAL_EnableCompensationCell();
	*/
}
 8000dde:	bf00      	nop
 8000de0:	3778      	adds	r7, #120	; 0x78
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	58000400 	.word	0x58000400
 8000dec:	58024800 	.word	0x58024800

08000df0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <MX_UART8_Init+0x90>)
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <MX_UART8_Init+0x94>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <MX_UART8_Init+0x90>)
 8000dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e00:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e3a:	f003 ff53 	bl	8004ce4 <HAL_UART_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000e44:	f000 f8d0 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	480d      	ldr	r0, [pc, #52]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e4c:	f005 fe71 	bl	8006b32 <HAL_UARTEx_SetTxFifoThreshold>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000e56:	f000 f8c7 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4808      	ldr	r0, [pc, #32]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e5e:	f005 fea6 	bl	8006bae <HAL_UARTEx_SetRxFifoThreshold>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000e68:	f000 f8be 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_UART8_Init+0x90>)
 8000e6e:	f005 fe27 	bl	8006ac0 <HAL_UARTEx_DisableFifoMode>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000e78:	f000 f8b6 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200002f0 	.word	0x200002f0
 8000e84:	40007c00 	.word	0x40007c00

08000e88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_USART1_UART_Init+0x94>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ed2:	f003 ff07 	bl	8004ce4 <HAL_UART_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000edc:	f000 f884 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ee4:	f005 fe25 	bl	8006b32 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eee:	f000 f87b 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000ef6:	f005 fe5a 	bl	8006bae <HAL_UARTEx_SetRxFifoThreshold>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f00:	f000 f872 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_USART1_UART_Init+0x90>)
 8000f06:	f005 fddb 	bl	8006ac0 <HAL_UARTEx_DisableFifoMode>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f10:	f000 f86a 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000160 	.word	0x20000160
 8000f1c:	40011000 	.word	0x40011000

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	4a28      	ldr	r2, [pc, #160]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f54:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_GPIO_Init+0xc0>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <MX_GPIO_Init+0xc4>)
 8000fb6:	f001 fac5 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000fba:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <MX_GPIO_Init+0xc4>)
 8000fd4:	f001 f906 	bl	80021e4 <HAL_GPIO_Init>

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	58022000 	.word	0x58022000

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_MspInit+0x38>)
 8001000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_MspInit+0x38>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_MspInit+0x38>)
 8001010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	210f      	movs	r1, #15
 8001020:	f06f 0001 	mvn.w	r0, #1
 8001024:	f000 fb47 	bl	80016b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58024400 	.word	0x58024400

08001034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0bc      	sub	sp, #240	; 0xf0
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	22c0      	movs	r2, #192	; 0xc0
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f006 f875 	bl	8007144 <memset>
  if(huart->Instance==UART8)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a51      	ldr	r2, [pc, #324]	; (80011a4 <HAL_UART_MspInit+0x170>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d14b      	bne.n	80010fc <HAL_UART_MspInit+0xc8>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001064:	2302      	movs	r3, #2
 8001066:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4618      	mov	r0, r3
 8001074:	f002 faa4 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800107e:	f7ff ffb3 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001082:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001088:	4a47      	ldr	r2, [pc, #284]	; (80011a8 <HAL_UART_MspInit+0x174>)
 800108a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001092:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010a0:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	4a40      	ldr	r2, [pc, #256]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b0:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80010be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80010d8:	2308      	movs	r3, #8
 80010da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010e2:	4619      	mov	r1, r3
 80010e4:	4831      	ldr	r0, [pc, #196]	; (80011ac <HAL_UART_MspInit+0x178>)
 80010e6:	f001 f87d 	bl	80021e4 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	2053      	movs	r0, #83	; 0x53
 80010f0:	f000 fae1 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80010f4:	2053      	movs	r0, #83	; 0x53
 80010f6:	f000 faf8 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010fa:	e04f      	b.n	800119c <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a2b      	ldr	r2, [pc, #172]	; (80011b0 <HAL_UART_MspInit+0x17c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d14a      	bne.n	800119c <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001106:	2301      	movs	r3, #1
 8001108:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4618      	mov	r0, r3
 8001116:	f002 fa53 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001120:	f7ff ff62 	bl	8000fe8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800112a:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_UART_MspInit+0x174>)
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_UART_MspInit+0x174>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001160:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001164:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800117a:	2307      	movs	r3, #7
 800117c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001184:	4619      	mov	r1, r3
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <HAL_UART_MspInit+0x180>)
 8001188:	f001 f82c 	bl	80021e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2105      	movs	r1, #5
 8001190:	2025      	movs	r0, #37	; 0x25
 8001192:	f000 fa90 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001196:	2025      	movs	r0, #37	; 0x25
 8001198:	f000 faa7 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 800119c:	bf00      	nop
 800119e:	37f0      	adds	r7, #240	; 0xf0
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40007c00 	.word	0x40007c00
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58022400 	.word	0x58022400
 80011b0:	40011000 	.word	0x40011000
 80011b4:	58020000 	.word	0x58020000

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <NMI_Handler+0x4>

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e8:	f000 f95e 	bl	80014a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011ec:	f005 ff62 	bl	80070b4 <xTaskGetSchedulerState>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d001      	beq.n	80011fa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011f6:	f005 fe07 	bl	8006e08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <USART1_IRQHandler+0x10>)
 8001206:	f003 fe99 	bl	8004f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000160 	.word	0x20000160

08001214 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <UART8_IRQHandler+0x10>)
 800121a:	f003 fe8f 	bl	8004f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200002f0 	.word	0x200002f0

08001228 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e00a      	b.n	8001250 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800123a:	f3af 8000 	nop.w
 800123e:	4601      	mov	r1, r0
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	60ba      	str	r2, [r7, #8]
 8001246:	b2ca      	uxtb	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	429a      	cmp	r2, r3
 8001256:	dbf0      	blt.n	800123a <_read+0x12>
	}

return len;
 8001258:	687b      	ldr	r3, [r7, #4]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e009      	b.n	8001288 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	60ba      	str	r2, [r7, #8]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fcaf 	bl	8000be0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf1      	blt.n	8001274 <_write+0x12>
	}
	return len;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_close>:

int _close(int file)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
	return -1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c2:	605a      	str	r2, [r3, #4]
	return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_isatty>:

int _isatty(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	return 1;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f005 fedc 	bl	80070f0 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20020000 	.word	0x20020000
 8001364:	00000400 	.word	0x00000400
 8001368:	2000009c 	.word	0x2000009c
 800136c:	200003d0 	.word	0x200003d0

08001370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001374:	f7ff f980 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001378:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800137a:	e003      	b.n	8001384 <LoopCopyDataInit>

0800137c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800137e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001380:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001382:	3104      	adds	r1, #4

08001384 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001388:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800138a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800138c:	d3f6      	bcc.n	800137c <CopyDataInit>
  ldr  r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001390:	e002      	b.n	8001398 <LoopFillZerobss>

08001392 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001392:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001394:	f842 3b04 	str.w	r3, [r2], #4

08001398 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800139a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800139c:	d3f9      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139e:	f005 fead 	bl	80070fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a2:	f7ff fc33 	bl	8000c0c <main>
  bx  lr    
 80013a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013ac:	0800816c 	.word	0x0800816c
  ldr  r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013b4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80013b8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80013bc:	200003d0 	.word	0x200003d0

080013c0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC3_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f000 f968 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013d0:	f001 ff20 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_Init+0x68>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	4913      	ldr	r1, [pc, #76]	; (8001430 <HAL_Init+0x6c>)
 80013e2:	5ccb      	ldrb	r3, [r1, r3]
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_Init+0x68>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_Init+0x6c>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <HAL_Init+0x70>)
 8001406:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_Init+0x74>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140e:	200f      	movs	r0, #15
 8001410:	f000 f814 	bl	800143c <HAL_InitTick>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e002      	b.n	8001424 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800141e:	f7ff fdeb 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	58024400 	.word	0x58024400
 8001430:	0800808c 	.word	0x0800808c
 8001434:	20000004 	.word	0x20000004
 8001438:	20000000 	.word	0x20000000

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_InitTick+0x60>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e021      	b.n	8001494 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_InitTick+0x64>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_InitTick+0x60>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f94d 	bl	8001706 <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 f917 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <HAL_InitTick+0x68>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000000c 	.word	0x2000000c
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	2000000c 	.word	0x2000000c
 80014cc:	200003bc 	.word	0x200003bc

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200003bc 	.word	0x200003bc

080014e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetREVID+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0c1b      	lsrs	r3, r3, #16
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	5c001000 	.word	0x5c001000

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	4313      	orrs	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	05fa0000 	.word	0x05fa0000

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	; (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff29 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff40 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff90 	bl	80015f4 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff33 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa4 	bl	800165c <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff fed2 	bl	80014d0 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e2dc      	b.n	8001cf2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d008      	beq.n	8001756 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e2cd      	b.n	8001cf2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a76      	ldr	r2, [pc, #472]	; (8001934 <HAL_DMA_Abort+0x214>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d04a      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a74      	ldr	r2, [pc, #464]	; (8001938 <HAL_DMA_Abort+0x218>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d045      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a73      	ldr	r2, [pc, #460]	; (800193c <HAL_DMA_Abort+0x21c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d040      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a71      	ldr	r2, [pc, #452]	; (8001940 <HAL_DMA_Abort+0x220>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d03b      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a70      	ldr	r2, [pc, #448]	; (8001944 <HAL_DMA_Abort+0x224>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d036      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a6e      	ldr	r2, [pc, #440]	; (8001948 <HAL_DMA_Abort+0x228>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d031      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a6d      	ldr	r2, [pc, #436]	; (800194c <HAL_DMA_Abort+0x22c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d02c      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a6b      	ldr	r2, [pc, #428]	; (8001950 <HAL_DMA_Abort+0x230>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d027      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6a      	ldr	r2, [pc, #424]	; (8001954 <HAL_DMA_Abort+0x234>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d022      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a68      	ldr	r2, [pc, #416]	; (8001958 <HAL_DMA_Abort+0x238>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01d      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a67      	ldr	r2, [pc, #412]	; (800195c <HAL_DMA_Abort+0x23c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d018      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a65      	ldr	r2, [pc, #404]	; (8001960 <HAL_DMA_Abort+0x240>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a64      	ldr	r2, [pc, #400]	; (8001964 <HAL_DMA_Abort+0x244>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00e      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a62      	ldr	r2, [pc, #392]	; (8001968 <HAL_DMA_Abort+0x248>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d009      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a61      	ldr	r2, [pc, #388]	; (800196c <HAL_DMA_Abort+0x24c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d004      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a5f      	ldr	r2, [pc, #380]	; (8001970 <HAL_DMA_Abort+0x250>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_DMA_Abort+0xda>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_DMA_Abort+0xdc>
 80017fa:	2300      	movs	r3, #0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 021e 	bic.w	r2, r2, #30
 800180e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800181e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e00a      	b.n	800183e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 020e 	bic.w	r2, r2, #14
 8001836:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a3c      	ldr	r2, [pc, #240]	; (8001934 <HAL_DMA_Abort+0x214>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d072      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a3a      	ldr	r2, [pc, #232]	; (8001938 <HAL_DMA_Abort+0x218>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d06d      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a39      	ldr	r2, [pc, #228]	; (800193c <HAL_DMA_Abort+0x21c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d068      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a37      	ldr	r2, [pc, #220]	; (8001940 <HAL_DMA_Abort+0x220>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d063      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a36      	ldr	r2, [pc, #216]	; (8001944 <HAL_DMA_Abort+0x224>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d05e      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a34      	ldr	r2, [pc, #208]	; (8001948 <HAL_DMA_Abort+0x228>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d059      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a33      	ldr	r2, [pc, #204]	; (800194c <HAL_DMA_Abort+0x22c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d054      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a31      	ldr	r2, [pc, #196]	; (8001950 <HAL_DMA_Abort+0x230>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d04f      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a30      	ldr	r2, [pc, #192]	; (8001954 <HAL_DMA_Abort+0x234>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d04a      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a2e      	ldr	r2, [pc, #184]	; (8001958 <HAL_DMA_Abort+0x238>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d045      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a2d      	ldr	r2, [pc, #180]	; (800195c <HAL_DMA_Abort+0x23c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d040      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <HAL_DMA_Abort+0x240>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d03b      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <HAL_DMA_Abort+0x244>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d036      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <HAL_DMA_Abort+0x248>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d031      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_DMA_Abort+0x24c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d02c      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a25      	ldr	r2, [pc, #148]	; (8001970 <HAL_DMA_Abort+0x250>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d027      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a24      	ldr	r2, [pc, #144]	; (8001974 <HAL_DMA_Abort+0x254>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d022      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a22      	ldr	r2, [pc, #136]	; (8001978 <HAL_DMA_Abort+0x258>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01d      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a21      	ldr	r2, [pc, #132]	; (800197c <HAL_DMA_Abort+0x25c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d018      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <HAL_DMA_Abort+0x260>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <HAL_DMA_Abort+0x264>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00e      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <HAL_DMA_Abort+0x268>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d009      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1b      	ldr	r2, [pc, #108]	; (800198c <HAL_DMA_Abort+0x26c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d004      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a19      	ldr	r2, [pc, #100]	; (8001990 <HAL_DMA_Abort+0x270>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d132      	bne.n	8001994 <HAL_DMA_Abort+0x274>
 800192e:	2301      	movs	r3, #1
 8001930:	e031      	b.n	8001996 <HAL_DMA_Abort+0x276>
 8001932:	bf00      	nop
 8001934:	40020010 	.word	0x40020010
 8001938:	40020028 	.word	0x40020028
 800193c:	40020040 	.word	0x40020040
 8001940:	40020058 	.word	0x40020058
 8001944:	40020070 	.word	0x40020070
 8001948:	40020088 	.word	0x40020088
 800194c:	400200a0 	.word	0x400200a0
 8001950:	400200b8 	.word	0x400200b8
 8001954:	40020410 	.word	0x40020410
 8001958:	40020428 	.word	0x40020428
 800195c:	40020440 	.word	0x40020440
 8001960:	40020458 	.word	0x40020458
 8001964:	40020470 	.word	0x40020470
 8001968:	40020488 	.word	0x40020488
 800196c:	400204a0 	.word	0x400204a0
 8001970:	400204b8 	.word	0x400204b8
 8001974:	58025408 	.word	0x58025408
 8001978:	5802541c 	.word	0x5802541c
 800197c:	58025430 	.word	0x58025430
 8001980:	58025444 	.word	0x58025444
 8001984:	58025458 	.word	0x58025458
 8001988:	5802546c 	.word	0x5802546c
 800198c:	58025480 	.word	0x58025480
 8001990:	58025494 	.word	0x58025494
 8001994:	2300      	movs	r3, #0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6d      	ldr	r2, [pc, #436]	; (8001b64 <HAL_DMA_Abort+0x444>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d04a      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6b      	ldr	r2, [pc, #428]	; (8001b68 <HAL_DMA_Abort+0x448>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d045      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6a      	ldr	r2, [pc, #424]	; (8001b6c <HAL_DMA_Abort+0x44c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d040      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a68      	ldr	r2, [pc, #416]	; (8001b70 <HAL_DMA_Abort+0x450>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d03b      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a67      	ldr	r2, [pc, #412]	; (8001b74 <HAL_DMA_Abort+0x454>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d036      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a65      	ldr	r2, [pc, #404]	; (8001b78 <HAL_DMA_Abort+0x458>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d031      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a64      	ldr	r2, [pc, #400]	; (8001b7c <HAL_DMA_Abort+0x45c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d02c      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a62      	ldr	r2, [pc, #392]	; (8001b80 <HAL_DMA_Abort+0x460>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d027      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a61      	ldr	r2, [pc, #388]	; (8001b84 <HAL_DMA_Abort+0x464>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d022      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a5f      	ldr	r2, [pc, #380]	; (8001b88 <HAL_DMA_Abort+0x468>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01d      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a5e      	ldr	r2, [pc, #376]	; (8001b8c <HAL_DMA_Abort+0x46c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d018      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a5c      	ldr	r2, [pc, #368]	; (8001b90 <HAL_DMA_Abort+0x470>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a5b      	ldr	r2, [pc, #364]	; (8001b94 <HAL_DMA_Abort+0x474>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d00e      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <HAL_DMA_Abort+0x478>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d009      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a58      	ldr	r2, [pc, #352]	; (8001b9c <HAL_DMA_Abort+0x47c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d004      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a56      	ldr	r2, [pc, #344]	; (8001ba0 <HAL_DMA_Abort+0x480>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d108      	bne.n	8001a5c <HAL_DMA_Abort+0x33c>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0201 	bic.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e007      	b.n	8001a6c <HAL_DMA_Abort+0x34c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a6c:	e013      	b.n	8001a96 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a6e:	f7ff fd2f 	bl	80014d0 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d90c      	bls.n	8001a96 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e12d      	b.n	8001cf2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1e5      	bne.n	8001a6e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2f      	ldr	r2, [pc, #188]	; (8001b64 <HAL_DMA_Abort+0x444>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d04a      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <HAL_DMA_Abort+0x448>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d045      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <HAL_DMA_Abort+0x44c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d040      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a2a      	ldr	r2, [pc, #168]	; (8001b70 <HAL_DMA_Abort+0x450>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d03b      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <HAL_DMA_Abort+0x454>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d036      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <HAL_DMA_Abort+0x458>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d031      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <HAL_DMA_Abort+0x45c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d02c      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <HAL_DMA_Abort+0x460>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d027      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a23      	ldr	r2, [pc, #140]	; (8001b84 <HAL_DMA_Abort+0x464>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d022      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <HAL_DMA_Abort+0x468>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01d      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a20      	ldr	r2, [pc, #128]	; (8001b8c <HAL_DMA_Abort+0x46c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d018      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_DMA_Abort+0x470>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <HAL_DMA_Abort+0x474>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d00e      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_DMA_Abort+0x478>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d009      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <HAL_DMA_Abort+0x47c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d004      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_DMA_Abort+0x480>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_DMA_Abort+0x426>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_DMA_Abort+0x428>
 8001b46:	2300      	movs	r3, #0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d02b      	beq.n	8001ba4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	223f      	movs	r2, #63	; 0x3f
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	e02a      	b.n	8001bba <HAL_DMA_Abort+0x49a>
 8001b64:	40020010 	.word	0x40020010
 8001b68:	40020028 	.word	0x40020028
 8001b6c:	40020040 	.word	0x40020040
 8001b70:	40020058 	.word	0x40020058
 8001b74:	40020070 	.word	0x40020070
 8001b78:	40020088 	.word	0x40020088
 8001b7c:	400200a0 	.word	0x400200a0
 8001b80:	400200b8 	.word	0x400200b8
 8001b84:	40020410 	.word	0x40020410
 8001b88:	40020428 	.word	0x40020428
 8001b8c:	40020440 	.word	0x40020440
 8001b90:	40020458 	.word	0x40020458
 8001b94:	40020470 	.word	0x40020470
 8001b98:	40020488 	.word	0x40020488
 8001b9c:	400204a0 	.word	0x400204a0
 8001ba0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a4f      	ldr	r2, [pc, #316]	; (8001cfc <HAL_DMA_Abort+0x5dc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d072      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a4d      	ldr	r2, [pc, #308]	; (8001d00 <HAL_DMA_Abort+0x5e0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d06d      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a4c      	ldr	r2, [pc, #304]	; (8001d04 <HAL_DMA_Abort+0x5e4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d068      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a4a      	ldr	r2, [pc, #296]	; (8001d08 <HAL_DMA_Abort+0x5e8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d063      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a49      	ldr	r2, [pc, #292]	; (8001d0c <HAL_DMA_Abort+0x5ec>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d05e      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a47      	ldr	r2, [pc, #284]	; (8001d10 <HAL_DMA_Abort+0x5f0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d059      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <HAL_DMA_Abort+0x5f4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d054      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a44      	ldr	r2, [pc, #272]	; (8001d18 <HAL_DMA_Abort+0x5f8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d04f      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a43      	ldr	r2, [pc, #268]	; (8001d1c <HAL_DMA_Abort+0x5fc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04a      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a41      	ldr	r2, [pc, #260]	; (8001d20 <HAL_DMA_Abort+0x600>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d045      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <HAL_DMA_Abort+0x604>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d040      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a3e      	ldr	r2, [pc, #248]	; (8001d28 <HAL_DMA_Abort+0x608>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d03b      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a3d      	ldr	r2, [pc, #244]	; (8001d2c <HAL_DMA_Abort+0x60c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d036      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a3b      	ldr	r2, [pc, #236]	; (8001d30 <HAL_DMA_Abort+0x610>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d031      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <HAL_DMA_Abort+0x614>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d02c      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a38      	ldr	r2, [pc, #224]	; (8001d38 <HAL_DMA_Abort+0x618>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d027      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a37      	ldr	r2, [pc, #220]	; (8001d3c <HAL_DMA_Abort+0x61c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a35      	ldr	r2, [pc, #212]	; (8001d40 <HAL_DMA_Abort+0x620>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <HAL_DMA_Abort+0x624>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d018      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a32      	ldr	r2, [pc, #200]	; (8001d48 <HAL_DMA_Abort+0x628>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a31      	ldr	r2, [pc, #196]	; (8001d4c <HAL_DMA_Abort+0x62c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a2f      	ldr	r2, [pc, #188]	; (8001d50 <HAL_DMA_Abort+0x630>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a2e      	ldr	r2, [pc, #184]	; (8001d54 <HAL_DMA_Abort+0x634>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2c      	ldr	r2, [pc, #176]	; (8001d58 <HAL_DMA_Abort+0x638>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_DMA_Abort+0x58e>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_DMA_Abort+0x590>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d015      	beq.n	8001ce0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001cbc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001cde:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40020010 	.word	0x40020010
 8001d00:	40020028 	.word	0x40020028
 8001d04:	40020040 	.word	0x40020040
 8001d08:	40020058 	.word	0x40020058
 8001d0c:	40020070 	.word	0x40020070
 8001d10:	40020088 	.word	0x40020088
 8001d14:	400200a0 	.word	0x400200a0
 8001d18:	400200b8 	.word	0x400200b8
 8001d1c:	40020410 	.word	0x40020410
 8001d20:	40020428 	.word	0x40020428
 8001d24:	40020440 	.word	0x40020440
 8001d28:	40020458 	.word	0x40020458
 8001d2c:	40020470 	.word	0x40020470
 8001d30:	40020488 	.word	0x40020488
 8001d34:	400204a0 	.word	0x400204a0
 8001d38:	400204b8 	.word	0x400204b8
 8001d3c:	58025408 	.word	0x58025408
 8001d40:	5802541c 	.word	0x5802541c
 8001d44:	58025430 	.word	0x58025430
 8001d48:	58025444 	.word	0x58025444
 8001d4c:	58025458 	.word	0x58025458
 8001d50:	5802546c 	.word	0x5802546c
 8001d54:	58025480 	.word	0x58025480
 8001d58:	58025494 	.word	0x58025494

08001d5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e205      	b.n	800217a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d004      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e1fa      	b.n	800217a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a8c      	ldr	r2, [pc, #560]	; (8001fbc <HAL_DMA_Abort_IT+0x260>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d04a      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a8b      	ldr	r2, [pc, #556]	; (8001fc0 <HAL_DMA_Abort_IT+0x264>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d045      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a89      	ldr	r2, [pc, #548]	; (8001fc4 <HAL_DMA_Abort_IT+0x268>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d040      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a88      	ldr	r2, [pc, #544]	; (8001fc8 <HAL_DMA_Abort_IT+0x26c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d03b      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a86      	ldr	r2, [pc, #536]	; (8001fcc <HAL_DMA_Abort_IT+0x270>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d036      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a85      	ldr	r2, [pc, #532]	; (8001fd0 <HAL_DMA_Abort_IT+0x274>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d031      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a83      	ldr	r2, [pc, #524]	; (8001fd4 <HAL_DMA_Abort_IT+0x278>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d02c      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a82      	ldr	r2, [pc, #520]	; (8001fd8 <HAL_DMA_Abort_IT+0x27c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d027      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a80      	ldr	r2, [pc, #512]	; (8001fdc <HAL_DMA_Abort_IT+0x280>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d022      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a7f      	ldr	r2, [pc, #508]	; (8001fe0 <HAL_DMA_Abort_IT+0x284>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d01d      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a7d      	ldr	r2, [pc, #500]	; (8001fe4 <HAL_DMA_Abort_IT+0x288>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d018      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a7c      	ldr	r2, [pc, #496]	; (8001fe8 <HAL_DMA_Abort_IT+0x28c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d013      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a7a      	ldr	r2, [pc, #488]	; (8001fec <HAL_DMA_Abort_IT+0x290>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00e      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a79      	ldr	r2, [pc, #484]	; (8001ff0 <HAL_DMA_Abort_IT+0x294>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d009      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a77      	ldr	r2, [pc, #476]	; (8001ff4 <HAL_DMA_Abort_IT+0x298>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a76      	ldr	r2, [pc, #472]	; (8001ff8 <HAL_DMA_Abort_IT+0x29c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Abort_IT+0xcc>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_DMA_Abort_IT+0xce>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d065      	beq.n	8001efa <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2204      	movs	r2, #4
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a60      	ldr	r2, [pc, #384]	; (8001fbc <HAL_DMA_Abort_IT+0x260>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04a      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a5e      	ldr	r2, [pc, #376]	; (8001fc0 <HAL_DMA_Abort_IT+0x264>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d045      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5d      	ldr	r2, [pc, #372]	; (8001fc4 <HAL_DMA_Abort_IT+0x268>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d040      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5b      	ldr	r2, [pc, #364]	; (8001fc8 <HAL_DMA_Abort_IT+0x26c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d03b      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5a      	ldr	r2, [pc, #360]	; (8001fcc <HAL_DMA_Abort_IT+0x270>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d036      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_DMA_Abort_IT+0x274>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d031      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a57      	ldr	r2, [pc, #348]	; (8001fd4 <HAL_DMA_Abort_IT+0x278>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d02c      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a55      	ldr	r2, [pc, #340]	; (8001fd8 <HAL_DMA_Abort_IT+0x27c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d027      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a54      	ldr	r2, [pc, #336]	; (8001fdc <HAL_DMA_Abort_IT+0x280>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_DMA_Abort_IT+0x284>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01d      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a51      	ldr	r2, [pc, #324]	; (8001fe4 <HAL_DMA_Abort_IT+0x288>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d018      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a4f      	ldr	r2, [pc, #316]	; (8001fe8 <HAL_DMA_Abort_IT+0x28c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a4e      	ldr	r2, [pc, #312]	; (8001fec <HAL_DMA_Abort_IT+0x290>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00e      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <HAL_DMA_Abort_IT+0x294>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d009      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a4b      	ldr	r2, [pc, #300]	; (8001ff4 <HAL_DMA_Abort_IT+0x298>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d004      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a49      	ldr	r2, [pc, #292]	; (8001ff8 <HAL_DMA_Abort_IT+0x29c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d108      	bne.n	8001ee8 <HAL_DMA_Abort_IT+0x18c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e147      	b.n	8002178 <HAL_DMA_Abort_IT+0x41c>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	e13e      	b.n	8002178 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 020e 	bic.w	r2, r2, #14
 8001f08:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a2b      	ldr	r2, [pc, #172]	; (8001fbc <HAL_DMA_Abort_IT+0x260>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d04a      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <HAL_DMA_Abort_IT+0x264>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d045      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <HAL_DMA_Abort_IT+0x268>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d040      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a26      	ldr	r2, [pc, #152]	; (8001fc8 <HAL_DMA_Abort_IT+0x26c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d03b      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_DMA_Abort_IT+0x270>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d036      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <HAL_DMA_Abort_IT+0x274>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d031      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <HAL_DMA_Abort_IT+0x278>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d02c      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a20      	ldr	r2, [pc, #128]	; (8001fd8 <HAL_DMA_Abort_IT+0x27c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d027      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <HAL_DMA_Abort_IT+0x280>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d022      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <HAL_DMA_Abort_IT+0x284>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01d      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_DMA_Abort_IT+0x288>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d018      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <HAL_DMA_Abort_IT+0x28c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_DMA_Abort_IT+0x290>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00e      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_DMA_Abort_IT+0x294>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_DMA_Abort_IT+0x298>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d004      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_DMA_Abort_IT+0x29c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d128      	bne.n	8001ffc <HAL_DMA_Abort_IT+0x2a0>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e027      	b.n	800200c <HAL_DMA_Abort_IT+0x2b0>
 8001fbc:	40020010 	.word	0x40020010
 8001fc0:	40020028 	.word	0x40020028
 8001fc4:	40020040 	.word	0x40020040
 8001fc8:	40020058 	.word	0x40020058
 8001fcc:	40020070 	.word	0x40020070
 8001fd0:	40020088 	.word	0x40020088
 8001fd4:	400200a0 	.word	0x400200a0
 8001fd8:	400200b8 	.word	0x400200b8
 8001fdc:	40020410 	.word	0x40020410
 8001fe0:	40020428 	.word	0x40020428
 8001fe4:	40020440 	.word	0x40020440
 8001fe8:	40020458 	.word	0x40020458
 8001fec:	40020470 	.word	0x40020470
 8001ff0:	40020488 	.word	0x40020488
 8001ff4:	400204a0 	.word	0x400204a0
 8001ff8:	400204b8 	.word	0x400204b8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a5c      	ldr	r2, [pc, #368]	; (8002184 <HAL_DMA_Abort_IT+0x428>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d072      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a5b      	ldr	r2, [pc, #364]	; (8002188 <HAL_DMA_Abort_IT+0x42c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d06d      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a59      	ldr	r2, [pc, #356]	; (800218c <HAL_DMA_Abort_IT+0x430>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d068      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_DMA_Abort_IT+0x434>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d063      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a56      	ldr	r2, [pc, #344]	; (8002194 <HAL_DMA_Abort_IT+0x438>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d05e      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a55      	ldr	r2, [pc, #340]	; (8002198 <HAL_DMA_Abort_IT+0x43c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d059      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a53      	ldr	r2, [pc, #332]	; (800219c <HAL_DMA_Abort_IT+0x440>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d054      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_DMA_Abort_IT+0x444>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d04f      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a50      	ldr	r2, [pc, #320]	; (80021a4 <HAL_DMA_Abort_IT+0x448>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d04a      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a4f      	ldr	r2, [pc, #316]	; (80021a8 <HAL_DMA_Abort_IT+0x44c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d045      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a4d      	ldr	r2, [pc, #308]	; (80021ac <HAL_DMA_Abort_IT+0x450>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d040      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a4c      	ldr	r2, [pc, #304]	; (80021b0 <HAL_DMA_Abort_IT+0x454>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d03b      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a4a      	ldr	r2, [pc, #296]	; (80021b4 <HAL_DMA_Abort_IT+0x458>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d036      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a49      	ldr	r2, [pc, #292]	; (80021b8 <HAL_DMA_Abort_IT+0x45c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d031      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a47      	ldr	r2, [pc, #284]	; (80021bc <HAL_DMA_Abort_IT+0x460>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02c      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a46      	ldr	r2, [pc, #280]	; (80021c0 <HAL_DMA_Abort_IT+0x464>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d027      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a44      	ldr	r2, [pc, #272]	; (80021c4 <HAL_DMA_Abort_IT+0x468>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d022      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a43      	ldr	r2, [pc, #268]	; (80021c8 <HAL_DMA_Abort_IT+0x46c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d01d      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a41      	ldr	r2, [pc, #260]	; (80021cc <HAL_DMA_Abort_IT+0x470>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d018      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <HAL_DMA_Abort_IT+0x474>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3e      	ldr	r2, [pc, #248]	; (80021d4 <HAL_DMA_Abort_IT+0x478>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00e      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a3d      	ldr	r2, [pc, #244]	; (80021d8 <HAL_DMA_Abort_IT+0x47c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a3b      	ldr	r2, [pc, #236]	; (80021dc <HAL_DMA_Abort_IT+0x480>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <HAL_DMA_Abort_IT+0x484>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d101      	bne.n	8002100 <HAL_DMA_Abort_IT+0x3a4>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_DMA_Abort_IT+0x3a6>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d028      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002114:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2201      	movs	r2, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002134:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800214c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002156:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40020010 	.word	0x40020010
 8002188:	40020028 	.word	0x40020028
 800218c:	40020040 	.word	0x40020040
 8002190:	40020058 	.word	0x40020058
 8002194:	40020070 	.word	0x40020070
 8002198:	40020088 	.word	0x40020088
 800219c:	400200a0 	.word	0x400200a0
 80021a0:	400200b8 	.word	0x400200b8
 80021a4:	40020410 	.word	0x40020410
 80021a8:	40020428 	.word	0x40020428
 80021ac:	40020440 	.word	0x40020440
 80021b0:	40020458 	.word	0x40020458
 80021b4:	40020470 	.word	0x40020470
 80021b8:	40020488 	.word	0x40020488
 80021bc:	400204a0 	.word	0x400204a0
 80021c0:	400204b8 	.word	0x400204b8
 80021c4:	58025408 	.word	0x58025408
 80021c8:	5802541c 	.word	0x5802541c
 80021cc:	58025430 	.word	0x58025430
 80021d0:	58025444 	.word	0x58025444
 80021d4:	58025458 	.word	0x58025458
 80021d8:	5802546c 	.word	0x5802546c
 80021dc:	58025480 	.word	0x58025480
 80021e0:	58025494 	.word	0x58025494

080021e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021f2:	4b89      	ldr	r3, [pc, #548]	; (8002418 <HAL_GPIO_Init+0x234>)
 80021f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021f6:	e194      	b.n	8002522 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8186 	beq.w	800251c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d00b      	beq.n	8002230 <HAL_GPIO_Init+0x4c>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d007      	beq.n	8002230 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002224:	2b11      	cmp	r3, #17
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b12      	cmp	r3, #18
 800222e:	d130      	bne.n	8002292 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002266:	2201      	movs	r2, #1
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 0201 	and.w	r2, r3, #1
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0xee>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b12      	cmp	r3, #18
 80022d0:	d123      	bne.n	800231a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	220f      	movs	r2, #15
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	08da      	lsrs	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3208      	adds	r2, #8
 8002314:	69b9      	ldr	r1, [r7, #24]
 8002316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0203 	and.w	r2, r3, #3
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80e0 	beq.w	800251c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235c:	4b2f      	ldr	r3, [pc, #188]	; (800241c <HAL_GPIO_Init+0x238>)
 800235e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002362:	4a2e      	ldr	r2, [pc, #184]	; (800241c <HAL_GPIO_Init+0x238>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_GPIO_Init+0x238>)
 800236e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237a:	4a29      	ldr	r2, [pc, #164]	; (8002420 <HAL_GPIO_Init+0x23c>)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a20      	ldr	r2, [pc, #128]	; (8002424 <HAL_GPIO_Init+0x240>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d052      	beq.n	800244c <HAL_GPIO_Init+0x268>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <HAL_GPIO_Init+0x244>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d031      	beq.n	8002412 <HAL_GPIO_Init+0x22e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1e      	ldr	r2, [pc, #120]	; (800242c <HAL_GPIO_Init+0x248>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d02b      	beq.n	800240e <HAL_GPIO_Init+0x22a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <HAL_GPIO_Init+0x24c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d025      	beq.n	800240a <HAL_GPIO_Init+0x226>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_GPIO_Init+0x250>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01f      	beq.n	8002406 <HAL_GPIO_Init+0x222>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <HAL_GPIO_Init+0x254>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d019      	beq.n	8002402 <HAL_GPIO_Init+0x21e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1a      	ldr	r2, [pc, #104]	; (800243c <HAL_GPIO_Init+0x258>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_GPIO_Init+0x21a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a19      	ldr	r2, [pc, #100]	; (8002440 <HAL_GPIO_Init+0x25c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00d      	beq.n	80023fa <HAL_GPIO_Init+0x216>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a18      	ldr	r2, [pc, #96]	; (8002444 <HAL_GPIO_Init+0x260>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <HAL_GPIO_Init+0x212>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a17      	ldr	r2, [pc, #92]	; (8002448 <HAL_GPIO_Init+0x264>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_GPIO_Init+0x20e>
 80023ee:	2309      	movs	r3, #9
 80023f0:	e02d      	b.n	800244e <HAL_GPIO_Init+0x26a>
 80023f2:	230a      	movs	r3, #10
 80023f4:	e02b      	b.n	800244e <HAL_GPIO_Init+0x26a>
 80023f6:	2308      	movs	r3, #8
 80023f8:	e029      	b.n	800244e <HAL_GPIO_Init+0x26a>
 80023fa:	2307      	movs	r3, #7
 80023fc:	e027      	b.n	800244e <HAL_GPIO_Init+0x26a>
 80023fe:	2306      	movs	r3, #6
 8002400:	e025      	b.n	800244e <HAL_GPIO_Init+0x26a>
 8002402:	2305      	movs	r3, #5
 8002404:	e023      	b.n	800244e <HAL_GPIO_Init+0x26a>
 8002406:	2304      	movs	r3, #4
 8002408:	e021      	b.n	800244e <HAL_GPIO_Init+0x26a>
 800240a:	2303      	movs	r3, #3
 800240c:	e01f      	b.n	800244e <HAL_GPIO_Init+0x26a>
 800240e:	2302      	movs	r3, #2
 8002410:	e01d      	b.n	800244e <HAL_GPIO_Init+0x26a>
 8002412:	2301      	movs	r3, #1
 8002414:	e01b      	b.n	800244e <HAL_GPIO_Init+0x26a>
 8002416:	bf00      	nop
 8002418:	58000080 	.word	0x58000080
 800241c:	58024400 	.word	0x58024400
 8002420:	58000400 	.word	0x58000400
 8002424:	58020000 	.word	0x58020000
 8002428:	58020400 	.word	0x58020400
 800242c:	58020800 	.word	0x58020800
 8002430:	58020c00 	.word	0x58020c00
 8002434:	58021000 	.word	0x58021000
 8002438:	58021400 	.word	0x58021400
 800243c:	58021800 	.word	0x58021800
 8002440:	58021c00 	.word	0x58021c00
 8002444:	58022000 	.word	0x58022000
 8002448:	58022400 	.word	0x58022400
 800244c:	2300      	movs	r3, #0
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	f002 0203 	and.w	r2, r2, #3
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	4093      	lsls	r3, r2
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800245e:	4938      	ldr	r1, [pc, #224]	; (8002540 <HAL_GPIO_Init+0x35c>)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	3301      	adds	r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f ae63 	bne.w	80021f8 <HAL_GPIO_Init+0x14>
  }
}
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	3724      	adds	r7, #36	; 0x24
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	58000400 	.word	0x58000400

08002544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002554:	787b      	ldrb	r3, [r7, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002560:	e003      	b.n	800256a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	041a      	lsls	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	619a      	str	r2, [r3, #24]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002580:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_HSEM_FastTake+0x2c>)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3320      	adds	r3, #32
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <HAL_HSEM_FastTake+0x30>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e000      	b.n	8002596 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	58026400 	.word	0x58026400
 80025a8:	80000300 	.word	0x80000300

080025ac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80025b6:	4906      	ldr	r1, [pc, #24]	; (80025d0 <HAL_HSEM_Release+0x24>)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	58026400 	.word	0x58026400

080025d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025dc:	4b29      	ldr	r3, [pc, #164]	; (8002684 <HAL_PWREx_ConfigSupply+0xb0>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	2b06      	cmp	r3, #6
 80025e6:	d00a      	beq.n	80025fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025e8:	4b26      	ldr	r3, [pc, #152]	; (8002684 <HAL_PWREx_ConfigSupply+0xb0>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e040      	b.n	800267c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e03e      	b.n	800267c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025fe:	4b21      	ldr	r3, [pc, #132]	; (8002684 <HAL_PWREx_ConfigSupply+0xb0>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002606:	491f      	ldr	r1, [pc, #124]	; (8002684 <HAL_PWREx_ConfigSupply+0xb0>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4313      	orrs	r3, r2
 800260c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800260e:	f7fe ff5f 	bl	80014d0 <HAL_GetTick>
 8002612:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002614:	e009      	b.n	800262a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002616:	f7fe ff5b 	bl	80014d0 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002624:	d901      	bls.n	800262a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e028      	b.n	800267c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800262a:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_PWREx_ConfigSupply+0xb0>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002636:	d1ee      	bne.n	8002616 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b1e      	cmp	r3, #30
 800263c:	d008      	beq.n	8002650 <HAL_PWREx_ConfigSupply+0x7c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b2e      	cmp	r3, #46	; 0x2e
 8002642:	d005      	beq.n	8002650 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b1d      	cmp	r3, #29
 8002648:	d002      	beq.n	8002650 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b2d      	cmp	r3, #45	; 0x2d
 800264e:	d114      	bne.n	800267a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002650:	f7fe ff3e 	bl	80014d0 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002656:	e009      	b.n	800266c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002658:	f7fe ff3a 	bl	80014d0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002666:	d901      	bls.n	800266c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e007      	b.n	800267c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_PWREx_ConfigSupply+0xb0>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d1ee      	bne.n	8002658 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	58024800 	.word	0x58024800

08002688 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e3ff      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8087 	beq.w	80027b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a8:	4b99      	ldr	r3, [pc, #612]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026b2:	4b97      	ldr	r3, [pc, #604]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d007      	beq.n	80026ce <HAL_RCC_OscConfig+0x46>
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	2b18      	cmp	r3, #24
 80026c2:	d110      	bne.n	80026e6 <HAL_RCC_OscConfig+0x5e>
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d10b      	bne.n	80026e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ce:	4b90      	ldr	r3, [pc, #576]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d06c      	beq.n	80027b4 <HAL_RCC_OscConfig+0x12c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d168      	bne.n	80027b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e3d9      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x76>
 80026f0:	4b87      	ldr	r3, [pc, #540]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a86      	ldr	r2, [pc, #536]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80026f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	e02e      	b.n	800275c <HAL_RCC_OscConfig+0xd4>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x98>
 8002706:	4b82      	ldr	r3, [pc, #520]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a81      	ldr	r2, [pc, #516]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800270c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b7f      	ldr	r3, [pc, #508]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a7e      	ldr	r2, [pc, #504]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002718:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e01d      	b.n	800275c <HAL_RCC_OscConfig+0xd4>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0xbc>
 800272a:	4b79      	ldr	r3, [pc, #484]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a78      	ldr	r2, [pc, #480]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a75      	ldr	r2, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0xd4>
 8002744:	4b72      	ldr	r3, [pc, #456]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a71      	ldr	r2, [pc, #452]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b6f      	ldr	r3, [pc, #444]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a6e      	ldr	r2, [pc, #440]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe feb4 	bl	80014d0 <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe feb0 	bl	80014d0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e38d      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800277e:	4b64      	ldr	r3, [pc, #400]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0xe4>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe fea0 	bl	80014d0 <HAL_GetTick>
 8002790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe fe9c 	bl	80014d0 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e379      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027a6:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x10c>
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80ae 	beq.w	8002920 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c4:	4b52      	ldr	r3, [pc, #328]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ce:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <HAL_RCC_OscConfig+0x162>
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2b18      	cmp	r3, #24
 80027de:	d13a      	bne.n	8002856 <HAL_RCC_OscConfig+0x1ce>
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d135      	bne.n	8002856 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ea:	4b49      	ldr	r3, [pc, #292]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_RCC_OscConfig+0x17a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e34b      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	f7fe fe71 	bl	80014e8 <HAL_GetREVID>
 8002806:	4603      	mov	r3, r0
 8002808:	f241 0203 	movw	r2, #4099	; 0x1003
 800280c:	4293      	cmp	r3, r2
 800280e:	d817      	bhi.n	8002840 <HAL_RCC_OscConfig+0x1b8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d108      	bne.n	800282a <HAL_RCC_OscConfig+0x1a2>
 8002818:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002820:	4a3b      	ldr	r2, [pc, #236]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002826:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002828:	e07a      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	031b      	lsls	r3, r3, #12
 8002838:	4935      	ldr	r1, [pc, #212]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283e:	e06f      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b33      	ldr	r3, [pc, #204]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	4930      	ldr	r1, [pc, #192]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002854:	e064      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d045      	beq.n	80028ea <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0219 	bic.w	r2, r3, #25
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	4929      	ldr	r1, [pc, #164]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fe2e 	bl	80014d0 <HAL_GetTick>
 8002874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002878:	f7fe fe2a 	bl	80014d0 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e307      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002896:	f7fe fe27 	bl	80014e8 <HAL_GetREVID>
 800289a:	4603      	mov	r3, r0
 800289c:	f241 0203 	movw	r2, #4099	; 0x1003
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d817      	bhi.n	80028d4 <HAL_RCC_OscConfig+0x24c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d108      	bne.n	80028be <HAL_RCC_OscConfig+0x236>
 80028ac:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028b4:	4a16      	ldr	r2, [pc, #88]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ba:	6053      	str	r3, [r2, #4]
 80028bc:	e030      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	031b      	lsls	r3, r3, #12
 80028cc:	4910      	ldr	r1, [pc, #64]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
 80028d2:	e025      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	490b      	ldr	r1, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
 80028e8:	e01a      	b.n	8002920 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a08      	ldr	r2, [pc, #32]	; (8002910 <HAL_RCC_OscConfig+0x288>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe fdeb 	bl	80014d0 <HAL_GetTick>
 80028fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe fde7 	bl	80014d0 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d903      	bls.n	8002914 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e2c4      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
 8002910:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002914:	4ba4      	ldr	r3, [pc, #656]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ee      	bne.n	80028fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a9 	beq.w	8002a80 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292e:	4b9e      	ldr	r3, [pc, #632]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002936:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002938:	4b9b      	ldr	r3, [pc, #620]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d007      	beq.n	8002954 <HAL_RCC_OscConfig+0x2cc>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b18      	cmp	r3, #24
 8002948:	d13a      	bne.n	80029c0 <HAL_RCC_OscConfig+0x338>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d135      	bne.n	80029c0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002954:	4b94      	ldr	r3, [pc, #592]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_OscConfig+0x2e4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d001      	beq.n	800296c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e296      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800296c:	f7fe fdbc 	bl	80014e8 <HAL_GetREVID>
 8002970:	4603      	mov	r3, r0
 8002972:	f241 0203 	movw	r2, #4099	; 0x1003
 8002976:	4293      	cmp	r3, r2
 8002978:	d817      	bhi.n	80029aa <HAL_RCC_OscConfig+0x322>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	2b20      	cmp	r3, #32
 8002980:	d108      	bne.n	8002994 <HAL_RCC_OscConfig+0x30c>
 8002982:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800298a:	4a87      	ldr	r2, [pc, #540]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 800298c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002990:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002992:	e075      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002994:	4b84      	ldr	r3, [pc, #528]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	069b      	lsls	r3, r3, #26
 80029a2:	4981      	ldr	r1, [pc, #516]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a8:	e06a      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	061b      	lsls	r3, r3, #24
 80029b8:	497b      	ldr	r1, [pc, #492]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029be:	e05f      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d042      	beq.n	8002a4e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029c8:	4b77      	ldr	r3, [pc, #476]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a76      	ldr	r2, [pc, #472]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fd7c 	bl	80014d0 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029dc:	f7fe fd78 	bl	80014d0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e255      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ee:	4b6e      	ldr	r3, [pc, #440]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029fa:	f7fe fd75 	bl	80014e8 <HAL_GetREVID>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d817      	bhi.n	8002a38 <HAL_RCC_OscConfig+0x3b0>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d108      	bne.n	8002a22 <HAL_RCC_OscConfig+0x39a>
 8002a10:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a18:	4a63      	ldr	r2, [pc, #396]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a1e:	6053      	str	r3, [r2, #4]
 8002a20:	e02e      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
 8002a22:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	069b      	lsls	r3, r3, #26
 8002a30:	495d      	ldr	r1, [pc, #372]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
 8002a36:	e023      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
 8002a38:	4b5b      	ldr	r3, [pc, #364]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	4958      	ldr	r1, [pc, #352]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
 8002a4c:	e018      	b.n	8002a80 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a4e:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a55      	ldr	r2, [pc, #340]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fd39 	bl	80014d0 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a62:	f7fe fd35 	bl	80014d0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e212      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a74:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d036      	beq.n	8002afa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d019      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a94:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	4a43      	ldr	r2, [pc, #268]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fd16 	bl	80014d0 <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fd12 	bl	80014d0 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e1ef      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aba:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x420>
 8002ac6:	e018      	b.n	8002afa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002acc:	4a36      	ldr	r2, [pc, #216]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fcfc 	bl	80014d0 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe fcf8 	bl	80014d0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1d5      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aee:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d036      	beq.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d019      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a25      	ldr	r2, [pc, #148]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fcd9 	bl	80014d0 <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b22:	f7fe fcd5 	bl	80014d0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1b2      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x49a>
 8002b40:	e018      	b.n	8002b74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fcbf 	bl	80014d0 <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b56:	f7fe fcbb 	bl	80014d0 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e198      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_RCC_OscConfig+0x520>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8085 	beq.w	8002c8c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RCC_OscConfig+0x524>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_RCC_OscConfig+0x524>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b8e:	f7fe fc9f 	bl	80014d0 <HAL_GetTick>
 8002b92:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b94:	e00c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b96:	f7fe fc9b 	bl	80014d0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	; 0x64
 8002ba2:	d905      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e178      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb0:	4b96      	ldr	r3, [pc, #600]	; (8002e0c <HAL_RCC_OscConfig+0x784>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ec      	beq.n	8002b96 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x54a>
 8002bc4:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a91      	ldr	r2, [pc, #580]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd0:	e02d      	b.n	8002c2e <HAL_RCC_OscConfig+0x5a6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x56c>
 8002bda:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a8c      	ldr	r2, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
 8002be6:	4b8a      	ldr	r3, [pc, #552]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	4a89      	ldr	r2, [pc, #548]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf2:	e01c      	b.n	8002c2e <HAL_RCC_OscConfig+0x5a6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCC_OscConfig+0x58e>
 8002bfc:	4b84      	ldr	r3, [pc, #528]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	4a83      	ldr	r2, [pc, #524]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70
 8002c08:	4b81      	ldr	r3, [pc, #516]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	4a80      	ldr	r2, [pc, #512]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6713      	str	r3, [r2, #112]	; 0x70
 8002c14:	e00b      	b.n	8002c2e <HAL_RCC_OscConfig+0x5a6>
 8002c16:	4b7e      	ldr	r3, [pc, #504]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a7d      	ldr	r2, [pc, #500]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	4b7b      	ldr	r3, [pc, #492]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a7a      	ldr	r2, [pc, #488]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d015      	beq.n	8002c62 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe fc4b 	bl	80014d0 <HAL_GetTick>
 8002c3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fc47 	bl	80014d0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e122      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c54:	4b6e      	ldr	r3, [pc, #440]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ee      	beq.n	8002c3e <HAL_RCC_OscConfig+0x5b6>
 8002c60:	e014      	b.n	8002c8c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c62:	f7fe fc35 	bl	80014d0 <HAL_GetTick>
 8002c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fe fc31 	bl	80014d0 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e10c      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c80:	4b63      	ldr	r3, [pc, #396]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ee      	bne.n	8002c6a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8101 	beq.w	8002e98 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c96:	4b5e      	ldr	r3, [pc, #376]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c9e:	2b18      	cmp	r3, #24
 8002ca0:	f000 80bc 	beq.w	8002e1c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	f040 8095 	bne.w	8002dd8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b58      	ldr	r3, [pc, #352]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a57      	ldr	r2, [pc, #348]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe fc09 	bl	80014d0 <HAL_GetTick>
 8002cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe fc05 	bl	80014d0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e0e2      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd4:	4b4e      	ldr	r3, [pc, #312]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce0:	4b4b      	ldr	r3, [pc, #300]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	; (8002e14 <HAL_RCC_OscConfig+0x78c>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	4946      	ldr	r1, [pc, #280]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	628b      	str	r3, [r1, #40]	; 0x28
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	025b      	lsls	r3, r3, #9
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	3b01      	subs	r3, #1
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d22:	3b01      	subs	r3, #1
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d2a:	4939      	ldr	r1, [pc, #228]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d30:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	4a36      	ldr	r2, [pc, #216]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d3c:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_RCC_OscConfig+0x790>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d48:	00d2      	lsls	r2, r2, #3
 8002d4a:	4931      	ldr	r1, [pc, #196]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d50:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f023 020c 	bic.w	r2, r3, #12
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	492c      	ldr	r1, [pc, #176]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	f023 0202 	bic.w	r2, r3, #2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4928      	ldr	r1, [pc, #160]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d74:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d8c:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe fb8e 	bl	80014d0 <HAL_GetTick>
 8002db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe fb8a 	bl	80014d0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e067      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dca:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x730>
 8002dd6:	e05f      	b.n	8002e98 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0c      	ldr	r2, [pc, #48]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fb74 	bl	80014d0 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe fb70 	bl	80014d0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e04d      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_RCC_OscConfig+0x788>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x764>
 8002e0a:	e045      	b.n	8002e98 <HAL_RCC_OscConfig+0x810>
 8002e0c:	58024800 	.word	0x58024800
 8002e10:	58024400 	.word	0x58024400
 8002e14:	fffffc0c 	.word	0xfffffc0c
 8002e18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e1c:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <HAL_RCC_OscConfig+0x81c>)
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCC_OscConfig+0x81c>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d031      	beq.n	8002e94 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f003 0203 	and.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d12a      	bne.n	8002e94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d122      	bne.n	8002e94 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d11a      	bne.n	8002e94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	0a5b      	lsrs	r3, r3, #9
 8002e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d111      	bne.n	8002e94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d108      	bne.n	8002e94 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	0e1b      	lsrs	r3, r3, #24
 8002e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3730      	adds	r7, #48	; 0x30
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	58024400 	.word	0x58024400

08002ea8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e19c      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b8a      	ldr	r3, [pc, #552]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d910      	bls.n	8002eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b87      	ldr	r3, [pc, #540]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 020f 	bic.w	r2, r3, #15
 8002ed2:	4985      	ldr	r1, [pc, #532]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b83      	ldr	r3, [pc, #524]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e184      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	4b7b      	ldr	r3, [pc, #492]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d908      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f08:	4b78      	ldr	r3, [pc, #480]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	4975      	ldr	r1, [pc, #468]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d010      	beq.n	8002f48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	4b70      	ldr	r3, [pc, #448]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d908      	bls.n	8002f48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f36:	4b6d      	ldr	r3, [pc, #436]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	496a      	ldr	r1, [pc, #424]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	4b64      	ldr	r3, [pc, #400]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d908      	bls.n	8002f76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	495e      	ldr	r1, [pc, #376]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d908      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f92:	4b56      	ldr	r3, [pc, #344]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4953      	ldr	r1, [pc, #332]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d908      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f023 020f 	bic.w	r2, r3, #15
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4947      	ldr	r1, [pc, #284]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d055      	beq.n	800308a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fde:	4b43      	ldr	r3, [pc, #268]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	4940      	ldr	r1, [pc, #256]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ff8:	4b3c      	ldr	r3, [pc, #240]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d121      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0f6      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d107      	bne.n	8003020 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003010:	4b36      	ldr	r3, [pc, #216]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d115      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0ea      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d107      	bne.n	8003038 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003028:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0de      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003038:	4b2c      	ldr	r3, [pc, #176]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0d6      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f023 0207 	bic.w	r2, r3, #7
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4925      	ldr	r1, [pc, #148]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8003056:	4313      	orrs	r3, r2
 8003058:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fe fa39 	bl	80014d0 <HAL_GetTick>
 800305e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003060:	e00a      	b.n	8003078 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003062:	f7fe fa35 	bl	80014d0 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0be      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003078:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	429a      	cmp	r2, r3
 8003088:	d1eb      	bne.n	8003062 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d010      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d208      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f023 020f 	bic.w	r2, r3, #15
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	490e      	ldr	r1, [pc, #56]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d214      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 020f 	bic.w	r2, r3, #15
 80030ce:	4906      	ldr	r1, [pc, #24]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e086      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
 80030e8:	52002000 	.word	0x52002000
 80030ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003108:	429a      	cmp	r2, r3
 800310a:	d208      	bcs.n	800311e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800310c:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	4939      	ldr	r1, [pc, #228]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800311a:	4313      	orrs	r3, r2
 800311c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003136:	429a      	cmp	r2, r3
 8003138:	d208      	bcs.n	800314c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	492e      	ldr	r1, [pc, #184]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003148:	4313      	orrs	r3, r2
 800314a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003164:	429a      	cmp	r2, r3
 8003166:	d208      	bcs.n	800317a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	4922      	ldr	r1, [pc, #136]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003176:	4313      	orrs	r3, r2
 8003178:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003192:	429a      	cmp	r2, r3
 8003194:	d208      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4917      	ldr	r1, [pc, #92]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031a8:	f000 f834 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	4912      	ldr	r1, [pc, #72]	; (8003204 <HAL_RCC_ClockConfig+0x35c>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
 80031c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031c6:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <HAL_RCC_ClockConfig+0x35c>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_RCC_ClockConfig+0x360>)
 80031de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <HAL_RCC_ClockConfig+0x364>)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_RCC_ClockConfig+0x368>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe f926 	bl	800143c <HAL_InitTick>
 80031f0:	4603      	mov	r3, r0
 80031f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	58024400 	.word	0x58024400
 8003204:	0800808c 	.word	0x0800808c
 8003208:	20000004 	.word	0x20000004
 800320c:	20000000 	.word	0x20000000
 8003210:	20000008 	.word	0x20000008

08003214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	; 0x24
 8003218:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800321a:	4bb3      	ldr	r3, [pc, #716]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003222:	2b18      	cmp	r3, #24
 8003224:	f200 8155 	bhi.w	80034d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <HAL_RCC_GetSysClockFreq+0x1c>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003295 	.word	0x08003295
 8003234:	080034d3 	.word	0x080034d3
 8003238:	080034d3 	.word	0x080034d3
 800323c:	080034d3 	.word	0x080034d3
 8003240:	080034d3 	.word	0x080034d3
 8003244:	080034d3 	.word	0x080034d3
 8003248:	080034d3 	.word	0x080034d3
 800324c:	080034d3 	.word	0x080034d3
 8003250:	080032bb 	.word	0x080032bb
 8003254:	080034d3 	.word	0x080034d3
 8003258:	080034d3 	.word	0x080034d3
 800325c:	080034d3 	.word	0x080034d3
 8003260:	080034d3 	.word	0x080034d3
 8003264:	080034d3 	.word	0x080034d3
 8003268:	080034d3 	.word	0x080034d3
 800326c:	080034d3 	.word	0x080034d3
 8003270:	080032c1 	.word	0x080032c1
 8003274:	080034d3 	.word	0x080034d3
 8003278:	080034d3 	.word	0x080034d3
 800327c:	080034d3 	.word	0x080034d3
 8003280:	080034d3 	.word	0x080034d3
 8003284:	080034d3 	.word	0x080034d3
 8003288:	080034d3 	.word	0x080034d3
 800328c:	080034d3 	.word	0x080034d3
 8003290:	080032c7 	.word	0x080032c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003294:	4b94      	ldr	r3, [pc, #592]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d009      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032a0:	4b91      	ldr	r3, [pc, #580]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	4a90      	ldr	r2, [pc, #576]	; (80034ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
 80032b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80032b2:	e111      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032b4:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032b6:	61bb      	str	r3, [r7, #24]
    break;
 80032b8:	e10e      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80032ba:	4b8d      	ldr	r3, [pc, #564]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032bc:	61bb      	str	r3, [r7, #24]
    break;
 80032be:	e10b      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80032c0:	4b8c      	ldr	r3, [pc, #560]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032c2:	61bb      	str	r3, [r7, #24]
    break;
 80032c4:	e108      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032c6:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80032d0:	4b85      	ldr	r3, [pc, #532]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032dc:	4b82      	ldr	r3, [pc, #520]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80032e6:	4b80      	ldr	r3, [pc, #512]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	08db      	lsrs	r3, r3, #3
 80032ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80e1 	beq.w	80034cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b02      	cmp	r3, #2
 800330e:	f000 8083 	beq.w	8003418 <HAL_RCC_GetSysClockFreq+0x204>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b02      	cmp	r3, #2
 8003316:	f200 80a1 	bhi.w	800345c <HAL_RCC_GetSysClockFreq+0x248>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x114>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d056      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003326:	e099      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003328:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02d      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003334:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	08db      	lsrs	r3, r3, #3
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	4a6b      	ldr	r2, [pc, #428]	; (80034ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800335e:	4b62      	ldr	r3, [pc, #392]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800336e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003372:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800337e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800338e:	e087      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800339e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a2:	4b51      	ldr	r3, [pc, #324]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033d2:	e065      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003500 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033e6:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ee:	ee07 3a90 	vmov	s15, r3
 80033f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800340e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003416:	e043      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003422:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003504 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342a:	4b2f      	ldr	r3, [pc, #188]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343a:	ed97 6a02 	vldr	s12, [r7, #8]
 800343e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800344e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800345a:	e021      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003500 <HAL_RCC_GetSysClockFreq+0x2ec>
 800346a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003482:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800349e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	0a5b      	lsrs	r3, r3, #9
 80034a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034aa:	3301      	adds	r3, #1
 80034ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c4:	ee17 3a90 	vmov	r3, s15
 80034c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80034ca:	e005      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
    break;
 80034d0:	e002      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034d4:	61bb      	str	r3, [r7, #24]
    break;
 80034d6:	bf00      	nop
  }

  return sysclockfreq;
 80034d8:	69bb      	ldr	r3, [r7, #24]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	; 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	58024400 	.word	0x58024400
 80034ec:	03d09000 	.word	0x03d09000
 80034f0:	003d0900 	.word	0x003d0900
 80034f4:	017d7840 	.word	0x017d7840
 80034f8:	46000000 	.word	0x46000000
 80034fc:	4c742400 	.word	0x4c742400
 8003500:	4a742400 	.word	0x4a742400
 8003504:	4bbebc20 	.word	0x4bbebc20

08003508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800350e:	f7ff fe81 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 8003512:	4602      	mov	r2, r0
 8003514:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_RCC_GetHCLKFreq+0x50>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	0a1b      	lsrs	r3, r3, #8
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	490f      	ldr	r1, [pc, #60]	; (800355c <HAL_RCC_GetHCLKFreq+0x54>)
 8003520:	5ccb      	ldrb	r3, [r1, r3]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_RCC_GetHCLKFreq+0x50>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_RCC_GetHCLKFreq+0x54>)
 8003536:	5cd3      	ldrb	r3, [r2, r3]
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	4a07      	ldr	r2, [pc, #28]	; (8003560 <HAL_RCC_GetHCLKFreq+0x58>)
 8003544:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003546:	4a07      	ldr	r2, [pc, #28]	; (8003564 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <HAL_RCC_GetHCLKFreq+0x58>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	58024400 	.word	0x58024400
 800355c:	0800808c 	.word	0x0800808c
 8003560:	20000004 	.word	0x20000004
 8003564:	20000000 	.word	0x20000000

08003568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800356c:	f7ff ffcc 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4904      	ldr	r1, [pc, #16]	; (8003590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	58024400 	.word	0x58024400
 8003590:	0800808c 	.word	0x0800808c

08003594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003598:	f7ff ffb6 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4904      	ldr	r1, [pc, #16]	; (80035bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	58024400 	.word	0x58024400
 80035bc:	0800808c 	.word	0x0800808c

080035c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c8:	2300      	movs	r3, #0
 80035ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035cc:	2300      	movs	r3, #0
 80035ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d03f      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035e4:	d02a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035ea:	d824      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f0:	d018      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f6:	d81e      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003600:	d007      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003602:	e018      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003604:	4bab      	ldr	r3, [pc, #684]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	4aaa      	ldr	r2, [pc, #680]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800360a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003610:	e015      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	2102      	movs	r1, #2
 8003618:	4618      	mov	r0, r3
 800361a:	f001 f9ff 	bl	8004a1c <RCCEx_PLL2_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003622:	e00c      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3324      	adds	r3, #36	; 0x24
 8003628:	2102      	movs	r1, #2
 800362a:	4618      	mov	r0, r3
 800362c:	f001 faa8 	bl	8004b80 <RCCEx_PLL3_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003634:	e003      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
      break;
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800363c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003644:	4b9b      	ldr	r3, [pc, #620]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003650:	4998      	ldr	r1, [pc, #608]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003652:	4313      	orrs	r3, r2
 8003654:	650b      	str	r3, [r1, #80]	; 0x50
 8003656:	e001      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d03d      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	2b04      	cmp	r3, #4
 800366e:	d826      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003670:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003676:	bf00      	nop
 8003678:	0800368d 	.word	0x0800368d
 800367c:	0800369b 	.word	0x0800369b
 8003680:	080036ad 	.word	0x080036ad
 8003684:	080036c5 	.word	0x080036c5
 8003688:	080036c5 	.word	0x080036c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800368c:	4b89      	ldr	r3, [pc, #548]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	4a88      	ldr	r2, [pc, #544]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003698:	e015      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3304      	adds	r3, #4
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 f9bb 	bl	8004a1c <RCCEx_PLL2_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036aa:	e00c      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3324      	adds	r3, #36	; 0x24
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 fa64 	bl	8004b80 <RCCEx_PLL3_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036bc:	e003      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	75fb      	strb	r3, [r7, #23]
      break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036cc:	4b79      	ldr	r3, [pc, #484]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d0:	f023 0207 	bic.w	r2, r3, #7
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	4976      	ldr	r1, [pc, #472]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	650b      	str	r3, [r1, #80]	; 0x50
 80036de:	e001      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
 80036e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d042      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f8:	d02b      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80036fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fe:	d825      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003700:	2bc0      	cmp	r3, #192	; 0xc0
 8003702:	d028      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003704:	2bc0      	cmp	r3, #192	; 0xc0
 8003706:	d821      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003708:	2b80      	cmp	r3, #128	; 0x80
 800370a:	d016      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800370c:	2b80      	cmp	r3, #128	; 0x80
 800370e:	d81d      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003714:	2b40      	cmp	r3, #64	; 0x40
 8003716:	d007      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003718:	e018      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371a:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	4a65      	ldr	r2, [pc, #404]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003726:	e017      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f001 f974 	bl	8004a1c <RCCEx_PLL2_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003738:	e00e      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3324      	adds	r3, #36	; 0x24
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f001 fa1d 	bl	8004b80 <RCCEx_PLL3_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800374a:	e005      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
      break;
 8003750:	e002      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800375e:	4b55      	ldr	r3, [pc, #340]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003762:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	4952      	ldr	r1, [pc, #328]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	650b      	str	r3, [r1, #80]	; 0x50
 8003770:	e001      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377e:	2b00      	cmp	r3, #0
 8003780:	d049      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800378c:	d030      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800378e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003792:	d82a      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003794:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003798:	d02c      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800379a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800379e:	d824      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a4:	d018      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80037a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037aa:	d81e      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037b4:	d007      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80037b6:	e018      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b8:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	4a3d      	ldr	r2, [pc, #244]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037c4:	e017      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 f925 	bl	8004a1c <RCCEx_PLL2_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037d6:	e00e      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3324      	adds	r3, #36	; 0x24
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 f9ce 	bl	8004b80 <RCCEx_PLL3_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037e8:	e005      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
      break;
 80037ee:	e002      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80037f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037fc:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800380a:	492a      	ldr	r1, [pc, #168]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	658b      	str	r3, [r1, #88]	; 0x58
 8003810:	e001      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381e:	2b00      	cmp	r3, #0
 8003820:	d04c      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800382c:	d030      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800382e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003832:	d82a      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003834:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003838:	d02c      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800383a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800383e:	d824      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003844:	d018      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800384a:	d81e      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003854:	d007      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003856:	e018      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003858:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800385e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003862:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003864:	e017      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f001 f8d5 	bl	8004a1c <RCCEx_PLL2_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003876:	e00e      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3324      	adds	r3, #36	; 0x24
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f001 f97e 	bl	8004b80 <RCCEx_PLL3_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003888:	e005      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
      break;
 800388e:	e002      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003890:	bf00      	nop
 8003892:	e000      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10d      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038aa:	4902      	ldr	r1, [pc, #8]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	658b      	str	r3, [r1, #88]	; 0x58
 80038b0:	e004      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80038b2:	bf00      	nop
 80038b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d032      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038cc:	2b30      	cmp	r3, #48	; 0x30
 80038ce:	d01c      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038d0:	2b30      	cmp	r3, #48	; 0x30
 80038d2:	d817      	bhi.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d00c      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d813      	bhi.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d016      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d10f      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e4:	4bb1      	ldr	r3, [pc, #708]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	4ab0      	ldr	r2, [pc, #704]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80038f0:	e00e      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3304      	adds	r3, #4
 80038f6:	2102      	movs	r1, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 f88f 	bl	8004a1c <RCCEx_PLL2_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003902:	e005      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	75fb      	strb	r3, [r7, #23]
      break;
 8003908:	e002      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800390e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003916:	4ba5      	ldr	r3, [pc, #660]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003922:	49a2      	ldr	r1, [pc, #648]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003924:	4313      	orrs	r3, r2
 8003926:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003928:	e001      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d047      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003942:	d030      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003948:	d82a      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800394a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800394e:	d02c      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003950:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003954:	d824      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395a:	d018      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800395c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003960:	d81e      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396a:	d007      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800396c:	e018      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396e:	4b8f      	ldr	r3, [pc, #572]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	4a8e      	ldr	r2, [pc, #568]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800397a:	e017      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f001 f84a 	bl	8004a1c <RCCEx_PLL2_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800398c:	e00e      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3324      	adds	r3, #36	; 0x24
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f001 f8f3 	bl	8004b80 <RCCEx_PLL3_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800399e:	e005      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]
      break;
 80039a4:	e002      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80039aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039b2:	4b7e      	ldr	r3, [pc, #504]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039be:	497b      	ldr	r1, [pc, #492]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	650b      	str	r3, [r1, #80]	; 0x50
 80039c4:	e001      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d049      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039de:	d02e      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e4:	d828      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ea:	d02a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80039ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039f0:	d822      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039f6:	d026      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80039f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039fc:	d81c      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a02:	d010      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a08:	d816      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01d      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a12:	d111      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	2101      	movs	r1, #1
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fffe 	bl	8004a1c <RCCEx_PLL2_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a24:	e012      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3324      	adds	r3, #36	; 0x24
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 f8a7 	bl	8004b80 <RCCEx_PLL3_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a36:	e009      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a3c:	e006      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e004      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a42:	bf00      	nop
 8003a44:	e002      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a52:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a5e:	4953      	ldr	r1, [pc, #332]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	650b      	str	r3, [r1, #80]	; 0x50
 8003a64:	e001      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d04b      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a80:	d02e      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a86:	d828      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8c:	d02a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a92:	d822      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a98:	d026      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003a9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a9e:	d81c      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa4:	d010      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aaa:	d816      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01d      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ab4:	d111      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2101      	movs	r1, #1
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 ffad 	bl	8004a1c <RCCEx_PLL2_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ac6:	e012      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3324      	adds	r3, #36	; 0x24
 8003acc:	2101      	movs	r1, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 f856 	bl	8004b80 <RCCEx_PLL3_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ad8:	e009      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ade:	e006      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ae0:	bf00      	nop
 8003ae2:	e004      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ae4:	bf00      	nop
 8003ae6:	e002      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ae8:	bf00      	nop
 8003aea:	e000      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003af4:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b02:	492a      	ldr	r1, [pc, #168]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	658b      	str	r3, [r1, #88]	; 0x58
 8003b08:	e001      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d022      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00e      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b26:	d108      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 ff74 	bl	8004a1c <RCCEx_PLL2_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8003b38:	e003      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3e:	e000      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8003b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003b48:	4b18      	ldr	r3, [pc, #96]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b54:	4915      	ldr	r1, [pc, #84]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b5a:	e001      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d031      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b74:	d00e      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7a:	d814      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d017      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8003b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b84:	d10f      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	4a08      	ldr	r2, [pc, #32]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b92:	e00e      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 ff3e 	bl	8004a1c <RCCEx_PLL2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ba4:	e005      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8003baa:	e002      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003bac:	58024400 	.word	0x58024400
      break;
 8003bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bb8:	4bbc      	ldr	r3, [pc, #752]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	49b9      	ldr	r1, [pc, #740]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	650b      	str	r3, [r1, #80]	; 0x50
 8003bca:	e001      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d032      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d81b      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c23 	.word	0x08003c23
 8003bf0:	08003bfd 	.word	0x08003bfd
 8003bf4:	08003c0b 	.word	0x08003c0b
 8003bf8:	08003c23 	.word	0x08003c23
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfc:	4bab      	ldr	r3, [pc, #684]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	4aaa      	ldr	r2, [pc, #680]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c08:	e00c      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2102      	movs	r1, #2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 ff03 	bl	8004a1c <RCCEx_PLL2_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c1a:	e003      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c20:	e000      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8003c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c2a:	4ba0      	ldr	r3, [pc, #640]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	f023 0203 	bic.w	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	499d      	ldr	r1, [pc, #628]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c3c:	e001      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8086 	beq.w	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c50:	4b97      	ldr	r3, [pc, #604]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a96      	ldr	r2, [pc, #600]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c5c:	f7fd fc38 	bl	80014d0 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c62:	e009      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c64:	f7fd fc34 	bl	80014d0 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d902      	bls.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	75fb      	strb	r3, [r7, #23]
        break;
 8003c76:	e005      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c78:	4b8d      	ldr	r3, [pc, #564]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ef      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d166      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c8a:	4b88      	ldr	r3, [pc, #544]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c94:	4053      	eors	r3, r2
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d013      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c9e:	4b83      	ldr	r3, [pc, #524]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ca8:	4b80      	ldr	r3, [pc, #512]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a7f      	ldr	r2, [pc, #508]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb4:	4b7d      	ldr	r3, [pc, #500]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4a7c      	ldr	r2, [pc, #496]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cc0:	4a7a      	ldr	r2, [pc, #488]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd0:	d115      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd2:	f7fd fbfd 	bl	80014d0 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cd8:	e00b      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cda:	f7fd fbf9 	bl	80014d0 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d902      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	75fb      	strb	r3, [r7, #23]
            break;
 8003cf0:	e005      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cf2:	4b6e      	ldr	r3, [pc, #440]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0ed      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d126      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d12:	d10d      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8003d14:	4b65      	ldr	r3, [pc, #404]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d22:	0919      	lsrs	r1, r3, #4
 8003d24:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8003d26:	400b      	ands	r3, r1
 8003d28:	4960      	ldr	r1, [pc, #384]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	610b      	str	r3, [r1, #16]
 8003d2e:	e005      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8003d30:	4b5e      	ldr	r3, [pc, #376]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	4a5d      	ldr	r2, [pc, #372]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d3a:	6113      	str	r3, [r2, #16]
 8003d3c:	4b5b      	ldr	r3, [pc, #364]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4a:	4958      	ldr	r1, [pc, #352]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	670b      	str	r3, [r1, #112]	; 0x70
 8003d50:	e004      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	75bb      	strb	r3, [r7, #22]
 8003d56:	e001      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d07e      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6c:	2b28      	cmp	r3, #40	; 0x28
 8003d6e:	d867      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003e47 	.word	0x08003e47
 8003d7c:	08003e41 	.word	0x08003e41
 8003d80:	08003e41 	.word	0x08003e41
 8003d84:	08003e41 	.word	0x08003e41
 8003d88:	08003e41 	.word	0x08003e41
 8003d8c:	08003e41 	.word	0x08003e41
 8003d90:	08003e41 	.word	0x08003e41
 8003d94:	08003e41 	.word	0x08003e41
 8003d98:	08003e1d 	.word	0x08003e1d
 8003d9c:	08003e41 	.word	0x08003e41
 8003da0:	08003e41 	.word	0x08003e41
 8003da4:	08003e41 	.word	0x08003e41
 8003da8:	08003e41 	.word	0x08003e41
 8003dac:	08003e41 	.word	0x08003e41
 8003db0:	08003e41 	.word	0x08003e41
 8003db4:	08003e41 	.word	0x08003e41
 8003db8:	08003e2f 	.word	0x08003e2f
 8003dbc:	08003e41 	.word	0x08003e41
 8003dc0:	08003e41 	.word	0x08003e41
 8003dc4:	08003e41 	.word	0x08003e41
 8003dc8:	08003e41 	.word	0x08003e41
 8003dcc:	08003e41 	.word	0x08003e41
 8003dd0:	08003e41 	.word	0x08003e41
 8003dd4:	08003e41 	.word	0x08003e41
 8003dd8:	08003e47 	.word	0x08003e47
 8003ddc:	08003e41 	.word	0x08003e41
 8003de0:	08003e41 	.word	0x08003e41
 8003de4:	08003e41 	.word	0x08003e41
 8003de8:	08003e41 	.word	0x08003e41
 8003dec:	08003e41 	.word	0x08003e41
 8003df0:	08003e41 	.word	0x08003e41
 8003df4:	08003e41 	.word	0x08003e41
 8003df8:	08003e47 	.word	0x08003e47
 8003dfc:	08003e41 	.word	0x08003e41
 8003e00:	08003e41 	.word	0x08003e41
 8003e04:	08003e41 	.word	0x08003e41
 8003e08:	08003e41 	.word	0x08003e41
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003e41 	.word	0x08003e41
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e47 	.word	0x08003e47
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	2101      	movs	r1, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fdfa 	bl	8004a1c <RCCEx_PLL2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e2c:	e00c      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3324      	adds	r3, #36	; 0x24
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fea3 	bl	8004b80 <RCCEx_PLL3_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e3e:	e003      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
      break;
 8003e44:	e000      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8003e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e4e:	4b17      	ldr	r3, [pc, #92]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e5a:	4914      	ldr	r1, [pc, #80]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	654b      	str	r3, [r1, #84]	; 0x54
 8003e60:	e001      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03e      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e76:	2b05      	cmp	r3, #5
 8003e78:	d827      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003e7a:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003ed1 	.word	0x08003ed1
 8003e84:	08003e99 	.word	0x08003e99
 8003e88:	08003eb9 	.word	0x08003eb9
 8003e8c:	08003ed1 	.word	0x08003ed1
 8003e90:	08003ed1 	.word	0x08003ed1
 8003e94:	08003ed1 	.word	0x08003ed1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fdbc 	bl	8004a1c <RCCEx_PLL2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ea8:	e013      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003eaa:	bf00      	nop
 8003eac:	58024400 	.word	0x58024400
 8003eb0:	58024800 	.word	0x58024800
 8003eb4:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3324      	adds	r3, #36	; 0x24
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fe5e 	bl	8004b80 <RCCEx_PLL3_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ec8:	e003      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ece:	e000      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8003ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ed8:	4b9f      	ldr	r3, [pc, #636]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	f023 0207 	bic.w	r2, r3, #7
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ee4:	499c      	ldr	r1, [pc, #624]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	654b      	str	r3, [r1, #84]	; 0x54
 8003eea:	e001      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
 8003eee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d039      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f02:	2b05      	cmp	r3, #5
 8003f04:	d820      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003f06:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f4f 	.word	0x08003f4f
 8003f10:	08003f25 	.word	0x08003f25
 8003f14:	08003f37 	.word	0x08003f37
 8003f18:	08003f4f 	.word	0x08003f4f
 8003f1c:	08003f4f 	.word	0x08003f4f
 8003f20:	08003f4f 	.word	0x08003f4f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fd76 	bl	8004a1c <RCCEx_PLL2_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f34:	e00c      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3324      	adds	r3, #36	; 0x24
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fe1f 	bl	8004b80 <RCCEx_PLL3_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f46:	e003      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8003f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f56:	4b80      	ldr	r3, [pc, #512]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	f023 0207 	bic.w	r2, r3, #7
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f64:	497c      	ldr	r1, [pc, #496]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	658b      	str	r3, [r1, #88]	; 0x58
 8003f6a:	e001      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d04b      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f86:	d02e      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8003f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f8c:	d828      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f92:	d02a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8003f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f98:	d822      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003f9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f9e:	d026      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8003fa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fa4:	d81c      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003faa:	d010      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb0:	d816      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01d      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fba:	d111      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fd2a 	bl	8004a1c <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fcc:	e012      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fdd3 	bl	8004b80 <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fde:	e009      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	e006      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e004      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003fea:	bf00      	nop
 8003fec:	e002      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ffa:	4b57      	ldr	r3, [pc, #348]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	4953      	ldr	r1, [pc, #332]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800400a:	4313      	orrs	r3, r2
 800400c:	654b      	str	r3, [r1, #84]	; 0x54
 800400e:	e001      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004010:	7dfb      	ldrb	r3, [r7, #23]
 8004012:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d04b      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004026:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800402a:	d02e      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800402c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004030:	d828      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004036:	d02a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xace>
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403c:	d822      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800403e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004042:	d026      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8004044:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004048:	d81c      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800404a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800404e:	d010      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004054:	d816      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01d      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405e:	d111      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fcd8 	bl	8004a1c <RCCEx_PLL2_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004070:	e012      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3324      	adds	r3, #36	; 0x24
 8004076:	2102      	movs	r1, #2
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fd81 	bl	8004b80 <RCCEx_PLL3_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004082:	e009      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	75fb      	strb	r3, [r7, #23]
      break;
 8004088:	e006      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800408a:	bf00      	nop
 800408c:	e004      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800408e:	bf00      	nop
 8004090:	e002      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004092:	bf00      	nop
 8004094:	e000      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800409e:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ac:	492a      	ldr	r1, [pc, #168]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	658b      	str	r3, [r1, #88]	; 0x58
 80040b2:	e001      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d04d      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040ce:	d02e      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 80040d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040d4:	d828      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040da:	d02a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80040dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e0:	d822      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80040e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040e6:	d026      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 80040e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040ec:	d81c      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80040ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f2:	d010      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 80040f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f8:	d816      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01d      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 80040fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004102:	d111      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fc86 	bl	8004a1c <RCCEx_PLL2_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004114:	e012      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3324      	adds	r3, #36	; 0x24
 800411a:	2102      	movs	r1, #2
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fd2f 	bl	8004b80 <RCCEx_PLL3_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004126:	e009      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	75fb      	strb	r3, [r7, #23]
      break;
 800412c:	e006      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800412e:	bf00      	nop
 8004130:	e004      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800413a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10c      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004150:	4901      	ldr	r1, [pc, #4]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004152:	4313      	orrs	r3, r2
 8004154:	658b      	str	r3, [r1, #88]	; 0x58
 8004156:	e003      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004158:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d10a      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3324      	adds	r3, #36	; 0x24
 800417c:	2102      	movs	r1, #2
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fcfe 	bl	8004b80 <RCCEx_PLL3_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800418e:	4b8c      	ldr	r3, [pc, #560]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419c:	4988      	ldr	r1, [pc, #544]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b8:	d10a      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3324      	adds	r3, #36	; 0x24
 80041be:	2102      	movs	r1, #2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fcdd 	bl	8004b80 <RCCEx_PLL3_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d0:	4b7b      	ldr	r3, [pc, #492]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041de:	4978      	ldr	r1, [pc, #480]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d034      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041fa:	d01d      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80041fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004200:	d817      	bhi.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420a:	d009      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 800420c:	e011      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3304      	adds	r3, #4
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fc01 	bl	8004a1c <RCCEx_PLL2_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800421e:	e00c      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3324      	adds	r3, #36	; 0x24
 8004224:	2102      	movs	r1, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fcaa 	bl	8004b80 <RCCEx_PLL3_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004230:	e003      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	75fb      	strb	r3, [r7, #23]
      break;
 8004236:	e000      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8004238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800423a:	7dfb      	ldrb	r3, [r7, #23]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004240:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800424e:	495c      	ldr	r1, [pc, #368]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004250:	4313      	orrs	r3, r2
 8004252:	658b      	str	r3, [r1, #88]	; 0x58
 8004254:	e001      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004256:	7dfb      	ldrb	r3, [r7, #23]
 8004258:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d033      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004270:	d01c      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004272:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004276:	d816      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8004278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427c:	d003      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800427e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004282:	d007      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8004284:	e00f      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004286:	4b4e      	ldr	r3, [pc, #312]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4a4d      	ldr	r2, [pc, #308]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800428c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004290:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004292:	e00c      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3324      	adds	r3, #36	; 0x24
 8004298:	2101      	movs	r1, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fc70 	bl	8004b80 <RCCEx_PLL3_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80042a4:	e003      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
      break;
 80042aa:	e000      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 80042ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b4:	4b42      	ldr	r3, [pc, #264]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	493f      	ldr	r1, [pc, #252]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	654b      	str	r3, [r1, #84]	; 0x54
 80042c8:	e001      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d029      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 80042e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e6:	d007      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80042e8:	e00f      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ea:	4b35      	ldr	r3, [pc, #212]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	4a34      	ldr	r2, [pc, #208]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80042f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042f6:	e00b      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	2102      	movs	r1, #2
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fb8c 	bl	8004a1c <RCCEx_PLL2_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004308:	e002      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
      break;
 800430e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004316:	4b2a      	ldr	r3, [pc, #168]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004322:	4927      	ldr	r1, [pc, #156]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004324:	4313      	orrs	r3, r2
 8004326:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004328:	e001      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3324      	adds	r3, #36	; 0x24
 800433e:	2102      	movs	r1, #2
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fc1d 	bl	8004b80 <RCCEx_PLL3_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d035      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004366:	d017      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8004368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436c:	d811      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800436e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004372:	d013      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d80b      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800437e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004382:	d106      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	4a0d      	ldr	r2, [pc, #52]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800438a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800438e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004390:	e007      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
      break;
 8004396:	e004      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004398:	bf00      	nop
 800439a:	e002      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 800439c:	bf00      	nop
 800439e:	e000      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80043a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10d      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b6:	4902      	ldr	r1, [pc, #8]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	654b      	str	r3, [r1, #84]	; 0x54
 80043bc:	e004      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80043be:	bf00      	nop
 80043c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043d4:	4b31      	ldr	r3, [pc, #196]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80043d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e0:	492e      	ldr	r1, [pc, #184]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d009      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043f2:	4b2a      	ldr	r3, [pc, #168]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004400:	4926      	ldr	r1, [pc, #152]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004412:	4b22      	ldr	r3, [pc, #136]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004416:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800441e:	491f      	ldr	r1, [pc, #124]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004420:	4313      	orrs	r3, r2
 8004422:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00d      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	4a19      	ldr	r2, [pc, #100]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004436:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800443a:	6113      	str	r3, [r2, #16]
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004446:	4915      	ldr	r1, [pc, #84]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004448:	4313      	orrs	r3, r2
 800444a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	da08      	bge.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004458:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	490e      	ldr	r1, [pc, #56]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004480:	4906      	ldr	r1, [pc, #24]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004486:	7dbb      	ldrb	r3, [r7, #22]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	58024400 	.word	0x58024400

080044a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044a4:	f7ff f830 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4904      	ldr	r1, [pc, #16]	; (80044c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	58024400 	.word	0x58024400
 80044c8:	0800808c 	.word	0x0800808c

080044cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b089      	sub	sp, #36	; 0x24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044d4:	4ba1      	ldr	r3, [pc, #644]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80044de:	4b9f      	ldr	r3, [pc, #636]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	0b1b      	lsrs	r3, r3, #12
 80044e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80044ea:	4b9c      	ldr	r3, [pc, #624]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80044f6:	4b99      	ldr	r3, [pc, #612]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fa:	08db      	lsrs	r3, r3, #3
 80044fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8111 	beq.w	800473c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b02      	cmp	r3, #2
 800451e:	f000 8083 	beq.w	8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b02      	cmp	r3, #2
 8004526:	f200 80a1 	bhi.w	800466c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d056      	beq.n	80045e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004536:	e099      	b.n	800466c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004538:	4b88      	ldr	r3, [pc, #544]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d02d      	beq.n	80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004544:	4b85      	ldr	r3, [pc, #532]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	4a84      	ldr	r2, [pc, #528]	; (8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
 8004554:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	ee07 3a90 	vmov	s15, r3
 800455c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800456e:	4b7b      	ldr	r3, [pc, #492]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800457e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004582:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800458e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800459e:	e087      	b.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b2:	4b6a      	ldr	r3, [pc, #424]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045e2:	e065      	b.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045f6:	4b59      	ldr	r3, [pc, #356]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004606:	ed97 6a03 	vldr	s12, [r7, #12]
 800460a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800460e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800461e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004626:	e043      	b.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004632:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463a:	4b48      	ldr	r3, [pc, #288]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464a:	ed97 6a03 	vldr	s12, [r7, #12]
 800464e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800465e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800466a:	e021      	b.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800476c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800467a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467e:	4b37      	ldr	r3, [pc, #220]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004692:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80046b0:	4b2a      	ldr	r3, [pc, #168]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	0a5b      	lsrs	r3, r3, #9
 80046b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d6:	ee17 2a90 	vmov	r2, s15
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80046de:	4b1f      	ldr	r3, [pc, #124]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	0c1b      	lsrs	r3, r3, #16
 80046e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80046fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004704:	ee17 2a90 	vmov	r2, s15
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800470c:	4b13      	ldr	r3, [pc, #76]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	0e1b      	lsrs	r3, r3, #24
 8004712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004726:	edd7 6a07 	vldr	s13, [r7, #28]
 800472a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004732:	ee17 2a90 	vmov	r2, s15
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800473a:	e008      	b.n	800474e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	609a      	str	r2, [r3, #8]
}
 800474e:	bf00      	nop
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	58024400 	.word	0x58024400
 8004760:	03d09000 	.word	0x03d09000
 8004764:	46000000 	.word	0x46000000
 8004768:	4c742400 	.word	0x4c742400
 800476c:	4a742400 	.word	0x4a742400
 8004770:	4bbebc20 	.word	0x4bbebc20

08004774 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	; 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800477c:	4ba1      	ldr	r3, [pc, #644]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004786:	4b9f      	ldr	r3, [pc, #636]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	0d1b      	lsrs	r3, r3, #20
 800478c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004790:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004792:	4b9c      	ldr	r3, [pc, #624]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800479e:	4b99      	ldr	r3, [pc, #612]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	08db      	lsrs	r3, r3, #3
 80047a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8111 	beq.w	80049e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	f000 8083 	beq.w	80048d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	f200 80a1 	bhi.w	8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d056      	beq.n	800488c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80047de:	e099      	b.n	8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047e0:	4b88      	ldr	r3, [pc, #544]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d02d      	beq.n	8004848 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047ec:	4b85      	ldr	r3, [pc, #532]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	08db      	lsrs	r3, r3, #3
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	4a84      	ldr	r2, [pc, #528]	; (8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
 80047fc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	4b7b      	ldr	r3, [pc, #492]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	ed97 6a03 	vldr	s12, [r7, #12]
 800482a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004846:	e087      	b.n	8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485a:	4b6a      	ldr	r3, [pc, #424]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486a:	ed97 6a03 	vldr	s12, [r7, #12]
 800486e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800487e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800488a:	e065      	b.n	8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004896:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800489a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489e:	4b59      	ldr	r3, [pc, #356]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048ce:	e043      	b.n	8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80048de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e2:	4b48      	ldr	r3, [pc, #288]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004912:	e021      	b.n	8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004926:	4b37      	ldr	r3, [pc, #220]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004936:	ed97 6a03 	vldr	s12, [r7, #12]
 800493a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800493e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800494a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004956:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004958:	4b2a      	ldr	r3, [pc, #168]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	0a5b      	lsrs	r3, r3, #9
 800495e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800496e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004972:	edd7 6a07 	vldr	s13, [r7, #28]
 8004976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800497e:	ee17 2a90 	vmov	r2, s15
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004986:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800499c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ac:	ee17 2a90 	vmov	r2, s15
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80049b4:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	0e1b      	lsrs	r3, r3, #24
 80049ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049da:	ee17 2a90 	vmov	r2, s15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049e2:	e008      	b.n	80049f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
}
 80049f6:	bf00      	nop
 80049f8:	3724      	adds	r7, #36	; 0x24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	58024400 	.word	0x58024400
 8004a08:	03d09000 	.word	0x03d09000
 8004a0c:	46000000 	.word	0x46000000
 8004a10:	4c742400 	.word	0x4c742400
 8004a14:	4a742400 	.word	0x4a742400
 8004a18:	4bbebc20 	.word	0x4bbebc20

08004a1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a2a:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d101      	bne.n	8004a3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e099      	b.n	8004b6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a3a:	4b4f      	ldr	r3, [pc, #316]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a4e      	ldr	r2, [pc, #312]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004a40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a46:	f7fc fd43 	bl	80014d0 <HAL_GetTick>
 8004a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a4c:	e008      	b.n	8004a60 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a4e:	f7fc fd3f 	bl	80014d0 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e086      	b.n	8004b6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a60:	4b45      	ldr	r3, [pc, #276]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f0      	bne.n	8004a4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a6c:	4b42      	ldr	r3, [pc, #264]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	031b      	lsls	r3, r3, #12
 8004a7a:	493f      	ldr	r1, [pc, #252]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	025b      	lsls	r3, r3, #9
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ab0:	4931      	ldr	r1, [pc, #196]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ab6:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	492d      	ldr	r1, [pc, #180]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	f023 0220 	bic.w	r2, r3, #32
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	4928      	ldr	r1, [pc, #160]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ada:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	f023 0310 	bic.w	r3, r3, #16
 8004ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ae6:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aea:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <RCCEx_PLL2_Config+0x160>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	69d2      	ldr	r2, [r2, #28]
 8004af2:	00d2      	lsls	r2, r2, #3
 8004af4:	4920      	ldr	r1, [pc, #128]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004afa:	4b1f      	ldr	r3, [pc, #124]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004b00:	f043 0310 	orr.w	r3, r3, #16
 8004b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b0c:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004b12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b18:	e00f      	b.n	8004b3a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d106      	bne.n	8004b2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b20:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b2c:	e005      	b.n	8004b3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	4a11      	ldr	r2, [pc, #68]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a0e      	ldr	r2, [pc, #56]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b46:	f7fc fcc3 	bl	80014d0 <HAL_GetTick>
 8004b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b4c:	e008      	b.n	8004b60 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b4e:	f7fc fcbf 	bl	80014d0 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e006      	b.n	8004b6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <RCCEx_PLL2_Config+0x15c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	58024400 	.word	0x58024400
 8004b7c:	ffff0007 	.word	0xffff0007

08004b80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b8e:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d101      	bne.n	8004b9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e099      	b.n	8004cd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b9e:	4b4f      	ldr	r3, [pc, #316]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a4e      	ldr	r2, [pc, #312]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004baa:	f7fc fc91 	bl	80014d0 <HAL_GetTick>
 8004bae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bb0:	e008      	b.n	8004bc4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004bb2:	f7fc fc8d 	bl	80014d0 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e086      	b.n	8004cd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bc4:	4b45      	ldr	r3, [pc, #276]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f0      	bne.n	8004bb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bd0:	4b42      	ldr	r3, [pc, #264]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	051b      	lsls	r3, r3, #20
 8004bde:	493f      	ldr	r1, [pc, #252]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	628b      	str	r3, [r1, #40]	; 0x28
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	025b      	lsls	r3, r3, #9
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	061b      	lsls	r3, r3, #24
 8004c10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c14:	4931      	ldr	r1, [pc, #196]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c1a:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	492d      	ldr	r1, [pc, #180]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	4928      	ldr	r1, [pc, #160]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c3e:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c4a:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <RCCEx_PLL3_Config+0x160>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	69d2      	ldr	r2, [r2, #28]
 8004c56:	00d2      	lsls	r2, r2, #3
 8004c58:	4920      	ldr	r1, [pc, #128]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c70:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c7c:	e00f      	b.n	8004c9e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d106      	bne.n	8004c92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c84:	4b15      	ldr	r3, [pc, #84]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	4a14      	ldr	r2, [pc, #80]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c90:	e005      	b.n	8004c9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c92:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	4a11      	ldr	r2, [pc, #68]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a0e      	ldr	r2, [pc, #56]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004caa:	f7fc fc11 	bl	80014d0 <HAL_GetTick>
 8004cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cb0:	e008      	b.n	8004cc4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004cb2:	f7fc fc0d 	bl	80014d0 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e006      	b.n	8004cd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <RCCEx_PLL3_Config+0x15c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	ffff0007 	.word	0xffff0007

08004ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e042      	b.n	8004d7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fc f993 	bl	8001034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2224      	movs	r2, #36	; 0x24
 8004d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fbe2 	bl	80054f0 <UART_SetConfig>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e022      	b.n	8004d7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f001 f936 	bl	8005fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 f9bd 	bl	80060f4 <UART_CheckIdleState>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08a      	sub	sp, #40	; 0x28
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	f040 8083 	bne.w	8004ea6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_UART_Transmit+0x28>
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e07b      	b.n	8004ea8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Transmit+0x3a>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e074      	b.n	8004ea8 <HAL_UART_Transmit+0x124>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2221      	movs	r2, #33	; 0x21
 8004dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dd6:	f7fc fb7b 	bl	80014d0 <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df4:	d108      	bne.n	8004e08 <HAL_UART_Transmit+0x84>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d104      	bne.n	8004e08 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	e003      	b.n	8004e10 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004e18:	e02c      	b.n	8004e74 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	2180      	movs	r1, #128	; 0x80
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f001 f9b0 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e039      	b.n	8004ea8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	e007      	b.n	8004e62 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1cc      	bne.n	8004e1a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2200      	movs	r2, #0
 8004e88:	2140      	movs	r1, #64	; 0x40
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f001 f97d 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e006      	b.n	8004ea8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
  }
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d131      	bne.n	8004f2c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_UART_Receive_IT+0x24>
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e02a      	b.n	8004f2e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Receive_IT+0x36>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e023      	b.n	8004f2e <HAL_UART_Receive_IT+0x7e>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a0f      	ldr	r2, [pc, #60]	; (8004f38 <HAL_UART_Receive_IT+0x88>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00e      	beq.n	8004f1c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004f1a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f001 f9b2 	bl	800628c <UART_Start_Receive_IT>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	e000      	b.n	8004f2e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
  }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	58000c00 	.word	0x58000c00

08004f3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f62:	4013      	ands	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d118      	bne.n	8004f9e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d013      	beq.n	8004f9e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 8282 	beq.w	8005498 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	4798      	blx	r3
      }
      return;
 8004f9c:	e27c      	b.n	8005498 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80ef 	beq.w	8005184 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4b73      	ldr	r3, [pc, #460]	; (8005178 <HAL_UART_IRQHandler+0x23c>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4b72      	ldr	r3, [pc, #456]	; (800517c <HAL_UART_IRQHandler+0x240>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 80e4 	beq.w	8005184 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d010      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xac>
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d010      	beq.n	8005014 <HAL_UART_IRQHandler+0xd8>
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2202      	movs	r2, #2
 8005002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800500a:	f043 0204 	orr.w	r2, r3, #4
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	d010      	beq.n	8005040 <HAL_UART_IRQHandler+0x104>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00b      	beq.n	8005040 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2204      	movs	r2, #4
 800502e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005036:	f043 0202 	orr.w	r2, r3, #2
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d015      	beq.n	8005076 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d104      	bne.n	800505e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4b48      	ldr	r3, [pc, #288]	; (8005178 <HAL_UART_IRQHandler+0x23c>)
 8005058:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2208      	movs	r2, #8
 8005064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506c:	f043 0208 	orr.w	r2, r3, #8
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507c:	2b00      	cmp	r3, #0
 800507e:	d011      	beq.n	80050a4 <HAL_UART_IRQHandler+0x168>
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00c      	beq.n	80050a4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 81f6 	beq.w	800549c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d011      	beq.n	80050de <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d004      	beq.n	80050fe <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d031      	beq.n	8005162 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f001 f982 	bl	8006408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b40      	cmp	r3, #64	; 0x40
 8005110:	d123      	bne.n	800515a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005120:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d013      	beq.n	8005152 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800512e:	4a14      	ldr	r2, [pc, #80]	; (8005180 <HAL_UART_IRQHandler+0x244>)
 8005130:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005136:	4618      	mov	r0, r3
 8005138:	f7fc fe10 	bl	8001d5c <HAL_DMA_Abort_IT>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d017      	beq.n	8005172 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800514c:	4610      	mov	r0, r2
 800514e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005150:	e00f      	b.n	8005172 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9b6 	bl	80054c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005158:	e00b      	b.n	8005172 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9b2 	bl	80054c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	e007      	b.n	8005172 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f9ae 	bl	80054c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005170:	e194      	b.n	800549c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005172:	bf00      	nop
    return;
 8005174:	e192      	b.n	800549c <HAL_UART_IRQHandler+0x560>
 8005176:	bf00      	nop
 8005178:	10000001 	.word	0x10000001
 800517c:	04000120 	.word	0x04000120
 8005180:	0800646d 	.word	0x0800646d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005188:	2b01      	cmp	r3, #1
 800518a:	f040 810f 	bne.w	80053ac <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8109 	beq.w	80053ac <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8103 	beq.w	80053ac <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2210      	movs	r2, #16
 80051ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	f040 80bb 	bne.w	8005334 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a96      	ldr	r2, [pc, #600]	; (8005420 <HAL_UART_IRQHandler+0x4e4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d059      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a94      	ldr	r2, [pc, #592]	; (8005424 <HAL_UART_IRQHandler+0x4e8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d053      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a92      	ldr	r2, [pc, #584]	; (8005428 <HAL_UART_IRQHandler+0x4ec>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d04d      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a90      	ldr	r2, [pc, #576]	; (800542c <HAL_UART_IRQHandler+0x4f0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d047      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a8e      	ldr	r2, [pc, #568]	; (8005430 <HAL_UART_IRQHandler+0x4f4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d041      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a8c      	ldr	r2, [pc, #560]	; (8005434 <HAL_UART_IRQHandler+0x4f8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d03b      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a8a      	ldr	r2, [pc, #552]	; (8005438 <HAL_UART_IRQHandler+0x4fc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d035      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a88      	ldr	r2, [pc, #544]	; (800543c <HAL_UART_IRQHandler+0x500>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d02f      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a86      	ldr	r2, [pc, #536]	; (8005440 <HAL_UART_IRQHandler+0x504>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d029      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a84      	ldr	r2, [pc, #528]	; (8005444 <HAL_UART_IRQHandler+0x508>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d023      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a82      	ldr	r2, [pc, #520]	; (8005448 <HAL_UART_IRQHandler+0x50c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01d      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a80      	ldr	r2, [pc, #512]	; (800544c <HAL_UART_IRQHandler+0x510>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d017      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a7e      	ldr	r2, [pc, #504]	; (8005450 <HAL_UART_IRQHandler+0x514>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d011      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a7c      	ldr	r2, [pc, #496]	; (8005454 <HAL_UART_IRQHandler+0x518>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00b      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a7a      	ldr	r2, [pc, #488]	; (8005458 <HAL_UART_IRQHandler+0x51c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d005      	beq.n	800527e <HAL_UART_IRQHandler+0x342>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a78      	ldr	r2, [pc, #480]	; (800545c <HAL_UART_IRQHandler+0x520>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d105      	bne.n	800528a <HAL_UART_IRQHandler+0x34e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b29b      	uxth	r3, r3
 8005288:	e004      	b.n	8005294 <HAL_UART_IRQHandler+0x358>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	b29b      	uxth	r3, r3
 8005294:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005296:	893b      	ldrh	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8101 	beq.w	80054a0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052a4:	893a      	ldrh	r2, [r7, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	f080 80fa 	bcs.w	80054a0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	893a      	ldrh	r2, [r7, #8]
 80052b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052be:	d02b      	beq.n	8005318 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0201 	bic.w	r2, r2, #1
 80052de:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ee:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0210 	bic.w	r2, r2, #16
 800530c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005312:	4618      	mov	r0, r3
 8005314:	f7fc fa04 	bl	8001720 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005324:	b29b      	uxth	r3, r3
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	b29b      	uxth	r3, r3
 800532a:	4619      	mov	r1, r3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f8d3 	bl	80054d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005332:	e0b5      	b.n	80054a0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005340:	b29b      	uxth	r3, r3
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 80a8 	beq.w	80054a4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8005354:	897b      	ldrh	r3, [r7, #10]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 80a4 	beq.w	80054a4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800536a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6899      	ldr	r1, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4b3a      	ldr	r3, [pc, #232]	; (8005460 <HAL_UART_IRQHandler+0x524>)
 8005378:	400b      	ands	r3, r1
 800537a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0210 	bic.w	r2, r2, #16
 800539e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053a0:	897b      	ldrh	r3, [r7, #10]
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f897 	bl	80054d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053aa:	e07b      	b.n	80054a4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00d      	beq.n	80053d2 <HAL_UART_IRQHandler+0x496>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 fb5a 	bl	8006a84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053d0:	e06b      	b.n	80054aa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d012      	beq.n	8005402 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d057      	beq.n	80054a8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	4798      	blx	r3
    }
    return;
 8005400:	e052      	b.n	80054a8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b00      	cmp	r3, #0
 800540a:	d02b      	beq.n	8005464 <HAL_UART_IRQHandler+0x528>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d026      	beq.n	8005464 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 f83e 	bl	8006498 <UART_EndTransmit_IT>
    return;
 800541c:	e045      	b.n	80054aa <HAL_UART_IRQHandler+0x56e>
 800541e:	bf00      	nop
 8005420:	40020010 	.word	0x40020010
 8005424:	40020028 	.word	0x40020028
 8005428:	40020040 	.word	0x40020040
 800542c:	40020058 	.word	0x40020058
 8005430:	40020070 	.word	0x40020070
 8005434:	40020088 	.word	0x40020088
 8005438:	400200a0 	.word	0x400200a0
 800543c:	400200b8 	.word	0x400200b8
 8005440:	40020410 	.word	0x40020410
 8005444:	40020428 	.word	0x40020428
 8005448:	40020440 	.word	0x40020440
 800544c:	40020458 	.word	0x40020458
 8005450:	40020470 	.word	0x40020470
 8005454:	40020488 	.word	0x40020488
 8005458:	400204a0 	.word	0x400204a0
 800545c:	400204b8 	.word	0x400204b8
 8005460:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <HAL_UART_IRQHandler+0x544>
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f001 fb17 	bl	8006aac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800547e:	e014      	b.n	80054aa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00f      	beq.n	80054aa <HAL_UART_IRQHandler+0x56e>
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	da0c      	bge.n	80054aa <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f001 fb01 	bl	8006a98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005496:	e008      	b.n	80054aa <HAL_UART_IRQHandler+0x56e>
      return;
 8005498:	bf00      	nop
 800549a:	e006      	b.n	80054aa <HAL_UART_IRQHandler+0x56e>
    return;
 800549c:	bf00      	nop
 800549e:	e004      	b.n	80054aa <HAL_UART_IRQHandler+0x56e>
      return;
 80054a0:	bf00      	nop
 80054a2:	e002      	b.n	80054aa <HAL_UART_IRQHandler+0x56e>
      return;
 80054a4:	bf00      	nop
 80054a6:	e000      	b.n	80054aa <HAL_UART_IRQHandler+0x56e>
    return;
 80054a8:	bf00      	nop
  }
}
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f0:	b5b0      	push	{r4, r5, r7, lr}
 80054f2:	b08e      	sub	sp, #56	; 0x38
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	4313      	orrs	r3, r2
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4bbf      	ldr	r3, [pc, #764]	; (800581c <UART_SetConfig+0x32c>)
 800551e:	4013      	ands	r3, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005526:	430b      	orrs	r3, r1
 8005528:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4ab5      	ldr	r2, [pc, #724]	; (8005820 <UART_SetConfig+0x330>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005556:	4313      	orrs	r3, r2
 8005558:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	4bb0      	ldr	r3, [pc, #704]	; (8005824 <UART_SetConfig+0x334>)
 8005562:	4013      	ands	r3, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800556a:	430b      	orrs	r3, r1
 800556c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	f023 010f 	bic.w	r1, r3, #15
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4aa7      	ldr	r2, [pc, #668]	; (8005828 <UART_SetConfig+0x338>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d176      	bne.n	800567c <UART_SetConfig+0x18c>
 800558e:	4ba7      	ldr	r3, [pc, #668]	; (800582c <UART_SetConfig+0x33c>)
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005596:	2b28      	cmp	r3, #40	; 0x28
 8005598:	d86c      	bhi.n	8005674 <UART_SetConfig+0x184>
 800559a:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <UART_SetConfig+0xb0>)
 800559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a0:	08005645 	.word	0x08005645
 80055a4:	08005675 	.word	0x08005675
 80055a8:	08005675 	.word	0x08005675
 80055ac:	08005675 	.word	0x08005675
 80055b0:	08005675 	.word	0x08005675
 80055b4:	08005675 	.word	0x08005675
 80055b8:	08005675 	.word	0x08005675
 80055bc:	08005675 	.word	0x08005675
 80055c0:	0800564d 	.word	0x0800564d
 80055c4:	08005675 	.word	0x08005675
 80055c8:	08005675 	.word	0x08005675
 80055cc:	08005675 	.word	0x08005675
 80055d0:	08005675 	.word	0x08005675
 80055d4:	08005675 	.word	0x08005675
 80055d8:	08005675 	.word	0x08005675
 80055dc:	08005675 	.word	0x08005675
 80055e0:	08005655 	.word	0x08005655
 80055e4:	08005675 	.word	0x08005675
 80055e8:	08005675 	.word	0x08005675
 80055ec:	08005675 	.word	0x08005675
 80055f0:	08005675 	.word	0x08005675
 80055f4:	08005675 	.word	0x08005675
 80055f8:	08005675 	.word	0x08005675
 80055fc:	08005675 	.word	0x08005675
 8005600:	0800565d 	.word	0x0800565d
 8005604:	08005675 	.word	0x08005675
 8005608:	08005675 	.word	0x08005675
 800560c:	08005675 	.word	0x08005675
 8005610:	08005675 	.word	0x08005675
 8005614:	08005675 	.word	0x08005675
 8005618:	08005675 	.word	0x08005675
 800561c:	08005675 	.word	0x08005675
 8005620:	08005665 	.word	0x08005665
 8005624:	08005675 	.word	0x08005675
 8005628:	08005675 	.word	0x08005675
 800562c:	08005675 	.word	0x08005675
 8005630:	08005675 	.word	0x08005675
 8005634:	08005675 	.word	0x08005675
 8005638:	08005675 	.word	0x08005675
 800563c:	08005675 	.word	0x08005675
 8005640:	0800566d 	.word	0x0800566d
 8005644:	2301      	movs	r3, #1
 8005646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800564a:	e222      	b.n	8005a92 <UART_SetConfig+0x5a2>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005652:	e21e      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800565a:	e21a      	b.n	8005a92 <UART_SetConfig+0x5a2>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005662:	e216      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005664:	2320      	movs	r3, #32
 8005666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566a:	e212      	b.n	8005a92 <UART_SetConfig+0x5a2>
 800566c:	2340      	movs	r3, #64	; 0x40
 800566e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005672:	e20e      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005674:	2380      	movs	r3, #128	; 0x80
 8005676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567a:	e20a      	b.n	8005a92 <UART_SetConfig+0x5a2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a6b      	ldr	r2, [pc, #428]	; (8005830 <UART_SetConfig+0x340>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d130      	bne.n	80056e8 <UART_SetConfig+0x1f8>
 8005686:	4b69      	ldr	r3, [pc, #420]	; (800582c <UART_SetConfig+0x33c>)
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	2b05      	cmp	r3, #5
 8005690:	d826      	bhi.n	80056e0 <UART_SetConfig+0x1f0>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <UART_SetConfig+0x1a8>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056b1 	.word	0x080056b1
 800569c:	080056b9 	.word	0x080056b9
 80056a0:	080056c1 	.word	0x080056c1
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	2300      	movs	r3, #0
 80056b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056b6:	e1ec      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80056b8:	2304      	movs	r3, #4
 80056ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056be:	e1e8      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80056c0:	2308      	movs	r3, #8
 80056c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056c6:	e1e4      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ce:	e1e0      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80056d0:	2320      	movs	r3, #32
 80056d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d6:	e1dc      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80056d8:	2340      	movs	r3, #64	; 0x40
 80056da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056de:	e1d8      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056e6:	e1d4      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a51      	ldr	r2, [pc, #324]	; (8005834 <UART_SetConfig+0x344>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d130      	bne.n	8005754 <UART_SetConfig+0x264>
 80056f2:	4b4e      	ldr	r3, [pc, #312]	; (800582c <UART_SetConfig+0x33c>)
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d826      	bhi.n	800574c <UART_SetConfig+0x25c>
 80056fe:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <UART_SetConfig+0x214>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	0800571d 	.word	0x0800571d
 8005708:	08005725 	.word	0x08005725
 800570c:	0800572d 	.word	0x0800572d
 8005710:	08005735 	.word	0x08005735
 8005714:	0800573d 	.word	0x0800573d
 8005718:	08005745 	.word	0x08005745
 800571c:	2300      	movs	r3, #0
 800571e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005722:	e1b6      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005724:	2304      	movs	r3, #4
 8005726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800572a:	e1b2      	b.n	8005a92 <UART_SetConfig+0x5a2>
 800572c:	2308      	movs	r3, #8
 800572e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005732:	e1ae      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800573a:	e1aa      	b.n	8005a92 <UART_SetConfig+0x5a2>
 800573c:	2320      	movs	r3, #32
 800573e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005742:	e1a6      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574a:	e1a2      	b.n	8005a92 <UART_SetConfig+0x5a2>
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005752:	e19e      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a37      	ldr	r2, [pc, #220]	; (8005838 <UART_SetConfig+0x348>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d130      	bne.n	80057c0 <UART_SetConfig+0x2d0>
 800575e:	4b33      	ldr	r3, [pc, #204]	; (800582c <UART_SetConfig+0x33c>)
 8005760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b05      	cmp	r3, #5
 8005768:	d826      	bhi.n	80057b8 <UART_SetConfig+0x2c8>
 800576a:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <UART_SetConfig+0x280>)
 800576c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005770:	08005789 	.word	0x08005789
 8005774:	08005791 	.word	0x08005791
 8005778:	08005799 	.word	0x08005799
 800577c:	080057a1 	.word	0x080057a1
 8005780:	080057a9 	.word	0x080057a9
 8005784:	080057b1 	.word	0x080057b1
 8005788:	2300      	movs	r3, #0
 800578a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578e:	e180      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005790:	2304      	movs	r3, #4
 8005792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005796:	e17c      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005798:	2308      	movs	r3, #8
 800579a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800579e:	e178      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80057a0:	2310      	movs	r3, #16
 80057a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a6:	e174      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80057a8:	2320      	movs	r3, #32
 80057aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ae:	e170      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80057b0:	2340      	movs	r3, #64	; 0x40
 80057b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b6:	e16c      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80057b8:	2380      	movs	r3, #128	; 0x80
 80057ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057be:	e168      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1d      	ldr	r2, [pc, #116]	; (800583c <UART_SetConfig+0x34c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d142      	bne.n	8005850 <UART_SetConfig+0x360>
 80057ca:	4b18      	ldr	r3, [pc, #96]	; (800582c <UART_SetConfig+0x33c>)
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	2b05      	cmp	r3, #5
 80057d4:	d838      	bhi.n	8005848 <UART_SetConfig+0x358>
 80057d6:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <UART_SetConfig+0x2ec>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	080057f5 	.word	0x080057f5
 80057e0:	080057fd 	.word	0x080057fd
 80057e4:	08005805 	.word	0x08005805
 80057e8:	0800580d 	.word	0x0800580d
 80057ec:	08005815 	.word	0x08005815
 80057f0:	08005841 	.word	0x08005841
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fa:	e14a      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80057fc:	2304      	movs	r3, #4
 80057fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005802:	e146      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005804:	2308      	movs	r3, #8
 8005806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580a:	e142      	b.n	8005a92 <UART_SetConfig+0x5a2>
 800580c:	2310      	movs	r3, #16
 800580e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005812:	e13e      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005814:	2320      	movs	r3, #32
 8005816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581a:	e13a      	b.n	8005a92 <UART_SetConfig+0x5a2>
 800581c:	cfff69f3 	.word	0xcfff69f3
 8005820:	58000c00 	.word	0x58000c00
 8005824:	11fff4ff 	.word	0x11fff4ff
 8005828:	40011000 	.word	0x40011000
 800582c:	58024400 	.word	0x58024400
 8005830:	40004400 	.word	0x40004400
 8005834:	40004800 	.word	0x40004800
 8005838:	40004c00 	.word	0x40004c00
 800583c:	40005000 	.word	0x40005000
 8005840:	2340      	movs	r3, #64	; 0x40
 8005842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005846:	e124      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005848:	2380      	movs	r3, #128	; 0x80
 800584a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584e:	e120      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4acc      	ldr	r2, [pc, #816]	; (8005b88 <UART_SetConfig+0x698>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d176      	bne.n	8005948 <UART_SetConfig+0x458>
 800585a:	4bcc      	ldr	r3, [pc, #816]	; (8005b8c <UART_SetConfig+0x69c>)
 800585c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005862:	2b28      	cmp	r3, #40	; 0x28
 8005864:	d86c      	bhi.n	8005940 <UART_SetConfig+0x450>
 8005866:	a201      	add	r2, pc, #4	; (adr r2, 800586c <UART_SetConfig+0x37c>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	08005911 	.word	0x08005911
 8005870:	08005941 	.word	0x08005941
 8005874:	08005941 	.word	0x08005941
 8005878:	08005941 	.word	0x08005941
 800587c:	08005941 	.word	0x08005941
 8005880:	08005941 	.word	0x08005941
 8005884:	08005941 	.word	0x08005941
 8005888:	08005941 	.word	0x08005941
 800588c:	08005919 	.word	0x08005919
 8005890:	08005941 	.word	0x08005941
 8005894:	08005941 	.word	0x08005941
 8005898:	08005941 	.word	0x08005941
 800589c:	08005941 	.word	0x08005941
 80058a0:	08005941 	.word	0x08005941
 80058a4:	08005941 	.word	0x08005941
 80058a8:	08005941 	.word	0x08005941
 80058ac:	08005921 	.word	0x08005921
 80058b0:	08005941 	.word	0x08005941
 80058b4:	08005941 	.word	0x08005941
 80058b8:	08005941 	.word	0x08005941
 80058bc:	08005941 	.word	0x08005941
 80058c0:	08005941 	.word	0x08005941
 80058c4:	08005941 	.word	0x08005941
 80058c8:	08005941 	.word	0x08005941
 80058cc:	08005929 	.word	0x08005929
 80058d0:	08005941 	.word	0x08005941
 80058d4:	08005941 	.word	0x08005941
 80058d8:	08005941 	.word	0x08005941
 80058dc:	08005941 	.word	0x08005941
 80058e0:	08005941 	.word	0x08005941
 80058e4:	08005941 	.word	0x08005941
 80058e8:	08005941 	.word	0x08005941
 80058ec:	08005931 	.word	0x08005931
 80058f0:	08005941 	.word	0x08005941
 80058f4:	08005941 	.word	0x08005941
 80058f8:	08005941 	.word	0x08005941
 80058fc:	08005941 	.word	0x08005941
 8005900:	08005941 	.word	0x08005941
 8005904:	08005941 	.word	0x08005941
 8005908:	08005941 	.word	0x08005941
 800590c:	08005939 	.word	0x08005939
 8005910:	2301      	movs	r3, #1
 8005912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005916:	e0bc      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005918:	2304      	movs	r3, #4
 800591a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591e:	e0b8      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005920:	2308      	movs	r3, #8
 8005922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005926:	e0b4      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005928:	2310      	movs	r3, #16
 800592a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800592e:	e0b0      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005930:	2320      	movs	r3, #32
 8005932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005936:	e0ac      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005938:	2340      	movs	r3, #64	; 0x40
 800593a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593e:	e0a8      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005946:	e0a4      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a90      	ldr	r2, [pc, #576]	; (8005b90 <UART_SetConfig+0x6a0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d130      	bne.n	80059b4 <UART_SetConfig+0x4c4>
 8005952:	4b8e      	ldr	r3, [pc, #568]	; (8005b8c <UART_SetConfig+0x69c>)
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b05      	cmp	r3, #5
 800595c:	d826      	bhi.n	80059ac <UART_SetConfig+0x4bc>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <UART_SetConfig+0x474>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	0800597d 	.word	0x0800597d
 8005968:	08005985 	.word	0x08005985
 800596c:	0800598d 	.word	0x0800598d
 8005970:	08005995 	.word	0x08005995
 8005974:	0800599d 	.word	0x0800599d
 8005978:	080059a5 	.word	0x080059a5
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005982:	e086      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005984:	2304      	movs	r3, #4
 8005986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800598a:	e082      	b.n	8005a92 <UART_SetConfig+0x5a2>
 800598c:	2308      	movs	r3, #8
 800598e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005992:	e07e      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005994:	2310      	movs	r3, #16
 8005996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800599a:	e07a      	b.n	8005a92 <UART_SetConfig+0x5a2>
 800599c:	2320      	movs	r3, #32
 800599e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059a2:	e076      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80059a4:	2340      	movs	r3, #64	; 0x40
 80059a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059aa:	e072      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80059ac:	2380      	movs	r3, #128	; 0x80
 80059ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059b2:	e06e      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a76      	ldr	r2, [pc, #472]	; (8005b94 <UART_SetConfig+0x6a4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d130      	bne.n	8005a20 <UART_SetConfig+0x530>
 80059be:	4b73      	ldr	r3, [pc, #460]	; (8005b8c <UART_SetConfig+0x69c>)
 80059c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b05      	cmp	r3, #5
 80059c8:	d826      	bhi.n	8005a18 <UART_SetConfig+0x528>
 80059ca:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <UART_SetConfig+0x4e0>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059e9 	.word	0x080059e9
 80059d4:	080059f1 	.word	0x080059f1
 80059d8:	080059f9 	.word	0x080059f9
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	08005a09 	.word	0x08005a09
 80059e4:	08005a11 	.word	0x08005a11
 80059e8:	2300      	movs	r3, #0
 80059ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ee:	e050      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80059f0:	2304      	movs	r3, #4
 80059f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f6:	e04c      	b.n	8005a92 <UART_SetConfig+0x5a2>
 80059f8:	2308      	movs	r3, #8
 80059fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fe:	e048      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a00:	2310      	movs	r3, #16
 8005a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a06:	e044      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a08:	2320      	movs	r3, #32
 8005a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a0e:	e040      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a10:	2340      	movs	r3, #64	; 0x40
 8005a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a16:	e03c      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a18:	2380      	movs	r3, #128	; 0x80
 8005a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a1e:	e038      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a5c      	ldr	r2, [pc, #368]	; (8005b98 <UART_SetConfig+0x6a8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d130      	bne.n	8005a8c <UART_SetConfig+0x59c>
 8005a2a:	4b58      	ldr	r3, [pc, #352]	; (8005b8c <UART_SetConfig+0x69c>)
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	2b05      	cmp	r3, #5
 8005a34:	d826      	bhi.n	8005a84 <UART_SetConfig+0x594>
 8005a36:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <UART_SetConfig+0x54c>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a55 	.word	0x08005a55
 8005a40:	08005a5d 	.word	0x08005a5d
 8005a44:	08005a65 	.word	0x08005a65
 8005a48:	08005a6d 	.word	0x08005a6d
 8005a4c:	08005a75 	.word	0x08005a75
 8005a50:	08005a7d 	.word	0x08005a7d
 8005a54:	2302      	movs	r3, #2
 8005a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5a:	e01a      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a62:	e016      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a64:	2308      	movs	r3, #8
 8005a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6a:	e012      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a72:	e00e      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a74:	2320      	movs	r3, #32
 8005a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7a:	e00a      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a7c:	2340      	movs	r3, #64	; 0x40
 8005a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a82:	e006      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a84:	2380      	movs	r3, #128	; 0x80
 8005a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8a:	e002      	b.n	8005a92 <UART_SetConfig+0x5a2>
 8005a8c:	2380      	movs	r3, #128	; 0x80
 8005a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a40      	ldr	r2, [pc, #256]	; (8005b98 <UART_SetConfig+0x6a8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	f040 80ef 	bne.w	8005c7c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	dc46      	bgt.n	8005b34 <UART_SetConfig+0x644>
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	f2c0 8081 	blt.w	8005bae <UART_SetConfig+0x6be>
 8005aac:	3b02      	subs	r3, #2
 8005aae:	2b1e      	cmp	r3, #30
 8005ab0:	d87d      	bhi.n	8005bae <UART_SetConfig+0x6be>
 8005ab2:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <UART_SetConfig+0x5c8>)
 8005ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab8:	08005b3b 	.word	0x08005b3b
 8005abc:	08005baf 	.word	0x08005baf
 8005ac0:	08005b43 	.word	0x08005b43
 8005ac4:	08005baf 	.word	0x08005baf
 8005ac8:	08005baf 	.word	0x08005baf
 8005acc:	08005baf 	.word	0x08005baf
 8005ad0:	08005b53 	.word	0x08005b53
 8005ad4:	08005baf 	.word	0x08005baf
 8005ad8:	08005baf 	.word	0x08005baf
 8005adc:	08005baf 	.word	0x08005baf
 8005ae0:	08005baf 	.word	0x08005baf
 8005ae4:	08005baf 	.word	0x08005baf
 8005ae8:	08005baf 	.word	0x08005baf
 8005aec:	08005baf 	.word	0x08005baf
 8005af0:	08005b63 	.word	0x08005b63
 8005af4:	08005baf 	.word	0x08005baf
 8005af8:	08005baf 	.word	0x08005baf
 8005afc:	08005baf 	.word	0x08005baf
 8005b00:	08005baf 	.word	0x08005baf
 8005b04:	08005baf 	.word	0x08005baf
 8005b08:	08005baf 	.word	0x08005baf
 8005b0c:	08005baf 	.word	0x08005baf
 8005b10:	08005baf 	.word	0x08005baf
 8005b14:	08005baf 	.word	0x08005baf
 8005b18:	08005baf 	.word	0x08005baf
 8005b1c:	08005baf 	.word	0x08005baf
 8005b20:	08005baf 	.word	0x08005baf
 8005b24:	08005baf 	.word	0x08005baf
 8005b28:	08005baf 	.word	0x08005baf
 8005b2c:	08005baf 	.word	0x08005baf
 8005b30:	08005ba1 	.word	0x08005ba1
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d036      	beq.n	8005ba6 <UART_SetConfig+0x6b6>
 8005b38:	e039      	b.n	8005bae <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005b3a:	f7fe fcb1 	bl	80044a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b40:	e03b      	b.n	8005bba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b42:	f107 0314 	add.w	r3, r7, #20
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe fcc0 	bl	80044cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b50:	e033      	b.n	8005bba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b52:	f107 0308 	add.w	r3, r7, #8
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fe0c 	bl	8004774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b60:	e02b      	b.n	8005bba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b62:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <UART_SetConfig+0x69c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <UART_SetConfig+0x69c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	08db      	lsrs	r3, r3, #3
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	4a08      	ldr	r2, [pc, #32]	; (8005b9c <UART_SetConfig+0x6ac>)
 8005b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b80:	e01b      	b.n	8005bba <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005b82:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <UART_SetConfig+0x6ac>)
 8005b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b86:	e018      	b.n	8005bba <UART_SetConfig+0x6ca>
 8005b88:	40011400 	.word	0x40011400
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	40007800 	.word	0x40007800
 8005b94:	40007c00 	.word	0x40007c00
 8005b98:	58000c00 	.word	0x58000c00
 8005b9c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ba0:	4bc4      	ldr	r3, [pc, #784]	; (8005eb4 <UART_SetConfig+0x9c4>)
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ba4:	e009      	b.n	8005bba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bac:	e005      	b.n	8005bba <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005bb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 81da 	beq.w	8005f76 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	4abc      	ldr	r2, [pc, #752]	; (8005eb8 <UART_SetConfig+0x9c8>)
 8005bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bd4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	4413      	add	r3, r2
 8005be0:	6a3a      	ldr	r2, [r7, #32]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d305      	bcc.n	8005bf2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bec:	6a3a      	ldr	r2, [r7, #32]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d903      	bls.n	8005bfa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005bf8:	e1bd      	b.n	8005f76 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f04f 0100 	mov.w	r1, #0
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	4aac      	ldr	r2, [pc, #688]	; (8005eb8 <UART_SetConfig+0x9c8>)
 8005c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	f7fa fbb5 	bl	8000380 <__aeabi_uldivmod>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	020b      	lsls	r3, r1, #8
 8005c28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c2c:	0202      	lsls	r2, r0, #8
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	6849      	ldr	r1, [r1, #4]
 8005c32:	0849      	lsrs	r1, r1, #1
 8005c34:	4608      	mov	r0, r1
 8005c36:	f04f 0100 	mov.w	r1, #0
 8005c3a:	1814      	adds	r4, r2, r0
 8005c3c:	eb43 0501 	adc.w	r5, r3, r1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	461a      	mov	r2, r3
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	f7fa fb97 	bl	8000380 <__aeabi_uldivmod>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4613      	mov	r3, r2
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c60:	d308      	bcc.n	8005c74 <UART_SetConfig+0x784>
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c68:	d204      	bcs.n	8005c74 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c70:	60da      	str	r2, [r3, #12]
 8005c72:	e180      	b.n	8005f76 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005c7a:	e17c      	b.n	8005f76 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c84:	f040 80bf 	bne.w	8005e06 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005c88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	dc49      	bgt.n	8005d24 <UART_SetConfig+0x834>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	db7c      	blt.n	8005d8e <UART_SetConfig+0x89e>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d87a      	bhi.n	8005d8e <UART_SetConfig+0x89e>
 8005c98:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <UART_SetConfig+0x7b0>)
 8005c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9e:	bf00      	nop
 8005ca0:	08005d2b 	.word	0x08005d2b
 8005ca4:	08005d33 	.word	0x08005d33
 8005ca8:	08005d8f 	.word	0x08005d8f
 8005cac:	08005d8f 	.word	0x08005d8f
 8005cb0:	08005d3b 	.word	0x08005d3b
 8005cb4:	08005d8f 	.word	0x08005d8f
 8005cb8:	08005d8f 	.word	0x08005d8f
 8005cbc:	08005d8f 	.word	0x08005d8f
 8005cc0:	08005d4b 	.word	0x08005d4b
 8005cc4:	08005d8f 	.word	0x08005d8f
 8005cc8:	08005d8f 	.word	0x08005d8f
 8005ccc:	08005d8f 	.word	0x08005d8f
 8005cd0:	08005d8f 	.word	0x08005d8f
 8005cd4:	08005d8f 	.word	0x08005d8f
 8005cd8:	08005d8f 	.word	0x08005d8f
 8005cdc:	08005d8f 	.word	0x08005d8f
 8005ce0:	08005d5b 	.word	0x08005d5b
 8005ce4:	08005d8f 	.word	0x08005d8f
 8005ce8:	08005d8f 	.word	0x08005d8f
 8005cec:	08005d8f 	.word	0x08005d8f
 8005cf0:	08005d8f 	.word	0x08005d8f
 8005cf4:	08005d8f 	.word	0x08005d8f
 8005cf8:	08005d8f 	.word	0x08005d8f
 8005cfc:	08005d8f 	.word	0x08005d8f
 8005d00:	08005d8f 	.word	0x08005d8f
 8005d04:	08005d8f 	.word	0x08005d8f
 8005d08:	08005d8f 	.word	0x08005d8f
 8005d0c:	08005d8f 	.word	0x08005d8f
 8005d10:	08005d8f 	.word	0x08005d8f
 8005d14:	08005d8f 	.word	0x08005d8f
 8005d18:	08005d8f 	.word	0x08005d8f
 8005d1c:	08005d8f 	.word	0x08005d8f
 8005d20:	08005d81 	.word	0x08005d81
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d02e      	beq.n	8005d86 <UART_SetConfig+0x896>
 8005d28:	e031      	b.n	8005d8e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2a:	f7fd fc1d 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8005d2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d30:	e033      	b.n	8005d9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d32:	f7fd fc2f 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8005d36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d38:	e02f      	b.n	8005d9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d3a:	f107 0314 	add.w	r3, r7, #20
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe fbc4 	bl	80044cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d48:	e027      	b.n	8005d9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d4a:	f107 0308 	add.w	r3, r7, #8
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe fd10 	bl	8004774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d58:	e01f      	b.n	8005d9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d5a:	4b58      	ldr	r3, [pc, #352]	; (8005ebc <UART_SetConfig+0x9cc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d66:	4b55      	ldr	r3, [pc, #340]	; (8005ebc <UART_SetConfig+0x9cc>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	08db      	lsrs	r3, r3, #3
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	4a53      	ldr	r2, [pc, #332]	; (8005ec0 <UART_SetConfig+0x9d0>)
 8005d72:	fa22 f303 	lsr.w	r3, r2, r3
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d78:	e00f      	b.n	8005d9a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005d7a:	4b51      	ldr	r3, [pc, #324]	; (8005ec0 <UART_SetConfig+0x9d0>)
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d7e:	e00c      	b.n	8005d9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d80:	4b4c      	ldr	r3, [pc, #304]	; (8005eb4 <UART_SetConfig+0x9c4>)
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d84:	e009      	b.n	8005d9a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d8c:	e005      	b.n	8005d9a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80ea 	beq.w	8005f76 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	4a44      	ldr	r2, [pc, #272]	; (8005eb8 <UART_SetConfig+0x9c8>)
 8005da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dac:	461a      	mov	r2, r3
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005db4:	005a      	lsls	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	085b      	lsrs	r3, r3, #1
 8005dbc:	441a      	add	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	2b0f      	cmp	r3, #15
 8005dce:	d916      	bls.n	8005dfe <UART_SetConfig+0x90e>
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd6:	d212      	bcs.n	8005dfe <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f023 030f 	bic.w	r3, r3, #15
 8005de0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	085b      	lsrs	r3, r3, #1
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005df0:	4313      	orrs	r3, r2
 8005df2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005dfa:	60da      	str	r2, [r3, #12]
 8005dfc:	e0bb      	b.n	8005f76 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005e04:	e0b7      	b.n	8005f76 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	dc4a      	bgt.n	8005ea4 <UART_SetConfig+0x9b4>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f2c0 8086 	blt.w	8005f20 <UART_SetConfig+0xa30>
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	f200 8083 	bhi.w	8005f20 <UART_SetConfig+0xa30>
 8005e1a:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <UART_SetConfig+0x930>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005eab 	.word	0x08005eab
 8005e24:	08005ec5 	.word	0x08005ec5
 8005e28:	08005f21 	.word	0x08005f21
 8005e2c:	08005f21 	.word	0x08005f21
 8005e30:	08005ecd 	.word	0x08005ecd
 8005e34:	08005f21 	.word	0x08005f21
 8005e38:	08005f21 	.word	0x08005f21
 8005e3c:	08005f21 	.word	0x08005f21
 8005e40:	08005edd 	.word	0x08005edd
 8005e44:	08005f21 	.word	0x08005f21
 8005e48:	08005f21 	.word	0x08005f21
 8005e4c:	08005f21 	.word	0x08005f21
 8005e50:	08005f21 	.word	0x08005f21
 8005e54:	08005f21 	.word	0x08005f21
 8005e58:	08005f21 	.word	0x08005f21
 8005e5c:	08005f21 	.word	0x08005f21
 8005e60:	08005eed 	.word	0x08005eed
 8005e64:	08005f21 	.word	0x08005f21
 8005e68:	08005f21 	.word	0x08005f21
 8005e6c:	08005f21 	.word	0x08005f21
 8005e70:	08005f21 	.word	0x08005f21
 8005e74:	08005f21 	.word	0x08005f21
 8005e78:	08005f21 	.word	0x08005f21
 8005e7c:	08005f21 	.word	0x08005f21
 8005e80:	08005f21 	.word	0x08005f21
 8005e84:	08005f21 	.word	0x08005f21
 8005e88:	08005f21 	.word	0x08005f21
 8005e8c:	08005f21 	.word	0x08005f21
 8005e90:	08005f21 	.word	0x08005f21
 8005e94:	08005f21 	.word	0x08005f21
 8005e98:	08005f21 	.word	0x08005f21
 8005e9c:	08005f21 	.word	0x08005f21
 8005ea0:	08005f13 	.word	0x08005f13
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	d037      	beq.n	8005f18 <UART_SetConfig+0xa28>
 8005ea8:	e03a      	b.n	8005f20 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eaa:	f7fd fb5d 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8005eae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005eb0:	e03c      	b.n	8005f2c <UART_SetConfig+0xa3c>
 8005eb2:	bf00      	nop
 8005eb4:	003d0900 	.word	0x003d0900
 8005eb8:	0800809c 	.word	0x0800809c
 8005ebc:	58024400 	.word	0x58024400
 8005ec0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ec4:	f7fd fb66 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8005ec8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005eca:	e02f      	b.n	8005f2c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ecc:	f107 0314 	add.w	r3, r7, #20
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe fafb 	bl	80044cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005eda:	e027      	b.n	8005f2c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005edc:	f107 0308 	add.w	r3, r7, #8
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe fc47 	bl	8004774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005eea:	e01f      	b.n	8005f2c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eec:	4b2c      	ldr	r3, [pc, #176]	; (8005fa0 <UART_SetConfig+0xab0>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ef8:	4b29      	ldr	r3, [pc, #164]	; (8005fa0 <UART_SetConfig+0xab0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	08db      	lsrs	r3, r3, #3
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	4a28      	ldr	r2, [pc, #160]	; (8005fa4 <UART_SetConfig+0xab4>)
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f0a:	e00f      	b.n	8005f2c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005f0c:	4b25      	ldr	r3, [pc, #148]	; (8005fa4 <UART_SetConfig+0xab4>)
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f10:	e00c      	b.n	8005f2c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f12:	4b25      	ldr	r3, [pc, #148]	; (8005fa8 <UART_SetConfig+0xab8>)
 8005f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f16:	e009      	b.n	8005f2c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f1e:	e005      	b.n	8005f2c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005f2a:	bf00      	nop
    }

    if (pclk != 0U)
 8005f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d021      	beq.n	8005f76 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <UART_SetConfig+0xabc>)
 8005f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	085b      	lsrs	r3, r3, #1
 8005f4a:	441a      	add	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	2b0f      	cmp	r3, #15
 8005f5c:	d908      	bls.n	8005f70 <UART_SetConfig+0xa80>
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	d204      	bcs.n	8005f70 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	e002      	b.n	8005f76 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005f92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3738      	adds	r7, #56	; 0x38
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	03d09000 	.word	0x03d09000
 8005fa8:	003d0900 	.word	0x003d0900
 8005fac:	0800809c 	.word	0x0800809c

08005fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01a      	beq.n	80060c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ae:	d10a      	bne.n	80060c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
  }
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006104:	f7fb f9e4 	bl	80014d0 <HAL_GetTick>
 8006108:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b08      	cmp	r3, #8
 8006116:	d10e      	bne.n	8006136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f82f 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e025      	b.n	8006182 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b04      	cmp	r3, #4
 8006142:	d10e      	bne.n	8006162 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f819 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e00f      	b.n	8006182 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619a:	e062      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d05e      	beq.n	8006262 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a4:	f7fb f994 	bl	80014d0 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d302      	bcc.n	80061ba <UART_WaitOnFlagUntilTimeout+0x30>
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d11d      	bne.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0201 	bic.w	r2, r2, #1
 80061d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e045      	b.n	8006282 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d02e      	beq.n	8006262 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006212:	d126      	bne.n	8006262 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800621c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800622c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0201 	bic.w	r2, r2, #1
 800623c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2220      	movs	r2, #32
 800624a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e00f      	b.n	8006282 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4013      	ands	r3, r2
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	429a      	cmp	r2, r3
 8006270:	bf0c      	ite	eq
 8006272:	2301      	moveq	r3, #1
 8006274:	2300      	movne	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	429a      	cmp	r2, r3
 800627e:	d08d      	beq.n	800619c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062be:	d10e      	bne.n	80062de <UART_Start_Receive_IT+0x52>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d105      	bne.n	80062d4 <UART_Start_Receive_IT+0x48>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062d2:	e02d      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	22ff      	movs	r2, #255	; 0xff
 80062d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062dc:	e028      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10d      	bne.n	8006302 <UART_Start_Receive_IT+0x76>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <UART_Start_Receive_IT+0x6c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	22ff      	movs	r2, #255	; 0xff
 80062f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062f6:	e01b      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	227f      	movs	r2, #127	; 0x7f
 80062fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006300:	e016      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800630a:	d10d      	bne.n	8006328 <UART_Start_Receive_IT+0x9c>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <UART_Start_Receive_IT+0x92>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	227f      	movs	r2, #127	; 0x7f
 8006318:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800631c:	e008      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	223f      	movs	r2, #63	; 0x3f
 8006322:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006326:	e003      	b.n	8006330 <UART_Start_Receive_IT+0xa4>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2222      	movs	r2, #34	; 0x22
 800633c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006358:	d12a      	bne.n	80063b0 <UART_Start_Receive_IT+0x124>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006360:	88fa      	ldrh	r2, [r7, #6]
 8006362:	429a      	cmp	r2, r3
 8006364:	d324      	bcc.n	80063b0 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636e:	d107      	bne.n	8006380 <UART_Start_Receive_IT+0xf4>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <UART_Start_Receive_IT+0x16c>)
 800637c:	671a      	str	r2, [r3, #112]	; 0x70
 800637e:	e002      	b.n	8006386 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <UART_Start_Receive_IT+0x170>)
 8006384:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800639c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80063ac:	609a      	str	r2, [r3, #8]
 80063ae:	e01b      	b.n	80063e8 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b8:	d107      	bne.n	80063ca <UART_Start_Receive_IT+0x13e>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a0e      	ldr	r2, [pc, #56]	; (8006400 <UART_Start_Receive_IT+0x174>)
 80063c6:	671a      	str	r2, [r3, #112]	; 0x70
 80063c8:	e002      	b.n	80063d0 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4a0d      	ldr	r2, [pc, #52]	; (8006404 <UART_Start_Receive_IT+0x178>)
 80063ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80063e6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	08006881 	.word	0x08006881
 80063fc:	0800667d 	.word	0x0800667d
 8006400:	080065a5 	.word	0x080065a5
 8006404:	080064cd 	.word	0x080064cd

08006408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800641e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6899      	ldr	r1, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <UART_EndRxTransfer+0x60>)
 800642c:	400b      	ands	r3, r1
 800642e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d107      	bne.n	8006448 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0210 	bic.w	r2, r2, #16
 8006446:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	effffffe 	.word	0xeffffffe

0800646c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff f81a 	bl	80054c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fe fff6 	bl	80054b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064da:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e2:	2b22      	cmp	r3, #34	; 0x22
 80064e4:	d152      	bne.n	800658c <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064ee:	89bb      	ldrh	r3, [r7, #12]
 80064f0:	b2d9      	uxtb	r1, r3
 80064f2:	89fb      	ldrh	r3, [r7, #14]
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fa:	400a      	ands	r2, r1
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d139      	bne.n	800659c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006536:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0201 	bic.w	r2, r2, #1
 8006546:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800655a:	2b01      	cmp	r3, #1
 800655c:	d10f      	bne.n	800657e <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0210 	bic.w	r2, r2, #16
 800656c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fe ffae 	bl	80054d8 <HAL_UARTEx_RxEventCallback>
 800657c:	e002      	b.n	8006584 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fa fb9c 	bl	8000cbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800658a:	e007      	b.n	800659c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0208 	orr.w	r2, r2, #8
 800659a:	619a      	str	r2, [r3, #24]
}
 800659c:	bf00      	nop
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80065b2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ba:	2b22      	cmp	r3, #34	; 0x22
 80065bc:	d152      	bne.n	8006664 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ca:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80065cc:	89ba      	ldrh	r2, [r7, #12]
 80065ce:	89fb      	ldrh	r3, [r7, #14]
 80065d0:	4013      	ands	r3, r2
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065dc:	1c9a      	adds	r2, r3, #2
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d139      	bne.n	8006674 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800660e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0201 	bic.w	r2, r2, #1
 800661e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2220      	movs	r2, #32
 8006624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10f      	bne.n	8006656 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0210 	bic.w	r2, r2, #16
 8006644:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fe ff42 	bl	80054d8 <HAL_UARTEx_RxEventCallback>
 8006654:	e002      	b.n	800665c <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fa fb30 	bl	8000cbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006662:	e007      	b.n	8006674 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699a      	ldr	r2, [r3, #24]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0208 	orr.w	r2, r2, #8
 8006672:	619a      	str	r2, [r3, #24]
}
 8006674:	bf00      	nop
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800668a:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066aa:	2b22      	cmp	r3, #34	; 0x22
 80066ac:	f040 80d8 	bne.w	8006860 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066b6:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066b8:	e0a8      	b.n	800680c <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066c2:	89bb      	ldrh	r3, [r7, #12]
 80066c4:	b2d9      	uxtb	r1, r3
 80066c6:	8b7b      	ldrh	r3, [r7, #26]
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ce:	400a      	ands	r2, r1
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d04d      	beq.n	800679e <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d010      	beq.n	800672e <UART_RxISR_8BIT_FIFOEN+0xb2>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2201      	movs	r2, #1
 800671c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006724:	f043 0201 	orr.w	r2, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d010      	beq.n	800675a <UART_RxISR_8BIT_FIFOEN+0xde>
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2202      	movs	r2, #2
 8006748:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006750:	f043 0204 	orr.w	r2, r3, #4
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d010      	beq.n	8006786 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00b      	beq.n	8006786 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2204      	movs	r2, #4
 8006774:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800677c:	f043 0202 	orr.w	r2, r3, #2
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d006      	beq.n	800679e <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7fe fe97 	bl	80054c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d130      	bne.n	800680c <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6899      	ldr	r1, [r3, #8]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4b2c      	ldr	r3, [pc, #176]	; (8006878 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 80067c6:	400b      	ands	r3, r1
 80067c8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d10f      	bne.n	8006800 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0210 	bic.w	r2, r2, #16
 80067ee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7fe fe6d 	bl	80054d8 <HAL_UARTEx_RxEventCallback>
 80067fe:	e002      	b.n	8006806 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7fa fa5b 	bl	8000cbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800680c:	89fb      	ldrh	r3, [r7, #14]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <UART_RxISR_8BIT_FIFOEN+0x1a2>
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	f47f af4e 	bne.w	80066ba <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006824:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006826:	897b      	ldrh	r3, [r7, #10]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d021      	beq.n	8006870 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006832:	897a      	ldrh	r2, [r7, #10]
 8006834:	429a      	cmp	r2, r3
 8006836:	d21b      	bcs.n	8006870 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006846:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a0c      	ldr	r2, [pc, #48]	; (800687c <UART_RxISR_8BIT_FIFOEN+0x200>)
 800684c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0220 	orr.w	r2, r2, #32
 800685c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800685e:	e007      	b.n	8006870 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	619a      	str	r2, [r3, #24]
}
 8006870:	bf00      	nop
 8006872:	3720      	adds	r7, #32
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	effffffe 	.word	0xeffffffe
 800687c:	080064cd 	.word	0x080064cd

08006880 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800688e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ae:	2b22      	cmp	r3, #34	; 0x22
 80068b0:	f040 80d8 	bne.w	8006a64 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068ba:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068bc:	e0a8      	b.n	8006a10 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80068cc:	8aba      	ldrh	r2, [r7, #20]
 80068ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068d0:	4013      	ands	r3, r2
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068dc:	1c9a      	adds	r2, r3, #2
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	2b00      	cmp	r3, #0
 8006904:	d04d      	beq.n	80069a2 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d010      	beq.n	8006932 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2201      	movs	r2, #1
 8006920:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006928:	f043 0201 	orr.w	r2, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d010      	beq.n	800695e <UART_RxISR_16BIT_FIFOEN+0xde>
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2202      	movs	r2, #2
 800694c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006954:	f043 0204 	orr.w	r2, r3, #4
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d010      	beq.n	800698a <UART_RxISR_16BIT_FIFOEN+0x10a>
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2204      	movs	r2, #4
 8006978:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006980:	f043 0202 	orr.w	r2, r3, #2
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7fe fd95 	bl	80054c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d130      	bne.n	8006a10 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069bc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6899      	ldr	r1, [r3, #8]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	4b2c      	ldr	r3, [pc, #176]	; (8006a7c <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 80069ca:	400b      	ands	r3, r1
 80069cc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d10f      	bne.n	8006a04 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0210 	bic.w	r2, r2, #16
 80069f2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7fe fd6b 	bl	80054d8 <HAL_UARTEx_RxEventCallback>
 8006a02:	e002      	b.n	8006a0a <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7fa f959 	bl	8000cbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a10:	8afb      	ldrh	r3, [r7, #22]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	f003 0320 	and.w	r3, r3, #32
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f47f af4e 	bne.w	80068be <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a28:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a2a:	89fb      	ldrh	r3, [r7, #14]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d021      	beq.n	8006a74 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a36:	89fa      	ldrh	r2, [r7, #14]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d21b      	bcs.n	8006a74 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a4a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a0c      	ldr	r2, [pc, #48]	; (8006a80 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8006a50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0220 	orr.w	r2, r2, #32
 8006a60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a62:	e007      	b.n	8006a74 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0208 	orr.w	r2, r2, #8
 8006a72:	619a      	str	r2, [r3, #24]
}
 8006a74:	bf00      	nop
 8006a76:	3728      	adds	r7, #40	; 0x28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	effffffe 	.word	0xeffffffe
 8006a80:	080065a5 	.word	0x080065a5

08006a84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e027      	b.n	8006b26 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2224      	movs	r2, #36	; 0x24
 8006ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0201 	bic.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e02d      	b.n	8006ba6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2224      	movs	r2, #36	; 0x24
 8006b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0201 	bic.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f850 	bl	8006c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e02d      	b.n	8006c22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2224      	movs	r2, #36	; 0x24
 8006bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f812 	bl	8006c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d108      	bne.n	8006c4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c4c:	e031      	b.n	8006cb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c4e:	2310      	movs	r3, #16
 8006c50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c52:	2310      	movs	r3, #16
 8006c54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	0e5b      	lsrs	r3, r3, #25
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	0f5b      	lsrs	r3, r3, #29
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	7b3a      	ldrb	r2, [r7, #12]
 8006c7a:	4911      	ldr	r1, [pc, #68]	; (8006cc0 <UARTEx_SetNbDataToProcess+0x94>)
 8006c7c:	5c8a      	ldrb	r2, [r1, r2]
 8006c7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c82:	7b3a      	ldrb	r2, [r7, #12]
 8006c84:	490f      	ldr	r1, [pc, #60]	; (8006cc4 <UARTEx_SetNbDataToProcess+0x98>)
 8006c86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c88:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	7b7a      	ldrb	r2, [r7, #13]
 8006c98:	4909      	ldr	r1, [pc, #36]	; (8006cc0 <UARTEx_SetNbDataToProcess+0x94>)
 8006c9a:	5c8a      	ldrb	r2, [r1, r2]
 8006c9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ca0:	7b7a      	ldrb	r2, [r7, #13]
 8006ca2:	4908      	ldr	r1, [pc, #32]	; (8006cc4 <UARTEx_SetNbDataToProcess+0x98>)
 8006ca4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ca6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006cb2:	bf00      	nop
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	080080b4 	.word	0x080080b4
 8006cc4:	080080bc 	.word	0x080080bc

08006cc8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	601a      	str	r2, [r3, #0]
}
 8006d04:	bf00      	nop
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6892      	ldr	r2, [r2, #8]
 8006d26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6852      	ldr	r2, [r2, #4]
 8006d30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d103      	bne.n	8006d44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	1e5a      	subs	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
	...

08006d70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d70:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <pxCurrentTCBConst2>)
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	6808      	ldr	r0, [r1, #0]
 8006d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	f380 8809 	msr	PSP, r0
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8811 	msr	BASEPRI, r0
 8006d8a:	4770      	bx	lr
 8006d8c:	f3af 8000 	nop.w

08006d90 <pxCurrentTCBConst2>:
 8006d90:	200000a0 	.word	0x200000a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
	...

08006da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006da0:	f3ef 8009 	mrs	r0, PSP
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <pxCurrentTCBConst>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	f01e 0f10 	tst.w	lr, #16
 8006db0:	bf08      	it	eq
 8006db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dba:	6010      	str	r0, [r2, #0]
 8006dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006dc4:	f380 8811 	msr	BASEPRI, r0
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f000 f8f4 	bl	8006fbc <vTaskSwitchContext>
 8006dd4:	f04f 0000 	mov.w	r0, #0
 8006dd8:	f380 8811 	msr	BASEPRI, r0
 8006ddc:	bc09      	pop	{r0, r3}
 8006dde:	6819      	ldr	r1, [r3, #0]
 8006de0:	6808      	ldr	r0, [r1, #0]
 8006de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de6:	f01e 0f10 	tst.w	lr, #16
 8006dea:	bf08      	it	eq
 8006dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006df0:	f380 8809 	msr	PSP, r0
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	f3af 8000 	nop.w

08006e00 <pxCurrentTCBConst>:
 8006e00:	200000a0 	.word	0x200000a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop

08006e08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e22:	f000 f813 	bl	8006e4c <xTaskIncrementTick>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e2c:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <xPortSysTickHandler+0x40>)
 8006e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	2300      	movs	r3, #0
 8006e36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e56:	4b4e      	ldr	r3, [pc, #312]	; (8006f90 <xTaskIncrementTick+0x144>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f040 808e 	bne.w	8006f7c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e60:	4b4c      	ldr	r3, [pc, #304]	; (8006f94 <xTaskIncrementTick+0x148>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e68:	4a4a      	ldr	r2, [pc, #296]	; (8006f94 <xTaskIncrementTick+0x148>)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d120      	bne.n	8006eb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e74:	4b48      	ldr	r3, [pc, #288]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	603b      	str	r3, [r7, #0]
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <xTaskIncrementTick+0x46>
 8006e94:	4b40      	ldr	r3, [pc, #256]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	4b40      	ldr	r3, [pc, #256]	; (8006f9c <xTaskIncrementTick+0x150>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a3e      	ldr	r2, [pc, #248]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	4a3e      	ldr	r2, [pc, #248]	; (8006f9c <xTaskIncrementTick+0x150>)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	4b3d      	ldr	r3, [pc, #244]	; (8006fa0 <xTaskIncrementTick+0x154>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3301      	adds	r3, #1
 8006eae:	4a3c      	ldr	r2, [pc, #240]	; (8006fa0 <xTaskIncrementTick+0x154>)
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	f000 f8df 	bl	8007074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006eb6:	4b3b      	ldr	r3, [pc, #236]	; (8006fa4 <xTaskIncrementTick+0x158>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d348      	bcc.n	8006f52 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ec0:	4b35      	ldr	r3, [pc, #212]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eca:	4b36      	ldr	r3, [pc, #216]	; (8006fa4 <xTaskIncrementTick+0x158>)
 8006ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed0:	601a      	str	r2, [r3, #0]
					break;
 8006ed2:	e03e      	b.n	8006f52 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed4:	4b30      	ldr	r3, [pc, #192]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d203      	bcs.n	8006ef4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006eec:	4a2d      	ldr	r2, [pc, #180]	; (8006fa4 <xTaskIncrementTick+0x158>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ef2:	e02e      	b.n	8006f52 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff ff09 	bl	8006d10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	3318      	adds	r3, #24
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff ff00 	bl	8006d10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	2201      	movs	r2, #1
 8006f16:	409a      	lsls	r2, r3
 8006f18:	4b23      	ldr	r3, [pc, #140]	; (8006fa8 <xTaskIncrementTick+0x15c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	4a22      	ldr	r2, [pc, #136]	; (8006fa8 <xTaskIncrementTick+0x15c>)
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <xTaskIncrementTick+0x160>)
 8006f30:	441a      	add	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4619      	mov	r1, r3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	f7ff fec5 	bl	8006cc8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f42:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <xTaskIncrementTick+0x164>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d3b9      	bcc.n	8006ec0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f50:	e7b6      	b.n	8006ec0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f52:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <xTaskIncrementTick+0x164>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f58:	4914      	ldr	r1, [pc, #80]	; (8006fac <xTaskIncrementTick+0x160>)
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d901      	bls.n	8006f6e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f6e:	4b11      	ldr	r3, [pc, #68]	; (8006fb4 <xTaskIncrementTick+0x168>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006f76:	2301      	movs	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	e004      	b.n	8006f86 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f7c:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <xTaskIncrementTick+0x16c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a0d      	ldr	r2, [pc, #52]	; (8006fb8 <xTaskIncrementTick+0x16c>)
 8006f84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f86:	697b      	ldr	r3, [r7, #20]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20000154 	.word	0x20000154
 8006f94:	20000138 	.word	0x20000138
 8006f98:	20000130 	.word	0x20000130
 8006f9c:	20000134 	.word	0x20000134
 8006fa0:	2000014c 	.word	0x2000014c
 8006fa4:	20000150 	.word	0x20000150
 8006fa8:	2000013c 	.word	0x2000013c
 8006fac:	200000a4 	.word	0x200000a4
 8006fb0:	200000a0 	.word	0x200000a0
 8006fb4:	20000148 	.word	0x20000148
 8006fb8:	20000144 	.word	0x20000144

08006fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fc2:	4b27      	ldr	r3, [pc, #156]	; (8007060 <vTaskSwitchContext+0xa4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fca:	4b26      	ldr	r3, [pc, #152]	; (8007064 <vTaskSwitchContext+0xa8>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fd0:	e03f      	b.n	8007052 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006fd2:	4b24      	ldr	r3, [pc, #144]	; (8007064 <vTaskSwitchContext+0xa8>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd8:	4b23      	ldr	r3, [pc, #140]	; (8007068 <vTaskSwitchContext+0xac>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	fab3 f383 	clz	r3, r3
 8006fe4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	f1c3 031f 	rsb	r3, r3, #31
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	491f      	ldr	r1, [pc, #124]	; (800706c <vTaskSwitchContext+0xb0>)
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10a      	bne.n	8007018 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	607b      	str	r3, [r7, #4]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <vTaskSwitchContext+0x5a>
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4a12      	ldr	r2, [pc, #72]	; (800706c <vTaskSwitchContext+0xb0>)
 8007024:	4413      	add	r3, r2
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	605a      	str	r2, [r3, #4]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	3308      	adds	r3, #8
 800703a:	429a      	cmp	r2, r3
 800703c:	d104      	bne.n	8007048 <vTaskSwitchContext+0x8c>
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	605a      	str	r2, [r3, #4]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	4a08      	ldr	r2, [pc, #32]	; (8007070 <vTaskSwitchContext+0xb4>)
 8007050:	6013      	str	r3, [r2, #0]
}
 8007052:	bf00      	nop
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000154 	.word	0x20000154
 8007064:	20000148 	.word	0x20000148
 8007068:	2000013c 	.word	0x2000013c
 800706c:	200000a4 	.word	0x200000a4
 8007070:	200000a0 	.word	0x200000a0

08007074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <prvResetNextTaskUnblockTime+0x38>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007084:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <prvResetNextTaskUnblockTime+0x3c>)
 8007086:	f04f 32ff 	mov.w	r2, #4294967295
 800708a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800708c:	e008      	b.n	80070a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708e:	4b07      	ldr	r3, [pc, #28]	; (80070ac <prvResetNextTaskUnblockTime+0x38>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	4a04      	ldr	r2, [pc, #16]	; (80070b0 <prvResetNextTaskUnblockTime+0x3c>)
 800709e:	6013      	str	r3, [r2, #0]
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20000130 	.word	0x20000130
 80070b0:	20000150 	.word	0x20000150

080070b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070ba:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <xTaskGetSchedulerState+0x34>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d102      	bne.n	80070c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070c2:	2301      	movs	r3, #1
 80070c4:	607b      	str	r3, [r7, #4]
 80070c6:	e008      	b.n	80070da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c8:	4b08      	ldr	r3, [pc, #32]	; (80070ec <xTaskGetSchedulerState+0x38>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070d0:	2302      	movs	r3, #2
 80070d2:	607b      	str	r3, [r7, #4]
 80070d4:	e001      	b.n	80070da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070d6:	2300      	movs	r3, #0
 80070d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070da:	687b      	ldr	r3, [r7, #4]
	}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	20000140 	.word	0x20000140
 80070ec:	20000154 	.word	0x20000154

080070f0 <__errno>:
 80070f0:	4b01      	ldr	r3, [pc, #4]	; (80070f8 <__errno+0x8>)
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	20000010 	.word	0x20000010

080070fc <__libc_init_array>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	4d0d      	ldr	r5, [pc, #52]	; (8007134 <__libc_init_array+0x38>)
 8007100:	4c0d      	ldr	r4, [pc, #52]	; (8007138 <__libc_init_array+0x3c>)
 8007102:	1b64      	subs	r4, r4, r5
 8007104:	10a4      	asrs	r4, r4, #2
 8007106:	2600      	movs	r6, #0
 8007108:	42a6      	cmp	r6, r4
 800710a:	d109      	bne.n	8007120 <__libc_init_array+0x24>
 800710c:	4d0b      	ldr	r5, [pc, #44]	; (800713c <__libc_init_array+0x40>)
 800710e:	4c0c      	ldr	r4, [pc, #48]	; (8007140 <__libc_init_array+0x44>)
 8007110:	f000 ff76 	bl	8008000 <_init>
 8007114:	1b64      	subs	r4, r4, r5
 8007116:	10a4      	asrs	r4, r4, #2
 8007118:	2600      	movs	r6, #0
 800711a:	42a6      	cmp	r6, r4
 800711c:	d105      	bne.n	800712a <__libc_init_array+0x2e>
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	f855 3b04 	ldr.w	r3, [r5], #4
 8007124:	4798      	blx	r3
 8007126:	3601      	adds	r6, #1
 8007128:	e7ee      	b.n	8007108 <__libc_init_array+0xc>
 800712a:	f855 3b04 	ldr.w	r3, [r5], #4
 800712e:	4798      	blx	r3
 8007130:	3601      	adds	r6, #1
 8007132:	e7f2      	b.n	800711a <__libc_init_array+0x1e>
 8007134:	08008164 	.word	0x08008164
 8007138:	08008164 	.word	0x08008164
 800713c:	08008164 	.word	0x08008164
 8007140:	08008168 	.word	0x08008168

08007144 <memset>:
 8007144:	4402      	add	r2, r0
 8007146:	4603      	mov	r3, r0
 8007148:	4293      	cmp	r3, r2
 800714a:	d100      	bne.n	800714e <memset+0xa>
 800714c:	4770      	bx	lr
 800714e:	f803 1b01 	strb.w	r1, [r3], #1
 8007152:	e7f9      	b.n	8007148 <memset+0x4>

08007154 <iprintf>:
 8007154:	b40f      	push	{r0, r1, r2, r3}
 8007156:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <iprintf+0x2c>)
 8007158:	b513      	push	{r0, r1, r4, lr}
 800715a:	681c      	ldr	r4, [r3, #0]
 800715c:	b124      	cbz	r4, 8007168 <iprintf+0x14>
 800715e:	69a3      	ldr	r3, [r4, #24]
 8007160:	b913      	cbnz	r3, 8007168 <iprintf+0x14>
 8007162:	4620      	mov	r0, r4
 8007164:	f000 f9e8 	bl	8007538 <__sinit>
 8007168:	ab05      	add	r3, sp, #20
 800716a:	9a04      	ldr	r2, [sp, #16]
 800716c:	68a1      	ldr	r1, [r4, #8]
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	4620      	mov	r0, r4
 8007172:	f000 fbb9 	bl	80078e8 <_vfiprintf_r>
 8007176:	b002      	add	sp, #8
 8007178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800717c:	b004      	add	sp, #16
 800717e:	4770      	bx	lr
 8007180:	20000010 	.word	0x20000010

08007184 <__swbuf_r>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	460e      	mov	r6, r1
 8007188:	4614      	mov	r4, r2
 800718a:	4605      	mov	r5, r0
 800718c:	b118      	cbz	r0, 8007196 <__swbuf_r+0x12>
 800718e:	6983      	ldr	r3, [r0, #24]
 8007190:	b90b      	cbnz	r3, 8007196 <__swbuf_r+0x12>
 8007192:	f000 f9d1 	bl	8007538 <__sinit>
 8007196:	4b21      	ldr	r3, [pc, #132]	; (800721c <__swbuf_r+0x98>)
 8007198:	429c      	cmp	r4, r3
 800719a:	d12b      	bne.n	80071f4 <__swbuf_r+0x70>
 800719c:	686c      	ldr	r4, [r5, #4]
 800719e:	69a3      	ldr	r3, [r4, #24]
 80071a0:	60a3      	str	r3, [r4, #8]
 80071a2:	89a3      	ldrh	r3, [r4, #12]
 80071a4:	071a      	lsls	r2, r3, #28
 80071a6:	d52f      	bpl.n	8007208 <__swbuf_r+0x84>
 80071a8:	6923      	ldr	r3, [r4, #16]
 80071aa:	b36b      	cbz	r3, 8007208 <__swbuf_r+0x84>
 80071ac:	6923      	ldr	r3, [r4, #16]
 80071ae:	6820      	ldr	r0, [r4, #0]
 80071b0:	1ac0      	subs	r0, r0, r3
 80071b2:	6963      	ldr	r3, [r4, #20]
 80071b4:	b2f6      	uxtb	r6, r6
 80071b6:	4283      	cmp	r3, r0
 80071b8:	4637      	mov	r7, r6
 80071ba:	dc04      	bgt.n	80071c6 <__swbuf_r+0x42>
 80071bc:	4621      	mov	r1, r4
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 f926 	bl	8007410 <_fflush_r>
 80071c4:	bb30      	cbnz	r0, 8007214 <__swbuf_r+0x90>
 80071c6:	68a3      	ldr	r3, [r4, #8]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	60a3      	str	r3, [r4, #8]
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	6022      	str	r2, [r4, #0]
 80071d2:	701e      	strb	r6, [r3, #0]
 80071d4:	6963      	ldr	r3, [r4, #20]
 80071d6:	3001      	adds	r0, #1
 80071d8:	4283      	cmp	r3, r0
 80071da:	d004      	beq.n	80071e6 <__swbuf_r+0x62>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	07db      	lsls	r3, r3, #31
 80071e0:	d506      	bpl.n	80071f0 <__swbuf_r+0x6c>
 80071e2:	2e0a      	cmp	r6, #10
 80071e4:	d104      	bne.n	80071f0 <__swbuf_r+0x6c>
 80071e6:	4621      	mov	r1, r4
 80071e8:	4628      	mov	r0, r5
 80071ea:	f000 f911 	bl	8007410 <_fflush_r>
 80071ee:	b988      	cbnz	r0, 8007214 <__swbuf_r+0x90>
 80071f0:	4638      	mov	r0, r7
 80071f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071f4:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <__swbuf_r+0x9c>)
 80071f6:	429c      	cmp	r4, r3
 80071f8:	d101      	bne.n	80071fe <__swbuf_r+0x7a>
 80071fa:	68ac      	ldr	r4, [r5, #8]
 80071fc:	e7cf      	b.n	800719e <__swbuf_r+0x1a>
 80071fe:	4b09      	ldr	r3, [pc, #36]	; (8007224 <__swbuf_r+0xa0>)
 8007200:	429c      	cmp	r4, r3
 8007202:	bf08      	it	eq
 8007204:	68ec      	ldreq	r4, [r5, #12]
 8007206:	e7ca      	b.n	800719e <__swbuf_r+0x1a>
 8007208:	4621      	mov	r1, r4
 800720a:	4628      	mov	r0, r5
 800720c:	f000 f80c 	bl	8007228 <__swsetup_r>
 8007210:	2800      	cmp	r0, #0
 8007212:	d0cb      	beq.n	80071ac <__swbuf_r+0x28>
 8007214:	f04f 37ff 	mov.w	r7, #4294967295
 8007218:	e7ea      	b.n	80071f0 <__swbuf_r+0x6c>
 800721a:	bf00      	nop
 800721c:	080080e8 	.word	0x080080e8
 8007220:	08008108 	.word	0x08008108
 8007224:	080080c8 	.word	0x080080c8

08007228 <__swsetup_r>:
 8007228:	4b32      	ldr	r3, [pc, #200]	; (80072f4 <__swsetup_r+0xcc>)
 800722a:	b570      	push	{r4, r5, r6, lr}
 800722c:	681d      	ldr	r5, [r3, #0]
 800722e:	4606      	mov	r6, r0
 8007230:	460c      	mov	r4, r1
 8007232:	b125      	cbz	r5, 800723e <__swsetup_r+0x16>
 8007234:	69ab      	ldr	r3, [r5, #24]
 8007236:	b913      	cbnz	r3, 800723e <__swsetup_r+0x16>
 8007238:	4628      	mov	r0, r5
 800723a:	f000 f97d 	bl	8007538 <__sinit>
 800723e:	4b2e      	ldr	r3, [pc, #184]	; (80072f8 <__swsetup_r+0xd0>)
 8007240:	429c      	cmp	r4, r3
 8007242:	d10f      	bne.n	8007264 <__swsetup_r+0x3c>
 8007244:	686c      	ldr	r4, [r5, #4]
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800724c:	0719      	lsls	r1, r3, #28
 800724e:	d42c      	bmi.n	80072aa <__swsetup_r+0x82>
 8007250:	06dd      	lsls	r5, r3, #27
 8007252:	d411      	bmi.n	8007278 <__swsetup_r+0x50>
 8007254:	2309      	movs	r3, #9
 8007256:	6033      	str	r3, [r6, #0]
 8007258:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800725c:	81a3      	strh	r3, [r4, #12]
 800725e:	f04f 30ff 	mov.w	r0, #4294967295
 8007262:	e03e      	b.n	80072e2 <__swsetup_r+0xba>
 8007264:	4b25      	ldr	r3, [pc, #148]	; (80072fc <__swsetup_r+0xd4>)
 8007266:	429c      	cmp	r4, r3
 8007268:	d101      	bne.n	800726e <__swsetup_r+0x46>
 800726a:	68ac      	ldr	r4, [r5, #8]
 800726c:	e7eb      	b.n	8007246 <__swsetup_r+0x1e>
 800726e:	4b24      	ldr	r3, [pc, #144]	; (8007300 <__swsetup_r+0xd8>)
 8007270:	429c      	cmp	r4, r3
 8007272:	bf08      	it	eq
 8007274:	68ec      	ldreq	r4, [r5, #12]
 8007276:	e7e6      	b.n	8007246 <__swsetup_r+0x1e>
 8007278:	0758      	lsls	r0, r3, #29
 800727a:	d512      	bpl.n	80072a2 <__swsetup_r+0x7a>
 800727c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800727e:	b141      	cbz	r1, 8007292 <__swsetup_r+0x6a>
 8007280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007284:	4299      	cmp	r1, r3
 8007286:	d002      	beq.n	800728e <__swsetup_r+0x66>
 8007288:	4630      	mov	r0, r6
 800728a:	f000 fa59 	bl	8007740 <_free_r>
 800728e:	2300      	movs	r3, #0
 8007290:	6363      	str	r3, [r4, #52]	; 0x34
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007298:	81a3      	strh	r3, [r4, #12]
 800729a:	2300      	movs	r3, #0
 800729c:	6063      	str	r3, [r4, #4]
 800729e:	6923      	ldr	r3, [r4, #16]
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	f043 0308 	orr.w	r3, r3, #8
 80072a8:	81a3      	strh	r3, [r4, #12]
 80072aa:	6923      	ldr	r3, [r4, #16]
 80072ac:	b94b      	cbnz	r3, 80072c2 <__swsetup_r+0x9a>
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b8:	d003      	beq.n	80072c2 <__swsetup_r+0x9a>
 80072ba:	4621      	mov	r1, r4
 80072bc:	4630      	mov	r0, r6
 80072be:	f000 f9ff 	bl	80076c0 <__smakebuf_r>
 80072c2:	89a0      	ldrh	r0, [r4, #12]
 80072c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072c8:	f010 0301 	ands.w	r3, r0, #1
 80072cc:	d00a      	beq.n	80072e4 <__swsetup_r+0xbc>
 80072ce:	2300      	movs	r3, #0
 80072d0:	60a3      	str	r3, [r4, #8]
 80072d2:	6963      	ldr	r3, [r4, #20]
 80072d4:	425b      	negs	r3, r3
 80072d6:	61a3      	str	r3, [r4, #24]
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	b943      	cbnz	r3, 80072ee <__swsetup_r+0xc6>
 80072dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072e0:	d1ba      	bne.n	8007258 <__swsetup_r+0x30>
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	0781      	lsls	r1, r0, #30
 80072e6:	bf58      	it	pl
 80072e8:	6963      	ldrpl	r3, [r4, #20]
 80072ea:	60a3      	str	r3, [r4, #8]
 80072ec:	e7f4      	b.n	80072d8 <__swsetup_r+0xb0>
 80072ee:	2000      	movs	r0, #0
 80072f0:	e7f7      	b.n	80072e2 <__swsetup_r+0xba>
 80072f2:	bf00      	nop
 80072f4:	20000010 	.word	0x20000010
 80072f8:	080080e8 	.word	0x080080e8
 80072fc:	08008108 	.word	0x08008108
 8007300:	080080c8 	.word	0x080080c8

08007304 <__sflush_r>:
 8007304:	898a      	ldrh	r2, [r1, #12]
 8007306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730a:	4605      	mov	r5, r0
 800730c:	0710      	lsls	r0, r2, #28
 800730e:	460c      	mov	r4, r1
 8007310:	d458      	bmi.n	80073c4 <__sflush_r+0xc0>
 8007312:	684b      	ldr	r3, [r1, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	dc05      	bgt.n	8007324 <__sflush_r+0x20>
 8007318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	dc02      	bgt.n	8007324 <__sflush_r+0x20>
 800731e:	2000      	movs	r0, #0
 8007320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007326:	2e00      	cmp	r6, #0
 8007328:	d0f9      	beq.n	800731e <__sflush_r+0x1a>
 800732a:	2300      	movs	r3, #0
 800732c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007330:	682f      	ldr	r7, [r5, #0]
 8007332:	602b      	str	r3, [r5, #0]
 8007334:	d032      	beq.n	800739c <__sflush_r+0x98>
 8007336:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	075a      	lsls	r2, r3, #29
 800733c:	d505      	bpl.n	800734a <__sflush_r+0x46>
 800733e:	6863      	ldr	r3, [r4, #4]
 8007340:	1ac0      	subs	r0, r0, r3
 8007342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007344:	b10b      	cbz	r3, 800734a <__sflush_r+0x46>
 8007346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007348:	1ac0      	subs	r0, r0, r3
 800734a:	2300      	movs	r3, #0
 800734c:	4602      	mov	r2, r0
 800734e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007350:	6a21      	ldr	r1, [r4, #32]
 8007352:	4628      	mov	r0, r5
 8007354:	47b0      	blx	r6
 8007356:	1c43      	adds	r3, r0, #1
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	d106      	bne.n	800736a <__sflush_r+0x66>
 800735c:	6829      	ldr	r1, [r5, #0]
 800735e:	291d      	cmp	r1, #29
 8007360:	d82c      	bhi.n	80073bc <__sflush_r+0xb8>
 8007362:	4a2a      	ldr	r2, [pc, #168]	; (800740c <__sflush_r+0x108>)
 8007364:	40ca      	lsrs	r2, r1
 8007366:	07d6      	lsls	r6, r2, #31
 8007368:	d528      	bpl.n	80073bc <__sflush_r+0xb8>
 800736a:	2200      	movs	r2, #0
 800736c:	6062      	str	r2, [r4, #4]
 800736e:	04d9      	lsls	r1, r3, #19
 8007370:	6922      	ldr	r2, [r4, #16]
 8007372:	6022      	str	r2, [r4, #0]
 8007374:	d504      	bpl.n	8007380 <__sflush_r+0x7c>
 8007376:	1c42      	adds	r2, r0, #1
 8007378:	d101      	bne.n	800737e <__sflush_r+0x7a>
 800737a:	682b      	ldr	r3, [r5, #0]
 800737c:	b903      	cbnz	r3, 8007380 <__sflush_r+0x7c>
 800737e:	6560      	str	r0, [r4, #84]	; 0x54
 8007380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007382:	602f      	str	r7, [r5, #0]
 8007384:	2900      	cmp	r1, #0
 8007386:	d0ca      	beq.n	800731e <__sflush_r+0x1a>
 8007388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800738c:	4299      	cmp	r1, r3
 800738e:	d002      	beq.n	8007396 <__sflush_r+0x92>
 8007390:	4628      	mov	r0, r5
 8007392:	f000 f9d5 	bl	8007740 <_free_r>
 8007396:	2000      	movs	r0, #0
 8007398:	6360      	str	r0, [r4, #52]	; 0x34
 800739a:	e7c1      	b.n	8007320 <__sflush_r+0x1c>
 800739c:	6a21      	ldr	r1, [r4, #32]
 800739e:	2301      	movs	r3, #1
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b0      	blx	r6
 80073a4:	1c41      	adds	r1, r0, #1
 80073a6:	d1c7      	bne.n	8007338 <__sflush_r+0x34>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0c4      	beq.n	8007338 <__sflush_r+0x34>
 80073ae:	2b1d      	cmp	r3, #29
 80073b0:	d001      	beq.n	80073b6 <__sflush_r+0xb2>
 80073b2:	2b16      	cmp	r3, #22
 80073b4:	d101      	bne.n	80073ba <__sflush_r+0xb6>
 80073b6:	602f      	str	r7, [r5, #0]
 80073b8:	e7b1      	b.n	800731e <__sflush_r+0x1a>
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c0:	81a3      	strh	r3, [r4, #12]
 80073c2:	e7ad      	b.n	8007320 <__sflush_r+0x1c>
 80073c4:	690f      	ldr	r7, [r1, #16]
 80073c6:	2f00      	cmp	r7, #0
 80073c8:	d0a9      	beq.n	800731e <__sflush_r+0x1a>
 80073ca:	0793      	lsls	r3, r2, #30
 80073cc:	680e      	ldr	r6, [r1, #0]
 80073ce:	bf08      	it	eq
 80073d0:	694b      	ldreq	r3, [r1, #20]
 80073d2:	600f      	str	r7, [r1, #0]
 80073d4:	bf18      	it	ne
 80073d6:	2300      	movne	r3, #0
 80073d8:	eba6 0807 	sub.w	r8, r6, r7
 80073dc:	608b      	str	r3, [r1, #8]
 80073de:	f1b8 0f00 	cmp.w	r8, #0
 80073e2:	dd9c      	ble.n	800731e <__sflush_r+0x1a>
 80073e4:	6a21      	ldr	r1, [r4, #32]
 80073e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073e8:	4643      	mov	r3, r8
 80073ea:	463a      	mov	r2, r7
 80073ec:	4628      	mov	r0, r5
 80073ee:	47b0      	blx	r6
 80073f0:	2800      	cmp	r0, #0
 80073f2:	dc06      	bgt.n	8007402 <__sflush_r+0xfe>
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	e78e      	b.n	8007320 <__sflush_r+0x1c>
 8007402:	4407      	add	r7, r0
 8007404:	eba8 0800 	sub.w	r8, r8, r0
 8007408:	e7e9      	b.n	80073de <__sflush_r+0xda>
 800740a:	bf00      	nop
 800740c:	20400001 	.word	0x20400001

08007410 <_fflush_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	690b      	ldr	r3, [r1, #16]
 8007414:	4605      	mov	r5, r0
 8007416:	460c      	mov	r4, r1
 8007418:	b913      	cbnz	r3, 8007420 <_fflush_r+0x10>
 800741a:	2500      	movs	r5, #0
 800741c:	4628      	mov	r0, r5
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	b118      	cbz	r0, 800742a <_fflush_r+0x1a>
 8007422:	6983      	ldr	r3, [r0, #24]
 8007424:	b90b      	cbnz	r3, 800742a <_fflush_r+0x1a>
 8007426:	f000 f887 	bl	8007538 <__sinit>
 800742a:	4b14      	ldr	r3, [pc, #80]	; (800747c <_fflush_r+0x6c>)
 800742c:	429c      	cmp	r4, r3
 800742e:	d11b      	bne.n	8007468 <_fflush_r+0x58>
 8007430:	686c      	ldr	r4, [r5, #4]
 8007432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0ef      	beq.n	800741a <_fflush_r+0xa>
 800743a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800743c:	07d0      	lsls	r0, r2, #31
 800743e:	d404      	bmi.n	800744a <_fflush_r+0x3a>
 8007440:	0599      	lsls	r1, r3, #22
 8007442:	d402      	bmi.n	800744a <_fflush_r+0x3a>
 8007444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007446:	f000 f915 	bl	8007674 <__retarget_lock_acquire_recursive>
 800744a:	4628      	mov	r0, r5
 800744c:	4621      	mov	r1, r4
 800744e:	f7ff ff59 	bl	8007304 <__sflush_r>
 8007452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007454:	07da      	lsls	r2, r3, #31
 8007456:	4605      	mov	r5, r0
 8007458:	d4e0      	bmi.n	800741c <_fflush_r+0xc>
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	059b      	lsls	r3, r3, #22
 800745e:	d4dd      	bmi.n	800741c <_fflush_r+0xc>
 8007460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007462:	f000 f908 	bl	8007676 <__retarget_lock_release_recursive>
 8007466:	e7d9      	b.n	800741c <_fflush_r+0xc>
 8007468:	4b05      	ldr	r3, [pc, #20]	; (8007480 <_fflush_r+0x70>)
 800746a:	429c      	cmp	r4, r3
 800746c:	d101      	bne.n	8007472 <_fflush_r+0x62>
 800746e:	68ac      	ldr	r4, [r5, #8]
 8007470:	e7df      	b.n	8007432 <_fflush_r+0x22>
 8007472:	4b04      	ldr	r3, [pc, #16]	; (8007484 <_fflush_r+0x74>)
 8007474:	429c      	cmp	r4, r3
 8007476:	bf08      	it	eq
 8007478:	68ec      	ldreq	r4, [r5, #12]
 800747a:	e7da      	b.n	8007432 <_fflush_r+0x22>
 800747c:	080080e8 	.word	0x080080e8
 8007480:	08008108 	.word	0x08008108
 8007484:	080080c8 	.word	0x080080c8

08007488 <std>:
 8007488:	2300      	movs	r3, #0
 800748a:	b510      	push	{r4, lr}
 800748c:	4604      	mov	r4, r0
 800748e:	e9c0 3300 	strd	r3, r3, [r0]
 8007492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007496:	6083      	str	r3, [r0, #8]
 8007498:	8181      	strh	r1, [r0, #12]
 800749a:	6643      	str	r3, [r0, #100]	; 0x64
 800749c:	81c2      	strh	r2, [r0, #14]
 800749e:	6183      	str	r3, [r0, #24]
 80074a0:	4619      	mov	r1, r3
 80074a2:	2208      	movs	r2, #8
 80074a4:	305c      	adds	r0, #92	; 0x5c
 80074a6:	f7ff fe4d 	bl	8007144 <memset>
 80074aa:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <std+0x38>)
 80074ac:	6263      	str	r3, [r4, #36]	; 0x24
 80074ae:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <std+0x3c>)
 80074b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80074b2:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <std+0x40>)
 80074b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074b6:	4b05      	ldr	r3, [pc, #20]	; (80074cc <std+0x44>)
 80074b8:	6224      	str	r4, [r4, #32]
 80074ba:	6323      	str	r3, [r4, #48]	; 0x30
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	bf00      	nop
 80074c0:	08007e91 	.word	0x08007e91
 80074c4:	08007eb3 	.word	0x08007eb3
 80074c8:	08007eeb 	.word	0x08007eeb
 80074cc:	08007f0f 	.word	0x08007f0f

080074d0 <_cleanup_r>:
 80074d0:	4901      	ldr	r1, [pc, #4]	; (80074d8 <_cleanup_r+0x8>)
 80074d2:	f000 b8af 	b.w	8007634 <_fwalk_reent>
 80074d6:	bf00      	nop
 80074d8:	08007411 	.word	0x08007411

080074dc <__sfmoreglue>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	1e4a      	subs	r2, r1, #1
 80074e0:	2568      	movs	r5, #104	; 0x68
 80074e2:	4355      	muls	r5, r2
 80074e4:	460e      	mov	r6, r1
 80074e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074ea:	f000 f979 	bl	80077e0 <_malloc_r>
 80074ee:	4604      	mov	r4, r0
 80074f0:	b140      	cbz	r0, 8007504 <__sfmoreglue+0x28>
 80074f2:	2100      	movs	r1, #0
 80074f4:	e9c0 1600 	strd	r1, r6, [r0]
 80074f8:	300c      	adds	r0, #12
 80074fa:	60a0      	str	r0, [r4, #8]
 80074fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007500:	f7ff fe20 	bl	8007144 <memset>
 8007504:	4620      	mov	r0, r4
 8007506:	bd70      	pop	{r4, r5, r6, pc}

08007508 <__sfp_lock_acquire>:
 8007508:	4801      	ldr	r0, [pc, #4]	; (8007510 <__sfp_lock_acquire+0x8>)
 800750a:	f000 b8b3 	b.w	8007674 <__retarget_lock_acquire_recursive>
 800750e:	bf00      	nop
 8007510:	200003c8 	.word	0x200003c8

08007514 <__sfp_lock_release>:
 8007514:	4801      	ldr	r0, [pc, #4]	; (800751c <__sfp_lock_release+0x8>)
 8007516:	f000 b8ae 	b.w	8007676 <__retarget_lock_release_recursive>
 800751a:	bf00      	nop
 800751c:	200003c8 	.word	0x200003c8

08007520 <__sinit_lock_acquire>:
 8007520:	4801      	ldr	r0, [pc, #4]	; (8007528 <__sinit_lock_acquire+0x8>)
 8007522:	f000 b8a7 	b.w	8007674 <__retarget_lock_acquire_recursive>
 8007526:	bf00      	nop
 8007528:	200003c3 	.word	0x200003c3

0800752c <__sinit_lock_release>:
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <__sinit_lock_release+0x8>)
 800752e:	f000 b8a2 	b.w	8007676 <__retarget_lock_release_recursive>
 8007532:	bf00      	nop
 8007534:	200003c3 	.word	0x200003c3

08007538 <__sinit>:
 8007538:	b510      	push	{r4, lr}
 800753a:	4604      	mov	r4, r0
 800753c:	f7ff fff0 	bl	8007520 <__sinit_lock_acquire>
 8007540:	69a3      	ldr	r3, [r4, #24]
 8007542:	b11b      	cbz	r3, 800754c <__sinit+0x14>
 8007544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007548:	f7ff bff0 	b.w	800752c <__sinit_lock_release>
 800754c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007550:	6523      	str	r3, [r4, #80]	; 0x50
 8007552:	4b13      	ldr	r3, [pc, #76]	; (80075a0 <__sinit+0x68>)
 8007554:	4a13      	ldr	r2, [pc, #76]	; (80075a4 <__sinit+0x6c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	62a2      	str	r2, [r4, #40]	; 0x28
 800755a:	42a3      	cmp	r3, r4
 800755c:	bf04      	itt	eq
 800755e:	2301      	moveq	r3, #1
 8007560:	61a3      	streq	r3, [r4, #24]
 8007562:	4620      	mov	r0, r4
 8007564:	f000 f820 	bl	80075a8 <__sfp>
 8007568:	6060      	str	r0, [r4, #4]
 800756a:	4620      	mov	r0, r4
 800756c:	f000 f81c 	bl	80075a8 <__sfp>
 8007570:	60a0      	str	r0, [r4, #8]
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f818 	bl	80075a8 <__sfp>
 8007578:	2200      	movs	r2, #0
 800757a:	60e0      	str	r0, [r4, #12]
 800757c:	2104      	movs	r1, #4
 800757e:	6860      	ldr	r0, [r4, #4]
 8007580:	f7ff ff82 	bl	8007488 <std>
 8007584:	68a0      	ldr	r0, [r4, #8]
 8007586:	2201      	movs	r2, #1
 8007588:	2109      	movs	r1, #9
 800758a:	f7ff ff7d 	bl	8007488 <std>
 800758e:	68e0      	ldr	r0, [r4, #12]
 8007590:	2202      	movs	r2, #2
 8007592:	2112      	movs	r1, #18
 8007594:	f7ff ff78 	bl	8007488 <std>
 8007598:	2301      	movs	r3, #1
 800759a:	61a3      	str	r3, [r4, #24]
 800759c:	e7d2      	b.n	8007544 <__sinit+0xc>
 800759e:	bf00      	nop
 80075a0:	080080c4 	.word	0x080080c4
 80075a4:	080074d1 	.word	0x080074d1

080075a8 <__sfp>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	4607      	mov	r7, r0
 80075ac:	f7ff ffac 	bl	8007508 <__sfp_lock_acquire>
 80075b0:	4b1e      	ldr	r3, [pc, #120]	; (800762c <__sfp+0x84>)
 80075b2:	681e      	ldr	r6, [r3, #0]
 80075b4:	69b3      	ldr	r3, [r6, #24]
 80075b6:	b913      	cbnz	r3, 80075be <__sfp+0x16>
 80075b8:	4630      	mov	r0, r6
 80075ba:	f7ff ffbd 	bl	8007538 <__sinit>
 80075be:	3648      	adds	r6, #72	; 0x48
 80075c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	d503      	bpl.n	80075d0 <__sfp+0x28>
 80075c8:	6833      	ldr	r3, [r6, #0]
 80075ca:	b30b      	cbz	r3, 8007610 <__sfp+0x68>
 80075cc:	6836      	ldr	r6, [r6, #0]
 80075ce:	e7f7      	b.n	80075c0 <__sfp+0x18>
 80075d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075d4:	b9d5      	cbnz	r5, 800760c <__sfp+0x64>
 80075d6:	4b16      	ldr	r3, [pc, #88]	; (8007630 <__sfp+0x88>)
 80075d8:	60e3      	str	r3, [r4, #12]
 80075da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075de:	6665      	str	r5, [r4, #100]	; 0x64
 80075e0:	f000 f847 	bl	8007672 <__retarget_lock_init_recursive>
 80075e4:	f7ff ff96 	bl	8007514 <__sfp_lock_release>
 80075e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075f0:	6025      	str	r5, [r4, #0]
 80075f2:	61a5      	str	r5, [r4, #24]
 80075f4:	2208      	movs	r2, #8
 80075f6:	4629      	mov	r1, r5
 80075f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075fc:	f7ff fda2 	bl	8007144 <memset>
 8007600:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007604:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007608:	4620      	mov	r0, r4
 800760a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800760c:	3468      	adds	r4, #104	; 0x68
 800760e:	e7d9      	b.n	80075c4 <__sfp+0x1c>
 8007610:	2104      	movs	r1, #4
 8007612:	4638      	mov	r0, r7
 8007614:	f7ff ff62 	bl	80074dc <__sfmoreglue>
 8007618:	4604      	mov	r4, r0
 800761a:	6030      	str	r0, [r6, #0]
 800761c:	2800      	cmp	r0, #0
 800761e:	d1d5      	bne.n	80075cc <__sfp+0x24>
 8007620:	f7ff ff78 	bl	8007514 <__sfp_lock_release>
 8007624:	230c      	movs	r3, #12
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	e7ee      	b.n	8007608 <__sfp+0x60>
 800762a:	bf00      	nop
 800762c:	080080c4 	.word	0x080080c4
 8007630:	ffff0001 	.word	0xffff0001

08007634 <_fwalk_reent>:
 8007634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007638:	4606      	mov	r6, r0
 800763a:	4688      	mov	r8, r1
 800763c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007640:	2700      	movs	r7, #0
 8007642:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007646:	f1b9 0901 	subs.w	r9, r9, #1
 800764a:	d505      	bpl.n	8007658 <_fwalk_reent+0x24>
 800764c:	6824      	ldr	r4, [r4, #0]
 800764e:	2c00      	cmp	r4, #0
 8007650:	d1f7      	bne.n	8007642 <_fwalk_reent+0xe>
 8007652:	4638      	mov	r0, r7
 8007654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007658:	89ab      	ldrh	r3, [r5, #12]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d907      	bls.n	800766e <_fwalk_reent+0x3a>
 800765e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007662:	3301      	adds	r3, #1
 8007664:	d003      	beq.n	800766e <_fwalk_reent+0x3a>
 8007666:	4629      	mov	r1, r5
 8007668:	4630      	mov	r0, r6
 800766a:	47c0      	blx	r8
 800766c:	4307      	orrs	r7, r0
 800766e:	3568      	adds	r5, #104	; 0x68
 8007670:	e7e9      	b.n	8007646 <_fwalk_reent+0x12>

08007672 <__retarget_lock_init_recursive>:
 8007672:	4770      	bx	lr

08007674 <__retarget_lock_acquire_recursive>:
 8007674:	4770      	bx	lr

08007676 <__retarget_lock_release_recursive>:
 8007676:	4770      	bx	lr

08007678 <__swhatbuf_r>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	460e      	mov	r6, r1
 800767c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007680:	2900      	cmp	r1, #0
 8007682:	b096      	sub	sp, #88	; 0x58
 8007684:	4614      	mov	r4, r2
 8007686:	461d      	mov	r5, r3
 8007688:	da07      	bge.n	800769a <__swhatbuf_r+0x22>
 800768a:	2300      	movs	r3, #0
 800768c:	602b      	str	r3, [r5, #0]
 800768e:	89b3      	ldrh	r3, [r6, #12]
 8007690:	061a      	lsls	r2, r3, #24
 8007692:	d410      	bmi.n	80076b6 <__swhatbuf_r+0x3e>
 8007694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007698:	e00e      	b.n	80076b8 <__swhatbuf_r+0x40>
 800769a:	466a      	mov	r2, sp
 800769c:	f000 fc5e 	bl	8007f5c <_fstat_r>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	dbf2      	blt.n	800768a <__swhatbuf_r+0x12>
 80076a4:	9a01      	ldr	r2, [sp, #4]
 80076a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076ae:	425a      	negs	r2, r3
 80076b0:	415a      	adcs	r2, r3
 80076b2:	602a      	str	r2, [r5, #0]
 80076b4:	e7ee      	b.n	8007694 <__swhatbuf_r+0x1c>
 80076b6:	2340      	movs	r3, #64	; 0x40
 80076b8:	2000      	movs	r0, #0
 80076ba:	6023      	str	r3, [r4, #0]
 80076bc:	b016      	add	sp, #88	; 0x58
 80076be:	bd70      	pop	{r4, r5, r6, pc}

080076c0 <__smakebuf_r>:
 80076c0:	898b      	ldrh	r3, [r1, #12]
 80076c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076c4:	079d      	lsls	r5, r3, #30
 80076c6:	4606      	mov	r6, r0
 80076c8:	460c      	mov	r4, r1
 80076ca:	d507      	bpl.n	80076dc <__smakebuf_r+0x1c>
 80076cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	6123      	str	r3, [r4, #16]
 80076d4:	2301      	movs	r3, #1
 80076d6:	6163      	str	r3, [r4, #20]
 80076d8:	b002      	add	sp, #8
 80076da:	bd70      	pop	{r4, r5, r6, pc}
 80076dc:	ab01      	add	r3, sp, #4
 80076de:	466a      	mov	r2, sp
 80076e0:	f7ff ffca 	bl	8007678 <__swhatbuf_r>
 80076e4:	9900      	ldr	r1, [sp, #0]
 80076e6:	4605      	mov	r5, r0
 80076e8:	4630      	mov	r0, r6
 80076ea:	f000 f879 	bl	80077e0 <_malloc_r>
 80076ee:	b948      	cbnz	r0, 8007704 <__smakebuf_r+0x44>
 80076f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f4:	059a      	lsls	r2, r3, #22
 80076f6:	d4ef      	bmi.n	80076d8 <__smakebuf_r+0x18>
 80076f8:	f023 0303 	bic.w	r3, r3, #3
 80076fc:	f043 0302 	orr.w	r3, r3, #2
 8007700:	81a3      	strh	r3, [r4, #12]
 8007702:	e7e3      	b.n	80076cc <__smakebuf_r+0xc>
 8007704:	4b0d      	ldr	r3, [pc, #52]	; (800773c <__smakebuf_r+0x7c>)
 8007706:	62b3      	str	r3, [r6, #40]	; 0x28
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	6020      	str	r0, [r4, #0]
 800770c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007710:	81a3      	strh	r3, [r4, #12]
 8007712:	9b00      	ldr	r3, [sp, #0]
 8007714:	6163      	str	r3, [r4, #20]
 8007716:	9b01      	ldr	r3, [sp, #4]
 8007718:	6120      	str	r0, [r4, #16]
 800771a:	b15b      	cbz	r3, 8007734 <__smakebuf_r+0x74>
 800771c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007720:	4630      	mov	r0, r6
 8007722:	f000 fc2d 	bl	8007f80 <_isatty_r>
 8007726:	b128      	cbz	r0, 8007734 <__smakebuf_r+0x74>
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	f023 0303 	bic.w	r3, r3, #3
 800772e:	f043 0301 	orr.w	r3, r3, #1
 8007732:	81a3      	strh	r3, [r4, #12]
 8007734:	89a0      	ldrh	r0, [r4, #12]
 8007736:	4305      	orrs	r5, r0
 8007738:	81a5      	strh	r5, [r4, #12]
 800773a:	e7cd      	b.n	80076d8 <__smakebuf_r+0x18>
 800773c:	080074d1 	.word	0x080074d1

08007740 <_free_r>:
 8007740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007742:	2900      	cmp	r1, #0
 8007744:	d048      	beq.n	80077d8 <_free_r+0x98>
 8007746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800774a:	9001      	str	r0, [sp, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f1a1 0404 	sub.w	r4, r1, #4
 8007752:	bfb8      	it	lt
 8007754:	18e4      	addlt	r4, r4, r3
 8007756:	f000 fc35 	bl	8007fc4 <__malloc_lock>
 800775a:	4a20      	ldr	r2, [pc, #128]	; (80077dc <_free_r+0x9c>)
 800775c:	9801      	ldr	r0, [sp, #4]
 800775e:	6813      	ldr	r3, [r2, #0]
 8007760:	4615      	mov	r5, r2
 8007762:	b933      	cbnz	r3, 8007772 <_free_r+0x32>
 8007764:	6063      	str	r3, [r4, #4]
 8007766:	6014      	str	r4, [r2, #0]
 8007768:	b003      	add	sp, #12
 800776a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800776e:	f000 bc2f 	b.w	8007fd0 <__malloc_unlock>
 8007772:	42a3      	cmp	r3, r4
 8007774:	d90b      	bls.n	800778e <_free_r+0x4e>
 8007776:	6821      	ldr	r1, [r4, #0]
 8007778:	1862      	adds	r2, r4, r1
 800777a:	4293      	cmp	r3, r2
 800777c:	bf04      	itt	eq
 800777e:	681a      	ldreq	r2, [r3, #0]
 8007780:	685b      	ldreq	r3, [r3, #4]
 8007782:	6063      	str	r3, [r4, #4]
 8007784:	bf04      	itt	eq
 8007786:	1852      	addeq	r2, r2, r1
 8007788:	6022      	streq	r2, [r4, #0]
 800778a:	602c      	str	r4, [r5, #0]
 800778c:	e7ec      	b.n	8007768 <_free_r+0x28>
 800778e:	461a      	mov	r2, r3
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	b10b      	cbz	r3, 8007798 <_free_r+0x58>
 8007794:	42a3      	cmp	r3, r4
 8007796:	d9fa      	bls.n	800778e <_free_r+0x4e>
 8007798:	6811      	ldr	r1, [r2, #0]
 800779a:	1855      	adds	r5, r2, r1
 800779c:	42a5      	cmp	r5, r4
 800779e:	d10b      	bne.n	80077b8 <_free_r+0x78>
 80077a0:	6824      	ldr	r4, [r4, #0]
 80077a2:	4421      	add	r1, r4
 80077a4:	1854      	adds	r4, r2, r1
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	6011      	str	r1, [r2, #0]
 80077aa:	d1dd      	bne.n	8007768 <_free_r+0x28>
 80077ac:	681c      	ldr	r4, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	6053      	str	r3, [r2, #4]
 80077b2:	4421      	add	r1, r4
 80077b4:	6011      	str	r1, [r2, #0]
 80077b6:	e7d7      	b.n	8007768 <_free_r+0x28>
 80077b8:	d902      	bls.n	80077c0 <_free_r+0x80>
 80077ba:	230c      	movs	r3, #12
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	e7d3      	b.n	8007768 <_free_r+0x28>
 80077c0:	6825      	ldr	r5, [r4, #0]
 80077c2:	1961      	adds	r1, r4, r5
 80077c4:	428b      	cmp	r3, r1
 80077c6:	bf04      	itt	eq
 80077c8:	6819      	ldreq	r1, [r3, #0]
 80077ca:	685b      	ldreq	r3, [r3, #4]
 80077cc:	6063      	str	r3, [r4, #4]
 80077ce:	bf04      	itt	eq
 80077d0:	1949      	addeq	r1, r1, r5
 80077d2:	6021      	streq	r1, [r4, #0]
 80077d4:	6054      	str	r4, [r2, #4]
 80077d6:	e7c7      	b.n	8007768 <_free_r+0x28>
 80077d8:	b003      	add	sp, #12
 80077da:	bd30      	pop	{r4, r5, pc}
 80077dc:	20000158 	.word	0x20000158

080077e0 <_malloc_r>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	1ccd      	adds	r5, r1, #3
 80077e4:	f025 0503 	bic.w	r5, r5, #3
 80077e8:	3508      	adds	r5, #8
 80077ea:	2d0c      	cmp	r5, #12
 80077ec:	bf38      	it	cc
 80077ee:	250c      	movcc	r5, #12
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	4606      	mov	r6, r0
 80077f4:	db01      	blt.n	80077fa <_malloc_r+0x1a>
 80077f6:	42a9      	cmp	r1, r5
 80077f8:	d903      	bls.n	8007802 <_malloc_r+0x22>
 80077fa:	230c      	movs	r3, #12
 80077fc:	6033      	str	r3, [r6, #0]
 80077fe:	2000      	movs	r0, #0
 8007800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007802:	f000 fbdf 	bl	8007fc4 <__malloc_lock>
 8007806:	4921      	ldr	r1, [pc, #132]	; (800788c <_malloc_r+0xac>)
 8007808:	680a      	ldr	r2, [r1, #0]
 800780a:	4614      	mov	r4, r2
 800780c:	b99c      	cbnz	r4, 8007836 <_malloc_r+0x56>
 800780e:	4f20      	ldr	r7, [pc, #128]	; (8007890 <_malloc_r+0xb0>)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	b923      	cbnz	r3, 800781e <_malloc_r+0x3e>
 8007814:	4621      	mov	r1, r4
 8007816:	4630      	mov	r0, r6
 8007818:	f000 fb2a 	bl	8007e70 <_sbrk_r>
 800781c:	6038      	str	r0, [r7, #0]
 800781e:	4629      	mov	r1, r5
 8007820:	4630      	mov	r0, r6
 8007822:	f000 fb25 	bl	8007e70 <_sbrk_r>
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	d123      	bne.n	8007872 <_malloc_r+0x92>
 800782a:	230c      	movs	r3, #12
 800782c:	6033      	str	r3, [r6, #0]
 800782e:	4630      	mov	r0, r6
 8007830:	f000 fbce 	bl	8007fd0 <__malloc_unlock>
 8007834:	e7e3      	b.n	80077fe <_malloc_r+0x1e>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	1b5b      	subs	r3, r3, r5
 800783a:	d417      	bmi.n	800786c <_malloc_r+0x8c>
 800783c:	2b0b      	cmp	r3, #11
 800783e:	d903      	bls.n	8007848 <_malloc_r+0x68>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	441c      	add	r4, r3
 8007844:	6025      	str	r5, [r4, #0]
 8007846:	e004      	b.n	8007852 <_malloc_r+0x72>
 8007848:	6863      	ldr	r3, [r4, #4]
 800784a:	42a2      	cmp	r2, r4
 800784c:	bf0c      	ite	eq
 800784e:	600b      	streq	r3, [r1, #0]
 8007850:	6053      	strne	r3, [r2, #4]
 8007852:	4630      	mov	r0, r6
 8007854:	f000 fbbc 	bl	8007fd0 <__malloc_unlock>
 8007858:	f104 000b 	add.w	r0, r4, #11
 800785c:	1d23      	adds	r3, r4, #4
 800785e:	f020 0007 	bic.w	r0, r0, #7
 8007862:	1ac2      	subs	r2, r0, r3
 8007864:	d0cc      	beq.n	8007800 <_malloc_r+0x20>
 8007866:	1a1b      	subs	r3, r3, r0
 8007868:	50a3      	str	r3, [r4, r2]
 800786a:	e7c9      	b.n	8007800 <_malloc_r+0x20>
 800786c:	4622      	mov	r2, r4
 800786e:	6864      	ldr	r4, [r4, #4]
 8007870:	e7cc      	b.n	800780c <_malloc_r+0x2c>
 8007872:	1cc4      	adds	r4, r0, #3
 8007874:	f024 0403 	bic.w	r4, r4, #3
 8007878:	42a0      	cmp	r0, r4
 800787a:	d0e3      	beq.n	8007844 <_malloc_r+0x64>
 800787c:	1a21      	subs	r1, r4, r0
 800787e:	4630      	mov	r0, r6
 8007880:	f000 faf6 	bl	8007e70 <_sbrk_r>
 8007884:	3001      	adds	r0, #1
 8007886:	d1dd      	bne.n	8007844 <_malloc_r+0x64>
 8007888:	e7cf      	b.n	800782a <_malloc_r+0x4a>
 800788a:	bf00      	nop
 800788c:	20000158 	.word	0x20000158
 8007890:	2000015c 	.word	0x2000015c

08007894 <__sfputc_r>:
 8007894:	6893      	ldr	r3, [r2, #8]
 8007896:	3b01      	subs	r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	b410      	push	{r4}
 800789c:	6093      	str	r3, [r2, #8]
 800789e:	da08      	bge.n	80078b2 <__sfputc_r+0x1e>
 80078a0:	6994      	ldr	r4, [r2, #24]
 80078a2:	42a3      	cmp	r3, r4
 80078a4:	db01      	blt.n	80078aa <__sfputc_r+0x16>
 80078a6:	290a      	cmp	r1, #10
 80078a8:	d103      	bne.n	80078b2 <__sfputc_r+0x1e>
 80078aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ae:	f7ff bc69 	b.w	8007184 <__swbuf_r>
 80078b2:	6813      	ldr	r3, [r2, #0]
 80078b4:	1c58      	adds	r0, r3, #1
 80078b6:	6010      	str	r0, [r2, #0]
 80078b8:	7019      	strb	r1, [r3, #0]
 80078ba:	4608      	mov	r0, r1
 80078bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <__sfputs_r>:
 80078c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c4:	4606      	mov	r6, r0
 80078c6:	460f      	mov	r7, r1
 80078c8:	4614      	mov	r4, r2
 80078ca:	18d5      	adds	r5, r2, r3
 80078cc:	42ac      	cmp	r4, r5
 80078ce:	d101      	bne.n	80078d4 <__sfputs_r+0x12>
 80078d0:	2000      	movs	r0, #0
 80078d2:	e007      	b.n	80078e4 <__sfputs_r+0x22>
 80078d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d8:	463a      	mov	r2, r7
 80078da:	4630      	mov	r0, r6
 80078dc:	f7ff ffda 	bl	8007894 <__sfputc_r>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d1f3      	bne.n	80078cc <__sfputs_r+0xa>
 80078e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078e8 <_vfiprintf_r>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	460d      	mov	r5, r1
 80078ee:	b09d      	sub	sp, #116	; 0x74
 80078f0:	4614      	mov	r4, r2
 80078f2:	4698      	mov	r8, r3
 80078f4:	4606      	mov	r6, r0
 80078f6:	b118      	cbz	r0, 8007900 <_vfiprintf_r+0x18>
 80078f8:	6983      	ldr	r3, [r0, #24]
 80078fa:	b90b      	cbnz	r3, 8007900 <_vfiprintf_r+0x18>
 80078fc:	f7ff fe1c 	bl	8007538 <__sinit>
 8007900:	4b89      	ldr	r3, [pc, #548]	; (8007b28 <_vfiprintf_r+0x240>)
 8007902:	429d      	cmp	r5, r3
 8007904:	d11b      	bne.n	800793e <_vfiprintf_r+0x56>
 8007906:	6875      	ldr	r5, [r6, #4]
 8007908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800790a:	07d9      	lsls	r1, r3, #31
 800790c:	d405      	bmi.n	800791a <_vfiprintf_r+0x32>
 800790e:	89ab      	ldrh	r3, [r5, #12]
 8007910:	059a      	lsls	r2, r3, #22
 8007912:	d402      	bmi.n	800791a <_vfiprintf_r+0x32>
 8007914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007916:	f7ff fead 	bl	8007674 <__retarget_lock_acquire_recursive>
 800791a:	89ab      	ldrh	r3, [r5, #12]
 800791c:	071b      	lsls	r3, r3, #28
 800791e:	d501      	bpl.n	8007924 <_vfiprintf_r+0x3c>
 8007920:	692b      	ldr	r3, [r5, #16]
 8007922:	b9eb      	cbnz	r3, 8007960 <_vfiprintf_r+0x78>
 8007924:	4629      	mov	r1, r5
 8007926:	4630      	mov	r0, r6
 8007928:	f7ff fc7e 	bl	8007228 <__swsetup_r>
 800792c:	b1c0      	cbz	r0, 8007960 <_vfiprintf_r+0x78>
 800792e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007930:	07dc      	lsls	r4, r3, #31
 8007932:	d50e      	bpl.n	8007952 <_vfiprintf_r+0x6a>
 8007934:	f04f 30ff 	mov.w	r0, #4294967295
 8007938:	b01d      	add	sp, #116	; 0x74
 800793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793e:	4b7b      	ldr	r3, [pc, #492]	; (8007b2c <_vfiprintf_r+0x244>)
 8007940:	429d      	cmp	r5, r3
 8007942:	d101      	bne.n	8007948 <_vfiprintf_r+0x60>
 8007944:	68b5      	ldr	r5, [r6, #8]
 8007946:	e7df      	b.n	8007908 <_vfiprintf_r+0x20>
 8007948:	4b79      	ldr	r3, [pc, #484]	; (8007b30 <_vfiprintf_r+0x248>)
 800794a:	429d      	cmp	r5, r3
 800794c:	bf08      	it	eq
 800794e:	68f5      	ldreq	r5, [r6, #12]
 8007950:	e7da      	b.n	8007908 <_vfiprintf_r+0x20>
 8007952:	89ab      	ldrh	r3, [r5, #12]
 8007954:	0598      	lsls	r0, r3, #22
 8007956:	d4ed      	bmi.n	8007934 <_vfiprintf_r+0x4c>
 8007958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800795a:	f7ff fe8c 	bl	8007676 <__retarget_lock_release_recursive>
 800795e:	e7e9      	b.n	8007934 <_vfiprintf_r+0x4c>
 8007960:	2300      	movs	r3, #0
 8007962:	9309      	str	r3, [sp, #36]	; 0x24
 8007964:	2320      	movs	r3, #32
 8007966:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800796a:	f8cd 800c 	str.w	r8, [sp, #12]
 800796e:	2330      	movs	r3, #48	; 0x30
 8007970:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b34 <_vfiprintf_r+0x24c>
 8007974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007978:	f04f 0901 	mov.w	r9, #1
 800797c:	4623      	mov	r3, r4
 800797e:	469a      	mov	sl, r3
 8007980:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007984:	b10a      	cbz	r2, 800798a <_vfiprintf_r+0xa2>
 8007986:	2a25      	cmp	r2, #37	; 0x25
 8007988:	d1f9      	bne.n	800797e <_vfiprintf_r+0x96>
 800798a:	ebba 0b04 	subs.w	fp, sl, r4
 800798e:	d00b      	beq.n	80079a8 <_vfiprintf_r+0xc0>
 8007990:	465b      	mov	r3, fp
 8007992:	4622      	mov	r2, r4
 8007994:	4629      	mov	r1, r5
 8007996:	4630      	mov	r0, r6
 8007998:	f7ff ff93 	bl	80078c2 <__sfputs_r>
 800799c:	3001      	adds	r0, #1
 800799e:	f000 80aa 	beq.w	8007af6 <_vfiprintf_r+0x20e>
 80079a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079a4:	445a      	add	r2, fp
 80079a6:	9209      	str	r2, [sp, #36]	; 0x24
 80079a8:	f89a 3000 	ldrb.w	r3, [sl]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80a2 	beq.w	8007af6 <_vfiprintf_r+0x20e>
 80079b2:	2300      	movs	r3, #0
 80079b4:	f04f 32ff 	mov.w	r2, #4294967295
 80079b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079bc:	f10a 0a01 	add.w	sl, sl, #1
 80079c0:	9304      	str	r3, [sp, #16]
 80079c2:	9307      	str	r3, [sp, #28]
 80079c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079c8:	931a      	str	r3, [sp, #104]	; 0x68
 80079ca:	4654      	mov	r4, sl
 80079cc:	2205      	movs	r2, #5
 80079ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d2:	4858      	ldr	r0, [pc, #352]	; (8007b34 <_vfiprintf_r+0x24c>)
 80079d4:	f7f8 fc84 	bl	80002e0 <memchr>
 80079d8:	9a04      	ldr	r2, [sp, #16]
 80079da:	b9d8      	cbnz	r0, 8007a14 <_vfiprintf_r+0x12c>
 80079dc:	06d1      	lsls	r1, r2, #27
 80079de:	bf44      	itt	mi
 80079e0:	2320      	movmi	r3, #32
 80079e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e6:	0713      	lsls	r3, r2, #28
 80079e8:	bf44      	itt	mi
 80079ea:	232b      	movmi	r3, #43	; 0x2b
 80079ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079f0:	f89a 3000 	ldrb.w	r3, [sl]
 80079f4:	2b2a      	cmp	r3, #42	; 0x2a
 80079f6:	d015      	beq.n	8007a24 <_vfiprintf_r+0x13c>
 80079f8:	9a07      	ldr	r2, [sp, #28]
 80079fa:	4654      	mov	r4, sl
 80079fc:	2000      	movs	r0, #0
 80079fe:	f04f 0c0a 	mov.w	ip, #10
 8007a02:	4621      	mov	r1, r4
 8007a04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a08:	3b30      	subs	r3, #48	; 0x30
 8007a0a:	2b09      	cmp	r3, #9
 8007a0c:	d94e      	bls.n	8007aac <_vfiprintf_r+0x1c4>
 8007a0e:	b1b0      	cbz	r0, 8007a3e <_vfiprintf_r+0x156>
 8007a10:	9207      	str	r2, [sp, #28]
 8007a12:	e014      	b.n	8007a3e <_vfiprintf_r+0x156>
 8007a14:	eba0 0308 	sub.w	r3, r0, r8
 8007a18:	fa09 f303 	lsl.w	r3, r9, r3
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	9304      	str	r3, [sp, #16]
 8007a20:	46a2      	mov	sl, r4
 8007a22:	e7d2      	b.n	80079ca <_vfiprintf_r+0xe2>
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	1d19      	adds	r1, r3, #4
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	9103      	str	r1, [sp, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bfbb      	ittet	lt
 8007a30:	425b      	neglt	r3, r3
 8007a32:	f042 0202 	orrlt.w	r2, r2, #2
 8007a36:	9307      	strge	r3, [sp, #28]
 8007a38:	9307      	strlt	r3, [sp, #28]
 8007a3a:	bfb8      	it	lt
 8007a3c:	9204      	strlt	r2, [sp, #16]
 8007a3e:	7823      	ldrb	r3, [r4, #0]
 8007a40:	2b2e      	cmp	r3, #46	; 0x2e
 8007a42:	d10c      	bne.n	8007a5e <_vfiprintf_r+0x176>
 8007a44:	7863      	ldrb	r3, [r4, #1]
 8007a46:	2b2a      	cmp	r3, #42	; 0x2a
 8007a48:	d135      	bne.n	8007ab6 <_vfiprintf_r+0x1ce>
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	1d1a      	adds	r2, r3, #4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	9203      	str	r2, [sp, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	bfb8      	it	lt
 8007a56:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a5a:	3402      	adds	r4, #2
 8007a5c:	9305      	str	r3, [sp, #20]
 8007a5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b44 <_vfiprintf_r+0x25c>
 8007a62:	7821      	ldrb	r1, [r4, #0]
 8007a64:	2203      	movs	r2, #3
 8007a66:	4650      	mov	r0, sl
 8007a68:	f7f8 fc3a 	bl	80002e0 <memchr>
 8007a6c:	b140      	cbz	r0, 8007a80 <_vfiprintf_r+0x198>
 8007a6e:	2340      	movs	r3, #64	; 0x40
 8007a70:	eba0 000a 	sub.w	r0, r0, sl
 8007a74:	fa03 f000 	lsl.w	r0, r3, r0
 8007a78:	9b04      	ldr	r3, [sp, #16]
 8007a7a:	4303      	orrs	r3, r0
 8007a7c:	3401      	adds	r4, #1
 8007a7e:	9304      	str	r3, [sp, #16]
 8007a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a84:	482c      	ldr	r0, [pc, #176]	; (8007b38 <_vfiprintf_r+0x250>)
 8007a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a8a:	2206      	movs	r2, #6
 8007a8c:	f7f8 fc28 	bl	80002e0 <memchr>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d03f      	beq.n	8007b14 <_vfiprintf_r+0x22c>
 8007a94:	4b29      	ldr	r3, [pc, #164]	; (8007b3c <_vfiprintf_r+0x254>)
 8007a96:	bb1b      	cbnz	r3, 8007ae0 <_vfiprintf_r+0x1f8>
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	3307      	adds	r3, #7
 8007a9c:	f023 0307 	bic.w	r3, r3, #7
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	9303      	str	r3, [sp, #12]
 8007aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa6:	443b      	add	r3, r7
 8007aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aaa:	e767      	b.n	800797c <_vfiprintf_r+0x94>
 8007aac:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	2001      	movs	r0, #1
 8007ab4:	e7a5      	b.n	8007a02 <_vfiprintf_r+0x11a>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	3401      	adds	r4, #1
 8007aba:	9305      	str	r3, [sp, #20]
 8007abc:	4619      	mov	r1, r3
 8007abe:	f04f 0c0a 	mov.w	ip, #10
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ac8:	3a30      	subs	r2, #48	; 0x30
 8007aca:	2a09      	cmp	r2, #9
 8007acc:	d903      	bls.n	8007ad6 <_vfiprintf_r+0x1ee>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0c5      	beq.n	8007a5e <_vfiprintf_r+0x176>
 8007ad2:	9105      	str	r1, [sp, #20]
 8007ad4:	e7c3      	b.n	8007a5e <_vfiprintf_r+0x176>
 8007ad6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ada:	4604      	mov	r4, r0
 8007adc:	2301      	movs	r3, #1
 8007ade:	e7f0      	b.n	8007ac2 <_vfiprintf_r+0x1da>
 8007ae0:	ab03      	add	r3, sp, #12
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	462a      	mov	r2, r5
 8007ae6:	4b16      	ldr	r3, [pc, #88]	; (8007b40 <_vfiprintf_r+0x258>)
 8007ae8:	a904      	add	r1, sp, #16
 8007aea:	4630      	mov	r0, r6
 8007aec:	f3af 8000 	nop.w
 8007af0:	4607      	mov	r7, r0
 8007af2:	1c78      	adds	r0, r7, #1
 8007af4:	d1d6      	bne.n	8007aa4 <_vfiprintf_r+0x1bc>
 8007af6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007af8:	07d9      	lsls	r1, r3, #31
 8007afa:	d405      	bmi.n	8007b08 <_vfiprintf_r+0x220>
 8007afc:	89ab      	ldrh	r3, [r5, #12]
 8007afe:	059a      	lsls	r2, r3, #22
 8007b00:	d402      	bmi.n	8007b08 <_vfiprintf_r+0x220>
 8007b02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b04:	f7ff fdb7 	bl	8007676 <__retarget_lock_release_recursive>
 8007b08:	89ab      	ldrh	r3, [r5, #12]
 8007b0a:	065b      	lsls	r3, r3, #25
 8007b0c:	f53f af12 	bmi.w	8007934 <_vfiprintf_r+0x4c>
 8007b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b12:	e711      	b.n	8007938 <_vfiprintf_r+0x50>
 8007b14:	ab03      	add	r3, sp, #12
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	462a      	mov	r2, r5
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <_vfiprintf_r+0x258>)
 8007b1c:	a904      	add	r1, sp, #16
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f000 f880 	bl	8007c24 <_printf_i>
 8007b24:	e7e4      	b.n	8007af0 <_vfiprintf_r+0x208>
 8007b26:	bf00      	nop
 8007b28:	080080e8 	.word	0x080080e8
 8007b2c:	08008108 	.word	0x08008108
 8007b30:	080080c8 	.word	0x080080c8
 8007b34:	08008128 	.word	0x08008128
 8007b38:	08008132 	.word	0x08008132
 8007b3c:	00000000 	.word	0x00000000
 8007b40:	080078c3 	.word	0x080078c3
 8007b44:	0800812e 	.word	0x0800812e

08007b48 <_printf_common>:
 8007b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	4616      	mov	r6, r2
 8007b4e:	4699      	mov	r9, r3
 8007b50:	688a      	ldr	r2, [r1, #8]
 8007b52:	690b      	ldr	r3, [r1, #16]
 8007b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	bfb8      	it	lt
 8007b5c:	4613      	movlt	r3, r2
 8007b5e:	6033      	str	r3, [r6, #0]
 8007b60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b64:	4607      	mov	r7, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	b10a      	cbz	r2, 8007b6e <_printf_common+0x26>
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	6033      	str	r3, [r6, #0]
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	0699      	lsls	r1, r3, #26
 8007b72:	bf42      	ittt	mi
 8007b74:	6833      	ldrmi	r3, [r6, #0]
 8007b76:	3302      	addmi	r3, #2
 8007b78:	6033      	strmi	r3, [r6, #0]
 8007b7a:	6825      	ldr	r5, [r4, #0]
 8007b7c:	f015 0506 	ands.w	r5, r5, #6
 8007b80:	d106      	bne.n	8007b90 <_printf_common+0x48>
 8007b82:	f104 0a19 	add.w	sl, r4, #25
 8007b86:	68e3      	ldr	r3, [r4, #12]
 8007b88:	6832      	ldr	r2, [r6, #0]
 8007b8a:	1a9b      	subs	r3, r3, r2
 8007b8c:	42ab      	cmp	r3, r5
 8007b8e:	dc26      	bgt.n	8007bde <_printf_common+0x96>
 8007b90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b94:	1e13      	subs	r3, r2, #0
 8007b96:	6822      	ldr	r2, [r4, #0]
 8007b98:	bf18      	it	ne
 8007b9a:	2301      	movne	r3, #1
 8007b9c:	0692      	lsls	r2, r2, #26
 8007b9e:	d42b      	bmi.n	8007bf8 <_printf_common+0xb0>
 8007ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	47c0      	blx	r8
 8007baa:	3001      	adds	r0, #1
 8007bac:	d01e      	beq.n	8007bec <_printf_common+0xa4>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	68e5      	ldr	r5, [r4, #12]
 8007bb2:	6832      	ldr	r2, [r6, #0]
 8007bb4:	f003 0306 	and.w	r3, r3, #6
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	bf08      	it	eq
 8007bbc:	1aad      	subeq	r5, r5, r2
 8007bbe:	68a3      	ldr	r3, [r4, #8]
 8007bc0:	6922      	ldr	r2, [r4, #16]
 8007bc2:	bf0c      	ite	eq
 8007bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bc8:	2500      	movne	r5, #0
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	bfc4      	itt	gt
 8007bce:	1a9b      	subgt	r3, r3, r2
 8007bd0:	18ed      	addgt	r5, r5, r3
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	341a      	adds	r4, #26
 8007bd6:	42b5      	cmp	r5, r6
 8007bd8:	d11a      	bne.n	8007c10 <_printf_common+0xc8>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	e008      	b.n	8007bf0 <_printf_common+0xa8>
 8007bde:	2301      	movs	r3, #1
 8007be0:	4652      	mov	r2, sl
 8007be2:	4649      	mov	r1, r9
 8007be4:	4638      	mov	r0, r7
 8007be6:	47c0      	blx	r8
 8007be8:	3001      	adds	r0, #1
 8007bea:	d103      	bne.n	8007bf4 <_printf_common+0xac>
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf4:	3501      	adds	r5, #1
 8007bf6:	e7c6      	b.n	8007b86 <_printf_common+0x3e>
 8007bf8:	18e1      	adds	r1, r4, r3
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	2030      	movs	r0, #48	; 0x30
 8007bfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c02:	4422      	add	r2, r4
 8007c04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	e7c7      	b.n	8007ba0 <_printf_common+0x58>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4622      	mov	r2, r4
 8007c14:	4649      	mov	r1, r9
 8007c16:	4638      	mov	r0, r7
 8007c18:	47c0      	blx	r8
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d0e6      	beq.n	8007bec <_printf_common+0xa4>
 8007c1e:	3601      	adds	r6, #1
 8007c20:	e7d9      	b.n	8007bd6 <_printf_common+0x8e>
	...

08007c24 <_printf_i>:
 8007c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c28:	460c      	mov	r4, r1
 8007c2a:	4691      	mov	r9, r2
 8007c2c:	7e27      	ldrb	r7, [r4, #24]
 8007c2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c30:	2f78      	cmp	r7, #120	; 0x78
 8007c32:	4680      	mov	r8, r0
 8007c34:	469a      	mov	sl, r3
 8007c36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c3a:	d807      	bhi.n	8007c4c <_printf_i+0x28>
 8007c3c:	2f62      	cmp	r7, #98	; 0x62
 8007c3e:	d80a      	bhi.n	8007c56 <_printf_i+0x32>
 8007c40:	2f00      	cmp	r7, #0
 8007c42:	f000 80d8 	beq.w	8007df6 <_printf_i+0x1d2>
 8007c46:	2f58      	cmp	r7, #88	; 0x58
 8007c48:	f000 80a3 	beq.w	8007d92 <_printf_i+0x16e>
 8007c4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c54:	e03a      	b.n	8007ccc <_printf_i+0xa8>
 8007c56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c5a:	2b15      	cmp	r3, #21
 8007c5c:	d8f6      	bhi.n	8007c4c <_printf_i+0x28>
 8007c5e:	a001      	add	r0, pc, #4	; (adr r0, 8007c64 <_printf_i+0x40>)
 8007c60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c64:	08007cbd 	.word	0x08007cbd
 8007c68:	08007cd1 	.word	0x08007cd1
 8007c6c:	08007c4d 	.word	0x08007c4d
 8007c70:	08007c4d 	.word	0x08007c4d
 8007c74:	08007c4d 	.word	0x08007c4d
 8007c78:	08007c4d 	.word	0x08007c4d
 8007c7c:	08007cd1 	.word	0x08007cd1
 8007c80:	08007c4d 	.word	0x08007c4d
 8007c84:	08007c4d 	.word	0x08007c4d
 8007c88:	08007c4d 	.word	0x08007c4d
 8007c8c:	08007c4d 	.word	0x08007c4d
 8007c90:	08007ddd 	.word	0x08007ddd
 8007c94:	08007d01 	.word	0x08007d01
 8007c98:	08007dbf 	.word	0x08007dbf
 8007c9c:	08007c4d 	.word	0x08007c4d
 8007ca0:	08007c4d 	.word	0x08007c4d
 8007ca4:	08007dff 	.word	0x08007dff
 8007ca8:	08007c4d 	.word	0x08007c4d
 8007cac:	08007d01 	.word	0x08007d01
 8007cb0:	08007c4d 	.word	0x08007c4d
 8007cb4:	08007c4d 	.word	0x08007c4d
 8007cb8:	08007dc7 	.word	0x08007dc7
 8007cbc:	680b      	ldr	r3, [r1, #0]
 8007cbe:	1d1a      	adds	r2, r3, #4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	600a      	str	r2, [r1, #0]
 8007cc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e0a3      	b.n	8007e18 <_printf_i+0x1f4>
 8007cd0:	6825      	ldr	r5, [r4, #0]
 8007cd2:	6808      	ldr	r0, [r1, #0]
 8007cd4:	062e      	lsls	r6, r5, #24
 8007cd6:	f100 0304 	add.w	r3, r0, #4
 8007cda:	d50a      	bpl.n	8007cf2 <_printf_i+0xce>
 8007cdc:	6805      	ldr	r5, [r0, #0]
 8007cde:	600b      	str	r3, [r1, #0]
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	da03      	bge.n	8007cec <_printf_i+0xc8>
 8007ce4:	232d      	movs	r3, #45	; 0x2d
 8007ce6:	426d      	negs	r5, r5
 8007ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cec:	485e      	ldr	r0, [pc, #376]	; (8007e68 <_printf_i+0x244>)
 8007cee:	230a      	movs	r3, #10
 8007cf0:	e019      	b.n	8007d26 <_printf_i+0x102>
 8007cf2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007cf6:	6805      	ldr	r5, [r0, #0]
 8007cf8:	600b      	str	r3, [r1, #0]
 8007cfa:	bf18      	it	ne
 8007cfc:	b22d      	sxthne	r5, r5
 8007cfe:	e7ef      	b.n	8007ce0 <_printf_i+0xbc>
 8007d00:	680b      	ldr	r3, [r1, #0]
 8007d02:	6825      	ldr	r5, [r4, #0]
 8007d04:	1d18      	adds	r0, r3, #4
 8007d06:	6008      	str	r0, [r1, #0]
 8007d08:	0628      	lsls	r0, r5, #24
 8007d0a:	d501      	bpl.n	8007d10 <_printf_i+0xec>
 8007d0c:	681d      	ldr	r5, [r3, #0]
 8007d0e:	e002      	b.n	8007d16 <_printf_i+0xf2>
 8007d10:	0669      	lsls	r1, r5, #25
 8007d12:	d5fb      	bpl.n	8007d0c <_printf_i+0xe8>
 8007d14:	881d      	ldrh	r5, [r3, #0]
 8007d16:	4854      	ldr	r0, [pc, #336]	; (8007e68 <_printf_i+0x244>)
 8007d18:	2f6f      	cmp	r7, #111	; 0x6f
 8007d1a:	bf0c      	ite	eq
 8007d1c:	2308      	moveq	r3, #8
 8007d1e:	230a      	movne	r3, #10
 8007d20:	2100      	movs	r1, #0
 8007d22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d26:	6866      	ldr	r6, [r4, #4]
 8007d28:	60a6      	str	r6, [r4, #8]
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	bfa2      	ittt	ge
 8007d2e:	6821      	ldrge	r1, [r4, #0]
 8007d30:	f021 0104 	bicge.w	r1, r1, #4
 8007d34:	6021      	strge	r1, [r4, #0]
 8007d36:	b90d      	cbnz	r5, 8007d3c <_printf_i+0x118>
 8007d38:	2e00      	cmp	r6, #0
 8007d3a:	d04d      	beq.n	8007dd8 <_printf_i+0x1b4>
 8007d3c:	4616      	mov	r6, r2
 8007d3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d42:	fb03 5711 	mls	r7, r3, r1, r5
 8007d46:	5dc7      	ldrb	r7, [r0, r7]
 8007d48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d4c:	462f      	mov	r7, r5
 8007d4e:	42bb      	cmp	r3, r7
 8007d50:	460d      	mov	r5, r1
 8007d52:	d9f4      	bls.n	8007d3e <_printf_i+0x11a>
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d10b      	bne.n	8007d70 <_printf_i+0x14c>
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	07df      	lsls	r7, r3, #31
 8007d5c:	d508      	bpl.n	8007d70 <_printf_i+0x14c>
 8007d5e:	6923      	ldr	r3, [r4, #16]
 8007d60:	6861      	ldr	r1, [r4, #4]
 8007d62:	4299      	cmp	r1, r3
 8007d64:	bfde      	ittt	le
 8007d66:	2330      	movle	r3, #48	; 0x30
 8007d68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d70:	1b92      	subs	r2, r2, r6
 8007d72:	6122      	str	r2, [r4, #16]
 8007d74:	f8cd a000 	str.w	sl, [sp]
 8007d78:	464b      	mov	r3, r9
 8007d7a:	aa03      	add	r2, sp, #12
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	4640      	mov	r0, r8
 8007d80:	f7ff fee2 	bl	8007b48 <_printf_common>
 8007d84:	3001      	adds	r0, #1
 8007d86:	d14c      	bne.n	8007e22 <_printf_i+0x1fe>
 8007d88:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8c:	b004      	add	sp, #16
 8007d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d92:	4835      	ldr	r0, [pc, #212]	; (8007e68 <_printf_i+0x244>)
 8007d94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	680e      	ldr	r6, [r1, #0]
 8007d9c:	061f      	lsls	r7, r3, #24
 8007d9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007da2:	600e      	str	r6, [r1, #0]
 8007da4:	d514      	bpl.n	8007dd0 <_printf_i+0x1ac>
 8007da6:	07d9      	lsls	r1, r3, #31
 8007da8:	bf44      	itt	mi
 8007daa:	f043 0320 	orrmi.w	r3, r3, #32
 8007dae:	6023      	strmi	r3, [r4, #0]
 8007db0:	b91d      	cbnz	r5, 8007dba <_printf_i+0x196>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	f023 0320 	bic.w	r3, r3, #32
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	2310      	movs	r3, #16
 8007dbc:	e7b0      	b.n	8007d20 <_printf_i+0xfc>
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	f043 0320 	orr.w	r3, r3, #32
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	2378      	movs	r3, #120	; 0x78
 8007dc8:	4828      	ldr	r0, [pc, #160]	; (8007e6c <_printf_i+0x248>)
 8007dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dce:	e7e3      	b.n	8007d98 <_printf_i+0x174>
 8007dd0:	065e      	lsls	r6, r3, #25
 8007dd2:	bf48      	it	mi
 8007dd4:	b2ad      	uxthmi	r5, r5
 8007dd6:	e7e6      	b.n	8007da6 <_printf_i+0x182>
 8007dd8:	4616      	mov	r6, r2
 8007dda:	e7bb      	b.n	8007d54 <_printf_i+0x130>
 8007ddc:	680b      	ldr	r3, [r1, #0]
 8007dde:	6826      	ldr	r6, [r4, #0]
 8007de0:	6960      	ldr	r0, [r4, #20]
 8007de2:	1d1d      	adds	r5, r3, #4
 8007de4:	600d      	str	r5, [r1, #0]
 8007de6:	0635      	lsls	r5, r6, #24
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	d501      	bpl.n	8007df0 <_printf_i+0x1cc>
 8007dec:	6018      	str	r0, [r3, #0]
 8007dee:	e002      	b.n	8007df6 <_printf_i+0x1d2>
 8007df0:	0671      	lsls	r1, r6, #25
 8007df2:	d5fb      	bpl.n	8007dec <_printf_i+0x1c8>
 8007df4:	8018      	strh	r0, [r3, #0]
 8007df6:	2300      	movs	r3, #0
 8007df8:	6123      	str	r3, [r4, #16]
 8007dfa:	4616      	mov	r6, r2
 8007dfc:	e7ba      	b.n	8007d74 <_printf_i+0x150>
 8007dfe:	680b      	ldr	r3, [r1, #0]
 8007e00:	1d1a      	adds	r2, r3, #4
 8007e02:	600a      	str	r2, [r1, #0]
 8007e04:	681e      	ldr	r6, [r3, #0]
 8007e06:	6862      	ldr	r2, [r4, #4]
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7f8 fa68 	bl	80002e0 <memchr>
 8007e10:	b108      	cbz	r0, 8007e16 <_printf_i+0x1f2>
 8007e12:	1b80      	subs	r0, r0, r6
 8007e14:	6060      	str	r0, [r4, #4]
 8007e16:	6863      	ldr	r3, [r4, #4]
 8007e18:	6123      	str	r3, [r4, #16]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e20:	e7a8      	b.n	8007d74 <_printf_i+0x150>
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	4632      	mov	r2, r6
 8007e26:	4649      	mov	r1, r9
 8007e28:	4640      	mov	r0, r8
 8007e2a:	47d0      	blx	sl
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d0ab      	beq.n	8007d88 <_printf_i+0x164>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	079b      	lsls	r3, r3, #30
 8007e34:	d413      	bmi.n	8007e5e <_printf_i+0x23a>
 8007e36:	68e0      	ldr	r0, [r4, #12]
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	4298      	cmp	r0, r3
 8007e3c:	bfb8      	it	lt
 8007e3e:	4618      	movlt	r0, r3
 8007e40:	e7a4      	b.n	8007d8c <_printf_i+0x168>
 8007e42:	2301      	movs	r3, #1
 8007e44:	4632      	mov	r2, r6
 8007e46:	4649      	mov	r1, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	47d0      	blx	sl
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d09b      	beq.n	8007d88 <_printf_i+0x164>
 8007e50:	3501      	adds	r5, #1
 8007e52:	68e3      	ldr	r3, [r4, #12]
 8007e54:	9903      	ldr	r1, [sp, #12]
 8007e56:	1a5b      	subs	r3, r3, r1
 8007e58:	42ab      	cmp	r3, r5
 8007e5a:	dcf2      	bgt.n	8007e42 <_printf_i+0x21e>
 8007e5c:	e7eb      	b.n	8007e36 <_printf_i+0x212>
 8007e5e:	2500      	movs	r5, #0
 8007e60:	f104 0619 	add.w	r6, r4, #25
 8007e64:	e7f5      	b.n	8007e52 <_printf_i+0x22e>
 8007e66:	bf00      	nop
 8007e68:	08008139 	.word	0x08008139
 8007e6c:	0800814a 	.word	0x0800814a

08007e70 <_sbrk_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4d06      	ldr	r5, [pc, #24]	; (8007e8c <_sbrk_r+0x1c>)
 8007e74:	2300      	movs	r3, #0
 8007e76:	4604      	mov	r4, r0
 8007e78:	4608      	mov	r0, r1
 8007e7a:	602b      	str	r3, [r5, #0]
 8007e7c:	f7f9 fa42 	bl	8001304 <_sbrk>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d102      	bne.n	8007e8a <_sbrk_r+0x1a>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	b103      	cbz	r3, 8007e8a <_sbrk_r+0x1a>
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	200003cc 	.word	0x200003cc

08007e90 <__sread>:
 8007e90:	b510      	push	{r4, lr}
 8007e92:	460c      	mov	r4, r1
 8007e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e98:	f000 f8a0 	bl	8007fdc <_read_r>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	bfab      	itete	ge
 8007ea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ea4:	181b      	addge	r3, r3, r0
 8007ea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eaa:	bfac      	ite	ge
 8007eac:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eae:	81a3      	strhlt	r3, [r4, #12]
 8007eb0:	bd10      	pop	{r4, pc}

08007eb2 <__swrite>:
 8007eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb6:	461f      	mov	r7, r3
 8007eb8:	898b      	ldrh	r3, [r1, #12]
 8007eba:	05db      	lsls	r3, r3, #23
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	4616      	mov	r6, r2
 8007ec2:	d505      	bpl.n	8007ed0 <__swrite+0x1e>
 8007ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec8:	2302      	movs	r3, #2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f000 f868 	bl	8007fa0 <_lseek_r>
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eda:	81a3      	strh	r3, [r4, #12]
 8007edc:	4632      	mov	r2, r6
 8007ede:	463b      	mov	r3, r7
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee6:	f000 b817 	b.w	8007f18 <_write_r>

08007eea <__sseek>:
 8007eea:	b510      	push	{r4, lr}
 8007eec:	460c      	mov	r4, r1
 8007eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef2:	f000 f855 	bl	8007fa0 <_lseek_r>
 8007ef6:	1c43      	adds	r3, r0, #1
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	bf15      	itete	ne
 8007efc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007efe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f06:	81a3      	strheq	r3, [r4, #12]
 8007f08:	bf18      	it	ne
 8007f0a:	81a3      	strhne	r3, [r4, #12]
 8007f0c:	bd10      	pop	{r4, pc}

08007f0e <__sclose>:
 8007f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f12:	f000 b813 	b.w	8007f3c <_close_r>
	...

08007f18 <_write_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4d07      	ldr	r5, [pc, #28]	; (8007f38 <_write_r+0x20>)
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	4608      	mov	r0, r1
 8007f20:	4611      	mov	r1, r2
 8007f22:	2200      	movs	r2, #0
 8007f24:	602a      	str	r2, [r5, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	f7f9 f99b 	bl	8001262 <_write>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d102      	bne.n	8007f36 <_write_r+0x1e>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	b103      	cbz	r3, 8007f36 <_write_r+0x1e>
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	200003cc 	.word	0x200003cc

08007f3c <_close_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	4d06      	ldr	r5, [pc, #24]	; (8007f58 <_close_r+0x1c>)
 8007f40:	2300      	movs	r3, #0
 8007f42:	4604      	mov	r4, r0
 8007f44:	4608      	mov	r0, r1
 8007f46:	602b      	str	r3, [r5, #0]
 8007f48:	f7f9 f9a7 	bl	800129a <_close>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d102      	bne.n	8007f56 <_close_r+0x1a>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	b103      	cbz	r3, 8007f56 <_close_r+0x1a>
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	200003cc 	.word	0x200003cc

08007f5c <_fstat_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d07      	ldr	r5, [pc, #28]	; (8007f7c <_fstat_r+0x20>)
 8007f60:	2300      	movs	r3, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	4611      	mov	r1, r2
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	f7f9 f9a2 	bl	80012b2 <_fstat>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	d102      	bne.n	8007f78 <_fstat_r+0x1c>
 8007f72:	682b      	ldr	r3, [r5, #0]
 8007f74:	b103      	cbz	r3, 8007f78 <_fstat_r+0x1c>
 8007f76:	6023      	str	r3, [r4, #0]
 8007f78:	bd38      	pop	{r3, r4, r5, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200003cc 	.word	0x200003cc

08007f80 <_isatty_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d06      	ldr	r5, [pc, #24]	; (8007f9c <_isatty_r+0x1c>)
 8007f84:	2300      	movs	r3, #0
 8007f86:	4604      	mov	r4, r0
 8007f88:	4608      	mov	r0, r1
 8007f8a:	602b      	str	r3, [r5, #0]
 8007f8c:	f7f9 f9a1 	bl	80012d2 <_isatty>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d102      	bne.n	8007f9a <_isatty_r+0x1a>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	b103      	cbz	r3, 8007f9a <_isatty_r+0x1a>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	200003cc 	.word	0x200003cc

08007fa0 <_lseek_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d07      	ldr	r5, [pc, #28]	; (8007fc0 <_lseek_r+0x20>)
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	4608      	mov	r0, r1
 8007fa8:	4611      	mov	r1, r2
 8007faa:	2200      	movs	r2, #0
 8007fac:	602a      	str	r2, [r5, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f7f9 f99a 	bl	80012e8 <_lseek>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d102      	bne.n	8007fbe <_lseek_r+0x1e>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	b103      	cbz	r3, 8007fbe <_lseek_r+0x1e>
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	200003cc 	.word	0x200003cc

08007fc4 <__malloc_lock>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	; (8007fcc <__malloc_lock+0x8>)
 8007fc6:	f7ff bb55 	b.w	8007674 <__retarget_lock_acquire_recursive>
 8007fca:	bf00      	nop
 8007fcc:	200003c4 	.word	0x200003c4

08007fd0 <__malloc_unlock>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__malloc_unlock+0x8>)
 8007fd2:	f7ff bb50 	b.w	8007676 <__retarget_lock_release_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	200003c4 	.word	0x200003c4

08007fdc <_read_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4d07      	ldr	r5, [pc, #28]	; (8007ffc <_read_r+0x20>)
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	4608      	mov	r0, r1
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	602a      	str	r2, [r5, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	f7f9 f91c 	bl	8001228 <_read>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d102      	bne.n	8007ffa <_read_r+0x1e>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	b103      	cbz	r3, 8007ffa <_read_r+0x1e>
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	200003cc 	.word	0x200003cc

08008000 <_init>:
 8008000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008002:	bf00      	nop
 8008004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008006:	bc08      	pop	{r3}
 8008008:	469e      	mov	lr, r3
 800800a:	4770      	bx	lr

0800800c <_fini>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	bf00      	nop
 8008010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008012:	bc08      	pop	{r3}
 8008014:	469e      	mov	lr, r3
 8008016:	4770      	bx	lr
