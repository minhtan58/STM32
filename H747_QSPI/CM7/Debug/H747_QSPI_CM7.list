
H747_QSPI_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007704  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080079a4  080079a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ae4  08007ae4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ae4  08007ae4  00017ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aec  08007aec  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aec  08007aec  00017aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007af0  08007af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  24000000  08007af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2400008c  08007b80  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400020c  08007b80  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d326  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e6  00000000  00000000  0003d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  000406c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00041540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004005b  00000000  00000000  000422c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011420  00000000  00000000  0008231b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00197803  00000000  00000000  0009373b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022af3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004378  00000000  00000000  0022af94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800798c 	.word	0x0800798c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	0800798c 	.word	0x0800798c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <__io_putchar>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_UART8_Init(void);

int __io_putchar (int ch) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, HAL_MAX_DELAY);
 80007ba:	f107 010f 	add.w	r1, r7, #15
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	2201      	movs	r2, #1
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <__io_putchar+0x28>)
 80007c6:	f005 f87d 	bl	80058c4 <HAL_UART_Transmit>
	return ch;
 80007ca:	687b      	ldr	r3, [r7, #4]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2400011c 	.word	0x2400011c

080007d8 <main>:

int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
	int32_t timeout;

	timeout = 0xFFFF;
 80007de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e2:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007e4:	bf00      	nop
 80007e6:	4b46      	ldr	r3, [pc, #280]	; (8000900 <main+0x128>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d004      	beq.n	80007fc <main+0x24>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dcf4      	bgt.n	80007e6 <main+0xe>
	if ( timeout < 0 )
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	da01      	bge.n	8000806 <main+0x2e>
	{
		Error_Handler();
 8000802:	f000 f9b3 	bl	8000b6c <Error_Handler>
	}

	HAL_Init();
 8000806:	f001 f84f 	bl	80018a8 <HAL_Init>
	SystemClock_Config();
 800080a:	f000 f88f 	bl	800092c <SystemClock_Config>
	__HAL_RCC_HSEM_CLK_ENABLE();
 800080e:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <main+0x128>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	4a3a      	ldr	r2, [pc, #232]	; (8000900 <main+0x128>)
 8000816:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <main+0x128>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]


	HAL_HSEM_FastTake(HSEM_ID_0);
 800082c:	2000      	movs	r0, #0
 800082e:	f001 fcf9 	bl	8002224 <HAL_HSEM_FastTake>
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000832:	2100      	movs	r1, #0
 8000834:	2000      	movs	r0, #0
 8000836:	f001 fd0f 	bl	8002258 <HAL_HSEM_Release>
	timeout = 0xFFFF;
 800083a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000840:	bf00      	nop
 8000842:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <main+0x128>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d104      	bne.n	8000858 <main+0x80>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	1e5a      	subs	r2, r3, #1
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	dcf4      	bgt.n	8000842 <main+0x6a>
	if ( timeout < 0 )
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	da01      	bge.n	8000862 <main+0x8a>
	{
		Error_Handler();
 800085e:	f000 f985 	bl	8000b6c <Error_Handler>
	}

	MX_GPIO_Init();
 8000862:	f000 f92d 	bl	8000ac0 <MX_GPIO_Init>
	MX_UART8_Init();
 8000866:	f000 f8df 	bl	8000a28 <MX_UART8_Init>
	CSP_QUADSPI_Init();
 800086a:	f000 fae9 	bl	8000e40 <CSP_QUADSPI_Init>

	printf("Start....\r\n");
 800086e:	4825      	ldr	r0, [pc, #148]	; (8000904 <main+0x12c>)
 8000870:	f006 f9f0 	bl	8006c54 <puts>

	BSP_QSPI_WriteMemory(data_write, 0x12, 100);
 8000874:	2264      	movs	r2, #100	; 0x64
 8000876:	2112      	movs	r1, #18
 8000878:	4823      	ldr	r0, [pc, #140]	; (8000908 <main+0x130>)
 800087a:	f000 fcb7 	bl	80011ec <BSP_QSPI_WriteMemory>
	printf("Write done....\r\n");
 800087e:	4823      	ldr	r0, [pc, #140]	; (800090c <main+0x134>)
 8000880:	f006 f9e8 	bl	8006c54 <puts>

	HAL_Delay(1000);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f001 f8a0 	bl	80019cc <HAL_Delay>
	BSP_QSPI_ReadMemory(data_read, 0x12, 100);
 800088c:	2264      	movs	r2, #100	; 0x64
 800088e:	2112      	movs	r1, #18
 8000890:	481f      	ldr	r0, [pc, #124]	; (8000910 <main+0x138>)
 8000892:	f000 fdad 	bl	80013f0 <BSP_QSPI_ReadMemory>
	printf("Read done....\r\n");
 8000896:	481f      	ldr	r0, [pc, #124]	; (8000914 <main+0x13c>)
 8000898:	f006 f9dc 	bl	8006c54 <puts>

	printf("Data : %d %d\r\n",data_read[0],data_read[1]);
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <main+0x138>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <main+0x138>)
 80008a4:	785b      	ldrb	r3, [r3, #1]
 80008a6:	461a      	mov	r2, r3
 80008a8:	481b      	ldr	r0, [pc, #108]	; (8000918 <main+0x140>)
 80008aa:	f006 f94d 	bl	8006b48 <iprintf>

	HAL_Delay(1000);
 80008ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b2:	f001 f88b 	bl	80019cc <HAL_Delay>
	BSP_QSPI_WriteMemory(data_write2, 0x12, 100);
 80008b6:	2264      	movs	r2, #100	; 0x64
 80008b8:	2112      	movs	r1, #18
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <main+0x144>)
 80008bc:	f000 fc96 	bl	80011ec <BSP_QSPI_WriteMemory>
	printf("Write 2 done....\r\n");
 80008c0:	4817      	ldr	r0, [pc, #92]	; (8000920 <main+0x148>)
 80008c2:	f006 f9c7 	bl	8006c54 <puts>

	HAL_Delay(1000);
 80008c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ca:	f001 f87f 	bl	80019cc <HAL_Delay>
	BSP_QSPI_ReadMemory(data_read, 0x12, 100);
 80008ce:	2264      	movs	r2, #100	; 0x64
 80008d0:	2112      	movs	r1, #18
 80008d2:	480f      	ldr	r0, [pc, #60]	; (8000910 <main+0x138>)
 80008d4:	f000 fd8c 	bl	80013f0 <BSP_QSPI_ReadMemory>
	printf("Read done....\r\n");
 80008d8:	480e      	ldr	r0, [pc, #56]	; (8000914 <main+0x13c>)
 80008da:	f006 f9bb 	bl	8006c54 <puts>

	printf("Data2 : %d %d\r\n",data_read[0],data_read[1]);
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <main+0x138>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <main+0x138>)
 80008e6:	785b      	ldrb	r3, [r3, #1]
 80008e8:	461a      	mov	r2, r3
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <main+0x14c>)
 80008ec:	f006 f92c 	bl	8006b48 <iprintf>

	while (1)
	{
		printf("Flash Memory\r\n");
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <main+0x150>)
 80008f2:	f006 f9af 	bl	8006c54 <puts>
		HAL_Delay(1000);
 80008f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fa:	f001 f867 	bl	80019cc <HAL_Delay>
		printf("Flash Memory\r\n");
 80008fe:	e7f7      	b.n	80008f0 <main+0x118>
 8000900:	58024400 	.word	0x58024400
 8000904:	080079a4 	.word	0x080079a4
 8000908:	24000008 	.word	0x24000008
 800090c:	080079b0 	.word	0x080079b0
 8000910:	240000b8 	.word	0x240000b8
 8000914:	080079c0 	.word	0x080079c0
 8000918:	080079d0 	.word	0x080079d0
 800091c:	24000014 	.word	0x24000014
 8000920:	080079e0 	.word	0x080079e0
 8000924:	080079f4 	.word	0x080079f4
 8000928:	08007a04 	.word	0x08007a04

0800092c <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09e      	sub	sp, #120	; 0x78
 8000930:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000938:	2004      	movs	r0, #4
 800093a:	f001 fcc9 	bl	80022d0 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <SystemClock_Config+0xf4>)
 8000944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000946:	4a36      	ldr	r2, [pc, #216]	; (8000a20 <SystemClock_Config+0xf4>)
 8000948:	f023 0301 	bic.w	r3, r3, #1
 800094c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <SystemClock_Config+0xf4>)
 8000950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <SystemClock_Config+0xf8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a31      	ldr	r2, [pc, #196]	; (8000a24 <SystemClock_Config+0xf8>)
 800095e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <SystemClock_Config+0xf8>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000970:	bf00      	nop
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <SystemClock_Config+0xf8>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800097e:	d1f8      	bne.n	8000972 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_HSI |RCC_OSCILLATORTYPE_HSE;
 8000980:	2303      	movs	r3, #3
 8000982:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000988:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800098a:	2301      	movs	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	2302      	movs	r3, #2
 8000998:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 15;
 800099a:	230f      	movs	r3, #15
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800099e:	23a0      	movs	r3, #160	; 0xa0
 80009a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ae:	2304      	movs	r3, #4
 80009b0:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009b6:	2308      	movs	r3, #8
 80009b8:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fc02 	bl	80031c8 <HAL_RCC_OscConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80009ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009d2:	f000 f8cb 	bl	8000b6c <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80009d6:	233f      	movs	r3, #63	; 0x3f
 80009d8:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2303      	movs	r3, #3
 80009dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009e2:	2308      	movs	r3, #8
 80009e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009e6:	2340      	movs	r3, #64	; 0x40
 80009e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009ea:	2340      	movs	r3, #64	; 0x40
 80009ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009f4:	2340      	movs	r3, #64	; 0x40
 80009f6:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80009f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009fc:	2104      	movs	r1, #4
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fff2 	bl	80039e8 <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000a0a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a12:	f000 f8ab 	bl	8000b6c <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 8000a16:	bf00      	nop
 8000a18:	3778      	adds	r7, #120	; 0x78
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	58000400 	.word	0x58000400
 8000a24:	58024800 	.word	0x58024800

08000a28 <MX_UART8_Init>:


static void MX_UART8_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  huart8.Instance = UART8;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <MX_UART8_Init+0x94>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000a70:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a72:	f004 fed7 	bl	8005824 <HAL_UART_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000a7c:	f000 f876 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a84:	f005 feba 	bl	80067fc <HAL_UARTEx_SetTxFifoThreshold>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000a8e:	f000 f86d 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000a96:	f005 feef 	bl	8006878 <HAL_UARTEx_SetRxFifoThreshold>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000aa0:	f000 f864 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_UART8_Init+0x90>)
 8000aa6:	f005 fe70 	bl	800678a <HAL_UARTEx_DisableFifoMode>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000ab0:	f000 f85c 	bl	8000b6c <Error_Handler>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2400011c 	.word	0x2400011c
 8000abc:	40007c00 	.word	0x40007c00

08000ac0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0320 	and.w	r3, r3, #32
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_GPIO_Init+0xa8>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]

}
 8000b5c:	bf00      	nop
 8000b5e:	371c      	adds	r7, #28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	58024400 	.word	0x58024400

08000b6c <Error_Handler>:

void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <MX_QUADSPI_Init>:
static uint32_t address_Write;
volatile static uint32_t size_Write;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_QUADSPI_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_QUADSPI_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_QUADSPI_Init+0x4c>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_QUADSPI_Init+0x4c>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <MX_QUADSPI_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_QUADSPI_Init+0x4c>)
 8000b9a:	2219      	movs	r2, #25
 8000b9c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_QUADSPI_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_QUADSPI_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_QUADSPI_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <MX_QUADSPI_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bb6:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_QUADSPI_Init+0x4c>)
 8000bb8:	f001 fbe4 	bl	8002384 <HAL_QSPI_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d000      	beq.n	8000bc4 <MX_QUADSPI_Init+0x48>
  {
	  while(1);
 8000bc2:	e7fe      	b.n	8000bc2 <MX_QUADSPI_Init+0x46>
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	240001ac 	.word	0x240001ac
 8000bcc:	52005000 	.word	0x52005000

08000bd0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]

  if(hqspi->Instance==QUADSPI)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a6e      	ldr	r2, [pc, #440]	; (8000da8 <HAL_QSPI_MspInit+0x1d8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	f040 80cd 	bne.w	8000d8e <HAL_QSPI_MspInit+0x1be>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000bf4:	4b6d      	ldr	r3, [pc, #436]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000bf6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bfa:	4a6c      	ldr	r2, [pc, #432]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000c04:	4b69      	ldr	r3, [pc, #420]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	623b      	str	r3, [r7, #32]
 8000c10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c12:	4b66      	ldr	r3, [pc, #408]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	4a64      	ldr	r2, [pc, #400]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c22:	4b62      	ldr	r3, [pc, #392]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c30:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	4a5d      	ldr	r2, [pc, #372]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c38:	f043 0320 	orr.w	r3, r3, #32
 8000c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c40:	4b5a      	ldr	r3, [pc, #360]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	f003 0320 	and.w	r3, r3, #32
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	4b57      	ldr	r3, [pc, #348]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	4a55      	ldr	r2, [pc, #340]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5e:	4b53      	ldr	r3, [pc, #332]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b4f      	ldr	r3, [pc, #316]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	4a4e      	ldr	r2, [pc, #312]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7c:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	4b48      	ldr	r3, [pc, #288]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4a46      	ldr	r2, [pc, #280]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4b44      	ldr	r3, [pc, #272]	; (8000dac <HAL_QSPI_MspInit+0x1dc>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8000ca8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cba:	2309      	movs	r3, #9
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	483a      	ldr	r0, [pc, #232]	; (8000db0 <HAL_QSPI_MspInit+0x1e0>)
 8000cc6:	f000 fff3 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000cca:	2340      	movs	r3, #64	; 0x40
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000cda:	230a      	movs	r3, #10
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4832      	ldr	r0, [pc, #200]	; (8000db0 <HAL_QSPI_MspInit+0x1e0>)
 8000ce6:	f000 ffe3 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8000cea:	23c0      	movs	r3, #192	; 0xc0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cfa:	2309      	movs	r3, #9
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	482b      	ldr	r0, [pc, #172]	; (8000db4 <HAL_QSPI_MspInit+0x1e4>)
 8000d06:	f000 ffd3 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8000d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4823      	ldr	r0, [pc, #140]	; (8000db4 <HAL_QSPI_MspInit+0x1e4>)
 8000d28:	f000 ffc2 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d3c:	2309      	movs	r3, #9
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	481c      	ldr	r0, [pc, #112]	; (8000db8 <HAL_QSPI_MspInit+0x1e8>)
 8000d48:	f000 ffb2 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d5c:	2309      	movs	r3, #9
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4815      	ldr	r0, [pc, #84]	; (8000dbc <HAL_QSPI_MspInit+0x1ec>)
 8000d68:	f000 ffa2 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8000d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d7e:	2309      	movs	r3, #9
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <HAL_QSPI_MspInit+0x1f0>)
 8000d8a:	f000 ff91 	bl	8001cb0 <HAL_GPIO_Init>
  }


  /*##-3- Configure the NVIC for QSPI #########################################*/
    /* NVIC configuration for QSPI interrupt */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	210f      	movs	r1, #15
 8000d92:	205c      	movs	r0, #92	; 0x5c
 8000d94:	f000 ff49 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8000d98:	205c      	movs	r0, #92	; 0x5c
 8000d9a:	f000 ff60 	bl	8001c5e <HAL_NVIC_EnableIRQ>

}
 8000d9e:	bf00      	nop
 8000da0:	3738      	adds	r7, #56	; 0x38
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	52005000 	.word	0x52005000
 8000dac:	58024400 	.word	0x58024400
 8000db0:	58021800 	.word	0x58021800
 8000db4:	58021400 	.word	0x58021400
 8000db8:	58021c00 	.word	0x58021c00
 8000dbc:	58020400 	.word	0x58020400
 8000dc0:	58020c00 	.word	0x58020c00

08000dc4 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  if(hqspi->Instance==QUADSPI)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <HAL_QSPI_MspDeInit+0x60>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d11e      	bne.n	8000e14 <HAL_QSPI_MspDeInit+0x50>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_QSPI_MspDeInit+0x64>)
 8000dd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_QSPI_MspDeInit+0x64>)
 8000dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000de2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOG, QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin|QSPI_BK1_NCS_Pin);
 8000de6:	f244 2140 	movw	r1, #16960	; 0x4240
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <HAL_QSPI_MspDeInit+0x68>)
 8000dec:	f001 f910 	bl	8002010 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin|QSPI_BK1_IO1_Pin);
 8000df0:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000df4:	480e      	ldr	r0, [pc, #56]	; (8000e30 <HAL_QSPI_MspDeInit+0x6c>)
 8000df6:	f001 f90b 	bl	8002010 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin);
 8000dfa:	210c      	movs	r1, #12
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <HAL_QSPI_MspDeInit+0x70>)
 8000dfe:	f001 f907 	bl	8002010 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_CLK_GPIO_Port, QSPI_CLK_Pin);
 8000e02:	2104      	movs	r1, #4
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <HAL_QSPI_MspDeInit+0x74>)
 8000e06:	f001 f903 	bl	8002010 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_BK1_IO0_GPIO_Port, QSPI_BK1_IO0_Pin);
 8000e0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <HAL_QSPI_MspDeInit+0x78>)
 8000e10:	f001 f8fe 	bl	8002010 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
  /*##-1- Disable the NVIC for QSPI##################################*/
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8000e14:	205c      	movs	r0, #92	; 0x5c
 8000e16:	f000 ff30 	bl	8001c7a <HAL_NVIC_DisableIRQ>

  /*##-2- Disable peripherals ################################################*/
  /* De-configure DMA channel */
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	52005000 	.word	0x52005000
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58021800 	.word	0x58021800
 8000e30:	58021400 	.word	0x58021400
 8000e34:	58021c00 	.word	0x58021c00
 8000e38:	58020400 	.word	0x58020400
 8000e3c:	58020c00 	.word	0x58020c00

08000e40 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */

/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init() {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000e44:	480f      	ldr	r0, [pc, #60]	; (8000e84 <CSP_QUADSPI_Init+0x44>)
 8000e46:	f001 fb11 	bl	800246c <HAL_QSPI_DeInit>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d000      	beq.n	8000e52 <CSP_QUADSPI_Init+0x12>
		while(1);
 8000e50:	e7fe      	b.n	8000e50 <CSP_QUADSPI_Init+0x10>
	}

	MX_QUADSPI_Init();
 8000e52:	f7ff fe93 	bl	8000b7c <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 8000e56:	f000 fa6d 	bl	8001334 <QSPI_ResetChip>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d000      	beq.n	8000e62 <CSP_QUADSPI_Init+0x22>
		while(1);
 8000e60:	e7fe      	b.n	8000e60 <CSP_QUADSPI_Init+0x20>
	}

	if (sFLASH_ID != QSPI_FLASH_ReadID())
 8000e62:	f000 fb15 	bl	8001490 <QSPI_FLASH_ReadID>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <CSP_QUADSPI_Init+0x48>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d000      	beq.n	8000e70 <CSP_QUADSPI_Init+0x30>
	{
		while(1);
 8000e6e:	e7fe      	b.n	8000e6e <CSP_QUADSPI_Init+0x2e>
	}

	if (QSPI_Configuration() != HAL_OK) {
 8000e70:	f000 f8a2 	bl	8000fb8 <QSPI_Configuration>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d000      	beq.n	8000e7c <CSP_QUADSPI_Init+0x3c>
		while(1);
 8000e7a:	e7fe      	b.n	8000e7a <CSP_QUADSPI_Init+0x3a>
	}

	return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	240001ac 	.word	0x240001ac
 8000e88:	0020ba20 	.word	0x0020ba20

08000e8c <QSPI_AutoPollingMemReady>:

static uint8_t QSPI_AutoPollingMemReady(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	 QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000e98:	2305      	movs	r3, #5
 8000e9a:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000ea4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x01;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000ece:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed2:	617b      	str	r3, [r7, #20]

	status_matched = 0;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <QSPI_AutoPollingMemReady+0x7c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
	if (HAL_QSPI_AutoPolling_IT(&hqspi, &sCommand, &sConfig) != HAL_OK) {
 8000eda:	463a      	mov	r2, r7
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480a      	ldr	r0, [pc, #40]	; (8000f0c <QSPI_AutoPollingMemReady+0x80>)
 8000ee4:	f001 fed1 	bl	8002c8a <HAL_QSPI_AutoPolling_IT>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <QSPI_AutoPollingMemReady+0x66>
		return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e006      	b.n	8000f00 <QSPI_AutoPollingMemReady+0x74>
	}
	while(!status_matched);
 8000ef2:	bf00      	nop
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <QSPI_AutoPollingMemReady+0x7c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0fa      	beq.n	8000ef4 <QSPI_AutoPollingMemReady+0x68>
	return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3750      	adds	r7, #80	; 0x50
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	240000aa 	.word	0x240000aa
 8000f0c:	240001ac 	.word	0x240001ac

08000f10 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b094      	sub	sp, #80	; 0x50
 8000f14:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000f1c:	2306      	movs	r3, #6
 8000f1e:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f34:	2300      	movs	r3, #0
 8000f36:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4619      	mov	r1, r3
 8000f46:	481a      	ldr	r0, [pc, #104]	; (8000fb0 <QSPI_WriteEnable+0xa0>)
 8000f48:	f001 fc6a 	bl	8002820 <HAL_QSPI_Command>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <QSPI_WriteEnable+0x46>
			!= HAL_OK) {

		return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e027      	b.n	8000fa6 <QSPI_WriteEnable+0x96>
	}


	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8000f56:	2302      	movs	r3, #2
 8000f58:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000f66:	2310      	movs	r3, #16
 8000f68:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000f6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f6e:	617b      	str	r3, [r7, #20]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000f70:	2305      	movs	r3, #5
 8000f72:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f78:	63fb      	str	r3, [r7, #60]	; 0x3c

	status_matched = 0;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <QSPI_WriteEnable+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
	if (HAL_QSPI_AutoPolling_IT(&hqspi, &sCommand, &sConfig) != HAL_OK) {
 8000f80:	463a      	mov	r2, r7
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	4619      	mov	r1, r3
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <QSPI_WriteEnable+0xa0>)
 8000f8a:	f001 fe7e 	bl	8002c8a <HAL_QSPI_AutoPolling_IT>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <QSPI_WriteEnable+0x88>
		return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e006      	b.n	8000fa6 <QSPI_WriteEnable+0x96>
	}
	while(!status_matched);
 8000f98:	bf00      	nop
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <QSPI_WriteEnable+0xa4>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0fa      	beq.n	8000f9a <QSPI_WriteEnable+0x8a>

	return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3750      	adds	r7, #80	; 0x50
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	240001ac 	.word	0x240001ac
 8000fb4:	240000aa 	.word	0x240000aa

08000fb8 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
static uint8_t QSPI_Configuration(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b090      	sub	sp, #64	; 0x40
 8000fbc:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t test_buffer[4] = { 0 };
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
	/*read status register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc6:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000fc8:	2305      	movs	r3, #5
 8000fca:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	484c      	ldr	r0, [pc, #304]	; (800112c <QSPI_Configuration+0x174>)
 8000ffa:	f001 fc11 	bl	8002820 <HAL_QSPI_Command>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <QSPI_Configuration+0x50>
			!= HAL_OK) {

		return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e08d      	b.n	8001124 <QSPI_Configuration+0x16c>
	}



	rx_complete = 0;
 8001008:	4b49      	ldr	r3, [pc, #292]	; (8001130 <QSPI_Configuration+0x178>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	if (HAL_QSPI_Receive_IT(&hqspi, test_buffer) != HAL_OK) {
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4846      	ldr	r0, [pc, #280]	; (800112c <QSPI_Configuration+0x174>)
 8001014:	f001 fdca 	bl	8002bac <HAL_QSPI_Receive_IT>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <QSPI_Configuration+0x6a>
		return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e080      	b.n	8001124 <QSPI_Configuration+0x16c>
	}
	while(!rx_complete);
 8001022:	bf00      	nop
 8001024:	4b42      	ldr	r3, [pc, #264]	; (8001130 <QSPI_Configuration+0x178>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0fa      	beq.n	8001024 <QSPI_Configuration+0x6c>
	/*read configuration register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800102e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001032:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_CONFIGURATION_REG_CMD;
 8001034:	2315      	movs	r3, #21
 8001036:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800104e:	2300      	movs	r3, #0
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001052:	2300      	movs	r3, #0
 8001054:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001062:	4619      	mov	r1, r3
 8001064:	4831      	ldr	r0, [pc, #196]	; (800112c <QSPI_Configuration+0x174>)
 8001066:	f001 fbdb 	bl	8002820 <HAL_QSPI_Command>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <QSPI_Configuration+0xbc>
			!= HAL_OK) {

		return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e057      	b.n	8001124 <QSPI_Configuration+0x16c>
	}

	rx_complete = 0;
 8001074:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <QSPI_Configuration+0x178>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
	if (HAL_QSPI_Receive_IT(&hqspi, &(test_buffer[1])) != HAL_OK) {
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	3301      	adds	r3, #1
 800107e:	4619      	mov	r1, r3
 8001080:	482a      	ldr	r0, [pc, #168]	; (800112c <QSPI_Configuration+0x174>)
 8001082:	f001 fd93 	bl	8002bac <HAL_QSPI_Receive_IT>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <QSPI_Configuration+0xd8>
		return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e049      	b.n	8001124 <QSPI_Configuration+0x16c>
	}
	while(!rx_complete);
 8001090:	bf00      	nop
 8001092:	4b27      	ldr	r3, [pc, #156]	; (8001130 <QSPI_Configuration+0x178>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0fa      	beq.n	8001092 <QSPI_Configuration+0xda>
	/*modify buffer to enable quad mode*/
	test_buffer[0] |= 0x40;
 800109c:	793b      	ldrb	r3, [r7, #4]
 800109e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	713b      	strb	r3, [r7, #4]

	/*set dummy cycles*/
	test_buffer[1] |= 0xC0;
 80010a6:	797b      	ldrb	r3, [r7, #5]
 80010a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	717b      	strb	r3, [r7, #5]

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b4:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80010b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ba:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = WRITE_STATUS_REG_CMD;
 80010cc:	2301      	movs	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80010d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 2;
 80010de:	2302      	movs	r3, #2
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ea:	4619      	mov	r1, r3
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <QSPI_Configuration+0x174>)
 80010ee:	f001 fb97 	bl	8002820 <HAL_QSPI_Command>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <QSPI_Configuration+0x144>
			!= HAL_OK) {

		return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e013      	b.n	8001124 <QSPI_Configuration+0x16c>
	}

	tx_complete = 0;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <QSPI_Configuration+0x17c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
	if (HAL_QSPI_Transmit_IT(&hqspi, test_buffer) != HAL_OK) {
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <QSPI_Configuration+0x174>)
 8001108:	f001 fceb 	bl	8002ae2 <HAL_QSPI_Transmit_IT>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <QSPI_Configuration+0x15e>
		return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e006      	b.n	8001124 <QSPI_Configuration+0x16c>
	}
	while(!tx_complete);
 8001116:	bf00      	nop
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <QSPI_Configuration+0x17c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0fa      	beq.n	8001118 <QSPI_Configuration+0x160>
	return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3740      	adds	r7, #64	; 0x40
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	240001ac 	.word	0x240001ac
 8001130:	240000a8 	.word	0x240000a8
 8001134:	240000a9 	.word	0x240000a9

08001138 <BSP_QSPI_EraseSector>:

static uint8_t BSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b090      	sub	sp, #64	; 0x40
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]

	QSPI_CommandTypeDef sCommand;

	EraseStartAddress = EraseStartAddress
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <BSP_QSPI_EraseSector+0xa8>)
 8001146:	4013      	ands	r3, r2
 8001148:	607b      	str	r3, [r7, #4]
			- EraseStartAddress % MEMORY_SECTOR_SIZE;

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800114a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114e:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001154:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001156:	2300      	movs	r3, #0
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800115e:	2300      	movs	r3, #0
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001162:	2300      	movs	r3, #0
 8001164:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = SECTOR_ERASE_CMD;
 8001166:	2320      	movs	r3, #32
 8001168:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800116a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116e:	627b      	str	r3, [r7, #36]	; 0x24

	sCommand.DataMode = QSPI_DATA_NONE;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]

	while (EraseEndAddress >= EraseStartAddress) {
 8001178:	e029      	b.n	80011ce <BSP_QSPI_EraseSector+0x96>
		sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001180:	60fb      	str	r3, [r7, #12]

		if (QSPI_WriteEnable() != HAL_OK) {
 8001182:	f7ff fec5 	bl	8000f10 <QSPI_WriteEnable>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <BSP_QSPI_EraseSector+0x58>
			return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e023      	b.n	80011d8 <BSP_QSPI_EraseSector+0xa0>
		}
		command_complete = 0;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <BSP_QSPI_EraseSector+0xac>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
		if (HAL_QSPI_Command_IT(&hqspi, &sCommand)
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4619      	mov	r1, r3
 800119c:	4812      	ldr	r0, [pc, #72]	; (80011e8 <BSP_QSPI_EraseSector+0xb0>)
 800119e:	f001 fb9d 	bl	80028dc <HAL_QSPI_Command_IT>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <BSP_QSPI_EraseSector+0x74>
				!= HAL_OK) {
			return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e015      	b.n	80011d8 <BSP_QSPI_EraseSector+0xa0>
		}
		while(!command_complete);
 80011ac:	bf00      	nop
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <BSP_QSPI_EraseSector+0xac>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0fa      	beq.n	80011ae <BSP_QSPI_EraseSector+0x76>

		EraseStartAddress += MEMORY_SECTOR_SIZE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011be:	607b      	str	r3, [r7, #4]

		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 80011c0:	f7ff fe64 	bl	8000e8c <QSPI_AutoPollingMemReady>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <BSP_QSPI_EraseSector+0x96>
			return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e004      	b.n	80011d8 <BSP_QSPI_EraseSector+0xa0>
	while (EraseEndAddress >= EraseStartAddress) {
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d2d1      	bcs.n	800117a <BSP_QSPI_EraseSector+0x42>
		}
	}

	return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3740      	adds	r7, #64	; 0x40
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	fffffc00 	.word	0xfffffc00
 80011e4:	240000ab 	.word	0x240000ab
 80011e8:	240001ac 	.word	0x240001ac

080011ec <BSP_QSPI_WriteMemory>:


uint8_t BSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address,uint32_t buffer_size) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b098      	sub	sp, #96	; 0x60
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Erase before write */
	uint32_t era_start,era_end;
	era_start = address;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	657b      	str	r3, [r7, #84]	; 0x54
	era_end = address + buffer_size;
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	653b      	str	r3, [r7, #80]	; 0x50

	if(BSP_QSPI_EraseSector(era_start, era_end) != HAL_OK)
 8001204:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001206:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001208:	f7ff ff96 	bl	8001138 <BSP_QSPI_EraseSector>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <BSP_QSPI_WriteMemory+0x2a>
	{
		return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e086      	b.n	8001324 <BSP_QSPI_WriteMemory+0x138>
	}

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	65bb      	str	r3, [r7, #88]	; 0x58



	while (current_addr <= address) {
 800121a:	e003      	b.n	8001224 <BSP_QSPI_WriteMemory+0x38>
		current_addr += MEMORY_PAGE_SIZE;
 800121c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800121e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001222:	65bb      	str	r3, [r7, #88]	; 0x58
	while (current_addr <= address) {
 8001224:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	429a      	cmp	r2, r3
 800122a:	d9f7      	bls.n	800121c <BSP_QSPI_WriteMemory+0x30>
	}
	current_size = current_addr - address;
 800122c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
 8001234:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	d901      	bls.n	8001240 <BSP_QSPI_WriteMemory+0x54>
		current_size = buffer_size;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	65fb      	str	r3, [r7, #92]	; 0x5c
	}

	/* Initialize the adress variables */
	current_addr = address;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	65bb      	str	r3, [r7, #88]	; 0x58
	end_addr = address + buffer_size;
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800124c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001256:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001260:	2300      	movs	r3, #0
 8001262:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001264:	2300      	movs	r3, #0
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 8001268:	2338      	movs	r3, #56	; 0x38
 800126a:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 800126c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode = QSPI_DATA_4_LINES;
 8001272:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001276:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = buffer_size;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address = address;
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
 8001284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001286:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
 8001288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (current_size == 0) {
 800128c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <BSP_QSPI_WriteMemory+0xaa>
			return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e046      	b.n	8001324 <BSP_QSPI_WriteMemory+0x138>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
 8001296:	f7ff fe3b 	bl	8000f10 <QSPI_WriteEnable>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <BSP_QSPI_WriteMemory+0xb8>
			return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e03f      	b.n	8001324 <BSP_QSPI_WriteMemory+0x138>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4619      	mov	r1, r3
 80012ae:	481f      	ldr	r0, [pc, #124]	; (800132c <BSP_QSPI_WriteMemory+0x140>)
 80012b0:	f001 fab6 	bl	8002820 <HAL_QSPI_Command>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <BSP_QSPI_WriteMemory+0xd2>
				!= HAL_OK) {

			return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e032      	b.n	8001324 <BSP_QSPI_WriteMemory+0x138>
		}


		tx_complete = 0;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <BSP_QSPI_WriteMemory+0x144>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
		/* Transmission of the data */
		if (HAL_QSPI_Transmit_IT(&hqspi, buffer) != HAL_OK) {
 80012c4:	68f9      	ldr	r1, [r7, #12]
 80012c6:	4819      	ldr	r0, [pc, #100]	; (800132c <BSP_QSPI_WriteMemory+0x140>)
 80012c8:	f001 fc0b 	bl	8002ae2 <HAL_QSPI_Transmit_IT>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <BSP_QSPI_WriteMemory+0xea>

			return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e026      	b.n	8001324 <BSP_QSPI_WriteMemory+0x138>
		}
		while(!tx_complete);
 80012d6:	bf00      	nop
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <BSP_QSPI_WriteMemory+0x144>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0fa      	beq.n	80012d8 <BSP_QSPI_WriteMemory+0xec>

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 80012e2:	f7ff fdd3 	bl	8000e8c <QSPI_AutoPollingMemReady>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <BSP_QSPI_WriteMemory+0x104>
			return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e019      	b.n	8001324 <BSP_QSPI_WriteMemory+0x138>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 80012f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012f4:	4413      	add	r3, r2
 80012f6:	65bb      	str	r3, [r7, #88]	; 0x58
		buffer += current_size;
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012fc:	4413      	add	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 8001300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001302:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 8001306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001308:	429a      	cmp	r2, r3
 800130a:	d203      	bcs.n	8001314 <BSP_QSPI_WriteMemory+0x128>
 800130c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800130e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	e001      	b.n	8001318 <BSP_QSPI_WriteMemory+0x12c>
 8001314:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
 8001318:	65fb      	str	r3, [r7, #92]	; 0x5c
	} while (current_addr <= end_addr);
 800131a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800131c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800131e:	429a      	cmp	r2, r3
 8001320:	d9b0      	bls.n	8001284 <BSP_QSPI_WriteMemory+0x98>

	return HAL_OK;
 8001322:	2300      	movs	r3, #0

}
 8001324:	4618      	mov	r0, r3
 8001326:	3760      	adds	r7, #96	; 0x60
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	240001ac 	.word	0x240001ac
 8001330:	240000a9 	.word	0x240000a9

08001334 <QSPI_ResetChip>:


static uint8_t QSPI_ResetChip() {
 8001334:	b580      	push	{r7, lr}
 8001336:	b090      	sub	sp, #64	; 0x40
 8001338:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800133e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001342:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001356:	2300      	movs	r3, #0
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 800135a:	2366      	movs	r3, #102	; 0x66
 800135c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4619      	mov	r1, r3
 8001376:	481d      	ldr	r0, [pc, #116]	; (80013ec <QSPI_ResetChip+0xb8>)
 8001378:	f001 fa52 	bl	8002820 <HAL_QSPI_Command>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <QSPI_ResetChip+0x52>
			!= HAL_OK) {

		return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e02e      	b.n	80013e4 <QSPI_ResetChip+0xb0>
	}


	for (temp = 0; temp < 0x2f; temp++) {
 8001386:	2300      	movs	r3, #0
 8001388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800138a:	e003      	b.n	8001394 <QSPI_ResetChip+0x60>
		__NOP();
 800138c:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 800138e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001390:	3301      	adds	r3, #1
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001396:	2b2e      	cmp	r3, #46	; 0x2e
 8001398:	d9f8      	bls.n	800138c <QSPI_ResetChip+0x58>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800139a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80013a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a4:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80013b2:	2300      	movs	r3, #0
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 80013b6:	2399      	movs	r3, #153	; 0x99
 80013b8:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <QSPI_ResetChip+0xb8>)
 80013d4:	f001 fa24 	bl	8002820 <HAL_QSPI_Command>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <QSPI_ResetChip+0xae>
			!= HAL_OK) {

		return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <QSPI_ResetChip+0xb0>
	}

	return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3740      	adds	r7, #64	; 0x40
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	240001ac 	.word	0x240001ac

080013f0 <BSP_QSPI_ReadMemory>:



uint8_t BSP_QSPI_ReadMemory(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b092      	sub	sp, #72	; 0x48
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
    QSPI_CommandTypeDef s_command;
    if(Size == 0)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <BSP_QSPI_ReadMemory+0x16>
    	Size = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	607b      	str	r3, [r7, #4]
     /* Initialize read command */
     s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
     s_command.Instruction       = READ_CMD;
 800140c:	2303      	movs	r3, #3
 800140e:	613b      	str	r3, [r7, #16]
     s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
     s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	61fb      	str	r3, [r7, #28]
     s_command.Address           = ReadAddr;
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	617b      	str	r3, [r7, #20]
     s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
     s_command.DataMode          = QSPI_DATA_1_LINE;
 8001424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
     s_command.DummyCycles       = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
     s_command.NbData            = Size;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
     s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
     s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001436:	2300      	movs	r3, #0
 8001438:	643b      	str	r3, [r7, #64]	; 0x40
     s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800143a:	2300      	movs	r3, #0
 800143c:	647b      	str	r3, [r7, #68]	; 0x44

     /* configuration command */
 	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	f241 3288 	movw	r2, #5000	; 0x1388
 8001446:	4619      	mov	r1, r3
 8001448:	480f      	ldr	r0, [pc, #60]	; (8001488 <BSP_QSPI_ReadMemory+0x98>)
 800144a:	f001 f9e9 	bl	8002820 <HAL_QSPI_Command>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <BSP_QSPI_ReadMemory+0x68>
 			!= HAL_OK) {

 		return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e012      	b.n	800147e <BSP_QSPI_ReadMemory+0x8e>
 	}

    /* Receive data */
     rx_complete = 0;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <BSP_QSPI_ReadMemory+0x9c>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
     if(HAL_QSPI_Receive_IT(&hqspi, pData)!= HAL_OK) {
 800145e:	68f9      	ldr	r1, [r7, #12]
 8001460:	4809      	ldr	r0, [pc, #36]	; (8001488 <BSP_QSPI_ReadMemory+0x98>)
 8001462:	f001 fba3 	bl	8002bac <HAL_QSPI_Receive_IT>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <BSP_QSPI_ReadMemory+0x80>
         return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e006      	b.n	800147e <BSP_QSPI_ReadMemory+0x8e>
     }
     while(!rx_complete);
 8001470:	bf00      	nop
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <BSP_QSPI_ReadMemory+0x9c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0fa      	beq.n	8001472 <BSP_QSPI_ReadMemory+0x82>

     return HAL_OK;
 800147c:	2300      	movs	r3, #0
 }
 800147e:	4618      	mov	r0, r3
 8001480:	3748      	adds	r7, #72	; 0x48
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	240001ac 	.word	0x240001ac
 800148c:	240000a8 	.word	0x240000a8

08001490 <QSPI_FLASH_ReadID>:

static uint32_t QSPI_FLASH_ReadID()
 {
 8001490:	b580      	push	{r7, lr}
 8001492:	b090      	sub	sp, #64	; 0x40
 8001494:	af00      	add	r7, sp, #0
     QSPI_CommandTypeDef s_command;
     uint32_t Temp = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	63fb      	str	r3, [r7, #60]	; 0x3c
     uint8_t pData[3];
     /* Read JEDEC ID */
     s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800149a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149e:	61fb      	str	r3, [r7, #28]
     s_command.Instruction       = READ_JEDEC_ID_CMD;
 80014a0:	239f      	movs	r3, #159	; 0x9f
 80014a2:	607b      	str	r3, [r7, #4]
     s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80014a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a8:	623b      	str	r3, [r7, #32]
     s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80014aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ae:	613b      	str	r3, [r7, #16]
     s_command.DataMode          = QSPI_DATA_1_LINE;
 80014b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
     s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
     s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
     s_command.DummyCycles       = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
     s_command.NbData            = 3;
 80014c2:	2303      	movs	r3, #3
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
     s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	633b      	str	r3, [r7, #48]	; 0x30
     s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80014ca:	2300      	movs	r3, #0
 80014cc:	637b      	str	r3, [r7, #52]	; 0x34
     s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014ce:	2300      	movs	r3, #0
 80014d0:	63bb      	str	r3, [r7, #56]	; 0x38

     if(HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d8:	4619      	mov	r1, r3
 80014da:	4811      	ldr	r0, [pc, #68]	; (8001520 <QSPI_FLASH_ReadID+0x90>)
 80014dc:	f001 f9a0 	bl	8002820 <HAL_QSPI_Command>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <QSPI_FLASH_ReadID+0x5a>
  		return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e015      	b.n	8001516 <QSPI_FLASH_ReadID+0x86>

     }

     if(HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)!= HAL_OK) {
 80014ea:	463b      	mov	r3, r7
 80014ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f0:	4619      	mov	r1, r3
 80014f2:	480b      	ldr	r0, [pc, #44]	; (8001520 <QSPI_FLASH_ReadID+0x90>)
 80014f4:	f001 fa58 	bl	80029a8 <HAL_QSPI_Receive>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <QSPI_FLASH_ReadID+0x72>
       /* Users can add some code here to handle this error */
  		return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e009      	b.n	8001516 <QSPI_FLASH_ReadID+0x86>

     }

    Temp = ( pData[2] | pData[1]<<8 )| ( pData[0]<<16 );
 8001502:	78bb      	ldrb	r3, [r7, #2]
 8001504:	461a      	mov	r2, r3
 8001506:	787b      	ldrb	r3, [r7, #1]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	431a      	orrs	r2, r3
 800150c:	783b      	ldrb	r3, [r7, #0]
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	4313      	orrs	r3, r2
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
	return Temp;
 8001514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

}
 8001516:	4618      	mov	r0, r3
 8001518:	3740      	adds	r7, #64	; 0x40
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	240001ac 	.word	0x240001ac

08001524 <HAL_QSPI_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  hqspi: QSPI handle
 * @retval None
 */
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	rx_complete = 1;
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <HAL_QSPI_RxCpltCallback+0x1c>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	240000a8 	.word	0x240000a8

08001544 <HAL_QSPI_TxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  hqspi: QSPI handle
 * @retval None
 */
void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	tx_complete = 1;
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <HAL_QSPI_TxCpltCallback+0x1c>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	240000a9 	.word	0x240000a9

08001564 <HAL_QSPI_StatusMatchCallback>:
 * @brief  Status Match callback.
 * @param  hqspi: QSPI handle
 * @retval None
 */
void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	status_matched = 1;
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_QSPI_StatusMatchCallback+0x1c>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	240000aa 	.word	0x240000aa

08001584 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	command_complete = 1;
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <HAL_QSPI_CmdCpltCallback+0x1c>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	240000ab 	.word	0x240000ab

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_MspInit+0x30>)
 80015ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015b0:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_MspInit+0x30>)
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_MspInit+0x30>)
 80015bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	58024400 	.word	0x58024400

080015d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0ba      	sub	sp, #232	; 0xe8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	22c0      	movs	r2, #192	; 0xc0
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f005 f9f3 	bl	80069e4 <memset>
  if(huart->Instance==UART8)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a25      	ldr	r2, [pc, #148]	; (8001698 <HAL_UART_MspInit+0xc0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d142      	bne.n	800168e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001608:	2302      	movs	r3, #2
 800160a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fd72 	bl	8004100 <HAL_RCCEx_PeriphCLKConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001622:	f7ff faa3 	bl	8000b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_UART_MspInit+0xc4>)
 8001628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800162c:	4a1b      	ldr	r2, [pc, #108]	; (800169c <HAL_UART_MspInit+0xc4>)
 800162e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001632:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_UART_MspInit+0xc4>)
 8001638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800163c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_UART_MspInit+0xc4>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	4a14      	ldr	r2, [pc, #80]	; (800169c <HAL_UART_MspInit+0xc4>)
 800164c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_UART_MspInit+0xc4>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001662:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800167c:	2308      	movs	r3, #8
 800167e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001682:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_UART_MspInit+0xc8>)
 800168a:	f000 fb11 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	37e8      	adds	r7, #232	; 0xe8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40007c00 	.word	0x40007c00
 800169c:	58024400 	.word	0x58024400
 80016a0:	58022400 	.word	0x58022400

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f0:	f000 f94c 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <QUADSPI_IRQHandler+0x10>)
 80016fe:	f000 fed5 	bl	80024ac <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	240001ac 	.word	0x240001ac

0800170c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e00a      	b.n	8001734 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800171e:	f3af 8000 	nop.w
 8001722:	4601      	mov	r1, r0
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60ba      	str	r2, [r7, #8]
 800172a:	b2ca      	uxtb	r2, r1
 800172c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	dbf0      	blt.n	800171e <_read+0x12>
	}

return len;
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e009      	b.n	800176c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff f823 	bl	80007ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbf1      	blt.n	8001758 <_write+0x12>
	}
	return len;
 8001774:	687b      	ldr	r3, [r7, #4]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_close>:

int _close(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	return -1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a6:	605a      	str	r2, [r3, #4]
	return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_isatty>:

int _isatty(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	return 1;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
	return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <_sbrk+0x5c>)
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <_sbrk+0x60>)
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <_sbrk+0x64>)
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <_sbrk+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	429a      	cmp	r2, r3
 8001816:	d207      	bcs.n	8001828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001818:	f005 f8ba 	bl	8006990 <__errno>
 800181c:	4603      	mov	r3, r0
 800181e:	220c      	movs	r2, #12
 8001820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e009      	b.n	800183c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <_sbrk+0x64>)
 8001838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	24040000 	.word	0x24040000
 8001848:	00000400 	.word	0x00000400
 800184c:	240000ac 	.word	0x240000ac
 8001850:	24000210 	.word	0x24000210

08001854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800188c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001858:	f7fe ff0e 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	; (8001894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	; (80018a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f005 f88b 	bl	800699c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001886:	f7fe ffa7 	bl	80007d8 <main>
  bx  lr
 800188a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800188c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001890:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001894:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8001898:	08007af4 	.word	0x08007af4
  ldr r2, =_sbss
 800189c:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 80018a0:	2400020c 	.word	0x2400020c

080018a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC3_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ae:	2003      	movs	r0, #3
 80018b0:	f000 f9b0 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018b4:	f002 fa4e 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_Init+0x68>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	4913      	ldr	r1, [pc, #76]	; (8001914 <HAL_Init+0x6c>)
 80018c6:	5ccb      	ldrb	r3, [r1, r3]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_Init+0x68>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <HAL_Init+0x6c>)
 80018dc:	5cd3      	ldrb	r3, [r2, r3]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <HAL_Init+0x70>)
 80018ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018ec:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_Init+0x74>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 f814 	bl	8001920 <HAL_InitTick>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e002      	b.n	8001908 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001902:	f7ff fe4f 	bl	80015a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	58024400 	.word	0x58024400
 8001914:	08007a14 	.word	0x08007a14
 8001918:	24000004 	.word	0x24000004
 800191c:	24000000 	.word	0x24000000

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_InitTick+0x60>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e021      	b.n	8001978 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_InitTick+0x64>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_InitTick+0x60>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f9a3 	bl	8001c96 <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f95f 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_InitTick+0x68>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	24000024 	.word	0x24000024
 8001984:	24000000 	.word	0x24000000
 8001988:	24000020 	.word	0x24000020

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	24000024 	.word	0x24000024
 80019b0:	240001f8 	.word	0x240001f8

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	240001f8 	.word	0x240001f8

080019cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff ffee 	bl	80019b4 <HAL_GetTick>
 80019d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d005      	beq.n	80019f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_Delay+0x44>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019f2:	bf00      	nop
 80019f4:	f7ff ffde 	bl	80019b4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f7      	bhi.n	80019f4 <HAL_Delay+0x28>
  {
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	24000024 	.word	0x24000024

08001a14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_GetREVID+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0c1b      	lsrs	r3, r3, #16
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	5c001000 	.word	0x5c001000

08001a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <__NVIC_SetPriorityGrouping+0x40>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x40>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	05fa0000 	.word	0x05fa0000

08001a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4907      	ldr	r1, [pc, #28]	; (8001ac8 <__NVIC_EnableIRQ+0x38>)
 8001aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db12      	blt.n	8001b04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	490a      	ldr	r1, [pc, #40]	; (8001b10 <__NVIC_DisableIRQ+0x44>)
 8001ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	3320      	adds	r3, #32
 8001af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001af8:	f3bf 8f4f 	dsb	sy
}
 8001afc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001afe:	f3bf 8f6f 	isb	sy
}
 8001b02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff05 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c38:	f7ff ff1c 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001c3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f7ff ff90 	bl	8001b68 <NVIC_EncodePriority>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff5f 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff0f 	bl	8001a90 <__NVIC_EnableIRQ>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff1f 	bl	8001acc <__NVIC_DisableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff96 	bl	8001bd0 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cbe:	4b89      	ldr	r3, [pc, #548]	; (8001ee4 <HAL_GPIO_Init+0x234>)
 8001cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cc2:	e194      	b.n	8001fee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8186 	beq.w	8001fe8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d00b      	beq.n	8001cfc <HAL_GPIO_Init+0x4c>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d007      	beq.n	8001cfc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cf0:	2b11      	cmp	r3, #17
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d130      	bne.n	8001d5e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d32:	2201      	movs	r2, #1
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f003 0201 	and.w	r2, r3, #1
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0xee>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d123      	bne.n	8001de6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	69b9      	ldr	r1, [r7, #24]
 8001de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0203 	and.w	r2, r3, #3
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80e0 	beq.w	8001fe8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <HAL_GPIO_Init+0x238>)
 8001e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ee8 <HAL_GPIO_Init+0x238>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e38:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <HAL_GPIO_Init+0x238>)
 8001e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e46:	4a29      	ldr	r2, [pc, #164]	; (8001eec <HAL_GPIO_Init+0x23c>)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <HAL_GPIO_Init+0x240>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d052      	beq.n	8001f18 <HAL_GPIO_Init+0x268>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <HAL_GPIO_Init+0x244>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d031      	beq.n	8001ede <HAL_GPIO_Init+0x22e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <HAL_GPIO_Init+0x248>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d02b      	beq.n	8001eda <HAL_GPIO_Init+0x22a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_GPIO_Init+0x24c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d025      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_GPIO_Init+0x250>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01f      	beq.n	8001ed2 <HAL_GPIO_Init+0x222>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_GPIO_Init+0x254>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x21e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a1a      	ldr	r2, [pc, #104]	; (8001f08 <HAL_GPIO_Init+0x258>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x21a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_GPIO_Init+0x25c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x216>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_GPIO_Init+0x260>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x212>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <HAL_GPIO_Init+0x264>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x20e>
 8001eba:	2309      	movs	r3, #9
 8001ebc:	e02d      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ebe:	230a      	movs	r3, #10
 8001ec0:	e02b      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	e029      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	e027      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001eca:	2306      	movs	r3, #6
 8001ecc:	e025      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ece:	2305      	movs	r3, #5
 8001ed0:	e023      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	e021      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e01f      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e01d      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e01b      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ee2:	bf00      	nop
 8001ee4:	58000080 	.word	0x58000080
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	58000400 	.word	0x58000400
 8001ef0:	58020000 	.word	0x58020000
 8001ef4:	58020400 	.word	0x58020400
 8001ef8:	58020800 	.word	0x58020800
 8001efc:	58020c00 	.word	0x58020c00
 8001f00:	58021000 	.word	0x58021000
 8001f04:	58021400 	.word	0x58021400
 8001f08:	58021800 	.word	0x58021800
 8001f0c:	58021c00 	.word	0x58021c00
 8001f10:	58022000 	.word	0x58022000
 8001f14:	58022400 	.word	0x58022400
 8001f18:	2300      	movs	r3, #0
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	f002 0203 	and.w	r2, r2, #3
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	4093      	lsls	r3, r2
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f2a:	4938      	ldr	r1, [pc, #224]	; (800200c <HAL_GPIO_Init+0x35c>)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	3301      	adds	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f47f ae63 	bne.w	8001cc4 <HAL_GPIO_Init+0x14>
  }
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	3724      	adds	r7, #36	; 0x24
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	58000400 	.word	0x58000400

08002010 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800201e:	4b75      	ldr	r3, [pc, #468]	; (80021f4 <HAL_GPIO_DeInit+0x1e4>)
 8002020:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8002022:	e0d9      	b.n	80021d8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002024:	2201      	movs	r2, #1
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4013      	ands	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80cc 	beq.w	80021d2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800203a:	4a6f      	ldr	r2, [pc, #444]	; (80021f8 <HAL_GPIO_DeInit+0x1e8>)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002046:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a67      	ldr	r2, [pc, #412]	; (80021fc <HAL_GPIO_DeInit+0x1ec>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d037      	beq.n	80020d4 <HAL_GPIO_DeInit+0xc4>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a66      	ldr	r2, [pc, #408]	; (8002200 <HAL_GPIO_DeInit+0x1f0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d031      	beq.n	80020d0 <HAL_GPIO_DeInit+0xc0>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a65      	ldr	r2, [pc, #404]	; (8002204 <HAL_GPIO_DeInit+0x1f4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d02b      	beq.n	80020cc <HAL_GPIO_DeInit+0xbc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a64      	ldr	r2, [pc, #400]	; (8002208 <HAL_GPIO_DeInit+0x1f8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d025      	beq.n	80020c8 <HAL_GPIO_DeInit+0xb8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a63      	ldr	r2, [pc, #396]	; (800220c <HAL_GPIO_DeInit+0x1fc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d01f      	beq.n	80020c4 <HAL_GPIO_DeInit+0xb4>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a62      	ldr	r2, [pc, #392]	; (8002210 <HAL_GPIO_DeInit+0x200>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d019      	beq.n	80020c0 <HAL_GPIO_DeInit+0xb0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a61      	ldr	r2, [pc, #388]	; (8002214 <HAL_GPIO_DeInit+0x204>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d013      	beq.n	80020bc <HAL_GPIO_DeInit+0xac>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a60      	ldr	r2, [pc, #384]	; (8002218 <HAL_GPIO_DeInit+0x208>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00d      	beq.n	80020b8 <HAL_GPIO_DeInit+0xa8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a5f      	ldr	r2, [pc, #380]	; (800221c <HAL_GPIO_DeInit+0x20c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d007      	beq.n	80020b4 <HAL_GPIO_DeInit+0xa4>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a5e      	ldr	r2, [pc, #376]	; (8002220 <HAL_GPIO_DeInit+0x210>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d101      	bne.n	80020b0 <HAL_GPIO_DeInit+0xa0>
 80020ac:	2309      	movs	r3, #9
 80020ae:	e012      	b.n	80020d6 <HAL_GPIO_DeInit+0xc6>
 80020b0:	230a      	movs	r3, #10
 80020b2:	e010      	b.n	80020d6 <HAL_GPIO_DeInit+0xc6>
 80020b4:	2308      	movs	r3, #8
 80020b6:	e00e      	b.n	80020d6 <HAL_GPIO_DeInit+0xc6>
 80020b8:	2307      	movs	r3, #7
 80020ba:	e00c      	b.n	80020d6 <HAL_GPIO_DeInit+0xc6>
 80020bc:	2306      	movs	r3, #6
 80020be:	e00a      	b.n	80020d6 <HAL_GPIO_DeInit+0xc6>
 80020c0:	2305      	movs	r3, #5
 80020c2:	e008      	b.n	80020d6 <HAL_GPIO_DeInit+0xc6>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e006      	b.n	80020d6 <HAL_GPIO_DeInit+0xc6>
 80020c8:	2303      	movs	r3, #3
 80020ca:	e004      	b.n	80020d6 <HAL_GPIO_DeInit+0xc6>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e002      	b.n	80020d6 <HAL_GPIO_DeInit+0xc6>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_GPIO_DeInit+0xc6>
 80020d4:	2300      	movs	r3, #0
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	f002 0203 	and.w	r2, r2, #3
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	4093      	lsls	r3, r2
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d136      	bne.n	8002154 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	401a      	ands	r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	401a      	ands	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	43db      	mvns	r3, r3
 800210c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002110:	4013      	ands	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002122:	4013      	ands	r3, r2
 8002124:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002136:	4a30      	ldr	r2, [pc, #192]	; (80021f8 <HAL_GPIO_DeInit+0x1e8>)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	43da      	mvns	r2, r3
 8002146:	482c      	ldr	r0, [pc, #176]	; (80021f8 <HAL_GPIO_DeInit+0x1e8>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	400a      	ands	r2, r1
 800214e:	3302      	adds	r3, #2
 8002150:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2103      	movs	r1, #3
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	08d2      	lsrs	r2, r2, #3
 8002188:	4019      	ands	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2103      	movs	r1, #3
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	2101      	movs	r1, #1
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	2103      	movs	r1, #3
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	401a      	ands	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f47f af1f 	bne.w	8002024 <HAL_GPIO_DeInit+0x14>
  }
}
 80021e6:	bf00      	nop
 80021e8:	bf00      	nop
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	58000080 	.word	0x58000080
 80021f8:	58000400 	.word	0x58000400
 80021fc:	58020000 	.word	0x58020000
 8002200:	58020400 	.word	0x58020400
 8002204:	58020800 	.word	0x58020800
 8002208:	58020c00 	.word	0x58020c00
 800220c:	58021000 	.word	0x58021000
 8002210:	58021400 	.word	0x58021400
 8002214:	58021800 	.word	0x58021800
 8002218:	58021c00 	.word	0x58021c00
 800221c:	58022000 	.word	0x58022000
 8002220:	58022400 	.word	0x58022400

08002224 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800222c:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_HSEM_FastTake+0x2c>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3320      	adds	r3, #32
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	4a07      	ldr	r2, [pc, #28]	; (8002254 <HAL_HSEM_FastTake+0x30>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d101      	bne.n	8002240 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	e000      	b.n	8002242 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	58026400 	.word	0x58026400
 8002254:	80000300 	.word	0x80000300

08002258 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002262:	4906      	ldr	r1, [pc, #24]	; (800227c <HAL_HSEM_Release+0x24>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	58026400 	.word	0x58026400

08002280 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e017      	b.n	80022c2 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d004      	beq.n	80022a8 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00c      	b.n	80022c2 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2204      	movs	r2, #4
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022d8:	4b29      	ldr	r3, [pc, #164]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	2b06      	cmp	r3, #6
 80022e2:	d00a      	beq.n	80022fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022e4:	4b26      	ldr	r3, [pc, #152]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d001      	beq.n	80022f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e040      	b.n	8002378 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e03e      	b.n	8002378 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002302:	491f      	ldr	r1, [pc, #124]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4313      	orrs	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800230a:	f7ff fb53 	bl	80019b4 <HAL_GetTick>
 800230e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002310:	e009      	b.n	8002326 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002312:	f7ff fb4f 	bl	80019b4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002320:	d901      	bls.n	8002326 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e028      	b.n	8002378 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002332:	d1ee      	bne.n	8002312 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b1e      	cmp	r3, #30
 8002338:	d008      	beq.n	800234c <HAL_PWREx_ConfigSupply+0x7c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b2e      	cmp	r3, #46	; 0x2e
 800233e:	d005      	beq.n	800234c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b1d      	cmp	r3, #29
 8002344:	d002      	beq.n	800234c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b2d      	cmp	r3, #45	; 0x2d
 800234a:	d114      	bne.n	8002376 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800234c:	f7ff fb32 	bl	80019b4 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002352:	e009      	b.n	8002368 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002354:	f7ff fb2e 	bl	80019b4 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002362:	d901      	bls.n	8002368 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e007      	b.n	8002378 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d1ee      	bne.n	8002354 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	58024800 	.word	0x58024800

08002384 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af02      	add	r7, sp, #8
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff fb12 	bl	80019b4 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e05f      	b.n	800245c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7fe fc11 	bl	8000bd0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80023ae:	f241 3188 	movw	r1, #5000	; 0x1388
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fd09 	bl	8002dca <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	021a      	lsls	r2, r3, #8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	2120      	movs	r1, #32
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fd34 	bl	8002e4c <QSPI_WaitFlagStateUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d135      	bne.n	800245a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_QSPI_Init+0xe0>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6852      	ldr	r2, [r2, #4]
 80023fc:	0611      	lsls	r1, r2, #24
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68d2      	ldr	r2, [r2, #12]
 8002402:	4311      	orrs	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	69d2      	ldr	r2, [r2, #28]
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6a12      	ldr	r2, [r2, #32]
 800240e:	4311      	orrs	r1, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	430b      	orrs	r3, r1
 8002416:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_QSPI_Init+0xe4>)
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6912      	ldr	r2, [r2, #16]
 8002426:	0411      	lsls	r1, r2, #16
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6952      	ldr	r2, [r2, #20]
 800242c:	4311      	orrs	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6992      	ldr	r2, [r2, #24]
 8002432:	4311      	orrs	r1, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	430b      	orrs	r3, r1
 800243a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800245a:	7afb      	ldrb	r3, [r7, #11]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	00ffff2f 	.word	0x00ffff2f
 8002468:	ffe0f8fe 	.word	0xffe0f8fe

0800246c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e012      	b.n	80024a4 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fc98 	bl	8000dc4 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d064      	beq.n	8002598 <HAL_QSPI_IRQHandler+0xec>
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d05f      	beq.n	8002598 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3320      	adds	r3, #32
 80024de:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b12      	cmp	r3, #18
 80024ea:	d125      	bne.n	8002538 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80024ec:	e01c      	b.n	8002528 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00f      	beq.n	8002516 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	1e5a      	subs	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
 8002514:	e008      	b.n	8002528 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002524:	601a      	str	r2, [r3, #0]
          break;
 8002526:	e033      	b.n	8002590 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1db      	bne.n	80024ee <HAL_QSPI_IRQHandler+0x42>
 8002536:	e02b      	b.n	8002590 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b22      	cmp	r3, #34	; 0x22
 8002542:	d125      	bne.n	8002590 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8002544:	e01d      	b.n	8002582 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	2b00      	cmp	r3, #0
 800254c:	d010      	beq.n	8002570 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	1e5a      	subs	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	639a      	str	r2, [r3, #56]	; 0x38
 800256e:	e008      	b.n	8002582 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800257e:	601a      	str	r2, [r3, #0]
          break;
 8002580:	e006      	b.n	8002590 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1da      	bne.n	8002546 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fc06 	bl	8002da2 <HAL_QSPI_FifoThresholdCallback>
 8002596:	e13c      	b.n	8002812 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80b0 	beq.w	8002704 <HAL_QSPI_IRQHandler+0x258>
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80aa 	beq.w	8002704 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2202      	movs	r2, #2
 80025b6:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80025c6:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b12      	cmp	r3, #18
 80025d2:	d120      	bne.n	8002616 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d011      	beq.n	8002606 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0204 	bic.w	r2, r2, #4
 80025f0:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe ff98 	bl	8001544 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002614:	e0fa      	b.n	800280c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b22      	cmp	r3, #34	; 0x22
 8002620:	d143      	bne.n	80026aa <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0204 	bic.w	r2, r2, #4
 800263e:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	e021      	b.n	800269a <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3320      	adds	r3, #32
 800265c:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800265e:	e013      	b.n	8002688 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002664:	2b00      	cmp	r3, #0
 8002666:	d017      	beq.n	8002698 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	7812      	ldrb	r2, [r2, #0]
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	1e5a      	subs	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e4      	bne.n	8002660 <HAL_QSPI_IRQHandler+0x1b4>
 8002696:	e000      	b.n	800269a <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8002698:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fe ff3e 	bl	8001524 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80026a8:	e0b0      	b.n	800280c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d107      	bne.n	80026c6 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe ff60 	bl	8001584 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80026c4:	e0a2      	b.n	800280c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	f040 809c 	bne.w	800280c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80026e2:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fb4a 	bl	8002d8e <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80026fa:	e087      	b.n	800280c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fb3c 	bl	8002d7a <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002702:	e083      	b.n	800280c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01f      	beq.n	800274e <HAL_QSPI_IRQHandler+0x2a2>
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01a      	beq.n	800274e <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2208      	movs	r2, #8
 800271e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800273c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe ff0c 	bl	8001564 <HAL_QSPI_StatusMatchCallback>
 800274c:	e061      	b.n	8002812 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d047      	beq.n	80027e8 <HAL_QSPI_IRQHandler+0x33c>
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d042      	beq.n	80027e8 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2201      	movs	r2, #1
 8002768:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002778:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f043 0202 	orr.w	r2, r3, #2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d021      	beq.n	80027d8 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0204 	bic.w	r2, r2, #4
 80027a2:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a8:	4a1c      	ldr	r2, [pc, #112]	; (800281c <HAL_QSPI_IRQHandler+0x370>)
 80027aa:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fd65 	bl	8002280 <HAL_MDMA_Abort_IT>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d029      	beq.n	8002810 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f043 0204 	orr.w	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fad2 	bl	8002d7a <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80027d6:	e01b      	b.n	8002810 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 faca 	bl	8002d7a <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80027e6:	e013      	b.n	8002810 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00f      	beq.n	8002812 <HAL_QSPI_IRQHandler+0x366>
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2210      	movs	r2, #16
 8002802:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fad6 	bl	8002db6 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800280a:	e002      	b.n	8002812 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800280c:	bf00      	nop
 800280e:	e000      	b.n	8002812 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002810:	bf00      	nop
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	08002de7 	.word	0x08002de7

08002820 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff f8c2 	bl	80019b4 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_QSPI_Command+0x22>
 800283e:	2302      	movs	r3, #2
 8002840:	e048      	b.n	80028d4 <HAL_QSPI_Command+0xb4>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d137      	bne.n	80028c6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2200      	movs	r2, #0
 800286c:	2120      	movs	r1, #32
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 faec 	bl	8002e4c <QSPI_WaitFlagStateUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d125      	bne.n	80028ca <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800287e:	2200      	movs	r2, #0
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fb19 	bl	8002eba <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	2b00      	cmp	r3, #0
 800288e:	d115      	bne.n	80028bc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	2201      	movs	r2, #1
 8002898:	2102      	movs	r1, #2
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fad6 	bl	8002e4c <QSPI_WaitFlagStateUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10f      	bne.n	80028ca <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2202      	movs	r2, #2
 80028b0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028ba:	e006      	b.n	80028ca <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028c4:	e001      	b.n	80028ca <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
 80028c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_QSPI_Command_IT>:
  * @param cmd : structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80028e6:	f7ff f865 	bl	80019b4 <HAL_GetTick>
 80028ea:	60b8      	str	r0, [r7, #8]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_QSPI_Command_IT+0x20>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e051      	b.n	80029a0 <HAL_QSPI_Command_IT+0xc4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d140      	bne.n	8002992 <HAL_QSPI_Command_IT+0xb6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2202      	movs	r2, #2
 800291a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	2120      	movs	r1, #32
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fa8e 	bl	8002e4c <QSPI_WaitFlagStateUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d126      	bne.n	8002988 <HAL_QSPI_Command_IT+0xac>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2b00      	cmp	r3, #0
 8002940:	d103      	bne.n	800294a <HAL_QSPI_Command_IT+0x6e>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2203      	movs	r2, #3
 8002948:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800294a:	2200      	movs	r2, #0
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fab3 	bl	8002eba <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10c      	bne.n	8002976 <HAL_QSPI_Command_IT+0x9a>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e013      	b.n	800299e <HAL_QSPI_Command_IT+0xc2>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002986:	e00a      	b.n	800299e <HAL_QSPI_Command_IT+0xc2>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002990:	e005      	b.n	800299e <HAL_QSPI_Command_IT+0xc2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002992:	2302      	movs	r3, #2
 8002994:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7fe fffc 	bl	80019b4 <HAL_GetTick>
 80029bc:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3320      	adds	r3, #32
 80029cc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_QSPI_Receive+0x36>
 80029da:	2302      	movs	r3, #2
 80029dc:	e07d      	b.n	8002ada <HAL_QSPI_Receive+0x132>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d16c      	bne.n	8002acc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d05d      	beq.n	8002aba <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2222      	movs	r2, #34	; 0x22
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a36:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002a40:	e01c      	b.n	8002a7c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2106      	movs	r1, #6
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f9fd 	bl	8002e4c <QSPI_WaitFlagStateUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d114      	bne.n	8002a86 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	7812      	ldrb	r2, [r2, #0]
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	1e5a      	subs	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1de      	bne.n	8002a42 <HAL_QSPI_Receive+0x9a>
 8002a84:	e000      	b.n	8002a88 <HAL_QSPI_Receive+0xe0>
          break;
 8002a86:	bf00      	nop
      }

      if (status == HAL_OK)
 8002a88:	7ffb      	ldrb	r3, [r7, #31]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d110      	bne.n	8002ab0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2201      	movs	r2, #1
 8002a96:	2102      	movs	r1, #2
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f9d7 	bl	8002e4c <QSPI_WaitFlagStateUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8002aa2:	7ffb      	ldrb	r3, [r7, #31]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d103      	bne.n	8002ab0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2202      	movs	r2, #2
 8002aae:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ab8:	e00a      	b.n	8002ad0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f043 0208 	orr.w	r2, r3, #8
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	77fb      	strb	r3, [r7, #31]
 8002aca:	e001      	b.n	8002ad0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
 8002ace:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8002ad8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_QSPI_Transmit_IT>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_QSPI_Transmit_IT+0x1e>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e04f      	b.n	8002ba0 <HAL_QSPI_Transmit_IT+0xbe>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d13e      	bne.n	8002b92 <HAL_QSPI_Transmit_IT+0xb0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02b      	beq.n	8002b78 <HAL_QSPI_Transmit_IT+0x96>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2212      	movs	r2, #18
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002b5c:	615a      	str	r2, [r3, #20]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e012      	b.n	8002b9e <HAL_QSPI_Transmit_IT+0xbc>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	f043 0208 	orr.w	r2, r3, #8
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b90:	e005      	b.n	8002b9e <HAL_QSPI_Transmit_IT+0xbc>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
 8002b94:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_QSPI_Receive_IT>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_QSPI_Receive_IT+0x26>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e055      	b.n	8002c7e <HAL_QSPI_Receive_IT+0xd2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d144      	bne.n	8002c70 <HAL_QSPI_Receive_IT+0xc4>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d031      	beq.n	8002c56 <HAL_QSPI_Receive_IT+0xaa>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2222      	movs	r2, #34	; 0x22
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c32:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	619a      	str	r2, [r3, #24]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e012      	b.n	8002c7c <HAL_QSPI_Receive_IT+0xd0>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f043 0208 	orr.w	r2, r3, #8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c6e:	e005      	b.n	8002c7c <HAL_QSPI_Receive_IT+0xd0>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
 8002c72:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg : structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b088      	sub	sp, #32
 8002c8e:	af02      	add	r7, sp, #8
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002c96:	f7fe fe8d 	bl	80019b4 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_QSPI_AutoPolling_IT+0x22>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e062      	b.n	8002d72 <HAL_QSPI_AutoPolling_IT+0xe8>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d151      	bne.n	8002d64 <HAL_QSPI_AutoPolling_IT+0xda>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2242      	movs	r2, #66	; 0x42
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2120      	movs	r1, #32
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8b6 	bl	8002e4c <QSPI_WaitFlagStateUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d137      	bne.n	8002d5a <HAL_QSPI_AutoPolling_IT+0xd0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6852      	ldr	r2, [r2, #4]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6892      	ldr	r2, [r2, #8]
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2209      	movs	r2, #9
 8002d2a:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002d34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f8bd 	bl	8002eba <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e00a      	b.n	8002d70 <HAL_QSPI_AutoPolling_IT+0xe6>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d62:	e005      	b.n	8002d70 <HAL_QSPI_AutoPolling_IT+0xe6>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
 8002d66:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d114      	bne.n	8002e36 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2202      	movs	r2, #2
 8002e12:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002e22:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0202 	orr.w	r2, r2, #2
 8002e32:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8002e34:	e006      	b.n	8002e44 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f7ff ff9b 	bl	8002d7a <HAL_QSPI_ErrorCallback>
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e5c:	e01a      	b.n	8002e94 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d016      	beq.n	8002e94 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe fda5 	bl	80019b4 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	f043 0201 	orr.w	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e00e      	b.n	8002eb2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d1d6      	bne.n	8002e5e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <QSPI_Config+0x28>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002ed4:	d005      	beq.n	8002ee2 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3a01      	subs	r2, #1
 8002ee0:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80b9 	beq.w	800305e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d05f      	beq.n	8002fb4 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	6892      	ldr	r2, [r2, #8]
 8002efc:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d031      	beq.n	8002f6a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	049b      	lsls	r3, r3, #18
 8002f22:	431a      	orrs	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	ea42 0103 	orr.w	r1, r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002f5a:	f000 812e 	beq.w	80031ba <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	6852      	ldr	r2, [r2, #4]
 8002f66:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002f68:	e127      	b.n	80031ba <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	431a      	orrs	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	049b      	lsls	r3, r3, #18
 8002f86:	431a      	orrs	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	ea42 0103 	orr.w	r1, r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	615a      	str	r2, [r3, #20]
}
 8002fb2:	e102      	b.n	80031ba <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02e      	beq.n	800301a <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	049b      	lsls	r3, r3, #18
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	ea42 0103 	orr.w	r1, r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	430a      	orrs	r2, r1
 8003002:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800300a:	f000 80d6 	beq.w	80031ba <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	6852      	ldr	r2, [r2, #4]
 8003016:	619a      	str	r2, [r3, #24]
}
 8003018:	e0cf      	b.n	80031ba <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	431a      	orrs	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003028:	431a      	orrs	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	431a      	orrs	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	049b      	lsls	r3, r3, #18
 8003036:	431a      	orrs	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	431a      	orrs	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	431a      	orrs	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	431a      	orrs	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	ea42 0103 	orr.w	r1, r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	430a      	orrs	r2, r1
 800305a:	615a      	str	r2, [r3, #20]
}
 800305c:	e0ad      	b.n	80031ba <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d058      	beq.n	8003118 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	6892      	ldr	r2, [r2, #8]
 800306e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d02d      	beq.n	80030d4 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	431a      	orrs	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003086:	431a      	orrs	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	431a      	orrs	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	049b      	lsls	r3, r3, #18
 8003094:	431a      	orrs	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	431a      	orrs	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	ea42 0103 	orr.w	r1, r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	430a      	orrs	r2, r1
 80030be:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80030c6:	d078      	beq.n	80031ba <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	6852      	ldr	r2, [r2, #4]
 80030d0:	619a      	str	r2, [r3, #24]
}
 80030d2:	e072      	b.n	80031ba <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	431a      	orrs	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	431a      	orrs	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	049b      	lsls	r3, r3, #18
 80030f0:	431a      	orrs	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	431a      	orrs	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	ea42 0103 	orr.w	r1, r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	430a      	orrs	r2, r1
 8003114:	615a      	str	r2, [r3, #20]
}
 8003116:	e050      	b.n	80031ba <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02a      	beq.n	8003176 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	431a      	orrs	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	431a      	orrs	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	431a      	orrs	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	049b      	lsls	r3, r3, #18
 800313c:	431a      	orrs	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	431a      	orrs	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	431a      	orrs	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	431a      	orrs	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	ea42 0103 	orr.w	r1, r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	430a      	orrs	r2, r1
 8003160:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003168:	d027      	beq.n	80031ba <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	6852      	ldr	r2, [r2, #4]
 8003172:	619a      	str	r2, [r3, #24]
}
 8003174:	e021      	b.n	80031ba <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01d      	beq.n	80031ba <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	431a      	orrs	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	431a      	orrs	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	431a      	orrs	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	049b      	lsls	r3, r3, #18
 800319a:	431a      	orrs	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	ea42 0103 	orr.w	r1, r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	615a      	str	r2, [r3, #20]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	; 0x30
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e3ff      	b.n	80039da <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8087 	beq.w	80032f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e8:	4b99      	ldr	r3, [pc, #612]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031f2:	4b97      	ldr	r3, [pc, #604]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	d007      	beq.n	800320e <HAL_RCC_OscConfig+0x46>
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	2b18      	cmp	r3, #24
 8003202:	d110      	bne.n	8003226 <HAL_RCC_OscConfig+0x5e>
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d10b      	bne.n	8003226 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320e:	4b90      	ldr	r3, [pc, #576]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d06c      	beq.n	80032f4 <HAL_RCC_OscConfig+0x12c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d168      	bne.n	80032f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e3d9      	b.n	80039da <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322e:	d106      	bne.n	800323e <HAL_RCC_OscConfig+0x76>
 8003230:	4b87      	ldr	r3, [pc, #540]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a86      	ldr	r2, [pc, #536]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	e02e      	b.n	800329c <HAL_RCC_OscConfig+0xd4>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0x98>
 8003246:	4b82      	ldr	r3, [pc, #520]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a81      	ldr	r2, [pc, #516]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 800324c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b7f      	ldr	r3, [pc, #508]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7e      	ldr	r2, [pc, #504]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e01d      	b.n	800329c <HAL_RCC_OscConfig+0xd4>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0xbc>
 800326a:	4b79      	ldr	r3, [pc, #484]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a78      	ldr	r2, [pc, #480]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b76      	ldr	r3, [pc, #472]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a75      	ldr	r2, [pc, #468]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0xd4>
 8003284:	4b72      	ldr	r3, [pc, #456]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a71      	ldr	r2, [pc, #452]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b6f      	ldr	r3, [pc, #444]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a6e      	ldr	r2, [pc, #440]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fb86 	bl	80019b4 <HAL_GetTick>
 80032a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fb82 	bl	80019b4 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e38d      	b.n	80039da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032be:	4b64      	ldr	r3, [pc, #400]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0xe4>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fb72 	bl	80019b4 <HAL_GetTick>
 80032d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fe fb6e 	bl	80019b4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e379      	b.n	80039da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032e6:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x10c>
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80ae 	beq.w	8003460 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003304:	4b52      	ldr	r3, [pc, #328]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800330c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800330e:	4b50      	ldr	r3, [pc, #320]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <HAL_RCC_OscConfig+0x162>
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	2b18      	cmp	r3, #24
 800331e:	d13a      	bne.n	8003396 <HAL_RCC_OscConfig+0x1ce>
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d135      	bne.n	8003396 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800332a:	4b49      	ldr	r3, [pc, #292]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCC_OscConfig+0x17a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e34b      	b.n	80039da <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	f7fe fb67 	bl	8001a14 <HAL_GetREVID>
 8003346:	4603      	mov	r3, r0
 8003348:	f241 0203 	movw	r2, #4099	; 0x1003
 800334c:	4293      	cmp	r3, r2
 800334e:	d817      	bhi.n	8003380 <HAL_RCC_OscConfig+0x1b8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d108      	bne.n	800336a <HAL_RCC_OscConfig+0x1a2>
 8003358:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003360:	4a3b      	ldr	r2, [pc, #236]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003366:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003368:	e07a      	b.n	8003460 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	4b39      	ldr	r3, [pc, #228]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	031b      	lsls	r3, r3, #12
 8003378:	4935      	ldr	r1, [pc, #212]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800337e:	e06f      	b.n	8003460 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b33      	ldr	r3, [pc, #204]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	4930      	ldr	r1, [pc, #192]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003394:	e064      	b.n	8003460 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d045      	beq.n	800342a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800339e:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 0219 	bic.w	r2, r3, #25
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	4929      	ldr	r1, [pc, #164]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe fb00 	bl	80019b4 <HAL_GetTick>
 80033b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b8:	f7fe fafc 	bl	80019b4 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e307      	b.n	80039da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ca:	4b21      	ldr	r3, [pc, #132]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	f7fe fb1d 	bl	8001a14 <HAL_GetREVID>
 80033da:	4603      	mov	r3, r0
 80033dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d817      	bhi.n	8003414 <HAL_RCC_OscConfig+0x24c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d108      	bne.n	80033fe <HAL_RCC_OscConfig+0x236>
 80033ec:	4b18      	ldr	r3, [pc, #96]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033f4:	4a16      	ldr	r2, [pc, #88]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 80033f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fa:	6053      	str	r3, [r2, #4]
 80033fc:	e030      	b.n	8003460 <HAL_RCC_OscConfig+0x298>
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	031b      	lsls	r3, r3, #12
 800340c:	4910      	ldr	r1, [pc, #64]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 800340e:	4313      	orrs	r3, r2
 8003410:	604b      	str	r3, [r1, #4]
 8003412:	e025      	b.n	8003460 <HAL_RCC_OscConfig+0x298>
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	490b      	ldr	r1, [pc, #44]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
 8003428:	e01a      	b.n	8003460 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a08      	ldr	r2, [pc, #32]	; (8003450 <HAL_RCC_OscConfig+0x288>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe fabd 	bl	80019b4 <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343e:	f7fe fab9 	bl	80019b4 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d903      	bls.n	8003454 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e2c4      	b.n	80039da <HAL_RCC_OscConfig+0x812>
 8003450:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003454:	4ba4      	ldr	r3, [pc, #656]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1ee      	bne.n	800343e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80a9 	beq.w	80035c0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	4b9e      	ldr	r3, [pc, #632]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003476:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003478:	4b9b      	ldr	r3, [pc, #620]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d007      	beq.n	8003494 <HAL_RCC_OscConfig+0x2cc>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b18      	cmp	r3, #24
 8003488:	d13a      	bne.n	8003500 <HAL_RCC_OscConfig+0x338>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d135      	bne.n	8003500 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003494:	4b94      	ldr	r3, [pc, #592]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_OscConfig+0x2e4>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e296      	b.n	80039da <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ac:	f7fe fab2 	bl	8001a14 <HAL_GetREVID>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d817      	bhi.n	80034ea <HAL_RCC_OscConfig+0x322>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d108      	bne.n	80034d4 <HAL_RCC_OscConfig+0x30c>
 80034c2:	4b89      	ldr	r3, [pc, #548]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034ca:	4a87      	ldr	r2, [pc, #540]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 80034cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034d2:	e075      	b.n	80035c0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d4:	4b84      	ldr	r3, [pc, #528]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	069b      	lsls	r3, r3, #26
 80034e2:	4981      	ldr	r1, [pc, #516]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034e8:	e06a      	b.n	80035c0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ea:	4b7f      	ldr	r3, [pc, #508]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	061b      	lsls	r3, r3, #24
 80034f8:	497b      	ldr	r1, [pc, #492]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034fe:	e05f      	b.n	80035c0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d042      	beq.n	800358e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003508:	4b77      	ldr	r3, [pc, #476]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a76      	ldr	r2, [pc, #472]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 800350e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe fa4e 	bl	80019b4 <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800351c:	f7fe fa4a 	bl	80019b4 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e255      	b.n	80039da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800352e:	4b6e      	ldr	r3, [pc, #440]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800353a:	f7fe fa6b 	bl	8001a14 <HAL_GetREVID>
 800353e:	4603      	mov	r3, r0
 8003540:	f241 0203 	movw	r2, #4099	; 0x1003
 8003544:	4293      	cmp	r3, r2
 8003546:	d817      	bhi.n	8003578 <HAL_RCC_OscConfig+0x3b0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	2b20      	cmp	r3, #32
 800354e:	d108      	bne.n	8003562 <HAL_RCC_OscConfig+0x39a>
 8003550:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003558:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 800355a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800355e:	6053      	str	r3, [r2, #4]
 8003560:	e02e      	b.n	80035c0 <HAL_RCC_OscConfig+0x3f8>
 8003562:	4b61      	ldr	r3, [pc, #388]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	069b      	lsls	r3, r3, #26
 8003570:	495d      	ldr	r1, [pc, #372]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
 8003576:	e023      	b.n	80035c0 <HAL_RCC_OscConfig+0x3f8>
 8003578:	4b5b      	ldr	r3, [pc, #364]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	4958      	ldr	r1, [pc, #352]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003588:	4313      	orrs	r3, r2
 800358a:	60cb      	str	r3, [r1, #12]
 800358c:	e018      	b.n	80035c0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800358e:	4b56      	ldr	r3, [pc, #344]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a55      	ldr	r2, [pc, #340]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fe fa0b 	bl	80019b4 <HAL_GetTick>
 800359e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80035a2:	f7fe fa07 	bl	80019b4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e212      	b.n	80039da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035b4:	4b4c      	ldr	r3, [pc, #304]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f0      	bne.n	80035a2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d036      	beq.n	800363a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d019      	beq.n	8003608 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d4:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 80035d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d8:	4a43      	ldr	r2, [pc, #268]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fe f9e8 	bl	80019b4 <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e8:	f7fe f9e4 	bl	80019b4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1ef      	b.n	80039da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035fa:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 80035fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x420>
 8003606:	e018      	b.n	800363a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003608:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	4a36      	ldr	r2, [pc, #216]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fe f9ce 	bl	80019b4 <HAL_GetTick>
 8003618:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800361c:	f7fe f9ca 	bl	80019b4 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1d5      	b.n	80039da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800362e:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d036      	beq.n	80036b4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d019      	beq.n	8003682 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800364e:	4b26      	ldr	r3, [pc, #152]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a25      	ldr	r2, [pc, #148]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003658:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800365a:	f7fe f9ab 	bl	80019b4 <HAL_GetTick>
 800365e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003662:	f7fe f9a7 	bl	80019b4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1b2      	b.n	80039da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003674:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x49a>
 8003680:	e018      	b.n	80036b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 8003688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800368c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800368e:	f7fe f991 	bl	80019b4 <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003696:	f7fe f98d 	bl	80019b4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e198      	b.n	80039da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036a8:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <HAL_RCC_OscConfig+0x520>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8085 	beq.w	80037cc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <HAL_RCC_OscConfig+0x524>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a09      	ldr	r2, [pc, #36]	; (80036ec <HAL_RCC_OscConfig+0x524>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036ce:	f7fe f971 	bl	80019b4 <HAL_GetTick>
 80036d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036d4:	e00c      	b.n	80036f0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036d6:	f7fe f96d 	bl	80019b4 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b64      	cmp	r3, #100	; 0x64
 80036e2:	d905      	bls.n	80036f0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e178      	b.n	80039da <HAL_RCC_OscConfig+0x812>
 80036e8:	58024400 	.word	0x58024400
 80036ec:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f0:	4b96      	ldr	r3, [pc, #600]	; (800394c <HAL_RCC_OscConfig+0x784>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ec      	beq.n	80036d6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x54a>
 8003704:	4b92      	ldr	r3, [pc, #584]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a91      	ldr	r2, [pc, #580]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	e02d      	b.n	800376e <HAL_RCC_OscConfig+0x5a6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x56c>
 800371a:	4b8d      	ldr	r3, [pc, #564]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	4a8c      	ldr	r2, [pc, #560]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	6713      	str	r3, [r2, #112]	; 0x70
 8003726:	4b8a      	ldr	r3, [pc, #552]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a89      	ldr	r2, [pc, #548]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
 8003732:	e01c      	b.n	800376e <HAL_RCC_OscConfig+0x5a6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d10c      	bne.n	8003756 <HAL_RCC_OscConfig+0x58e>
 800373c:	4b84      	ldr	r3, [pc, #528]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	4a83      	ldr	r2, [pc, #524]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003742:	f043 0304 	orr.w	r3, r3, #4
 8003746:	6713      	str	r3, [r2, #112]	; 0x70
 8003748:	4b81      	ldr	r3, [pc, #516]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	4a80      	ldr	r2, [pc, #512]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6713      	str	r3, [r2, #112]	; 0x70
 8003754:	e00b      	b.n	800376e <HAL_RCC_OscConfig+0x5a6>
 8003756:	4b7e      	ldr	r3, [pc, #504]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	4a7d      	ldr	r2, [pc, #500]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6713      	str	r3, [r2, #112]	; 0x70
 8003762:	4b7b      	ldr	r3, [pc, #492]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	4a7a      	ldr	r2, [pc, #488]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003768:	f023 0304 	bic.w	r3, r3, #4
 800376c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d015      	beq.n	80037a2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7fe f91d 	bl	80019b4 <HAL_GetTick>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe f919 	bl	80019b4 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e122      	b.n	80039da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003794:	4b6e      	ldr	r3, [pc, #440]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ee      	beq.n	800377e <HAL_RCC_OscConfig+0x5b6>
 80037a0:	e014      	b.n	80037cc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fe f907 	bl	80019b4 <HAL_GetTick>
 80037a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fe f903 	bl	80019b4 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e10c      	b.n	80039da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037c0:	4b63      	ldr	r3, [pc, #396]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ee      	bne.n	80037aa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8101 	beq.w	80039d8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037d6:	4b5e      	ldr	r3, [pc, #376]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037de:	2b18      	cmp	r3, #24
 80037e0:	f000 80bc 	beq.w	800395c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	f040 8095 	bne.w	8003918 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b58      	ldr	r3, [pc, #352]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a57      	ldr	r2, [pc, #348]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80037f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fe f8db 	bl	80019b4 <HAL_GetTick>
 80037fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003802:	f7fe f8d7 	bl	80019b4 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0e2      	b.n	80039da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003814:	4b4e      	ldr	r3, [pc, #312]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f0      	bne.n	8003802 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003820:	4b4b      	ldr	r3, [pc, #300]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003824:	4b4b      	ldr	r3, [pc, #300]	; (8003954 <HAL_RCC_OscConfig+0x78c>)
 8003826:	4013      	ands	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003830:	0112      	lsls	r2, r2, #4
 8003832:	430a      	orrs	r2, r1
 8003834:	4946      	ldr	r1, [pc, #280]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003836:	4313      	orrs	r3, r2
 8003838:	628b      	str	r3, [r1, #40]	; 0x28
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	3b01      	subs	r3, #1
 8003840:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003848:	3b01      	subs	r3, #1
 800384a:	025b      	lsls	r3, r3, #9
 800384c:	b29b      	uxth	r3, r3
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	3b01      	subs	r3, #1
 8003856:	041b      	lsls	r3, r3, #16
 8003858:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	3b01      	subs	r3, #1
 8003864:	061b      	lsls	r3, r3, #24
 8003866:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800386a:	4939      	ldr	r1, [pc, #228]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800386c:	4313      	orrs	r3, r2
 800386e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003870:	4b37      	ldr	r3, [pc, #220]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	4a36      	ldr	r2, [pc, #216]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003876:	f023 0301 	bic.w	r3, r3, #1
 800387a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800387c:	4b34      	ldr	r3, [pc, #208]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800387e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003880:	4b35      	ldr	r3, [pc, #212]	; (8003958 <HAL_RCC_OscConfig+0x790>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003888:	00d2      	lsls	r2, r2, #3
 800388a:	4931      	ldr	r1, [pc, #196]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800388c:	4313      	orrs	r3, r2
 800388e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003890:	4b2f      	ldr	r3, [pc, #188]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f023 020c 	bic.w	r2, r3, #12
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	492c      	ldr	r1, [pc, #176]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038a2:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	f023 0202 	bic.w	r2, r3, #2
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ae:	4928      	ldr	r1, [pc, #160]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038b4:	4b26      	ldr	r3, [pc, #152]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	4a25      	ldr	r2, [pc, #148]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c0:	4b23      	ldr	r3, [pc, #140]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	4a22      	ldr	r2, [pc, #136]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038cc:	4b20      	ldr	r3, [pc, #128]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 80038ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fe f860 	bl	80019b4 <HAL_GetTick>
 80038f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f8:	f7fe f85c 	bl	80019b4 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e067      	b.n	80039da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800390a:	4b11      	ldr	r3, [pc, #68]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x730>
 8003916:	e05f      	b.n	80039d8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 800391e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe f846 	bl	80019b4 <HAL_GetTick>
 8003928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392c:	f7fe f842 	bl	80019b4 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e04d      	b.n	80039da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <HAL_RCC_OscConfig+0x788>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x764>
 800394a:	e045      	b.n	80039d8 <HAL_RCC_OscConfig+0x810>
 800394c:	58024800 	.word	0x58024800
 8003950:	58024400 	.word	0x58024400
 8003954:	fffffc0c 	.word	0xfffffc0c
 8003958:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800395c:	4b21      	ldr	r3, [pc, #132]	; (80039e4 <HAL_RCC_OscConfig+0x81c>)
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003962:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <HAL_RCC_OscConfig+0x81c>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2b01      	cmp	r3, #1
 800396e:	d031      	beq.n	80039d4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f003 0203 	and.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d12a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d122      	bne.n	80039d4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d11a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	0a5b      	lsrs	r3, r3, #9
 80039a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d111      	bne.n	80039d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d108      	bne.n	80039d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	0e1b      	lsrs	r3, r3, #24
 80039c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3730      	adds	r7, #48	; 0x30
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	58024400 	.word	0x58024400

080039e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e19c      	b.n	8003d36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b8a      	ldr	r3, [pc, #552]	; (8003c28 <HAL_RCC_ClockConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d910      	bls.n	8003a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b87      	ldr	r3, [pc, #540]	; (8003c28 <HAL_RCC_ClockConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 020f 	bic.w	r2, r3, #15
 8003a12:	4985      	ldr	r1, [pc, #532]	; (8003c28 <HAL_RCC_ClockConfig+0x240>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b83      	ldr	r3, [pc, #524]	; (8003c28 <HAL_RCC_ClockConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e184      	b.n	8003d36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	4b7b      	ldr	r3, [pc, #492]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d908      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a48:	4b78      	ldr	r3, [pc, #480]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	4975      	ldr	r1, [pc, #468]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d010      	beq.n	8003a88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d908      	bls.n	8003a88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a76:	4b6d      	ldr	r3, [pc, #436]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	496a      	ldr	r1, [pc, #424]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	4b64      	ldr	r3, [pc, #400]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d908      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003aa4:	4b61      	ldr	r3, [pc, #388]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	495e      	ldr	r1, [pc, #376]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d010      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d908      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ad2:	4b56      	ldr	r3, [pc, #344]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4953      	ldr	r1, [pc, #332]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d010      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	4b4d      	ldr	r3, [pc, #308]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d908      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b00:	4b4a      	ldr	r3, [pc, #296]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f023 020f 	bic.w	r2, r3, #15
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4947      	ldr	r1, [pc, #284]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d055      	beq.n	8003bca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b1e:	4b43      	ldr	r3, [pc, #268]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	4940      	ldr	r1, [pc, #256]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d107      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b38:	4b3c      	ldr	r3, [pc, #240]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d121      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0f6      	b.n	8003d36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b50:	4b36      	ldr	r3, [pc, #216]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d115      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0ea      	b.n	8003d36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b68:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0de      	b.n	8003d36 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b78:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0d6      	b.n	8003d36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b88:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f023 0207 	bic.w	r2, r3, #7
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4925      	ldr	r1, [pc, #148]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9a:	f7fd ff0b 	bl	80019b4 <HAL_GetTick>
 8003b9e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba0:	e00a      	b.n	8003bb8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba2:	f7fd ff07 	bl	80019b4 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e0be      	b.n	8003d36 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb8:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d1eb      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d010      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d208      	bcs.n	8003bf8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f023 020f 	bic.w	r2, r3, #15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	490e      	ldr	r1, [pc, #56]	; (8003c2c <HAL_RCC_ClockConfig+0x244>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_ClockConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d214      	bcs.n	8003c30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <HAL_RCC_ClockConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 020f 	bic.w	r2, r3, #15
 8003c0e:	4906      	ldr	r1, [pc, #24]	; (8003c28 <HAL_RCC_ClockConfig+0x240>)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <HAL_RCC_ClockConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d005      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e086      	b.n	8003d36 <HAL_RCC_ClockConfig+0x34e>
 8003c28:	52002000 	.word	0x52002000
 8003c2c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d010      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d208      	bcs.n	8003c5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c4c:	4b3c      	ldr	r3, [pc, #240]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	4939      	ldr	r1, [pc, #228]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d010      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	4b34      	ldr	r3, [pc, #208]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d208      	bcs.n	8003c8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c7a:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	492e      	ldr	r1, [pc, #184]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d010      	beq.n	8003cba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699a      	ldr	r2, [r3, #24]
 8003c9c:	4b28      	ldr	r3, [pc, #160]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d208      	bcs.n	8003cba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ca8:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	4922      	ldr	r1, [pc, #136]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d010      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69da      	ldr	r2, [r3, #28]
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d208      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4917      	ldr	r1, [pc, #92]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ce8:	f000 f834 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	4912      	ldr	r1, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x35c>)
 8003cfa:	5ccb      	ldrb	r3, [r1, r3]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
 8003d04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <HAL_RCC_ClockConfig+0x358>)
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	4a0d      	ldr	r2, [pc, #52]	; (8003d44 <HAL_RCC_ClockConfig+0x35c>)
 8003d10:	5cd3      	ldrb	r3, [r2, r3]
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_RCC_ClockConfig+0x360>)
 8003d1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d20:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <HAL_RCC_ClockConfig+0x364>)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003d26:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <HAL_RCC_ClockConfig+0x368>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd fdf8 	bl	8001920 <HAL_InitTick>
 8003d30:	4603      	mov	r3, r0
 8003d32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	58024400 	.word	0x58024400
 8003d44:	08007a14 	.word	0x08007a14
 8003d48:	24000004 	.word	0x24000004
 8003d4c:	24000000 	.word	0x24000000
 8003d50:	24000020 	.word	0x24000020

08003d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	; 0x24
 8003d58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5a:	4bb3      	ldr	r3, [pc, #716]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d62:	2b18      	cmp	r3, #24
 8003d64:	f200 8155 	bhi.w	8004012 <HAL_RCC_GetSysClockFreq+0x2be>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003dd5 	.word	0x08003dd5
 8003d74:	08004013 	.word	0x08004013
 8003d78:	08004013 	.word	0x08004013
 8003d7c:	08004013 	.word	0x08004013
 8003d80:	08004013 	.word	0x08004013
 8003d84:	08004013 	.word	0x08004013
 8003d88:	08004013 	.word	0x08004013
 8003d8c:	08004013 	.word	0x08004013
 8003d90:	08003dfb 	.word	0x08003dfb
 8003d94:	08004013 	.word	0x08004013
 8003d98:	08004013 	.word	0x08004013
 8003d9c:	08004013 	.word	0x08004013
 8003da0:	08004013 	.word	0x08004013
 8003da4:	08004013 	.word	0x08004013
 8003da8:	08004013 	.word	0x08004013
 8003dac:	08004013 	.word	0x08004013
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08004013 	.word	0x08004013
 8003db8:	08004013 	.word	0x08004013
 8003dbc:	08004013 	.word	0x08004013
 8003dc0:	08004013 	.word	0x08004013
 8003dc4:	08004013 	.word	0x08004013
 8003dc8:	08004013 	.word	0x08004013
 8003dcc:	08004013 	.word	0x08004013
 8003dd0:	08003e07 	.word	0x08003e07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dd4:	4b94      	ldr	r3, [pc, #592]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003de0:	4b91      	ldr	r3, [pc, #580]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	08db      	lsrs	r3, r3, #3
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	4a90      	ldr	r2, [pc, #576]	; (800402c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003df2:	e111      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003df4:	4b8d      	ldr	r3, [pc, #564]	; (800402c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003df6:	61bb      	str	r3, [r7, #24]
    break;
 8003df8:	e10e      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003dfa:	4b8d      	ldr	r3, [pc, #564]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dfc:	61bb      	str	r3, [r7, #24]
    break;
 8003dfe:	e10b      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003e00:	4b8c      	ldr	r3, [pc, #560]	; (8004034 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e02:	61bb      	str	r3, [r7, #24]
    break;
 8003e04:	e108      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e06:	4b88      	ldr	r3, [pc, #544]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003e10:	4b85      	ldr	r3, [pc, #532]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e1c:	4b82      	ldr	r3, [pc, #520]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003e26:	4b80      	ldr	r3, [pc, #512]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	08db      	lsrs	r3, r3, #3
 8003e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80e1 	beq.w	800400c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	f000 8083 	beq.w	8003f58 <HAL_RCC_GetSysClockFreq+0x204>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	f200 80a1 	bhi.w	8003f9c <HAL_RCC_GetSysClockFreq+0x248>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x114>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d056      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e66:	e099      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e68:	4b6f      	ldr	r3, [pc, #444]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d02d      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e74:	4b6c      	ldr	r3, [pc, #432]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	08db      	lsrs	r3, r3, #3
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	4a6b      	ldr	r2, [pc, #428]	; (800402c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
 8003e84:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	ee07 3a90 	vmov	s15, r3
 8003e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e9e:	4b62      	ldr	r3, [pc, #392]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eb2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004038 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003ece:	e087      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	eddf 6a58 	vldr	s13, [pc, #352]	; 800403c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ee2:	4b51      	ldr	r3, [pc, #324]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ef6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004038 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f12:	e065      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f26:	4b40      	ldr	r3, [pc, #256]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f3a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004038 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f56:	e043      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f62:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004044 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f6a:	4b2f      	ldr	r3, [pc, #188]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004038 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f9a:	e021      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004040 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fc2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004038 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fde:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	0a5b      	lsrs	r3, r3, #9
 8003fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fea:	3301      	adds	r3, #1
 8003fec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ff8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004004:	ee17 3a90 	vmov	r3, s15
 8004008:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800400a:	e005      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	61bb      	str	r3, [r7, #24]
    break;
 8004010:	e002      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004014:	61bb      	str	r3, [r7, #24]
    break;
 8004016:	bf00      	nop
  }

  return sysclockfreq;
 8004018:	69bb      	ldr	r3, [r7, #24]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3724      	adds	r7, #36	; 0x24
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	58024400 	.word	0x58024400
 800402c:	03d09000 	.word	0x03d09000
 8004030:	003d0900 	.word	0x003d0900
 8004034:	017d7840 	.word	0x017d7840
 8004038:	46000000 	.word	0x46000000
 800403c:	4c742400 	.word	0x4c742400
 8004040:	4a742400 	.word	0x4a742400
 8004044:	4bbebc20 	.word	0x4bbebc20

08004048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800404e:	f7ff fe81 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8004052:	4602      	mov	r2, r0
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_RCC_GetHCLKFreq+0x50>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	490f      	ldr	r1, [pc, #60]	; (800409c <HAL_RCC_GetHCLKFreq+0x54>)
 8004060:	5ccb      	ldrb	r3, [r1, r3]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	fa22 f303 	lsr.w	r3, r2, r3
 800406a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <HAL_RCC_GetHCLKFreq+0x50>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	4a09      	ldr	r2, [pc, #36]	; (800409c <HAL_RCC_GetHCLKFreq+0x54>)
 8004076:	5cd3      	ldrb	r3, [r2, r3]
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	fa22 f303 	lsr.w	r3, r2, r3
 8004082:	4a07      	ldr	r2, [pc, #28]	; (80040a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004084:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004086:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	58024400 	.word	0x58024400
 800409c:	08007a14 	.word	0x08007a14
 80040a0:	24000004 	.word	0x24000004
 80040a4:	24000000 	.word	0x24000000

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80040ac:	f7ff ffcc 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4904      	ldr	r1, [pc, #16]	; (80040d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	58024400 	.word	0x58024400
 80040d0:	08007a14 	.word	0x08007a14

080040d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80040d8:	f7ff ffb6 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4904      	ldr	r1, [pc, #16]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	58024400 	.word	0x58024400
 80040fc:	08007a14 	.word	0x08007a14

08004100 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004108:	2300      	movs	r3, #0
 800410a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800410c:	2300      	movs	r3, #0
 800410e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d03f      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004120:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004124:	d02a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004126:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800412a:	d824      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800412c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004130:	d018      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004136:	d81e      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800413c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004140:	d007      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004142:	e018      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004144:	4bab      	ldr	r3, [pc, #684]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	4aaa      	ldr	r2, [pc, #680]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800414a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004150:	e015      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3304      	adds	r3, #4
 8004156:	2102      	movs	r1, #2
 8004158:	4618      	mov	r0, r3
 800415a:	f001 f9ff 	bl	800555c <RCCEx_PLL2_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004162:	e00c      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3324      	adds	r3, #36	; 0x24
 8004168:	2102      	movs	r1, #2
 800416a:	4618      	mov	r0, r3
 800416c:	f001 faa8 	bl	80056c0 <RCCEx_PLL3_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004174:	e003      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	75fb      	strb	r3, [r7, #23]
      break;
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800417c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004184:	4b9b      	ldr	r3, [pc, #620]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004190:	4998      	ldr	r1, [pc, #608]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	650b      	str	r3, [r1, #80]	; 0x50
 8004196:	e001      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	7dfb      	ldrb	r3, [r7, #23]
 800419a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d03d      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d826      	bhi.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041cd 	.word	0x080041cd
 80041bc:	080041db 	.word	0x080041db
 80041c0:	080041ed 	.word	0x080041ed
 80041c4:	08004205 	.word	0x08004205
 80041c8:	08004205 	.word	0x08004205
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041cc:	4b89      	ldr	r3, [pc, #548]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	4a88      	ldr	r2, [pc, #544]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041d8:	e015      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3304      	adds	r3, #4
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 f9bb 	bl	800555c <RCCEx_PLL2_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041ea:	e00c      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3324      	adds	r3, #36	; 0x24
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 fa64 	bl	80056c0 <RCCEx_PLL3_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041fc:	e003      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	75fb      	strb	r3, [r7, #23]
      break;
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004206:	7dfb      	ldrb	r3, [r7, #23]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d109      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800420c:	4b79      	ldr	r3, [pc, #484]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800420e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004210:	f023 0207 	bic.w	r2, r3, #7
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004218:	4976      	ldr	r1, [pc, #472]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	650b      	str	r3, [r1, #80]	; 0x50
 800421e:	e001      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800422c:	2b00      	cmp	r3, #0
 800422e:	d042      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004238:	d02b      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800423a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423e:	d825      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004240:	2bc0      	cmp	r3, #192	; 0xc0
 8004242:	d028      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004244:	2bc0      	cmp	r3, #192	; 0xc0
 8004246:	d821      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d016      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800424c:	2b80      	cmp	r3, #128	; 0x80
 800424e:	d81d      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d007      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004258:	e018      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425a:	4b66      	ldr	r3, [pc, #408]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	4a65      	ldr	r2, [pc, #404]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004266:	e017      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f001 f974 	bl	800555c <RCCEx_PLL2_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004278:	e00e      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3324      	adds	r3, #36	; 0x24
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f001 fa1d 	bl	80056c0 <RCCEx_PLL3_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800428a:	e005      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
      break;
 8004290:	e002      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004292:	bf00      	nop
 8004294:	e000      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800429e:	4b55      	ldr	r3, [pc, #340]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042aa:	4952      	ldr	r1, [pc, #328]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	650b      	str	r3, [r1, #80]	; 0x50
 80042b0:	e001      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d049      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042cc:	d030      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80042ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042d2:	d82a      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042d8:	d02c      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80042da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042de:	d824      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042e4:	d018      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80042e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ea:	d81e      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80042f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f4:	d007      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80042f6:	e018      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f8:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	4a3d      	ldr	r2, [pc, #244]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004302:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004304:	e017      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3304      	adds	r3, #4
 800430a:	2100      	movs	r1, #0
 800430c:	4618      	mov	r0, r3
 800430e:	f001 f925 	bl	800555c <RCCEx_PLL2_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004316:	e00e      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f001 f9ce 	bl	80056c0 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004328:	e005      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	75fb      	strb	r3, [r7, #23]
      break;
 800432e:	e002      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004330:	bf00      	nop
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800433c:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800434a:	492a      	ldr	r1, [pc, #168]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800434c:	4313      	orrs	r3, r2
 800434e:	658b      	str	r3, [r1, #88]	; 0x58
 8004350:	e001      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435e:	2b00      	cmp	r3, #0
 8004360:	d04c      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004368:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800436c:	d030      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800436e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004372:	d82a      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004374:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004378:	d02c      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800437a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800437e:	d824      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004384:	d018      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004386:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800438a:	d81e      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004394:	d007      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004396:	e018      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004398:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800439e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043a4:	e017      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3304      	adds	r3, #4
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 f8d5 	bl	800555c <RCCEx_PLL2_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80043b6:	e00e      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3324      	adds	r3, #36	; 0x24
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 f97e 	bl	80056c0 <RCCEx_PLL3_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043c8:	e005      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	75fb      	strb	r3, [r7, #23]
      break;
 80043ce:	e002      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80043d0:	bf00      	nop
 80043d2:	e000      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80043d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d6:	7dfb      	ldrb	r3, [r7, #23]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043ea:	4902      	ldr	r1, [pc, #8]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	658b      	str	r3, [r1, #88]	; 0x58
 80043f0:	e004      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80043f2:	bf00      	nop
 80043f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d032      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440c:	2b30      	cmp	r3, #48	; 0x30
 800440e:	d01c      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004410:	2b30      	cmp	r3, #48	; 0x30
 8004412:	d817      	bhi.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004414:	2b20      	cmp	r3, #32
 8004416:	d00c      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d813      	bhi.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d016      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004420:	2b10      	cmp	r3, #16
 8004422:	d10f      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004424:	4bb1      	ldr	r3, [pc, #708]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4ab0      	ldr	r2, [pc, #704]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800442a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004430:	e00e      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3304      	adds	r3, #4
 8004436:	2102      	movs	r1, #2
 8004438:	4618      	mov	r0, r3
 800443a:	f001 f88f 	bl	800555c <RCCEx_PLL2_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004442:	e005      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
      break;
 8004448:	e002      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800444e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004456:	4ba5      	ldr	r3, [pc, #660]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004462:	49a2      	ldr	r1, [pc, #648]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004464:	4313      	orrs	r3, r2
 8004466:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004468:	e001      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446a:	7dfb      	ldrb	r3, [r7, #23]
 800446c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d047      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004482:	d030      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004488:	d82a      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800448a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800448e:	d02c      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004490:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004494:	d824      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449a:	d018      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800449c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a0:	d81e      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80044a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044aa:	d007      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80044ac:	e018      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ae:	4b8f      	ldr	r3, [pc, #572]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	4a8e      	ldr	r2, [pc, #568]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044ba:	e017      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f001 f84a 	bl	800555c <RCCEx_PLL2_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044cc:	e00e      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3324      	adds	r3, #36	; 0x24
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 f8f3 	bl	80056c0 <RCCEx_PLL3_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044de:	e005      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	75fb      	strb	r3, [r7, #23]
      break;
 80044e4:	e002      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80044ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044f2:	4b7e      	ldr	r3, [pc, #504]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fe:	497b      	ldr	r1, [pc, #492]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004500:	4313      	orrs	r3, r2
 8004502:	650b      	str	r3, [r1, #80]	; 0x50
 8004504:	e001      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d049      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800451e:	d02e      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004524:	d828      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004526:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800452a:	d02a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800452c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004530:	d822      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004532:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004536:	d026      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004538:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800453c:	d81c      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800453e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004542:	d010      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004548:	d816      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01d      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004552:	d111      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	2101      	movs	r1, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fffe 	bl	800555c <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004564:	e012      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3324      	adds	r3, #36	; 0x24
 800456a:	2101      	movs	r1, #1
 800456c:	4618      	mov	r0, r3
 800456e:	f001 f8a7 	bl	80056c0 <RCCEx_PLL3_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004576:	e009      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	75fb      	strb	r3, [r7, #23]
      break;
 800457c:	e006      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800457e:	bf00      	nop
 8004580:	e004      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004582:	bf00      	nop
 8004584:	e002      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800458a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004592:	4b56      	ldr	r3, [pc, #344]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004596:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800459e:	4953      	ldr	r1, [pc, #332]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	650b      	str	r3, [r1, #80]	; 0x50
 80045a4:	e001      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d04b      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c0:	d02e      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80045c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c6:	d828      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045cc:	d02a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80045ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d2:	d822      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045d8:	d026      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80045da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045de:	d81c      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e4:	d010      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80045e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ea:	d816      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01d      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80045f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f4:	d111      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3304      	adds	r3, #4
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 ffad 	bl	800555c <RCCEx_PLL2_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004606:	e012      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3324      	adds	r3, #36	; 0x24
 800460c:	2101      	movs	r1, #1
 800460e:	4618      	mov	r0, r3
 8004610:	f001 f856 	bl	80056c0 <RCCEx_PLL3_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004618:	e009      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
      break;
 800461e:	e006      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004620:	bf00      	nop
 8004622:	e004      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004624:	bf00      	nop
 8004626:	e002      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004628:	bf00      	nop
 800462a:	e000      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800462c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004634:	4b2d      	ldr	r3, [pc, #180]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004642:	492a      	ldr	r1, [pc, #168]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004644:	4313      	orrs	r3, r2
 8004646:	658b      	str	r3, [r1, #88]	; 0x58
 8004648:	e001      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d022      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00e      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8004662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004666:	d108      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f000 ff74 	bl	800555c <RCCEx_PLL2_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8004678:	e003      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
      break;
 800467e:	e000      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8004680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004682:	7dfb      	ldrb	r3, [r7, #23]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d109      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004688:	4b18      	ldr	r3, [pc, #96]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800468a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004694:	4915      	ldr	r1, [pc, #84]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004696:	4313      	orrs	r3, r2
 8004698:	64cb      	str	r3, [r1, #76]	; 0x4c
 800469a:	e001      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d031      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046b4:	d00e      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80046b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ba:	d814      	bhi.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d017      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80046c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046c4:	d10f      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	4a08      	ldr	r2, [pc, #32]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80046cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80046d2:	e00e      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2101      	movs	r1, #1
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 ff3e 	bl	800555c <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80046e4:	e005      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	75fb      	strb	r3, [r7, #23]
      break;
 80046ea:	e002      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80046ec:	58024400 	.word	0x58024400
      break;
 80046f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046f8:	4bbc      	ldr	r3, [pc, #752]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80046fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	49b9      	ldr	r1, [pc, #740]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004706:	4313      	orrs	r3, r2
 8004708:	650b      	str	r3, [r1, #80]	; 0x50
 800470a:	e001      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d032      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	2b03      	cmp	r3, #3
 8004722:	d81b      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004763 	.word	0x08004763
 8004730:	0800473d 	.word	0x0800473d
 8004734:	0800474b 	.word	0x0800474b
 8004738:	08004763 	.word	0x08004763
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473c:	4bab      	ldr	r3, [pc, #684]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	4aaa      	ldr	r2, [pc, #680]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004748:	e00c      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	2102      	movs	r1, #2
 8004750:	4618      	mov	r0, r3
 8004752:	f000 ff03 	bl	800555c <RCCEx_PLL2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800475a:	e003      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	75fb      	strb	r3, [r7, #23]
      break;
 8004760:	e000      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8004762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800476a:	4ba0      	ldr	r3, [pc, #640]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800476c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	499d      	ldr	r1, [pc, #628]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004778:	4313      	orrs	r3, r2
 800477a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800477c:	e001      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	7dfb      	ldrb	r3, [r7, #23]
 8004780:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8086 	beq.w	800489c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004790:	4b97      	ldr	r3, [pc, #604]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a96      	ldr	r2, [pc, #600]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800479c:	f7fd f90a 	bl	80019b4 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047a2:	e009      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a4:	f7fd f906 	bl	80019b4 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b64      	cmp	r3, #100	; 0x64
 80047b0:	d902      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	75fb      	strb	r3, [r7, #23]
        break;
 80047b6:	e005      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b8:	4b8d      	ldr	r3, [pc, #564]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ef      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d166      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80047ca:	4b88      	ldr	r3, [pc, #544]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047d4:	4053      	eors	r3, r2
 80047d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d013      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047de:	4b83      	ldr	r3, [pc, #524]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047e8:	4b80      	ldr	r3, [pc, #512]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	4a7f      	ldr	r2, [pc, #508]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047f4:	4b7d      	ldr	r3, [pc, #500]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4a7c      	ldr	r2, [pc, #496]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004800:	4a7a      	ldr	r2, [pc, #488]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800480c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004810:	d115      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fd f8cf 	bl	80019b4 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004818:	e00b      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fd f8cb 	bl	80019b4 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d902      	bls.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	75fb      	strb	r3, [r7, #23]
            break;
 8004830:	e005      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004832:	4b6e      	ldr	r3, [pc, #440]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0ed      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 800483e:	7dfb      	ldrb	r3, [r7, #23]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d126      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800484a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004852:	d10d      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8004854:	4b65      	ldr	r3, [pc, #404]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004862:	0919      	lsrs	r1, r3, #4
 8004864:	4b63      	ldr	r3, [pc, #396]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8004866:	400b      	ands	r3, r1
 8004868:	4960      	ldr	r1, [pc, #384]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800486a:	4313      	orrs	r3, r2
 800486c:	610b      	str	r3, [r1, #16]
 800486e:	e005      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8004870:	4b5e      	ldr	r3, [pc, #376]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	4a5d      	ldr	r2, [pc, #372]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004876:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800487a:	6113      	str	r3, [r2, #16]
 800487c:	4b5b      	ldr	r3, [pc, #364]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800487e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488a:	4958      	ldr	r1, [pc, #352]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800488c:	4313      	orrs	r3, r2
 800488e:	670b      	str	r3, [r1, #112]	; 0x70
 8004890:	e004      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004892:	7dfb      	ldrb	r3, [r7, #23]
 8004894:	75bb      	strb	r3, [r7, #22]
 8004896:	e001      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d07e      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ac:	2b28      	cmp	r3, #40	; 0x28
 80048ae:	d867      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x880>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	08004987 	.word	0x08004987
 80048bc:	08004981 	.word	0x08004981
 80048c0:	08004981 	.word	0x08004981
 80048c4:	08004981 	.word	0x08004981
 80048c8:	08004981 	.word	0x08004981
 80048cc:	08004981 	.word	0x08004981
 80048d0:	08004981 	.word	0x08004981
 80048d4:	08004981 	.word	0x08004981
 80048d8:	0800495d 	.word	0x0800495d
 80048dc:	08004981 	.word	0x08004981
 80048e0:	08004981 	.word	0x08004981
 80048e4:	08004981 	.word	0x08004981
 80048e8:	08004981 	.word	0x08004981
 80048ec:	08004981 	.word	0x08004981
 80048f0:	08004981 	.word	0x08004981
 80048f4:	08004981 	.word	0x08004981
 80048f8:	0800496f 	.word	0x0800496f
 80048fc:	08004981 	.word	0x08004981
 8004900:	08004981 	.word	0x08004981
 8004904:	08004981 	.word	0x08004981
 8004908:	08004981 	.word	0x08004981
 800490c:	08004981 	.word	0x08004981
 8004910:	08004981 	.word	0x08004981
 8004914:	08004981 	.word	0x08004981
 8004918:	08004987 	.word	0x08004987
 800491c:	08004981 	.word	0x08004981
 8004920:	08004981 	.word	0x08004981
 8004924:	08004981 	.word	0x08004981
 8004928:	08004981 	.word	0x08004981
 800492c:	08004981 	.word	0x08004981
 8004930:	08004981 	.word	0x08004981
 8004934:	08004981 	.word	0x08004981
 8004938:	08004987 	.word	0x08004987
 800493c:	08004981 	.word	0x08004981
 8004940:	08004981 	.word	0x08004981
 8004944:	08004981 	.word	0x08004981
 8004948:	08004981 	.word	0x08004981
 800494c:	08004981 	.word	0x08004981
 8004950:	08004981 	.word	0x08004981
 8004954:	08004981 	.word	0x08004981
 8004958:	08004987 	.word	0x08004987
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	2101      	movs	r1, #1
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fdfa 	bl	800555c <RCCEx_PLL2_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800496c:	e00c      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3324      	adds	r3, #36	; 0x24
 8004972:	2101      	movs	r1, #1
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fea3 	bl	80056c0 <RCCEx_PLL3_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800497e:	e003      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
      break;
 8004984:	e000      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8004986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004988:	7dfb      	ldrb	r3, [r7, #23]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800498e:	4b17      	ldr	r3, [pc, #92]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800499a:	4914      	ldr	r1, [pc, #80]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800499c:	4313      	orrs	r3, r2
 800499e:	654b      	str	r3, [r1, #84]	; 0x54
 80049a0:	e001      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
 80049a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d03e      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	d827      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80049ba:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80049bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c0:	08004a11 	.word	0x08004a11
 80049c4:	080049d9 	.word	0x080049d9
 80049c8:	080049f9 	.word	0x080049f9
 80049cc:	08004a11 	.word	0x08004a11
 80049d0:	08004a11 	.word	0x08004a11
 80049d4:	08004a11 	.word	0x08004a11
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	2101      	movs	r1, #1
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fdbc 	bl	800555c <RCCEx_PLL2_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80049e8:	e013      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80049ea:	bf00      	nop
 80049ec:	58024400 	.word	0x58024400
 80049f0:	58024800 	.word	0x58024800
 80049f4:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3324      	adds	r3, #36	; 0x24
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fe5e 	bl	80056c0 <RCCEx_PLL3_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a08:	e003      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8004a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a18:	4b9f      	ldr	r3, [pc, #636]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	f023 0207 	bic.w	r2, r3, #7
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a24:	499c      	ldr	r1, [pc, #624]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	654b      	str	r3, [r1, #84]	; 0x54
 8004a2a:	e001      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d039      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a42:	2b05      	cmp	r3, #5
 8004a44:	d820      	bhi.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004a46:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8004a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4c:	08004a8f 	.word	0x08004a8f
 8004a50:	08004a65 	.word	0x08004a65
 8004a54:	08004a77 	.word	0x08004a77
 8004a58:	08004a8f 	.word	0x08004a8f
 8004a5c:	08004a8f 	.word	0x08004a8f
 8004a60:	08004a8f 	.word	0x08004a8f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	2101      	movs	r1, #1
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fd76 	bl	800555c <RCCEx_PLL2_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a74:	e00c      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3324      	adds	r3, #36	; 0x24
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fe1f 	bl	80056c0 <RCCEx_PLL3_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a86:	e003      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8c:	e000      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8004a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a96:	4b80      	ldr	r3, [pc, #512]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	f023 0207 	bic.w	r2, r3, #7
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa4:	497c      	ldr	r1, [pc, #496]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	658b      	str	r3, [r1, #88]	; 0x58
 8004aaa:	e001      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d04b      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac6:	d02e      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8004ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004acc:	d828      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad2:	d02a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad8:	d822      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004ada:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ade:	d026      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8004ae0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ae4:	d81c      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aea:	d010      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af0:	d816      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01d      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004afa:	d111      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fd2a 	bl	800555c <RCCEx_PLL2_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b0c:	e012      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3324      	adds	r3, #36	; 0x24
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fdd3 	bl	80056c0 <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b1e:	e009      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	75fb      	strb	r3, [r7, #23]
      break;
 8004b24:	e006      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004b26:	bf00      	nop
 8004b28:	e004      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b3a:	4b57      	ldr	r3, [pc, #348]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b48:	4953      	ldr	r1, [pc, #332]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	654b      	str	r3, [r1, #84]	; 0x54
 8004b4e:	e001      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d04b      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b6a:	d02e      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004b6c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b70:	d828      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b76:	d02a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xace>
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	d822      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b82:	d026      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8004b84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b88:	d81c      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8e:	d010      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b94:	d816      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01d      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9e:	d111      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fcd8 	bl	800555c <RCCEx_PLL2_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004bb0:	e012      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3324      	adds	r3, #36	; 0x24
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fd81 	bl	80056c0 <RCCEx_PLL3_Config>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004bc2:	e009      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc8:	e006      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e004      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e002      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e000      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bde:	4b2e      	ldr	r3, [pc, #184]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bec:	492a      	ldr	r1, [pc, #168]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	658b      	str	r3, [r1, #88]	; 0x58
 8004bf2:	e001      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d04d      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c0e:	d02e      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8004c10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c14:	d828      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1a:	d02a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8004c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c20:	d822      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004c22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c26:	d026      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8004c28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c2c:	d81c      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c32:	d010      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8004c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c38:	d816      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d01d      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c42:	d111      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fc86 	bl	800555c <RCCEx_PLL2_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c54:	e012      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3324      	adds	r3, #36	; 0x24
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fd2f 	bl	80056c0 <RCCEx_PLL3_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c66:	e009      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6c:	e006      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e004      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004c72:	bf00      	nop
 8004c74:	e002      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c90:	4901      	ldr	r1, [pc, #4]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	658b      	str	r3, [r1, #88]	; 0x58
 8004c96:	e003      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004c98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb6:	d10a      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3324      	adds	r3, #36	; 0x24
 8004cbc:	2102      	movs	r1, #2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fcfe 	bl	80056c0 <RCCEx_PLL3_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004cce:	4b8c      	ldr	r3, [pc, #560]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cdc:	4988      	ldr	r1, [pc, #544]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf8:	d10a      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3324      	adds	r3, #36	; 0x24
 8004cfe:	2102      	movs	r1, #2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fcdd 	bl	80056c0 <RCCEx_PLL3_Config>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d10:	4b7b      	ldr	r3, [pc, #492]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d1e:	4978      	ldr	r1, [pc, #480]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d034      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d3a:	d01d      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d40:	d817      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4a:	d009      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8004d4c:	e011      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3304      	adds	r3, #4
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fc01 	bl	800555c <RCCEx_PLL2_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d5e:	e00c      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3324      	adds	r3, #36	; 0x24
 8004d64:	2102      	movs	r1, #2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fcaa 	bl	80056c0 <RCCEx_PLL3_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d70:	e003      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
      break;
 8004d76:	e000      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8004d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d80:	4b5f      	ldr	r3, [pc, #380]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d8e:	495c      	ldr	r1, [pc, #368]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	658b      	str	r3, [r1, #88]	; 0x58
 8004d94:	e001      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d033      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004db0:	d01c      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004db2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004db6:	d816      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8004db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dbc:	d003      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dc2:	d007      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8004dc4:	e00f      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc6:	4b4e      	ldr	r3, [pc, #312]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	4a4d      	ldr	r2, [pc, #308]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004dd2:	e00c      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3324      	adds	r3, #36	; 0x24
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fc70 	bl	80056c0 <RCCEx_PLL3_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004de4:	e003      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8004dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004df4:	4b42      	ldr	r3, [pc, #264]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	493f      	ldr	r1, [pc, #252]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	654b      	str	r3, [r1, #84]	; 0x54
 8004e08:	e001      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d029      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8004e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e26:	d007      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8004e28:	e00f      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2a:	4b35      	ldr	r3, [pc, #212]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	4a34      	ldr	r2, [pc, #208]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e36:	e00b      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fb8c 	bl	800555c <RCCEx_PLL2_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e48:	e002      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e56:	4b2a      	ldr	r3, [pc, #168]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e62:	4927      	ldr	r1, [pc, #156]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e68:	e001      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
 8004e6c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3324      	adds	r3, #36	; 0x24
 8004e7e:	2102      	movs	r1, #2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fc1d 	bl	80056c0 <RCCEx_PLL3_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d035      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ea6:	d017      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8004ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eac:	d811      	bhi.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb2:	d013      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8004eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb8:	d80b      	bhi.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d010      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	4a0d      	ldr	r2, [pc, #52]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ece:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004ed0:	e007      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed6:	e004      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004ed8:	bf00      	nop
 8004eda:	e002      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004edc:	bf00      	nop
 8004ede:	e000      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10d      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef6:	4902      	ldr	r1, [pc, #8]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	654b      	str	r3, [r1, #84]	; 0x54
 8004efc:	e004      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8004efe:	bf00      	nop
 8004f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
 8004f06:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f14:	4b31      	ldr	r3, [pc, #196]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f20:	492e      	ldr	r1, [pc, #184]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004f32:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f40:	4926      	ldr	r1, [pc, #152]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f52:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f5e:	491f      	ldr	r1, [pc, #124]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00d      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f70:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	4a19      	ldr	r2, [pc, #100]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004f76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f7a:	6113      	str	r3, [r2, #16]
 8004f7c:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f86:	4915      	ldr	r1, [pc, #84]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	da08      	bge.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f94:	4b11      	ldr	r3, [pc, #68]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa0:	490e      	ldr	r1, [pc, #56]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc0:	4906      	ldr	r1, [pc, #24]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004fc6:	7dbb      	ldrb	r3, [r7, #22]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e000      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	58024400 	.word	0x58024400

08004fe0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004fe4:	f7ff f830 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4904      	ldr	r1, [pc, #16]	; (8005008 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005000:	4618      	mov	r0, r3
 8005002:	bd80      	pop	{r7, pc}
 8005004:	58024400 	.word	0x58024400
 8005008:	08007a14 	.word	0x08007a14

0800500c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005014:	4ba1      	ldr	r3, [pc, #644]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800501e:	4b9f      	ldr	r3, [pc, #636]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	0b1b      	lsrs	r3, r3, #12
 8005024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005028:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800502a:	4b9c      	ldr	r3, [pc, #624]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005036:	4b99      	ldr	r3, [pc, #612]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503a:	08db      	lsrs	r3, r3, #3
 800503c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8111 	beq.w	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b02      	cmp	r3, #2
 800505e:	f000 8083 	beq.w	8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b02      	cmp	r3, #2
 8005066:	f200 80a1 	bhi.w	80051ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d056      	beq.n	8005124 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005076:	e099      	b.n	80051ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005078:	4b88      	ldr	r3, [pc, #544]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d02d      	beq.n	80050e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005084:	4b85      	ldr	r3, [pc, #532]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	08db      	lsrs	r3, r3, #3
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	4a84      	ldr	r2, [pc, #528]	; (80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005090:	fa22 f303 	lsr.w	r3, r2, r3
 8005094:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	ee07 3a90 	vmov	s15, r3
 800509c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ae:	4b7b      	ldr	r3, [pc, #492]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050be:	ed97 6a03 	vldr	s12, [r7, #12]
 80050c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050de:	e087      	b.n	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f2:	4b6a      	ldr	r3, [pc, #424]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005102:	ed97 6a03 	vldr	s12, [r7, #12]
 8005106:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800510a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800511a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005122:	e065      	b.n	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005136:	4b59      	ldr	r3, [pc, #356]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005146:	ed97 6a03 	vldr	s12, [r7, #12]
 800514a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800514e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005166:	e043      	b.n	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517a:	4b48      	ldr	r3, [pc, #288]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518a:	ed97 6a03 	vldr	s12, [r7, #12]
 800518e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800519e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051aa:	e021      	b.n	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051be:	4b37      	ldr	r3, [pc, #220]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80051d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80051f0:	4b2a      	ldr	r3, [pc, #168]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	0a5b      	lsrs	r3, r3, #9
 80051f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800520a:	edd7 6a07 	vldr	s13, [r7, #28]
 800520e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005216:	ee17 2a90 	vmov	r2, s15
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800521e:	4b1f      	ldr	r3, [pc, #124]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	0c1b      	lsrs	r3, r3, #16
 8005224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005228:	ee07 3a90 	vmov	s15, r3
 800522c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005230:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005234:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005238:	edd7 6a07 	vldr	s13, [r7, #28]
 800523c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005244:	ee17 2a90 	vmov	r2, s15
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800524c:	4b13      	ldr	r3, [pc, #76]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	0e1b      	lsrs	r3, r3, #24
 8005252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005266:	edd7 6a07 	vldr	s13, [r7, #28]
 800526a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005272:	ee17 2a90 	vmov	r2, s15
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800527a:	e008      	b.n	800528e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	609a      	str	r2, [r3, #8]
}
 800528e:	bf00      	nop
 8005290:	3724      	adds	r7, #36	; 0x24
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	58024400 	.word	0x58024400
 80052a0:	03d09000 	.word	0x03d09000
 80052a4:	46000000 	.word	0x46000000
 80052a8:	4c742400 	.word	0x4c742400
 80052ac:	4a742400 	.word	0x4a742400
 80052b0:	4bbebc20 	.word	0x4bbebc20

080052b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b089      	sub	sp, #36	; 0x24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052bc:	4ba1      	ldr	r3, [pc, #644]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052c6:	4b9f      	ldr	r3, [pc, #636]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	0d1b      	lsrs	r3, r3, #20
 80052cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052d2:	4b9c      	ldr	r3, [pc, #624]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	0a1b      	lsrs	r3, r3, #8
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052de:	4b99      	ldr	r3, [pc, #612]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e2:	08db      	lsrs	r3, r3, #3
 80052e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8111 	beq.w	8005524 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b02      	cmp	r3, #2
 8005306:	f000 8083 	beq.w	8005410 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b02      	cmp	r3, #2
 800530e:	f200 80a1 	bhi.w	8005454 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d056      	beq.n	80053cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800531e:	e099      	b.n	8005454 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005320:	4b88      	ldr	r3, [pc, #544]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02d      	beq.n	8005388 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800532c:	4b85      	ldr	r3, [pc, #532]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	08db      	lsrs	r3, r3, #3
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	4a84      	ldr	r2, [pc, #528]	; (8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005338:	fa22 f303 	lsr.w	r3, r2, r3
 800533c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005356:	4b7b      	ldr	r3, [pc, #492]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005366:	ed97 6a03 	vldr	s12, [r7, #12]
 800536a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800554c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800536e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800537a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005382:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005386:	e087      	b.n	8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005392:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539a:	4b6a      	ldr	r3, [pc, #424]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800554c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053ca:	e065      	b.n	8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053de:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80053f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800554c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800540e:	e043      	b.n	8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800541e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005422:	4b48      	ldr	r3, [pc, #288]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005432:	ed97 6a03 	vldr	s12, [r7, #12]
 8005436:	eddf 5a45 	vldr	s11, [pc, #276]	; 800554c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800543a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005452:	e021      	b.n	8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005466:	4b37      	ldr	r3, [pc, #220]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005476:	ed97 6a03 	vldr	s12, [r7, #12]
 800547a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800554c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800547e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800548a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005496:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005498:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	0a5b      	lsrs	r3, r3, #9
 800549e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054be:	ee17 2a90 	vmov	r2, s15
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80054c6:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ec:	ee17 2a90 	vmov	r2, s15
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80054f4:	4b13      	ldr	r3, [pc, #76]	; (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	0e1b      	lsrs	r3, r3, #24
 80054fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800550a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800550e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800551a:	ee17 2a90 	vmov	r2, s15
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005522:	e008      	b.n	8005536 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	609a      	str	r2, [r3, #8]
}
 8005536:	bf00      	nop
 8005538:	3724      	adds	r7, #36	; 0x24
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	58024400 	.word	0x58024400
 8005548:	03d09000 	.word	0x03d09000
 800554c:	46000000 	.word	0x46000000
 8005550:	4c742400 	.word	0x4c742400
 8005554:	4a742400 	.word	0x4a742400
 8005558:	4bbebc20 	.word	0x4bbebc20

0800555c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800556a:	4b53      	ldr	r3, [pc, #332]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	2b03      	cmp	r3, #3
 8005574:	d101      	bne.n	800557a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e099      	b.n	80056ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800557a:	4b4f      	ldr	r3, [pc, #316]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a4e      	ldr	r2, [pc, #312]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005580:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005586:	f7fc fa15 	bl	80019b4 <HAL_GetTick>
 800558a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800558c:	e008      	b.n	80055a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800558e:	f7fc fa11 	bl	80019b4 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e086      	b.n	80056ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055a0:	4b45      	ldr	r3, [pc, #276]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f0      	bne.n	800558e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055ac:	4b42      	ldr	r3, [pc, #264]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	031b      	lsls	r3, r3, #12
 80055ba:	493f      	ldr	r1, [pc, #252]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	628b      	str	r3, [r1, #40]	; 0x28
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	025b      	lsls	r3, r3, #9
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	3b01      	subs	r3, #1
 80055dc:	041b      	lsls	r3, r3, #16
 80055de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	061b      	lsls	r3, r3, #24
 80055ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055f0:	4931      	ldr	r1, [pc, #196]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055f6:	4b30      	ldr	r3, [pc, #192]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	492d      	ldr	r1, [pc, #180]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005604:	4313      	orrs	r3, r2
 8005606:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005608:	4b2b      	ldr	r3, [pc, #172]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	f023 0220 	bic.w	r2, r3, #32
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	4928      	ldr	r1, [pc, #160]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800561a:	4b27      	ldr	r3, [pc, #156]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	4a26      	ldr	r2, [pc, #152]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005620:	f023 0310 	bic.w	r3, r3, #16
 8005624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005626:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800562a:	4b24      	ldr	r3, [pc, #144]	; (80056bc <RCCEx_PLL2_Config+0x160>)
 800562c:	4013      	ands	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	69d2      	ldr	r2, [r2, #28]
 8005632:	00d2      	lsls	r2, r2, #3
 8005634:	4920      	ldr	r1, [pc, #128]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005636:	4313      	orrs	r3, r2
 8005638:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800563a:	4b1f      	ldr	r3, [pc, #124]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005640:	f043 0310 	orr.w	r3, r3, #16
 8005644:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800564c:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005656:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005658:	e00f      	b.n	800567a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d106      	bne.n	800566e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005660:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	4a14      	ldr	r2, [pc, #80]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800566a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800566c:	e005      	b.n	800567a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800566e:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	4a11      	ldr	r2, [pc, #68]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005678:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800567a:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a0e      	ldr	r2, [pc, #56]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 8005680:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005686:	f7fc f995 	bl	80019b4 <HAL_GetTick>
 800568a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800568c:	e008      	b.n	80056a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800568e:	f7fc f991 	bl	80019b4 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e006      	b.n	80056ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056a0:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <RCCEx_PLL2_Config+0x15c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	58024400 	.word	0x58024400
 80056bc:	ffff0007 	.word	0xffff0007

080056c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056ce:	4b53      	ldr	r3, [pc, #332]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d101      	bne.n	80056de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e099      	b.n	8005812 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056de:	4b4f      	ldr	r3, [pc, #316]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a4e      	ldr	r2, [pc, #312]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80056e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ea:	f7fc f963 	bl	80019b4 <HAL_GetTick>
 80056ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056f0:	e008      	b.n	8005704 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056f2:	f7fc f95f 	bl	80019b4 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e086      	b.n	8005812 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005704:	4b45      	ldr	r3, [pc, #276]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f0      	bne.n	80056f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005710:	4b42      	ldr	r3, [pc, #264]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	051b      	lsls	r3, r3, #20
 800571e:	493f      	ldr	r1, [pc, #252]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 8005720:	4313      	orrs	r3, r2
 8005722:	628b      	str	r3, [r1, #40]	; 0x28
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	3b01      	subs	r3, #1
 800572a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	3b01      	subs	r3, #1
 8005734:	025b      	lsls	r3, r3, #9
 8005736:	b29b      	uxth	r3, r3
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	3b01      	subs	r3, #1
 8005740:	041b      	lsls	r3, r3, #16
 8005742:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	3b01      	subs	r3, #1
 800574e:	061b      	lsls	r3, r3, #24
 8005750:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005754:	4931      	ldr	r1, [pc, #196]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 8005756:	4313      	orrs	r3, r2
 8005758:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800575a:	4b30      	ldr	r3, [pc, #192]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	492d      	ldr	r1, [pc, #180]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 8005768:	4313      	orrs	r3, r2
 800576a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800576c:	4b2b      	ldr	r3, [pc, #172]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	4928      	ldr	r1, [pc, #160]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 800577a:	4313      	orrs	r3, r2
 800577c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800577e:	4b27      	ldr	r3, [pc, #156]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	4a26      	ldr	r2, [pc, #152]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 8005784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800578a:	4b24      	ldr	r3, [pc, #144]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 800578c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800578e:	4b24      	ldr	r3, [pc, #144]	; (8005820 <RCCEx_PLL3_Config+0x160>)
 8005790:	4013      	ands	r3, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	69d2      	ldr	r2, [r2, #28]
 8005796:	00d2      	lsls	r2, r2, #3
 8005798:	4920      	ldr	r1, [pc, #128]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 800579a:	4313      	orrs	r3, r2
 800579c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800579e:	4b1f      	ldr	r3, [pc, #124]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	4a1e      	ldr	r2, [pc, #120]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80057a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d106      	bne.n	80057be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057b0:	4b1a      	ldr	r3, [pc, #104]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	4a19      	ldr	r2, [pc, #100]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80057b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057bc:	e00f      	b.n	80057de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d106      	bne.n	80057d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057c4:	4b15      	ldr	r3, [pc, #84]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	4a14      	ldr	r2, [pc, #80]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80057ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057d0:	e005      	b.n	80057de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057d2:	4b12      	ldr	r3, [pc, #72]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	4a11      	ldr	r2, [pc, #68]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80057d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057de:	4b0f      	ldr	r3, [pc, #60]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a0e      	ldr	r2, [pc, #56]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ea:	f7fc f8e3 	bl	80019b4 <HAL_GetTick>
 80057ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057f0:	e008      	b.n	8005804 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057f2:	f7fc f8df 	bl	80019b4 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e006      	b.n	8005812 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <RCCEx_PLL3_Config+0x15c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	58024400 	.word	0x58024400
 8005820:	ffff0007 	.word	0xffff0007

08005824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e042      	b.n	80058bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7fb fec5 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2224      	movs	r2, #36	; 0x24
 8005852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8c2 	bl	80059f0 <UART_SetConfig>
 800586c:	4603      	mov	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e022      	b.n	80058bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fe16 	bl	80064b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fe9d 	bl	80065f4 <UART_CheckIdleState>
 80058ba:	4603      	mov	r3, r0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	; 0x28
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058da:	2b20      	cmp	r3, #32
 80058dc:	f040 8083 	bne.w	80059e6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_UART_Transmit+0x28>
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e07b      	b.n	80059e8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_UART_Transmit+0x3a>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e074      	b.n	80059e8 <HAL_UART_Transmit+0x124>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2221      	movs	r2, #33	; 0x21
 8005912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005916:	f7fc f84d 	bl	80019b4 <HAL_GetTick>
 800591a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	88fa      	ldrh	r2, [r7, #6]
 8005920:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005934:	d108      	bne.n	8005948 <HAL_UART_Transmit+0x84>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e003      	b.n	8005950 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005958:	e02c      	b.n	80059b4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2200      	movs	r2, #0
 8005962:	2180      	movs	r1, #128	; 0x80
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 fe90 	bl	800668a <UART_WaitOnFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e039      	b.n	80059e8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005988:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	3302      	adds	r3, #2
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	e007      	b.n	80059a2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	781a      	ldrb	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	3301      	adds	r3, #1
 80059a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1cc      	bne.n	800595a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2200      	movs	r2, #0
 80059c8:	2140      	movs	r1, #64	; 0x40
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fe5d 	bl	800668a <UART_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e006      	b.n	80059e8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e000      	b.n	80059e8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80059e6:	2302      	movs	r3, #2
  }
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3720      	adds	r7, #32
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059f0:	b5b0      	push	{r4, r5, r7, lr}
 80059f2:	b08e      	sub	sp, #56	; 0x38
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4bbf      	ldr	r3, [pc, #764]	; (8005d1c <UART_SetConfig+0x32c>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a26:	430b      	orrs	r3, r1
 8005a28:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4ab5      	ldr	r2, [pc, #724]	; (8005d20 <UART_SetConfig+0x330>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d004      	beq.n	8005a5a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a56:	4313      	orrs	r3, r2
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	4bb0      	ldr	r3, [pc, #704]	; (8005d24 <UART_SetConfig+0x334>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	f023 010f 	bic.w	r1, r3, #15
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4aa7      	ldr	r2, [pc, #668]	; (8005d28 <UART_SetConfig+0x338>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d176      	bne.n	8005b7c <UART_SetConfig+0x18c>
 8005a8e:	4ba7      	ldr	r3, [pc, #668]	; (8005d2c <UART_SetConfig+0x33c>)
 8005a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a96:	2b28      	cmp	r3, #40	; 0x28
 8005a98:	d86c      	bhi.n	8005b74 <UART_SetConfig+0x184>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <UART_SetConfig+0xb0>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005b45 	.word	0x08005b45
 8005aa4:	08005b75 	.word	0x08005b75
 8005aa8:	08005b75 	.word	0x08005b75
 8005aac:	08005b75 	.word	0x08005b75
 8005ab0:	08005b75 	.word	0x08005b75
 8005ab4:	08005b75 	.word	0x08005b75
 8005ab8:	08005b75 	.word	0x08005b75
 8005abc:	08005b75 	.word	0x08005b75
 8005ac0:	08005b4d 	.word	0x08005b4d
 8005ac4:	08005b75 	.word	0x08005b75
 8005ac8:	08005b75 	.word	0x08005b75
 8005acc:	08005b75 	.word	0x08005b75
 8005ad0:	08005b75 	.word	0x08005b75
 8005ad4:	08005b75 	.word	0x08005b75
 8005ad8:	08005b75 	.word	0x08005b75
 8005adc:	08005b75 	.word	0x08005b75
 8005ae0:	08005b55 	.word	0x08005b55
 8005ae4:	08005b75 	.word	0x08005b75
 8005ae8:	08005b75 	.word	0x08005b75
 8005aec:	08005b75 	.word	0x08005b75
 8005af0:	08005b75 	.word	0x08005b75
 8005af4:	08005b75 	.word	0x08005b75
 8005af8:	08005b75 	.word	0x08005b75
 8005afc:	08005b75 	.word	0x08005b75
 8005b00:	08005b5d 	.word	0x08005b5d
 8005b04:	08005b75 	.word	0x08005b75
 8005b08:	08005b75 	.word	0x08005b75
 8005b0c:	08005b75 	.word	0x08005b75
 8005b10:	08005b75 	.word	0x08005b75
 8005b14:	08005b75 	.word	0x08005b75
 8005b18:	08005b75 	.word	0x08005b75
 8005b1c:	08005b75 	.word	0x08005b75
 8005b20:	08005b65 	.word	0x08005b65
 8005b24:	08005b75 	.word	0x08005b75
 8005b28:	08005b75 	.word	0x08005b75
 8005b2c:	08005b75 	.word	0x08005b75
 8005b30:	08005b75 	.word	0x08005b75
 8005b34:	08005b75 	.word	0x08005b75
 8005b38:	08005b75 	.word	0x08005b75
 8005b3c:	08005b75 	.word	0x08005b75
 8005b40:	08005b6d 	.word	0x08005b6d
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4a:	e222      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b52:	e21e      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005b54:	2308      	movs	r3, #8
 8005b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5a:	e21a      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b62:	e216      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005b64:	2320      	movs	r3, #32
 8005b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6a:	e212      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005b6c:	2340      	movs	r3, #64	; 0x40
 8005b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b72:	e20e      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005b74:	2380      	movs	r3, #128	; 0x80
 8005b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7a:	e20a      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a6b      	ldr	r2, [pc, #428]	; (8005d30 <UART_SetConfig+0x340>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d130      	bne.n	8005be8 <UART_SetConfig+0x1f8>
 8005b86:	4b69      	ldr	r3, [pc, #420]	; (8005d2c <UART_SetConfig+0x33c>)
 8005b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	2b05      	cmp	r3, #5
 8005b90:	d826      	bhi.n	8005be0 <UART_SetConfig+0x1f0>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <UART_SetConfig+0x1a8>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005bb1 	.word	0x08005bb1
 8005b9c:	08005bb9 	.word	0x08005bb9
 8005ba0:	08005bc1 	.word	0x08005bc1
 8005ba4:	08005bc9 	.word	0x08005bc9
 8005ba8:	08005bd1 	.word	0x08005bd1
 8005bac:	08005bd9 	.word	0x08005bd9
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb6:	e1ec      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e1e8      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005bc0:	2308      	movs	r3, #8
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e1e4      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bce:	e1e0      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd6:	e1dc      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005bd8:	2340      	movs	r3, #64	; 0x40
 8005bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bde:	e1d8      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be6:	e1d4      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a51      	ldr	r2, [pc, #324]	; (8005d34 <UART_SetConfig+0x344>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d130      	bne.n	8005c54 <UART_SetConfig+0x264>
 8005bf2:	4b4e      	ldr	r3, [pc, #312]	; (8005d2c <UART_SetConfig+0x33c>)
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	2b05      	cmp	r3, #5
 8005bfc:	d826      	bhi.n	8005c4c <UART_SetConfig+0x25c>
 8005bfe:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <UART_SetConfig+0x214>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c1d 	.word	0x08005c1d
 8005c08:	08005c25 	.word	0x08005c25
 8005c0c:	08005c2d 	.word	0x08005c2d
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c3d 	.word	0x08005c3d
 8005c18:	08005c45 	.word	0x08005c45
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c22:	e1b6      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005c24:	2304      	movs	r3, #4
 8005c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2a:	e1b2      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005c2c:	2308      	movs	r3, #8
 8005c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c32:	e1ae      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005c34:	2310      	movs	r3, #16
 8005c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3a:	e1aa      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005c3c:	2320      	movs	r3, #32
 8005c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c42:	e1a6      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005c44:	2340      	movs	r3, #64	; 0x40
 8005c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4a:	e1a2      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c52:	e19e      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a37      	ldr	r2, [pc, #220]	; (8005d38 <UART_SetConfig+0x348>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d130      	bne.n	8005cc0 <UART_SetConfig+0x2d0>
 8005c5e:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <UART_SetConfig+0x33c>)
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d826      	bhi.n	8005cb8 <UART_SetConfig+0x2c8>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <UART_SetConfig+0x280>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c89 	.word	0x08005c89
 8005c74:	08005c91 	.word	0x08005c91
 8005c78:	08005c99 	.word	0x08005c99
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005cb1 	.word	0x08005cb1
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c8e:	e180      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005c90:	2304      	movs	r3, #4
 8005c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c96:	e17c      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005c98:	2308      	movs	r3, #8
 8005c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9e:	e178      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005ca0:	2310      	movs	r3, #16
 8005ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ca6:	e174      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005ca8:	2320      	movs	r3, #32
 8005caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cae:	e170      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005cb0:	2340      	movs	r3, #64	; 0x40
 8005cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cb6:	e16c      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cbe:	e168      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <UART_SetConfig+0x34c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d142      	bne.n	8005d50 <UART_SetConfig+0x360>
 8005cca:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <UART_SetConfig+0x33c>)
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d838      	bhi.n	8005d48 <UART_SetConfig+0x358>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <UART_SetConfig+0x2ec>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005cf5 	.word	0x08005cf5
 8005ce0:	08005cfd 	.word	0x08005cfd
 8005ce4:	08005d05 	.word	0x08005d05
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005d15 	.word	0x08005d15
 8005cf0:	08005d41 	.word	0x08005d41
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfa:	e14a      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d02:	e146      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005d04:	2308      	movs	r3, #8
 8005d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0a:	e142      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d12:	e13e      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005d14:	2320      	movs	r3, #32
 8005d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d1a:	e13a      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005d1c:	cfff69f3 	.word	0xcfff69f3
 8005d20:	58000c00 	.word	0x58000c00
 8005d24:	11fff4ff 	.word	0x11fff4ff
 8005d28:	40011000 	.word	0x40011000
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	40004400 	.word	0x40004400
 8005d34:	40004800 	.word	0x40004800
 8005d38:	40004c00 	.word	0x40004c00
 8005d3c:	40005000 	.word	0x40005000
 8005d40:	2340      	movs	r3, #64	; 0x40
 8005d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d46:	e124      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4e:	e120      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4acc      	ldr	r2, [pc, #816]	; (8006088 <UART_SetConfig+0x698>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d176      	bne.n	8005e48 <UART_SetConfig+0x458>
 8005d5a:	4bcc      	ldr	r3, [pc, #816]	; (800608c <UART_SetConfig+0x69c>)
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d62:	2b28      	cmp	r3, #40	; 0x28
 8005d64:	d86c      	bhi.n	8005e40 <UART_SetConfig+0x450>
 8005d66:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <UART_SetConfig+0x37c>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005e11 	.word	0x08005e11
 8005d70:	08005e41 	.word	0x08005e41
 8005d74:	08005e41 	.word	0x08005e41
 8005d78:	08005e41 	.word	0x08005e41
 8005d7c:	08005e41 	.word	0x08005e41
 8005d80:	08005e41 	.word	0x08005e41
 8005d84:	08005e41 	.word	0x08005e41
 8005d88:	08005e41 	.word	0x08005e41
 8005d8c:	08005e19 	.word	0x08005e19
 8005d90:	08005e41 	.word	0x08005e41
 8005d94:	08005e41 	.word	0x08005e41
 8005d98:	08005e41 	.word	0x08005e41
 8005d9c:	08005e41 	.word	0x08005e41
 8005da0:	08005e41 	.word	0x08005e41
 8005da4:	08005e41 	.word	0x08005e41
 8005da8:	08005e41 	.word	0x08005e41
 8005dac:	08005e21 	.word	0x08005e21
 8005db0:	08005e41 	.word	0x08005e41
 8005db4:	08005e41 	.word	0x08005e41
 8005db8:	08005e41 	.word	0x08005e41
 8005dbc:	08005e41 	.word	0x08005e41
 8005dc0:	08005e41 	.word	0x08005e41
 8005dc4:	08005e41 	.word	0x08005e41
 8005dc8:	08005e41 	.word	0x08005e41
 8005dcc:	08005e29 	.word	0x08005e29
 8005dd0:	08005e41 	.word	0x08005e41
 8005dd4:	08005e41 	.word	0x08005e41
 8005dd8:	08005e41 	.word	0x08005e41
 8005ddc:	08005e41 	.word	0x08005e41
 8005de0:	08005e41 	.word	0x08005e41
 8005de4:	08005e41 	.word	0x08005e41
 8005de8:	08005e41 	.word	0x08005e41
 8005dec:	08005e31 	.word	0x08005e31
 8005df0:	08005e41 	.word	0x08005e41
 8005df4:	08005e41 	.word	0x08005e41
 8005df8:	08005e41 	.word	0x08005e41
 8005dfc:	08005e41 	.word	0x08005e41
 8005e00:	08005e41 	.word	0x08005e41
 8005e04:	08005e41 	.word	0x08005e41
 8005e08:	08005e41 	.word	0x08005e41
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e16:	e0bc      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1e:	e0b8      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005e20:	2308      	movs	r3, #8
 8005e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e26:	e0b4      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2e:	e0b0      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005e30:	2320      	movs	r3, #32
 8005e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e36:	e0ac      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005e38:	2340      	movs	r3, #64	; 0x40
 8005e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3e:	e0a8      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	e0a4      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a90      	ldr	r2, [pc, #576]	; (8006090 <UART_SetConfig+0x6a0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d130      	bne.n	8005eb4 <UART_SetConfig+0x4c4>
 8005e52:	4b8e      	ldr	r3, [pc, #568]	; (800608c <UART_SetConfig+0x69c>)
 8005e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	2b05      	cmp	r3, #5
 8005e5c:	d826      	bhi.n	8005eac <UART_SetConfig+0x4bc>
 8005e5e:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <UART_SetConfig+0x474>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e7d 	.word	0x08005e7d
 8005e68:	08005e85 	.word	0x08005e85
 8005e6c:	08005e8d 	.word	0x08005e8d
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005e9d 	.word	0x08005e9d
 8005e78:	08005ea5 	.word	0x08005ea5
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e82:	e086      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005e84:	2304      	movs	r3, #4
 8005e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8a:	e082      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e92:	e07e      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005e94:	2310      	movs	r3, #16
 8005e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9a:	e07a      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea2:	e076      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005ea4:	2340      	movs	r3, #64	; 0x40
 8005ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eaa:	e072      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb2:	e06e      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a76      	ldr	r2, [pc, #472]	; (8006094 <UART_SetConfig+0x6a4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d130      	bne.n	8005f20 <UART_SetConfig+0x530>
 8005ebe:	4b73      	ldr	r3, [pc, #460]	; (800608c <UART_SetConfig+0x69c>)
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d826      	bhi.n	8005f18 <UART_SetConfig+0x528>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0x4e0>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ee9 	.word	0x08005ee9
 8005ed4:	08005ef1 	.word	0x08005ef1
 8005ed8:	08005ef9 	.word	0x08005ef9
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f09 	.word	0x08005f09
 8005ee4:	08005f11 	.word	0x08005f11
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eee:	e050      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef6:	e04c      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efe:	e048      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f06:	e044      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f08:	2320      	movs	r3, #32
 8005f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0e:	e040      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f10:	2340      	movs	r3, #64	; 0x40
 8005f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f16:	e03c      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1e:	e038      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a5c      	ldr	r2, [pc, #368]	; (8006098 <UART_SetConfig+0x6a8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d130      	bne.n	8005f8c <UART_SetConfig+0x59c>
 8005f2a:	4b58      	ldr	r3, [pc, #352]	; (800608c <UART_SetConfig+0x69c>)
 8005f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d826      	bhi.n	8005f84 <UART_SetConfig+0x594>
 8005f36:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <UART_SetConfig+0x54c>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f55 	.word	0x08005f55
 8005f40:	08005f5d 	.word	0x08005f5d
 8005f44:	08005f65 	.word	0x08005f65
 8005f48:	08005f6d 	.word	0x08005f6d
 8005f4c:	08005f75 	.word	0x08005f75
 8005f50:	08005f7d 	.word	0x08005f7d
 8005f54:	2302      	movs	r3, #2
 8005f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f5a:	e01a      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f62:	e016      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f64:	2308      	movs	r3, #8
 8005f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6a:	e012      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f6c:	2310      	movs	r3, #16
 8005f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f72:	e00e      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f74:	2320      	movs	r3, #32
 8005f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7a:	e00a      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f7c:	2340      	movs	r3, #64	; 0x40
 8005f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f82:	e006      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f84:	2380      	movs	r3, #128	; 0x80
 8005f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8a:	e002      	b.n	8005f92 <UART_SetConfig+0x5a2>
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a40      	ldr	r2, [pc, #256]	; (8006098 <UART_SetConfig+0x6a8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	f040 80ef 	bne.w	800617c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	dc46      	bgt.n	8006034 <UART_SetConfig+0x644>
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	f2c0 8081 	blt.w	80060ae <UART_SetConfig+0x6be>
 8005fac:	3b02      	subs	r3, #2
 8005fae:	2b1e      	cmp	r3, #30
 8005fb0:	d87d      	bhi.n	80060ae <UART_SetConfig+0x6be>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <UART_SetConfig+0x5c8>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	0800603b 	.word	0x0800603b
 8005fbc:	080060af 	.word	0x080060af
 8005fc0:	08006043 	.word	0x08006043
 8005fc4:	080060af 	.word	0x080060af
 8005fc8:	080060af 	.word	0x080060af
 8005fcc:	080060af 	.word	0x080060af
 8005fd0:	08006053 	.word	0x08006053
 8005fd4:	080060af 	.word	0x080060af
 8005fd8:	080060af 	.word	0x080060af
 8005fdc:	080060af 	.word	0x080060af
 8005fe0:	080060af 	.word	0x080060af
 8005fe4:	080060af 	.word	0x080060af
 8005fe8:	080060af 	.word	0x080060af
 8005fec:	080060af 	.word	0x080060af
 8005ff0:	08006063 	.word	0x08006063
 8005ff4:	080060af 	.word	0x080060af
 8005ff8:	080060af 	.word	0x080060af
 8005ffc:	080060af 	.word	0x080060af
 8006000:	080060af 	.word	0x080060af
 8006004:	080060af 	.word	0x080060af
 8006008:	080060af 	.word	0x080060af
 800600c:	080060af 	.word	0x080060af
 8006010:	080060af 	.word	0x080060af
 8006014:	080060af 	.word	0x080060af
 8006018:	080060af 	.word	0x080060af
 800601c:	080060af 	.word	0x080060af
 8006020:	080060af 	.word	0x080060af
 8006024:	080060af 	.word	0x080060af
 8006028:	080060af 	.word	0x080060af
 800602c:	080060af 	.word	0x080060af
 8006030:	080060a1 	.word	0x080060a1
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d036      	beq.n	80060a6 <UART_SetConfig+0x6b6>
 8006038:	e039      	b.n	80060ae <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800603a:	f7fe ffd1 	bl	8004fe0 <HAL_RCCEx_GetD3PCLK1Freq>
 800603e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006040:	e03b      	b.n	80060ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006042:	f107 0314 	add.w	r3, r7, #20
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe ffe0 	bl	800500c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006050:	e033      	b.n	80060ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006052:	f107 0308 	add.w	r3, r7, #8
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff f92c 	bl	80052b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006060:	e02b      	b.n	80060ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <UART_SetConfig+0x69c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800606e:	4b07      	ldr	r3, [pc, #28]	; (800608c <UART_SetConfig+0x69c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	08db      	lsrs	r3, r3, #3
 8006074:	f003 0303 	and.w	r3, r3, #3
 8006078:	4a08      	ldr	r2, [pc, #32]	; (800609c <UART_SetConfig+0x6ac>)
 800607a:	fa22 f303 	lsr.w	r3, r2, r3
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006080:	e01b      	b.n	80060ba <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006082:	4b06      	ldr	r3, [pc, #24]	; (800609c <UART_SetConfig+0x6ac>)
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006086:	e018      	b.n	80060ba <UART_SetConfig+0x6ca>
 8006088:	40011400 	.word	0x40011400
 800608c:	58024400 	.word	0x58024400
 8006090:	40007800 	.word	0x40007800
 8006094:	40007c00 	.word	0x40007c00
 8006098:	58000c00 	.word	0x58000c00
 800609c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060a0:	4bc4      	ldr	r3, [pc, #784]	; (80063b4 <UART_SetConfig+0x9c4>)
 80060a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060a4:	e009      	b.n	80060ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060ac:	e005      	b.n	80060ba <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80060b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 81da 	beq.w	8006476 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	4abc      	ldr	r2, [pc, #752]	; (80063b8 <UART_SetConfig+0x9c8>)
 80060c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060cc:	461a      	mov	r2, r3
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80060d4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	4413      	add	r3, r2
 80060e0:	6a3a      	ldr	r2, [r7, #32]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d305      	bcc.n	80060f2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d903      	bls.n	80060fa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80060f8:	e1bd      	b.n	8006476 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	4618      	mov	r0, r3
 80060fe:	f04f 0100 	mov.w	r1, #0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	4aac      	ldr	r2, [pc, #688]	; (80063b8 <UART_SetConfig+0x9c8>)
 8006108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800610c:	b29a      	uxth	r2, r3
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	f7fa f935 	bl	8000380 <__aeabi_uldivmod>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4610      	mov	r0, r2
 800611c:	4619      	mov	r1, r3
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	020b      	lsls	r3, r1, #8
 8006128:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800612c:	0202      	lsls	r2, r0, #8
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	6849      	ldr	r1, [r1, #4]
 8006132:	0849      	lsrs	r1, r1, #1
 8006134:	4608      	mov	r0, r1
 8006136:	f04f 0100 	mov.w	r1, #0
 800613a:	1814      	adds	r4, r2, r0
 800613c:	eb43 0501 	adc.w	r5, r3, r1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	461a      	mov	r2, r3
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	4620      	mov	r0, r4
 800614c:	4629      	mov	r1, r5
 800614e:	f7fa f917 	bl	8000380 <__aeabi_uldivmod>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4613      	mov	r3, r2
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006160:	d308      	bcc.n	8006174 <UART_SetConfig+0x784>
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006168:	d204      	bcs.n	8006174 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006170:	60da      	str	r2, [r3, #12]
 8006172:	e180      	b.n	8006476 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800617a:	e17c      	b.n	8006476 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006184:	f040 80bf 	bne.w	8006306 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006188:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800618c:	2b20      	cmp	r3, #32
 800618e:	dc49      	bgt.n	8006224 <UART_SetConfig+0x834>
 8006190:	2b00      	cmp	r3, #0
 8006192:	db7c      	blt.n	800628e <UART_SetConfig+0x89e>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d87a      	bhi.n	800628e <UART_SetConfig+0x89e>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <UART_SetConfig+0x7b0>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	0800622b 	.word	0x0800622b
 80061a4:	08006233 	.word	0x08006233
 80061a8:	0800628f 	.word	0x0800628f
 80061ac:	0800628f 	.word	0x0800628f
 80061b0:	0800623b 	.word	0x0800623b
 80061b4:	0800628f 	.word	0x0800628f
 80061b8:	0800628f 	.word	0x0800628f
 80061bc:	0800628f 	.word	0x0800628f
 80061c0:	0800624b 	.word	0x0800624b
 80061c4:	0800628f 	.word	0x0800628f
 80061c8:	0800628f 	.word	0x0800628f
 80061cc:	0800628f 	.word	0x0800628f
 80061d0:	0800628f 	.word	0x0800628f
 80061d4:	0800628f 	.word	0x0800628f
 80061d8:	0800628f 	.word	0x0800628f
 80061dc:	0800628f 	.word	0x0800628f
 80061e0:	0800625b 	.word	0x0800625b
 80061e4:	0800628f 	.word	0x0800628f
 80061e8:	0800628f 	.word	0x0800628f
 80061ec:	0800628f 	.word	0x0800628f
 80061f0:	0800628f 	.word	0x0800628f
 80061f4:	0800628f 	.word	0x0800628f
 80061f8:	0800628f 	.word	0x0800628f
 80061fc:	0800628f 	.word	0x0800628f
 8006200:	0800628f 	.word	0x0800628f
 8006204:	0800628f 	.word	0x0800628f
 8006208:	0800628f 	.word	0x0800628f
 800620c:	0800628f 	.word	0x0800628f
 8006210:	0800628f 	.word	0x0800628f
 8006214:	0800628f 	.word	0x0800628f
 8006218:	0800628f 	.word	0x0800628f
 800621c:	0800628f 	.word	0x0800628f
 8006220:	08006281 	.word	0x08006281
 8006224:	2b40      	cmp	r3, #64	; 0x40
 8006226:	d02e      	beq.n	8006286 <UART_SetConfig+0x896>
 8006228:	e031      	b.n	800628e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800622a:	f7fd ff3d 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 800622e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006230:	e033      	b.n	800629a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006232:	f7fd ff4f 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 8006236:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006238:	e02f      	b.n	800629a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800623a:	f107 0314 	add.w	r3, r7, #20
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fee4 	bl	800500c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006248:	e027      	b.n	800629a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800624a:	f107 0308 	add.w	r3, r7, #8
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff f830 	bl	80052b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006258:	e01f      	b.n	800629a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800625a:	4b58      	ldr	r3, [pc, #352]	; (80063bc <UART_SetConfig+0x9cc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006266:	4b55      	ldr	r3, [pc, #340]	; (80063bc <UART_SetConfig+0x9cc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	08db      	lsrs	r3, r3, #3
 800626c:	f003 0303 	and.w	r3, r3, #3
 8006270:	4a53      	ldr	r2, [pc, #332]	; (80063c0 <UART_SetConfig+0x9d0>)
 8006272:	fa22 f303 	lsr.w	r3, r2, r3
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006278:	e00f      	b.n	800629a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800627a:	4b51      	ldr	r3, [pc, #324]	; (80063c0 <UART_SetConfig+0x9d0>)
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800627e:	e00c      	b.n	800629a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006280:	4b4c      	ldr	r3, [pc, #304]	; (80063b4 <UART_SetConfig+0x9c4>)
 8006282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006284:	e009      	b.n	800629a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800628c:	e005      	b.n	800629a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006298:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80ea 	beq.w	8006476 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	4a44      	ldr	r2, [pc, #272]	; (80063b8 <UART_SetConfig+0x9c8>)
 80062a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ac:	461a      	mov	r2, r3
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062b4:	005a      	lsls	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	085b      	lsrs	r3, r3, #1
 80062bc:	441a      	add	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	2b0f      	cmp	r3, #15
 80062ce:	d916      	bls.n	80062fe <UART_SetConfig+0x90e>
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d6:	d212      	bcs.n	80062fe <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f023 030f 	bic.w	r3, r3, #15
 80062e0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	085b      	lsrs	r3, r3, #1
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062f0:	4313      	orrs	r3, r2
 80062f2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062fa:	60da      	str	r2, [r3, #12]
 80062fc:	e0bb      	b.n	8006476 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006304:	e0b7      	b.n	8006476 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006306:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800630a:	2b20      	cmp	r3, #32
 800630c:	dc4a      	bgt.n	80063a4 <UART_SetConfig+0x9b4>
 800630e:	2b00      	cmp	r3, #0
 8006310:	f2c0 8086 	blt.w	8006420 <UART_SetConfig+0xa30>
 8006314:	2b20      	cmp	r3, #32
 8006316:	f200 8083 	bhi.w	8006420 <UART_SetConfig+0xa30>
 800631a:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <UART_SetConfig+0x930>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	080063ab 	.word	0x080063ab
 8006324:	080063c5 	.word	0x080063c5
 8006328:	08006421 	.word	0x08006421
 800632c:	08006421 	.word	0x08006421
 8006330:	080063cd 	.word	0x080063cd
 8006334:	08006421 	.word	0x08006421
 8006338:	08006421 	.word	0x08006421
 800633c:	08006421 	.word	0x08006421
 8006340:	080063dd 	.word	0x080063dd
 8006344:	08006421 	.word	0x08006421
 8006348:	08006421 	.word	0x08006421
 800634c:	08006421 	.word	0x08006421
 8006350:	08006421 	.word	0x08006421
 8006354:	08006421 	.word	0x08006421
 8006358:	08006421 	.word	0x08006421
 800635c:	08006421 	.word	0x08006421
 8006360:	080063ed 	.word	0x080063ed
 8006364:	08006421 	.word	0x08006421
 8006368:	08006421 	.word	0x08006421
 800636c:	08006421 	.word	0x08006421
 8006370:	08006421 	.word	0x08006421
 8006374:	08006421 	.word	0x08006421
 8006378:	08006421 	.word	0x08006421
 800637c:	08006421 	.word	0x08006421
 8006380:	08006421 	.word	0x08006421
 8006384:	08006421 	.word	0x08006421
 8006388:	08006421 	.word	0x08006421
 800638c:	08006421 	.word	0x08006421
 8006390:	08006421 	.word	0x08006421
 8006394:	08006421 	.word	0x08006421
 8006398:	08006421 	.word	0x08006421
 800639c:	08006421 	.word	0x08006421
 80063a0:	08006413 	.word	0x08006413
 80063a4:	2b40      	cmp	r3, #64	; 0x40
 80063a6:	d037      	beq.n	8006418 <UART_SetConfig+0xa28>
 80063a8:	e03a      	b.n	8006420 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063aa:	f7fd fe7d 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 80063ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063b0:	e03c      	b.n	800642c <UART_SetConfig+0xa3c>
 80063b2:	bf00      	nop
 80063b4:	003d0900 	.word	0x003d0900
 80063b8:	08007a24 	.word	0x08007a24
 80063bc:	58024400 	.word	0x58024400
 80063c0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c4:	f7fd fe86 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 80063c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063ca:	e02f      	b.n	800642c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063cc:	f107 0314 	add.w	r3, r7, #20
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fe1b 	bl	800500c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063da:	e027      	b.n	800642c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063dc:	f107 0308 	add.w	r3, r7, #8
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe ff67 	bl	80052b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063ea:	e01f      	b.n	800642c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ec:	4b2c      	ldr	r3, [pc, #176]	; (80064a0 <UART_SetConfig+0xab0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d009      	beq.n	800640c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063f8:	4b29      	ldr	r3, [pc, #164]	; (80064a0 <UART_SetConfig+0xab0>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	08db      	lsrs	r3, r3, #3
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	4a28      	ldr	r2, [pc, #160]	; (80064a4 <UART_SetConfig+0xab4>)
 8006404:	fa22 f303 	lsr.w	r3, r2, r3
 8006408:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800640a:	e00f      	b.n	800642c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800640c:	4b25      	ldr	r3, [pc, #148]	; (80064a4 <UART_SetConfig+0xab4>)
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006410:	e00c      	b.n	800642c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006412:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <UART_SetConfig+0xab8>)
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006416:	e009      	b.n	800642c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800641e:	e005      	b.n	800642c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800642a:	bf00      	nop
    }

    if (pclk != 0U)
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d021      	beq.n	8006476 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	4a1d      	ldr	r2, [pc, #116]	; (80064ac <UART_SetConfig+0xabc>)
 8006438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800643c:	461a      	mov	r2, r3
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	fbb3 f2f2 	udiv	r2, r3, r2
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	441a      	add	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	fbb2 f3f3 	udiv	r3, r2, r3
 8006454:	b29b      	uxth	r3, r3
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2b0f      	cmp	r3, #15
 800645c:	d908      	bls.n	8006470 <UART_SetConfig+0xa80>
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006464:	d204      	bcs.n	8006470 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	e002      	b.n	8006476 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006492:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006496:	4618      	mov	r0, r3
 8006498:	3738      	adds	r7, #56	; 0x38
 800649a:	46bd      	mov	sp, r7
 800649c:	bdb0      	pop	{r4, r5, r7, pc}
 800649e:	bf00      	nop
 80064a0:	58024400 	.word	0x58024400
 80064a4:	03d09000 	.word	0x03d09000
 80064a8:	003d0900 	.word	0x003d0900
 80064ac:	08007a24 	.word	0x08007a24

080064b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01a      	beq.n	80065c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ae:	d10a      	bne.n	80065c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  }
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006604:	f7fb f9d6 	bl	80019b4 <HAL_GetTick>
 8006608:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b08      	cmp	r3, #8
 8006616:	d10e      	bne.n	8006636 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f82f 	bl	800668a <UART_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e025      	b.n	8006682 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b04      	cmp	r3, #4
 8006642:	d10e      	bne.n	8006662 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f819 	bl	800668a <UART_WaitOnFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e00f      	b.n	8006682 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2220      	movs	r2, #32
 800666e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	4613      	mov	r3, r2
 8006698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669a:	e062      	b.n	8006762 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	d05e      	beq.n	8006762 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a4:	f7fb f986 	bl	80019b4 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d302      	bcc.n	80066ba <UART_WaitOnFlagUntilTimeout+0x30>
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d11d      	bne.n	80066f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0201 	bic.w	r2, r2, #1
 80066d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2220      	movs	r2, #32
 80066de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e045      	b.n	8006782 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d02e      	beq.n	8006762 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800670e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006712:	d126      	bne.n	8006762 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800671c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800672c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0201 	bic.w	r2, r2, #1
 800673c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2220      	movs	r2, #32
 8006752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e00f      	b.n	8006782 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69da      	ldr	r2, [r3, #28]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4013      	ands	r3, r2
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	429a      	cmp	r2, r3
 8006770:	bf0c      	ite	eq
 8006772:	2301      	moveq	r3, #1
 8006774:	2300      	movne	r3, #0
 8006776:	b2db      	uxtb	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	429a      	cmp	r2, r3
 800677e:	d08d      	beq.n	800669c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006798:	2b01      	cmp	r3, #1
 800679a:	d101      	bne.n	80067a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800679c:	2302      	movs	r3, #2
 800679e:	e027      	b.n	80067f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2224      	movs	r2, #36	; 0x24
 80067ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0201 	bic.w	r2, r2, #1
 80067c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006810:	2302      	movs	r3, #2
 8006812:	e02d      	b.n	8006870 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2224      	movs	r2, #36	; 0x24
 8006820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0201 	bic.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f84f 	bl	80068f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2220      	movs	r2, #32
 8006862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800688c:	2302      	movs	r3, #2
 800688e:	e02d      	b.n	80068ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2224      	movs	r2, #36	; 0x24
 800689c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f811 	bl	80068f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006900:	2b00      	cmp	r3, #0
 8006902:	d108      	bne.n	8006916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006914:	e031      	b.n	800697a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006916:	2310      	movs	r3, #16
 8006918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800691a:	2310      	movs	r3, #16
 800691c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	0e5b      	lsrs	r3, r3, #25
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	0f5b      	lsrs	r3, r3, #29
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	7b3a      	ldrb	r2, [r7, #12]
 8006942:	4911      	ldr	r1, [pc, #68]	; (8006988 <UARTEx_SetNbDataToProcess+0x94>)
 8006944:	5c8a      	ldrb	r2, [r1, r2]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800694a:	7b3a      	ldrb	r2, [r7, #12]
 800694c:	490f      	ldr	r1, [pc, #60]	; (800698c <UARTEx_SetNbDataToProcess+0x98>)
 800694e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006950:	fb93 f3f2 	sdiv	r3, r3, r2
 8006954:	b29a      	uxth	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	7b7a      	ldrb	r2, [r7, #13]
 8006960:	4909      	ldr	r1, [pc, #36]	; (8006988 <UARTEx_SetNbDataToProcess+0x94>)
 8006962:	5c8a      	ldrb	r2, [r1, r2]
 8006964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006968:	7b7a      	ldrb	r2, [r7, #13]
 800696a:	4908      	ldr	r1, [pc, #32]	; (800698c <UARTEx_SetNbDataToProcess+0x98>)
 800696c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800696e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006972:	b29a      	uxth	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	08007a3c 	.word	0x08007a3c
 800698c:	08007a44 	.word	0x08007a44

08006990 <__errno>:
 8006990:	4b01      	ldr	r3, [pc, #4]	; (8006998 <__errno+0x8>)
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	24000028 	.word	0x24000028

0800699c <__libc_init_array>:
 800699c:	b570      	push	{r4, r5, r6, lr}
 800699e:	4d0d      	ldr	r5, [pc, #52]	; (80069d4 <__libc_init_array+0x38>)
 80069a0:	4c0d      	ldr	r4, [pc, #52]	; (80069d8 <__libc_init_array+0x3c>)
 80069a2:	1b64      	subs	r4, r4, r5
 80069a4:	10a4      	asrs	r4, r4, #2
 80069a6:	2600      	movs	r6, #0
 80069a8:	42a6      	cmp	r6, r4
 80069aa:	d109      	bne.n	80069c0 <__libc_init_array+0x24>
 80069ac:	4d0b      	ldr	r5, [pc, #44]	; (80069dc <__libc_init_array+0x40>)
 80069ae:	4c0c      	ldr	r4, [pc, #48]	; (80069e0 <__libc_init_array+0x44>)
 80069b0:	f000 ffec 	bl	800798c <_init>
 80069b4:	1b64      	subs	r4, r4, r5
 80069b6:	10a4      	asrs	r4, r4, #2
 80069b8:	2600      	movs	r6, #0
 80069ba:	42a6      	cmp	r6, r4
 80069bc:	d105      	bne.n	80069ca <__libc_init_array+0x2e>
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c4:	4798      	blx	r3
 80069c6:	3601      	adds	r6, #1
 80069c8:	e7ee      	b.n	80069a8 <__libc_init_array+0xc>
 80069ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ce:	4798      	blx	r3
 80069d0:	3601      	adds	r6, #1
 80069d2:	e7f2      	b.n	80069ba <__libc_init_array+0x1e>
 80069d4:	08007aec 	.word	0x08007aec
 80069d8:	08007aec 	.word	0x08007aec
 80069dc:	08007aec 	.word	0x08007aec
 80069e0:	08007af0 	.word	0x08007af0

080069e4 <memset>:
 80069e4:	4402      	add	r2, r0
 80069e6:	4603      	mov	r3, r0
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d100      	bne.n	80069ee <memset+0xa>
 80069ec:	4770      	bx	lr
 80069ee:	f803 1b01 	strb.w	r1, [r3], #1
 80069f2:	e7f9      	b.n	80069e8 <memset+0x4>

080069f4 <_free_r>:
 80069f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069f6:	2900      	cmp	r1, #0
 80069f8:	d048      	beq.n	8006a8c <_free_r+0x98>
 80069fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fe:	9001      	str	r0, [sp, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f1a1 0404 	sub.w	r4, r1, #4
 8006a06:	bfb8      	it	lt
 8006a08:	18e4      	addlt	r4, r4, r3
 8006a0a:	f000 fc19 	bl	8007240 <__malloc_lock>
 8006a0e:	4a20      	ldr	r2, [pc, #128]	; (8006a90 <_free_r+0x9c>)
 8006a10:	9801      	ldr	r0, [sp, #4]
 8006a12:	6813      	ldr	r3, [r2, #0]
 8006a14:	4615      	mov	r5, r2
 8006a16:	b933      	cbnz	r3, 8006a26 <_free_r+0x32>
 8006a18:	6063      	str	r3, [r4, #4]
 8006a1a:	6014      	str	r4, [r2, #0]
 8006a1c:	b003      	add	sp, #12
 8006a1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a22:	f000 bc13 	b.w	800724c <__malloc_unlock>
 8006a26:	42a3      	cmp	r3, r4
 8006a28:	d90b      	bls.n	8006a42 <_free_r+0x4e>
 8006a2a:	6821      	ldr	r1, [r4, #0]
 8006a2c:	1862      	adds	r2, r4, r1
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	bf04      	itt	eq
 8006a32:	681a      	ldreq	r2, [r3, #0]
 8006a34:	685b      	ldreq	r3, [r3, #4]
 8006a36:	6063      	str	r3, [r4, #4]
 8006a38:	bf04      	itt	eq
 8006a3a:	1852      	addeq	r2, r2, r1
 8006a3c:	6022      	streq	r2, [r4, #0]
 8006a3e:	602c      	str	r4, [r5, #0]
 8006a40:	e7ec      	b.n	8006a1c <_free_r+0x28>
 8006a42:	461a      	mov	r2, r3
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	b10b      	cbz	r3, 8006a4c <_free_r+0x58>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d9fa      	bls.n	8006a42 <_free_r+0x4e>
 8006a4c:	6811      	ldr	r1, [r2, #0]
 8006a4e:	1855      	adds	r5, r2, r1
 8006a50:	42a5      	cmp	r5, r4
 8006a52:	d10b      	bne.n	8006a6c <_free_r+0x78>
 8006a54:	6824      	ldr	r4, [r4, #0]
 8006a56:	4421      	add	r1, r4
 8006a58:	1854      	adds	r4, r2, r1
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	6011      	str	r1, [r2, #0]
 8006a5e:	d1dd      	bne.n	8006a1c <_free_r+0x28>
 8006a60:	681c      	ldr	r4, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	6053      	str	r3, [r2, #4]
 8006a66:	4421      	add	r1, r4
 8006a68:	6011      	str	r1, [r2, #0]
 8006a6a:	e7d7      	b.n	8006a1c <_free_r+0x28>
 8006a6c:	d902      	bls.n	8006a74 <_free_r+0x80>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	6003      	str	r3, [r0, #0]
 8006a72:	e7d3      	b.n	8006a1c <_free_r+0x28>
 8006a74:	6825      	ldr	r5, [r4, #0]
 8006a76:	1961      	adds	r1, r4, r5
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	bf04      	itt	eq
 8006a7c:	6819      	ldreq	r1, [r3, #0]
 8006a7e:	685b      	ldreq	r3, [r3, #4]
 8006a80:	6063      	str	r3, [r4, #4]
 8006a82:	bf04      	itt	eq
 8006a84:	1949      	addeq	r1, r1, r5
 8006a86:	6021      	streq	r1, [r4, #0]
 8006a88:	6054      	str	r4, [r2, #4]
 8006a8a:	e7c7      	b.n	8006a1c <_free_r+0x28>
 8006a8c:	b003      	add	sp, #12
 8006a8e:	bd30      	pop	{r4, r5, pc}
 8006a90:	240000b0 	.word	0x240000b0

08006a94 <_malloc_r>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	1ccd      	adds	r5, r1, #3
 8006a98:	f025 0503 	bic.w	r5, r5, #3
 8006a9c:	3508      	adds	r5, #8
 8006a9e:	2d0c      	cmp	r5, #12
 8006aa0:	bf38      	it	cc
 8006aa2:	250c      	movcc	r5, #12
 8006aa4:	2d00      	cmp	r5, #0
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	db01      	blt.n	8006aae <_malloc_r+0x1a>
 8006aaa:	42a9      	cmp	r1, r5
 8006aac:	d903      	bls.n	8006ab6 <_malloc_r+0x22>
 8006aae:	230c      	movs	r3, #12
 8006ab0:	6033      	str	r3, [r6, #0]
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab6:	f000 fbc3 	bl	8007240 <__malloc_lock>
 8006aba:	4921      	ldr	r1, [pc, #132]	; (8006b40 <_malloc_r+0xac>)
 8006abc:	680a      	ldr	r2, [r1, #0]
 8006abe:	4614      	mov	r4, r2
 8006ac0:	b99c      	cbnz	r4, 8006aea <_malloc_r+0x56>
 8006ac2:	4f20      	ldr	r7, [pc, #128]	; (8006b44 <_malloc_r+0xb0>)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	b923      	cbnz	r3, 8006ad2 <_malloc_r+0x3e>
 8006ac8:	4621      	mov	r1, r4
 8006aca:	4630      	mov	r0, r6
 8006acc:	f000 f8ca 	bl	8006c64 <_sbrk_r>
 8006ad0:	6038      	str	r0, [r7, #0]
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f000 f8c5 	bl	8006c64 <_sbrk_r>
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	d123      	bne.n	8006b26 <_malloc_r+0x92>
 8006ade:	230c      	movs	r3, #12
 8006ae0:	6033      	str	r3, [r6, #0]
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f000 fbb2 	bl	800724c <__malloc_unlock>
 8006ae8:	e7e3      	b.n	8006ab2 <_malloc_r+0x1e>
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	1b5b      	subs	r3, r3, r5
 8006aee:	d417      	bmi.n	8006b20 <_malloc_r+0x8c>
 8006af0:	2b0b      	cmp	r3, #11
 8006af2:	d903      	bls.n	8006afc <_malloc_r+0x68>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	441c      	add	r4, r3
 8006af8:	6025      	str	r5, [r4, #0]
 8006afa:	e004      	b.n	8006b06 <_malloc_r+0x72>
 8006afc:	6863      	ldr	r3, [r4, #4]
 8006afe:	42a2      	cmp	r2, r4
 8006b00:	bf0c      	ite	eq
 8006b02:	600b      	streq	r3, [r1, #0]
 8006b04:	6053      	strne	r3, [r2, #4]
 8006b06:	4630      	mov	r0, r6
 8006b08:	f000 fba0 	bl	800724c <__malloc_unlock>
 8006b0c:	f104 000b 	add.w	r0, r4, #11
 8006b10:	1d23      	adds	r3, r4, #4
 8006b12:	f020 0007 	bic.w	r0, r0, #7
 8006b16:	1ac2      	subs	r2, r0, r3
 8006b18:	d0cc      	beq.n	8006ab4 <_malloc_r+0x20>
 8006b1a:	1a1b      	subs	r3, r3, r0
 8006b1c:	50a3      	str	r3, [r4, r2]
 8006b1e:	e7c9      	b.n	8006ab4 <_malloc_r+0x20>
 8006b20:	4622      	mov	r2, r4
 8006b22:	6864      	ldr	r4, [r4, #4]
 8006b24:	e7cc      	b.n	8006ac0 <_malloc_r+0x2c>
 8006b26:	1cc4      	adds	r4, r0, #3
 8006b28:	f024 0403 	bic.w	r4, r4, #3
 8006b2c:	42a0      	cmp	r0, r4
 8006b2e:	d0e3      	beq.n	8006af8 <_malloc_r+0x64>
 8006b30:	1a21      	subs	r1, r4, r0
 8006b32:	4630      	mov	r0, r6
 8006b34:	f000 f896 	bl	8006c64 <_sbrk_r>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d1dd      	bne.n	8006af8 <_malloc_r+0x64>
 8006b3c:	e7cf      	b.n	8006ade <_malloc_r+0x4a>
 8006b3e:	bf00      	nop
 8006b40:	240000b0 	.word	0x240000b0
 8006b44:	240000b4 	.word	0x240000b4

08006b48 <iprintf>:
 8006b48:	b40f      	push	{r0, r1, r2, r3}
 8006b4a:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <iprintf+0x2c>)
 8006b4c:	b513      	push	{r0, r1, r4, lr}
 8006b4e:	681c      	ldr	r4, [r3, #0]
 8006b50:	b124      	cbz	r4, 8006b5c <iprintf+0x14>
 8006b52:	69a3      	ldr	r3, [r4, #24]
 8006b54:	b913      	cbnz	r3, 8006b5c <iprintf+0x14>
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 fa6e 	bl	8007038 <__sinit>
 8006b5c:	ab05      	add	r3, sp, #20
 8006b5e:	9a04      	ldr	r2, [sp, #16]
 8006b60:	68a1      	ldr	r1, [r4, #8]
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	4620      	mov	r0, r4
 8006b66:	f000 fba1 	bl	80072ac <_vfiprintf_r>
 8006b6a:	b002      	add	sp, #8
 8006b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b70:	b004      	add	sp, #16
 8006b72:	4770      	bx	lr
 8006b74:	24000028 	.word	0x24000028

08006b78 <_puts_r>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	460e      	mov	r6, r1
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	b118      	cbz	r0, 8006b88 <_puts_r+0x10>
 8006b80:	6983      	ldr	r3, [r0, #24]
 8006b82:	b90b      	cbnz	r3, 8006b88 <_puts_r+0x10>
 8006b84:	f000 fa58 	bl	8007038 <__sinit>
 8006b88:	69ab      	ldr	r3, [r5, #24]
 8006b8a:	68ac      	ldr	r4, [r5, #8]
 8006b8c:	b913      	cbnz	r3, 8006b94 <_puts_r+0x1c>
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 fa52 	bl	8007038 <__sinit>
 8006b94:	4b2c      	ldr	r3, [pc, #176]	; (8006c48 <_puts_r+0xd0>)
 8006b96:	429c      	cmp	r4, r3
 8006b98:	d120      	bne.n	8006bdc <_puts_r+0x64>
 8006b9a:	686c      	ldr	r4, [r5, #4]
 8006b9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b9e:	07db      	lsls	r3, r3, #31
 8006ba0:	d405      	bmi.n	8006bae <_puts_r+0x36>
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	0598      	lsls	r0, r3, #22
 8006ba6:	d402      	bmi.n	8006bae <_puts_r+0x36>
 8006ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006baa:	f000 fae3 	bl	8007174 <__retarget_lock_acquire_recursive>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	0719      	lsls	r1, r3, #28
 8006bb2:	d51d      	bpl.n	8006bf0 <_puts_r+0x78>
 8006bb4:	6923      	ldr	r3, [r4, #16]
 8006bb6:	b1db      	cbz	r3, 8006bf0 <_puts_r+0x78>
 8006bb8:	3e01      	subs	r6, #1
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	60a3      	str	r3, [r4, #8]
 8006bc4:	bb39      	cbnz	r1, 8006c16 <_puts_r+0x9e>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	da38      	bge.n	8006c3c <_puts_r+0xc4>
 8006bca:	4622      	mov	r2, r4
 8006bcc:	210a      	movs	r1, #10
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 f858 	bl	8006c84 <__swbuf_r>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d011      	beq.n	8006bfc <_puts_r+0x84>
 8006bd8:	250a      	movs	r5, #10
 8006bda:	e011      	b.n	8006c00 <_puts_r+0x88>
 8006bdc:	4b1b      	ldr	r3, [pc, #108]	; (8006c4c <_puts_r+0xd4>)
 8006bde:	429c      	cmp	r4, r3
 8006be0:	d101      	bne.n	8006be6 <_puts_r+0x6e>
 8006be2:	68ac      	ldr	r4, [r5, #8]
 8006be4:	e7da      	b.n	8006b9c <_puts_r+0x24>
 8006be6:	4b1a      	ldr	r3, [pc, #104]	; (8006c50 <_puts_r+0xd8>)
 8006be8:	429c      	cmp	r4, r3
 8006bea:	bf08      	it	eq
 8006bec:	68ec      	ldreq	r4, [r5, #12]
 8006bee:	e7d5      	b.n	8006b9c <_puts_r+0x24>
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f000 f898 	bl	8006d28 <__swsetup_r>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d0dd      	beq.n	8006bb8 <_puts_r+0x40>
 8006bfc:	f04f 35ff 	mov.w	r5, #4294967295
 8006c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c02:	07da      	lsls	r2, r3, #31
 8006c04:	d405      	bmi.n	8006c12 <_puts_r+0x9a>
 8006c06:	89a3      	ldrh	r3, [r4, #12]
 8006c08:	059b      	lsls	r3, r3, #22
 8006c0a:	d402      	bmi.n	8006c12 <_puts_r+0x9a>
 8006c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c0e:	f000 fab2 	bl	8007176 <__retarget_lock_release_recursive>
 8006c12:	4628      	mov	r0, r5
 8006c14:	bd70      	pop	{r4, r5, r6, pc}
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da04      	bge.n	8006c24 <_puts_r+0xac>
 8006c1a:	69a2      	ldr	r2, [r4, #24]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	dc06      	bgt.n	8006c2e <_puts_r+0xb6>
 8006c20:	290a      	cmp	r1, #10
 8006c22:	d004      	beq.n	8006c2e <_puts_r+0xb6>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	6022      	str	r2, [r4, #0]
 8006c2a:	7019      	strb	r1, [r3, #0]
 8006c2c:	e7c5      	b.n	8006bba <_puts_r+0x42>
 8006c2e:	4622      	mov	r2, r4
 8006c30:	4628      	mov	r0, r5
 8006c32:	f000 f827 	bl	8006c84 <__swbuf_r>
 8006c36:	3001      	adds	r0, #1
 8006c38:	d1bf      	bne.n	8006bba <_puts_r+0x42>
 8006c3a:	e7df      	b.n	8006bfc <_puts_r+0x84>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	250a      	movs	r5, #10
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	6022      	str	r2, [r4, #0]
 8006c44:	701d      	strb	r5, [r3, #0]
 8006c46:	e7db      	b.n	8006c00 <_puts_r+0x88>
 8006c48:	08007a70 	.word	0x08007a70
 8006c4c:	08007a90 	.word	0x08007a90
 8006c50:	08007a50 	.word	0x08007a50

08006c54 <puts>:
 8006c54:	4b02      	ldr	r3, [pc, #8]	; (8006c60 <puts+0xc>)
 8006c56:	4601      	mov	r1, r0
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	f7ff bf8d 	b.w	8006b78 <_puts_r>
 8006c5e:	bf00      	nop
 8006c60:	24000028 	.word	0x24000028

08006c64 <_sbrk_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4d06      	ldr	r5, [pc, #24]	; (8006c80 <_sbrk_r+0x1c>)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	602b      	str	r3, [r5, #0]
 8006c70:	f7fa fdba 	bl	80017e8 <_sbrk>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d102      	bne.n	8006c7e <_sbrk_r+0x1a>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	b103      	cbz	r3, 8006c7e <_sbrk_r+0x1a>
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	24000208 	.word	0x24000208

08006c84 <__swbuf_r>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	460e      	mov	r6, r1
 8006c88:	4614      	mov	r4, r2
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	b118      	cbz	r0, 8006c96 <__swbuf_r+0x12>
 8006c8e:	6983      	ldr	r3, [r0, #24]
 8006c90:	b90b      	cbnz	r3, 8006c96 <__swbuf_r+0x12>
 8006c92:	f000 f9d1 	bl	8007038 <__sinit>
 8006c96:	4b21      	ldr	r3, [pc, #132]	; (8006d1c <__swbuf_r+0x98>)
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	d12b      	bne.n	8006cf4 <__swbuf_r+0x70>
 8006c9c:	686c      	ldr	r4, [r5, #4]
 8006c9e:	69a3      	ldr	r3, [r4, #24]
 8006ca0:	60a3      	str	r3, [r4, #8]
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	071a      	lsls	r2, r3, #28
 8006ca6:	d52f      	bpl.n	8006d08 <__swbuf_r+0x84>
 8006ca8:	6923      	ldr	r3, [r4, #16]
 8006caa:	b36b      	cbz	r3, 8006d08 <__swbuf_r+0x84>
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	6820      	ldr	r0, [r4, #0]
 8006cb0:	1ac0      	subs	r0, r0, r3
 8006cb2:	6963      	ldr	r3, [r4, #20]
 8006cb4:	b2f6      	uxtb	r6, r6
 8006cb6:	4283      	cmp	r3, r0
 8006cb8:	4637      	mov	r7, r6
 8006cba:	dc04      	bgt.n	8006cc6 <__swbuf_r+0x42>
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 f926 	bl	8006f10 <_fflush_r>
 8006cc4:	bb30      	cbnz	r0, 8006d14 <__swbuf_r+0x90>
 8006cc6:	68a3      	ldr	r3, [r4, #8]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	60a3      	str	r3, [r4, #8]
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	6022      	str	r2, [r4, #0]
 8006cd2:	701e      	strb	r6, [r3, #0]
 8006cd4:	6963      	ldr	r3, [r4, #20]
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	4283      	cmp	r3, r0
 8006cda:	d004      	beq.n	8006ce6 <__swbuf_r+0x62>
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	07db      	lsls	r3, r3, #31
 8006ce0:	d506      	bpl.n	8006cf0 <__swbuf_r+0x6c>
 8006ce2:	2e0a      	cmp	r6, #10
 8006ce4:	d104      	bne.n	8006cf0 <__swbuf_r+0x6c>
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4628      	mov	r0, r5
 8006cea:	f000 f911 	bl	8006f10 <_fflush_r>
 8006cee:	b988      	cbnz	r0, 8006d14 <__swbuf_r+0x90>
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cf4:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <__swbuf_r+0x9c>)
 8006cf6:	429c      	cmp	r4, r3
 8006cf8:	d101      	bne.n	8006cfe <__swbuf_r+0x7a>
 8006cfa:	68ac      	ldr	r4, [r5, #8]
 8006cfc:	e7cf      	b.n	8006c9e <__swbuf_r+0x1a>
 8006cfe:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <__swbuf_r+0xa0>)
 8006d00:	429c      	cmp	r4, r3
 8006d02:	bf08      	it	eq
 8006d04:	68ec      	ldreq	r4, [r5, #12]
 8006d06:	e7ca      	b.n	8006c9e <__swbuf_r+0x1a>
 8006d08:	4621      	mov	r1, r4
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f000 f80c 	bl	8006d28 <__swsetup_r>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d0cb      	beq.n	8006cac <__swbuf_r+0x28>
 8006d14:	f04f 37ff 	mov.w	r7, #4294967295
 8006d18:	e7ea      	b.n	8006cf0 <__swbuf_r+0x6c>
 8006d1a:	bf00      	nop
 8006d1c:	08007a70 	.word	0x08007a70
 8006d20:	08007a90 	.word	0x08007a90
 8006d24:	08007a50 	.word	0x08007a50

08006d28 <__swsetup_r>:
 8006d28:	4b32      	ldr	r3, [pc, #200]	; (8006df4 <__swsetup_r+0xcc>)
 8006d2a:	b570      	push	{r4, r5, r6, lr}
 8006d2c:	681d      	ldr	r5, [r3, #0]
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460c      	mov	r4, r1
 8006d32:	b125      	cbz	r5, 8006d3e <__swsetup_r+0x16>
 8006d34:	69ab      	ldr	r3, [r5, #24]
 8006d36:	b913      	cbnz	r3, 8006d3e <__swsetup_r+0x16>
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f000 f97d 	bl	8007038 <__sinit>
 8006d3e:	4b2e      	ldr	r3, [pc, #184]	; (8006df8 <__swsetup_r+0xd0>)
 8006d40:	429c      	cmp	r4, r3
 8006d42:	d10f      	bne.n	8006d64 <__swsetup_r+0x3c>
 8006d44:	686c      	ldr	r4, [r5, #4]
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d4c:	0719      	lsls	r1, r3, #28
 8006d4e:	d42c      	bmi.n	8006daa <__swsetup_r+0x82>
 8006d50:	06dd      	lsls	r5, r3, #27
 8006d52:	d411      	bmi.n	8006d78 <__swsetup_r+0x50>
 8006d54:	2309      	movs	r3, #9
 8006d56:	6033      	str	r3, [r6, #0]
 8006d58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d62:	e03e      	b.n	8006de2 <__swsetup_r+0xba>
 8006d64:	4b25      	ldr	r3, [pc, #148]	; (8006dfc <__swsetup_r+0xd4>)
 8006d66:	429c      	cmp	r4, r3
 8006d68:	d101      	bne.n	8006d6e <__swsetup_r+0x46>
 8006d6a:	68ac      	ldr	r4, [r5, #8]
 8006d6c:	e7eb      	b.n	8006d46 <__swsetup_r+0x1e>
 8006d6e:	4b24      	ldr	r3, [pc, #144]	; (8006e00 <__swsetup_r+0xd8>)
 8006d70:	429c      	cmp	r4, r3
 8006d72:	bf08      	it	eq
 8006d74:	68ec      	ldreq	r4, [r5, #12]
 8006d76:	e7e6      	b.n	8006d46 <__swsetup_r+0x1e>
 8006d78:	0758      	lsls	r0, r3, #29
 8006d7a:	d512      	bpl.n	8006da2 <__swsetup_r+0x7a>
 8006d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d7e:	b141      	cbz	r1, 8006d92 <__swsetup_r+0x6a>
 8006d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d84:	4299      	cmp	r1, r3
 8006d86:	d002      	beq.n	8006d8e <__swsetup_r+0x66>
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f7ff fe33 	bl	80069f4 <_free_r>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6363      	str	r3, [r4, #52]	; 0x34
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	6063      	str	r3, [r4, #4]
 8006d9e:	6923      	ldr	r3, [r4, #16]
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	f043 0308 	orr.w	r3, r3, #8
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	b94b      	cbnz	r3, 8006dc2 <__swsetup_r+0x9a>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db8:	d003      	beq.n	8006dc2 <__swsetup_r+0x9a>
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f000 f9ff 	bl	80071c0 <__smakebuf_r>
 8006dc2:	89a0      	ldrh	r0, [r4, #12]
 8006dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dc8:	f010 0301 	ands.w	r3, r0, #1
 8006dcc:	d00a      	beq.n	8006de4 <__swsetup_r+0xbc>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60a3      	str	r3, [r4, #8]
 8006dd2:	6963      	ldr	r3, [r4, #20]
 8006dd4:	425b      	negs	r3, r3
 8006dd6:	61a3      	str	r3, [r4, #24]
 8006dd8:	6923      	ldr	r3, [r4, #16]
 8006dda:	b943      	cbnz	r3, 8006dee <__swsetup_r+0xc6>
 8006ddc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006de0:	d1ba      	bne.n	8006d58 <__swsetup_r+0x30>
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
 8006de4:	0781      	lsls	r1, r0, #30
 8006de6:	bf58      	it	pl
 8006de8:	6963      	ldrpl	r3, [r4, #20]
 8006dea:	60a3      	str	r3, [r4, #8]
 8006dec:	e7f4      	b.n	8006dd8 <__swsetup_r+0xb0>
 8006dee:	2000      	movs	r0, #0
 8006df0:	e7f7      	b.n	8006de2 <__swsetup_r+0xba>
 8006df2:	bf00      	nop
 8006df4:	24000028 	.word	0x24000028
 8006df8:	08007a70 	.word	0x08007a70
 8006dfc:	08007a90 	.word	0x08007a90
 8006e00:	08007a50 	.word	0x08007a50

08006e04 <__sflush_r>:
 8006e04:	898a      	ldrh	r2, [r1, #12]
 8006e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	0710      	lsls	r0, r2, #28
 8006e0e:	460c      	mov	r4, r1
 8006e10:	d458      	bmi.n	8006ec4 <__sflush_r+0xc0>
 8006e12:	684b      	ldr	r3, [r1, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	dc05      	bgt.n	8006e24 <__sflush_r+0x20>
 8006e18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dc02      	bgt.n	8006e24 <__sflush_r+0x20>
 8006e1e:	2000      	movs	r0, #0
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e26:	2e00      	cmp	r6, #0
 8006e28:	d0f9      	beq.n	8006e1e <__sflush_r+0x1a>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e30:	682f      	ldr	r7, [r5, #0]
 8006e32:	602b      	str	r3, [r5, #0]
 8006e34:	d032      	beq.n	8006e9c <__sflush_r+0x98>
 8006e36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	075a      	lsls	r2, r3, #29
 8006e3c:	d505      	bpl.n	8006e4a <__sflush_r+0x46>
 8006e3e:	6863      	ldr	r3, [r4, #4]
 8006e40:	1ac0      	subs	r0, r0, r3
 8006e42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e44:	b10b      	cbz	r3, 8006e4a <__sflush_r+0x46>
 8006e46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e48:	1ac0      	subs	r0, r0, r3
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e50:	6a21      	ldr	r1, [r4, #32]
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b0      	blx	r6
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	d106      	bne.n	8006e6a <__sflush_r+0x66>
 8006e5c:	6829      	ldr	r1, [r5, #0]
 8006e5e:	291d      	cmp	r1, #29
 8006e60:	d82c      	bhi.n	8006ebc <__sflush_r+0xb8>
 8006e62:	4a2a      	ldr	r2, [pc, #168]	; (8006f0c <__sflush_r+0x108>)
 8006e64:	40ca      	lsrs	r2, r1
 8006e66:	07d6      	lsls	r6, r2, #31
 8006e68:	d528      	bpl.n	8006ebc <__sflush_r+0xb8>
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	6062      	str	r2, [r4, #4]
 8006e6e:	04d9      	lsls	r1, r3, #19
 8006e70:	6922      	ldr	r2, [r4, #16]
 8006e72:	6022      	str	r2, [r4, #0]
 8006e74:	d504      	bpl.n	8006e80 <__sflush_r+0x7c>
 8006e76:	1c42      	adds	r2, r0, #1
 8006e78:	d101      	bne.n	8006e7e <__sflush_r+0x7a>
 8006e7a:	682b      	ldr	r3, [r5, #0]
 8006e7c:	b903      	cbnz	r3, 8006e80 <__sflush_r+0x7c>
 8006e7e:	6560      	str	r0, [r4, #84]	; 0x54
 8006e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e82:	602f      	str	r7, [r5, #0]
 8006e84:	2900      	cmp	r1, #0
 8006e86:	d0ca      	beq.n	8006e1e <__sflush_r+0x1a>
 8006e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e8c:	4299      	cmp	r1, r3
 8006e8e:	d002      	beq.n	8006e96 <__sflush_r+0x92>
 8006e90:	4628      	mov	r0, r5
 8006e92:	f7ff fdaf 	bl	80069f4 <_free_r>
 8006e96:	2000      	movs	r0, #0
 8006e98:	6360      	str	r0, [r4, #52]	; 0x34
 8006e9a:	e7c1      	b.n	8006e20 <__sflush_r+0x1c>
 8006e9c:	6a21      	ldr	r1, [r4, #32]
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b0      	blx	r6
 8006ea4:	1c41      	adds	r1, r0, #1
 8006ea6:	d1c7      	bne.n	8006e38 <__sflush_r+0x34>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0c4      	beq.n	8006e38 <__sflush_r+0x34>
 8006eae:	2b1d      	cmp	r3, #29
 8006eb0:	d001      	beq.n	8006eb6 <__sflush_r+0xb2>
 8006eb2:	2b16      	cmp	r3, #22
 8006eb4:	d101      	bne.n	8006eba <__sflush_r+0xb6>
 8006eb6:	602f      	str	r7, [r5, #0]
 8006eb8:	e7b1      	b.n	8006e1e <__sflush_r+0x1a>
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec0:	81a3      	strh	r3, [r4, #12]
 8006ec2:	e7ad      	b.n	8006e20 <__sflush_r+0x1c>
 8006ec4:	690f      	ldr	r7, [r1, #16]
 8006ec6:	2f00      	cmp	r7, #0
 8006ec8:	d0a9      	beq.n	8006e1e <__sflush_r+0x1a>
 8006eca:	0793      	lsls	r3, r2, #30
 8006ecc:	680e      	ldr	r6, [r1, #0]
 8006ece:	bf08      	it	eq
 8006ed0:	694b      	ldreq	r3, [r1, #20]
 8006ed2:	600f      	str	r7, [r1, #0]
 8006ed4:	bf18      	it	ne
 8006ed6:	2300      	movne	r3, #0
 8006ed8:	eba6 0807 	sub.w	r8, r6, r7
 8006edc:	608b      	str	r3, [r1, #8]
 8006ede:	f1b8 0f00 	cmp.w	r8, #0
 8006ee2:	dd9c      	ble.n	8006e1e <__sflush_r+0x1a>
 8006ee4:	6a21      	ldr	r1, [r4, #32]
 8006ee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ee8:	4643      	mov	r3, r8
 8006eea:	463a      	mov	r2, r7
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b0      	blx	r6
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	dc06      	bgt.n	8006f02 <__sflush_r+0xfe>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006efa:	81a3      	strh	r3, [r4, #12]
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
 8006f00:	e78e      	b.n	8006e20 <__sflush_r+0x1c>
 8006f02:	4407      	add	r7, r0
 8006f04:	eba8 0800 	sub.w	r8, r8, r0
 8006f08:	e7e9      	b.n	8006ede <__sflush_r+0xda>
 8006f0a:	bf00      	nop
 8006f0c:	20400001 	.word	0x20400001

08006f10 <_fflush_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	690b      	ldr	r3, [r1, #16]
 8006f14:	4605      	mov	r5, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	b913      	cbnz	r3, 8006f20 <_fflush_r+0x10>
 8006f1a:	2500      	movs	r5, #0
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	b118      	cbz	r0, 8006f2a <_fflush_r+0x1a>
 8006f22:	6983      	ldr	r3, [r0, #24]
 8006f24:	b90b      	cbnz	r3, 8006f2a <_fflush_r+0x1a>
 8006f26:	f000 f887 	bl	8007038 <__sinit>
 8006f2a:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <_fflush_r+0x6c>)
 8006f2c:	429c      	cmp	r4, r3
 8006f2e:	d11b      	bne.n	8006f68 <_fflush_r+0x58>
 8006f30:	686c      	ldr	r4, [r5, #4]
 8006f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0ef      	beq.n	8006f1a <_fflush_r+0xa>
 8006f3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f3c:	07d0      	lsls	r0, r2, #31
 8006f3e:	d404      	bmi.n	8006f4a <_fflush_r+0x3a>
 8006f40:	0599      	lsls	r1, r3, #22
 8006f42:	d402      	bmi.n	8006f4a <_fflush_r+0x3a>
 8006f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f46:	f000 f915 	bl	8007174 <__retarget_lock_acquire_recursive>
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f7ff ff59 	bl	8006e04 <__sflush_r>
 8006f52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f54:	07da      	lsls	r2, r3, #31
 8006f56:	4605      	mov	r5, r0
 8006f58:	d4e0      	bmi.n	8006f1c <_fflush_r+0xc>
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	059b      	lsls	r3, r3, #22
 8006f5e:	d4dd      	bmi.n	8006f1c <_fflush_r+0xc>
 8006f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f62:	f000 f908 	bl	8007176 <__retarget_lock_release_recursive>
 8006f66:	e7d9      	b.n	8006f1c <_fflush_r+0xc>
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <_fflush_r+0x70>)
 8006f6a:	429c      	cmp	r4, r3
 8006f6c:	d101      	bne.n	8006f72 <_fflush_r+0x62>
 8006f6e:	68ac      	ldr	r4, [r5, #8]
 8006f70:	e7df      	b.n	8006f32 <_fflush_r+0x22>
 8006f72:	4b04      	ldr	r3, [pc, #16]	; (8006f84 <_fflush_r+0x74>)
 8006f74:	429c      	cmp	r4, r3
 8006f76:	bf08      	it	eq
 8006f78:	68ec      	ldreq	r4, [r5, #12]
 8006f7a:	e7da      	b.n	8006f32 <_fflush_r+0x22>
 8006f7c:	08007a70 	.word	0x08007a70
 8006f80:	08007a90 	.word	0x08007a90
 8006f84:	08007a50 	.word	0x08007a50

08006f88 <std>:
 8006f88:	2300      	movs	r3, #0
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f96:	6083      	str	r3, [r0, #8]
 8006f98:	8181      	strh	r1, [r0, #12]
 8006f9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f9c:	81c2      	strh	r2, [r0, #14]
 8006f9e:	6183      	str	r3, [r0, #24]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	305c      	adds	r0, #92	; 0x5c
 8006fa6:	f7ff fd1d 	bl	80069e4 <memset>
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <std+0x38>)
 8006fac:	6263      	str	r3, [r4, #36]	; 0x24
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <std+0x3c>)
 8006fb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fb2:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <std+0x40>)
 8006fb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <std+0x44>)
 8006fb8:	6224      	str	r4, [r4, #32]
 8006fba:	6323      	str	r3, [r4, #48]	; 0x30
 8006fbc:	bd10      	pop	{r4, pc}
 8006fbe:	bf00      	nop
 8006fc0:	08007835 	.word	0x08007835
 8006fc4:	08007857 	.word	0x08007857
 8006fc8:	0800788f 	.word	0x0800788f
 8006fcc:	080078b3 	.word	0x080078b3

08006fd0 <_cleanup_r>:
 8006fd0:	4901      	ldr	r1, [pc, #4]	; (8006fd8 <_cleanup_r+0x8>)
 8006fd2:	f000 b8af 	b.w	8007134 <_fwalk_reent>
 8006fd6:	bf00      	nop
 8006fd8:	08006f11 	.word	0x08006f11

08006fdc <__sfmoreglue>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	1e4a      	subs	r2, r1, #1
 8006fe0:	2568      	movs	r5, #104	; 0x68
 8006fe2:	4355      	muls	r5, r2
 8006fe4:	460e      	mov	r6, r1
 8006fe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fea:	f7ff fd53 	bl	8006a94 <_malloc_r>
 8006fee:	4604      	mov	r4, r0
 8006ff0:	b140      	cbz	r0, 8007004 <__sfmoreglue+0x28>
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ff8:	300c      	adds	r0, #12
 8006ffa:	60a0      	str	r0, [r4, #8]
 8006ffc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007000:	f7ff fcf0 	bl	80069e4 <memset>
 8007004:	4620      	mov	r0, r4
 8007006:	bd70      	pop	{r4, r5, r6, pc}

08007008 <__sfp_lock_acquire>:
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <__sfp_lock_acquire+0x8>)
 800700a:	f000 b8b3 	b.w	8007174 <__retarget_lock_acquire_recursive>
 800700e:	bf00      	nop
 8007010:	24000204 	.word	0x24000204

08007014 <__sfp_lock_release>:
 8007014:	4801      	ldr	r0, [pc, #4]	; (800701c <__sfp_lock_release+0x8>)
 8007016:	f000 b8ae 	b.w	8007176 <__retarget_lock_release_recursive>
 800701a:	bf00      	nop
 800701c:	24000204 	.word	0x24000204

08007020 <__sinit_lock_acquire>:
 8007020:	4801      	ldr	r0, [pc, #4]	; (8007028 <__sinit_lock_acquire+0x8>)
 8007022:	f000 b8a7 	b.w	8007174 <__retarget_lock_acquire_recursive>
 8007026:	bf00      	nop
 8007028:	240001ff 	.word	0x240001ff

0800702c <__sinit_lock_release>:
 800702c:	4801      	ldr	r0, [pc, #4]	; (8007034 <__sinit_lock_release+0x8>)
 800702e:	f000 b8a2 	b.w	8007176 <__retarget_lock_release_recursive>
 8007032:	bf00      	nop
 8007034:	240001ff 	.word	0x240001ff

08007038 <__sinit>:
 8007038:	b510      	push	{r4, lr}
 800703a:	4604      	mov	r4, r0
 800703c:	f7ff fff0 	bl	8007020 <__sinit_lock_acquire>
 8007040:	69a3      	ldr	r3, [r4, #24]
 8007042:	b11b      	cbz	r3, 800704c <__sinit+0x14>
 8007044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007048:	f7ff bff0 	b.w	800702c <__sinit_lock_release>
 800704c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007050:	6523      	str	r3, [r4, #80]	; 0x50
 8007052:	4b13      	ldr	r3, [pc, #76]	; (80070a0 <__sinit+0x68>)
 8007054:	4a13      	ldr	r2, [pc, #76]	; (80070a4 <__sinit+0x6c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	62a2      	str	r2, [r4, #40]	; 0x28
 800705a:	42a3      	cmp	r3, r4
 800705c:	bf04      	itt	eq
 800705e:	2301      	moveq	r3, #1
 8007060:	61a3      	streq	r3, [r4, #24]
 8007062:	4620      	mov	r0, r4
 8007064:	f000 f820 	bl	80070a8 <__sfp>
 8007068:	6060      	str	r0, [r4, #4]
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f81c 	bl	80070a8 <__sfp>
 8007070:	60a0      	str	r0, [r4, #8]
 8007072:	4620      	mov	r0, r4
 8007074:	f000 f818 	bl	80070a8 <__sfp>
 8007078:	2200      	movs	r2, #0
 800707a:	60e0      	str	r0, [r4, #12]
 800707c:	2104      	movs	r1, #4
 800707e:	6860      	ldr	r0, [r4, #4]
 8007080:	f7ff ff82 	bl	8006f88 <std>
 8007084:	68a0      	ldr	r0, [r4, #8]
 8007086:	2201      	movs	r2, #1
 8007088:	2109      	movs	r1, #9
 800708a:	f7ff ff7d 	bl	8006f88 <std>
 800708e:	68e0      	ldr	r0, [r4, #12]
 8007090:	2202      	movs	r2, #2
 8007092:	2112      	movs	r1, #18
 8007094:	f7ff ff78 	bl	8006f88 <std>
 8007098:	2301      	movs	r3, #1
 800709a:	61a3      	str	r3, [r4, #24]
 800709c:	e7d2      	b.n	8007044 <__sinit+0xc>
 800709e:	bf00      	nop
 80070a0:	08007a4c 	.word	0x08007a4c
 80070a4:	08006fd1 	.word	0x08006fd1

080070a8 <__sfp>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	4607      	mov	r7, r0
 80070ac:	f7ff ffac 	bl	8007008 <__sfp_lock_acquire>
 80070b0:	4b1e      	ldr	r3, [pc, #120]	; (800712c <__sfp+0x84>)
 80070b2:	681e      	ldr	r6, [r3, #0]
 80070b4:	69b3      	ldr	r3, [r6, #24]
 80070b6:	b913      	cbnz	r3, 80070be <__sfp+0x16>
 80070b8:	4630      	mov	r0, r6
 80070ba:	f7ff ffbd 	bl	8007038 <__sinit>
 80070be:	3648      	adds	r6, #72	; 0x48
 80070c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	d503      	bpl.n	80070d0 <__sfp+0x28>
 80070c8:	6833      	ldr	r3, [r6, #0]
 80070ca:	b30b      	cbz	r3, 8007110 <__sfp+0x68>
 80070cc:	6836      	ldr	r6, [r6, #0]
 80070ce:	e7f7      	b.n	80070c0 <__sfp+0x18>
 80070d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070d4:	b9d5      	cbnz	r5, 800710c <__sfp+0x64>
 80070d6:	4b16      	ldr	r3, [pc, #88]	; (8007130 <__sfp+0x88>)
 80070d8:	60e3      	str	r3, [r4, #12]
 80070da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070de:	6665      	str	r5, [r4, #100]	; 0x64
 80070e0:	f000 f847 	bl	8007172 <__retarget_lock_init_recursive>
 80070e4:	f7ff ff96 	bl	8007014 <__sfp_lock_release>
 80070e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070f0:	6025      	str	r5, [r4, #0]
 80070f2:	61a5      	str	r5, [r4, #24]
 80070f4:	2208      	movs	r2, #8
 80070f6:	4629      	mov	r1, r5
 80070f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070fc:	f7ff fc72 	bl	80069e4 <memset>
 8007100:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007104:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007108:	4620      	mov	r0, r4
 800710a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710c:	3468      	adds	r4, #104	; 0x68
 800710e:	e7d9      	b.n	80070c4 <__sfp+0x1c>
 8007110:	2104      	movs	r1, #4
 8007112:	4638      	mov	r0, r7
 8007114:	f7ff ff62 	bl	8006fdc <__sfmoreglue>
 8007118:	4604      	mov	r4, r0
 800711a:	6030      	str	r0, [r6, #0]
 800711c:	2800      	cmp	r0, #0
 800711e:	d1d5      	bne.n	80070cc <__sfp+0x24>
 8007120:	f7ff ff78 	bl	8007014 <__sfp_lock_release>
 8007124:	230c      	movs	r3, #12
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	e7ee      	b.n	8007108 <__sfp+0x60>
 800712a:	bf00      	nop
 800712c:	08007a4c 	.word	0x08007a4c
 8007130:	ffff0001 	.word	0xffff0001

08007134 <_fwalk_reent>:
 8007134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007138:	4606      	mov	r6, r0
 800713a:	4688      	mov	r8, r1
 800713c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007140:	2700      	movs	r7, #0
 8007142:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007146:	f1b9 0901 	subs.w	r9, r9, #1
 800714a:	d505      	bpl.n	8007158 <_fwalk_reent+0x24>
 800714c:	6824      	ldr	r4, [r4, #0]
 800714e:	2c00      	cmp	r4, #0
 8007150:	d1f7      	bne.n	8007142 <_fwalk_reent+0xe>
 8007152:	4638      	mov	r0, r7
 8007154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007158:	89ab      	ldrh	r3, [r5, #12]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d907      	bls.n	800716e <_fwalk_reent+0x3a>
 800715e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007162:	3301      	adds	r3, #1
 8007164:	d003      	beq.n	800716e <_fwalk_reent+0x3a>
 8007166:	4629      	mov	r1, r5
 8007168:	4630      	mov	r0, r6
 800716a:	47c0      	blx	r8
 800716c:	4307      	orrs	r7, r0
 800716e:	3568      	adds	r5, #104	; 0x68
 8007170:	e7e9      	b.n	8007146 <_fwalk_reent+0x12>

08007172 <__retarget_lock_init_recursive>:
 8007172:	4770      	bx	lr

08007174 <__retarget_lock_acquire_recursive>:
 8007174:	4770      	bx	lr

08007176 <__retarget_lock_release_recursive>:
 8007176:	4770      	bx	lr

08007178 <__swhatbuf_r>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	460e      	mov	r6, r1
 800717c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007180:	2900      	cmp	r1, #0
 8007182:	b096      	sub	sp, #88	; 0x58
 8007184:	4614      	mov	r4, r2
 8007186:	461d      	mov	r5, r3
 8007188:	da07      	bge.n	800719a <__swhatbuf_r+0x22>
 800718a:	2300      	movs	r3, #0
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	89b3      	ldrh	r3, [r6, #12]
 8007190:	061a      	lsls	r2, r3, #24
 8007192:	d410      	bmi.n	80071b6 <__swhatbuf_r+0x3e>
 8007194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007198:	e00e      	b.n	80071b8 <__swhatbuf_r+0x40>
 800719a:	466a      	mov	r2, sp
 800719c:	f000 fbb0 	bl	8007900 <_fstat_r>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	dbf2      	blt.n	800718a <__swhatbuf_r+0x12>
 80071a4:	9a01      	ldr	r2, [sp, #4]
 80071a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071ae:	425a      	negs	r2, r3
 80071b0:	415a      	adcs	r2, r3
 80071b2:	602a      	str	r2, [r5, #0]
 80071b4:	e7ee      	b.n	8007194 <__swhatbuf_r+0x1c>
 80071b6:	2340      	movs	r3, #64	; 0x40
 80071b8:	2000      	movs	r0, #0
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	b016      	add	sp, #88	; 0x58
 80071be:	bd70      	pop	{r4, r5, r6, pc}

080071c0 <__smakebuf_r>:
 80071c0:	898b      	ldrh	r3, [r1, #12]
 80071c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071c4:	079d      	lsls	r5, r3, #30
 80071c6:	4606      	mov	r6, r0
 80071c8:	460c      	mov	r4, r1
 80071ca:	d507      	bpl.n	80071dc <__smakebuf_r+0x1c>
 80071cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	6123      	str	r3, [r4, #16]
 80071d4:	2301      	movs	r3, #1
 80071d6:	6163      	str	r3, [r4, #20]
 80071d8:	b002      	add	sp, #8
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	ab01      	add	r3, sp, #4
 80071de:	466a      	mov	r2, sp
 80071e0:	f7ff ffca 	bl	8007178 <__swhatbuf_r>
 80071e4:	9900      	ldr	r1, [sp, #0]
 80071e6:	4605      	mov	r5, r0
 80071e8:	4630      	mov	r0, r6
 80071ea:	f7ff fc53 	bl	8006a94 <_malloc_r>
 80071ee:	b948      	cbnz	r0, 8007204 <__smakebuf_r+0x44>
 80071f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f4:	059a      	lsls	r2, r3, #22
 80071f6:	d4ef      	bmi.n	80071d8 <__smakebuf_r+0x18>
 80071f8:	f023 0303 	bic.w	r3, r3, #3
 80071fc:	f043 0302 	orr.w	r3, r3, #2
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	e7e3      	b.n	80071cc <__smakebuf_r+0xc>
 8007204:	4b0d      	ldr	r3, [pc, #52]	; (800723c <__smakebuf_r+0x7c>)
 8007206:	62b3      	str	r3, [r6, #40]	; 0x28
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	6020      	str	r0, [r4, #0]
 800720c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	9b00      	ldr	r3, [sp, #0]
 8007214:	6163      	str	r3, [r4, #20]
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	6120      	str	r0, [r4, #16]
 800721a:	b15b      	cbz	r3, 8007234 <__smakebuf_r+0x74>
 800721c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007220:	4630      	mov	r0, r6
 8007222:	f000 fb7f 	bl	8007924 <_isatty_r>
 8007226:	b128      	cbz	r0, 8007234 <__smakebuf_r+0x74>
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	89a0      	ldrh	r0, [r4, #12]
 8007236:	4305      	orrs	r5, r0
 8007238:	81a5      	strh	r5, [r4, #12]
 800723a:	e7cd      	b.n	80071d8 <__smakebuf_r+0x18>
 800723c:	08006fd1 	.word	0x08006fd1

08007240 <__malloc_lock>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__malloc_lock+0x8>)
 8007242:	f7ff bf97 	b.w	8007174 <__retarget_lock_acquire_recursive>
 8007246:	bf00      	nop
 8007248:	24000200 	.word	0x24000200

0800724c <__malloc_unlock>:
 800724c:	4801      	ldr	r0, [pc, #4]	; (8007254 <__malloc_unlock+0x8>)
 800724e:	f7ff bf92 	b.w	8007176 <__retarget_lock_release_recursive>
 8007252:	bf00      	nop
 8007254:	24000200 	.word	0x24000200

08007258 <__sfputc_r>:
 8007258:	6893      	ldr	r3, [r2, #8]
 800725a:	3b01      	subs	r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	b410      	push	{r4}
 8007260:	6093      	str	r3, [r2, #8]
 8007262:	da08      	bge.n	8007276 <__sfputc_r+0x1e>
 8007264:	6994      	ldr	r4, [r2, #24]
 8007266:	42a3      	cmp	r3, r4
 8007268:	db01      	blt.n	800726e <__sfputc_r+0x16>
 800726a:	290a      	cmp	r1, #10
 800726c:	d103      	bne.n	8007276 <__sfputc_r+0x1e>
 800726e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007272:	f7ff bd07 	b.w	8006c84 <__swbuf_r>
 8007276:	6813      	ldr	r3, [r2, #0]
 8007278:	1c58      	adds	r0, r3, #1
 800727a:	6010      	str	r0, [r2, #0]
 800727c:	7019      	strb	r1, [r3, #0]
 800727e:	4608      	mov	r0, r1
 8007280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007284:	4770      	bx	lr

08007286 <__sfputs_r>:
 8007286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007288:	4606      	mov	r6, r0
 800728a:	460f      	mov	r7, r1
 800728c:	4614      	mov	r4, r2
 800728e:	18d5      	adds	r5, r2, r3
 8007290:	42ac      	cmp	r4, r5
 8007292:	d101      	bne.n	8007298 <__sfputs_r+0x12>
 8007294:	2000      	movs	r0, #0
 8007296:	e007      	b.n	80072a8 <__sfputs_r+0x22>
 8007298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800729c:	463a      	mov	r2, r7
 800729e:	4630      	mov	r0, r6
 80072a0:	f7ff ffda 	bl	8007258 <__sfputc_r>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d1f3      	bne.n	8007290 <__sfputs_r+0xa>
 80072a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072ac <_vfiprintf_r>:
 80072ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	460d      	mov	r5, r1
 80072b2:	b09d      	sub	sp, #116	; 0x74
 80072b4:	4614      	mov	r4, r2
 80072b6:	4698      	mov	r8, r3
 80072b8:	4606      	mov	r6, r0
 80072ba:	b118      	cbz	r0, 80072c4 <_vfiprintf_r+0x18>
 80072bc:	6983      	ldr	r3, [r0, #24]
 80072be:	b90b      	cbnz	r3, 80072c4 <_vfiprintf_r+0x18>
 80072c0:	f7ff feba 	bl	8007038 <__sinit>
 80072c4:	4b89      	ldr	r3, [pc, #548]	; (80074ec <_vfiprintf_r+0x240>)
 80072c6:	429d      	cmp	r5, r3
 80072c8:	d11b      	bne.n	8007302 <_vfiprintf_r+0x56>
 80072ca:	6875      	ldr	r5, [r6, #4]
 80072cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ce:	07d9      	lsls	r1, r3, #31
 80072d0:	d405      	bmi.n	80072de <_vfiprintf_r+0x32>
 80072d2:	89ab      	ldrh	r3, [r5, #12]
 80072d4:	059a      	lsls	r2, r3, #22
 80072d6:	d402      	bmi.n	80072de <_vfiprintf_r+0x32>
 80072d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072da:	f7ff ff4b 	bl	8007174 <__retarget_lock_acquire_recursive>
 80072de:	89ab      	ldrh	r3, [r5, #12]
 80072e0:	071b      	lsls	r3, r3, #28
 80072e2:	d501      	bpl.n	80072e8 <_vfiprintf_r+0x3c>
 80072e4:	692b      	ldr	r3, [r5, #16]
 80072e6:	b9eb      	cbnz	r3, 8007324 <_vfiprintf_r+0x78>
 80072e8:	4629      	mov	r1, r5
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7ff fd1c 	bl	8006d28 <__swsetup_r>
 80072f0:	b1c0      	cbz	r0, 8007324 <_vfiprintf_r+0x78>
 80072f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072f4:	07dc      	lsls	r4, r3, #31
 80072f6:	d50e      	bpl.n	8007316 <_vfiprintf_r+0x6a>
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295
 80072fc:	b01d      	add	sp, #116	; 0x74
 80072fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007302:	4b7b      	ldr	r3, [pc, #492]	; (80074f0 <_vfiprintf_r+0x244>)
 8007304:	429d      	cmp	r5, r3
 8007306:	d101      	bne.n	800730c <_vfiprintf_r+0x60>
 8007308:	68b5      	ldr	r5, [r6, #8]
 800730a:	e7df      	b.n	80072cc <_vfiprintf_r+0x20>
 800730c:	4b79      	ldr	r3, [pc, #484]	; (80074f4 <_vfiprintf_r+0x248>)
 800730e:	429d      	cmp	r5, r3
 8007310:	bf08      	it	eq
 8007312:	68f5      	ldreq	r5, [r6, #12]
 8007314:	e7da      	b.n	80072cc <_vfiprintf_r+0x20>
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	0598      	lsls	r0, r3, #22
 800731a:	d4ed      	bmi.n	80072f8 <_vfiprintf_r+0x4c>
 800731c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800731e:	f7ff ff2a 	bl	8007176 <__retarget_lock_release_recursive>
 8007322:	e7e9      	b.n	80072f8 <_vfiprintf_r+0x4c>
 8007324:	2300      	movs	r3, #0
 8007326:	9309      	str	r3, [sp, #36]	; 0x24
 8007328:	2320      	movs	r3, #32
 800732a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800732e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007332:	2330      	movs	r3, #48	; 0x30
 8007334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074f8 <_vfiprintf_r+0x24c>
 8007338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800733c:	f04f 0901 	mov.w	r9, #1
 8007340:	4623      	mov	r3, r4
 8007342:	469a      	mov	sl, r3
 8007344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007348:	b10a      	cbz	r2, 800734e <_vfiprintf_r+0xa2>
 800734a:	2a25      	cmp	r2, #37	; 0x25
 800734c:	d1f9      	bne.n	8007342 <_vfiprintf_r+0x96>
 800734e:	ebba 0b04 	subs.w	fp, sl, r4
 8007352:	d00b      	beq.n	800736c <_vfiprintf_r+0xc0>
 8007354:	465b      	mov	r3, fp
 8007356:	4622      	mov	r2, r4
 8007358:	4629      	mov	r1, r5
 800735a:	4630      	mov	r0, r6
 800735c:	f7ff ff93 	bl	8007286 <__sfputs_r>
 8007360:	3001      	adds	r0, #1
 8007362:	f000 80aa 	beq.w	80074ba <_vfiprintf_r+0x20e>
 8007366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007368:	445a      	add	r2, fp
 800736a:	9209      	str	r2, [sp, #36]	; 0x24
 800736c:	f89a 3000 	ldrb.w	r3, [sl]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 80a2 	beq.w	80074ba <_vfiprintf_r+0x20e>
 8007376:	2300      	movs	r3, #0
 8007378:	f04f 32ff 	mov.w	r2, #4294967295
 800737c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007380:	f10a 0a01 	add.w	sl, sl, #1
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	9307      	str	r3, [sp, #28]
 8007388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800738c:	931a      	str	r3, [sp, #104]	; 0x68
 800738e:	4654      	mov	r4, sl
 8007390:	2205      	movs	r2, #5
 8007392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007396:	4858      	ldr	r0, [pc, #352]	; (80074f8 <_vfiprintf_r+0x24c>)
 8007398:	f7f8 ffa2 	bl	80002e0 <memchr>
 800739c:	9a04      	ldr	r2, [sp, #16]
 800739e:	b9d8      	cbnz	r0, 80073d8 <_vfiprintf_r+0x12c>
 80073a0:	06d1      	lsls	r1, r2, #27
 80073a2:	bf44      	itt	mi
 80073a4:	2320      	movmi	r3, #32
 80073a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073aa:	0713      	lsls	r3, r2, #28
 80073ac:	bf44      	itt	mi
 80073ae:	232b      	movmi	r3, #43	; 0x2b
 80073b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073b4:	f89a 3000 	ldrb.w	r3, [sl]
 80073b8:	2b2a      	cmp	r3, #42	; 0x2a
 80073ba:	d015      	beq.n	80073e8 <_vfiprintf_r+0x13c>
 80073bc:	9a07      	ldr	r2, [sp, #28]
 80073be:	4654      	mov	r4, sl
 80073c0:	2000      	movs	r0, #0
 80073c2:	f04f 0c0a 	mov.w	ip, #10
 80073c6:	4621      	mov	r1, r4
 80073c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073cc:	3b30      	subs	r3, #48	; 0x30
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	d94e      	bls.n	8007470 <_vfiprintf_r+0x1c4>
 80073d2:	b1b0      	cbz	r0, 8007402 <_vfiprintf_r+0x156>
 80073d4:	9207      	str	r2, [sp, #28]
 80073d6:	e014      	b.n	8007402 <_vfiprintf_r+0x156>
 80073d8:	eba0 0308 	sub.w	r3, r0, r8
 80073dc:	fa09 f303 	lsl.w	r3, r9, r3
 80073e0:	4313      	orrs	r3, r2
 80073e2:	9304      	str	r3, [sp, #16]
 80073e4:	46a2      	mov	sl, r4
 80073e6:	e7d2      	b.n	800738e <_vfiprintf_r+0xe2>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	1d19      	adds	r1, r3, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	9103      	str	r1, [sp, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfbb      	ittet	lt
 80073f4:	425b      	neglt	r3, r3
 80073f6:	f042 0202 	orrlt.w	r2, r2, #2
 80073fa:	9307      	strge	r3, [sp, #28]
 80073fc:	9307      	strlt	r3, [sp, #28]
 80073fe:	bfb8      	it	lt
 8007400:	9204      	strlt	r2, [sp, #16]
 8007402:	7823      	ldrb	r3, [r4, #0]
 8007404:	2b2e      	cmp	r3, #46	; 0x2e
 8007406:	d10c      	bne.n	8007422 <_vfiprintf_r+0x176>
 8007408:	7863      	ldrb	r3, [r4, #1]
 800740a:	2b2a      	cmp	r3, #42	; 0x2a
 800740c:	d135      	bne.n	800747a <_vfiprintf_r+0x1ce>
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	1d1a      	adds	r2, r3, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	9203      	str	r2, [sp, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	bfb8      	it	lt
 800741a:	f04f 33ff 	movlt.w	r3, #4294967295
 800741e:	3402      	adds	r4, #2
 8007420:	9305      	str	r3, [sp, #20]
 8007422:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007508 <_vfiprintf_r+0x25c>
 8007426:	7821      	ldrb	r1, [r4, #0]
 8007428:	2203      	movs	r2, #3
 800742a:	4650      	mov	r0, sl
 800742c:	f7f8 ff58 	bl	80002e0 <memchr>
 8007430:	b140      	cbz	r0, 8007444 <_vfiprintf_r+0x198>
 8007432:	2340      	movs	r3, #64	; 0x40
 8007434:	eba0 000a 	sub.w	r0, r0, sl
 8007438:	fa03 f000 	lsl.w	r0, r3, r0
 800743c:	9b04      	ldr	r3, [sp, #16]
 800743e:	4303      	orrs	r3, r0
 8007440:	3401      	adds	r4, #1
 8007442:	9304      	str	r3, [sp, #16]
 8007444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007448:	482c      	ldr	r0, [pc, #176]	; (80074fc <_vfiprintf_r+0x250>)
 800744a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800744e:	2206      	movs	r2, #6
 8007450:	f7f8 ff46 	bl	80002e0 <memchr>
 8007454:	2800      	cmp	r0, #0
 8007456:	d03f      	beq.n	80074d8 <_vfiprintf_r+0x22c>
 8007458:	4b29      	ldr	r3, [pc, #164]	; (8007500 <_vfiprintf_r+0x254>)
 800745a:	bb1b      	cbnz	r3, 80074a4 <_vfiprintf_r+0x1f8>
 800745c:	9b03      	ldr	r3, [sp, #12]
 800745e:	3307      	adds	r3, #7
 8007460:	f023 0307 	bic.w	r3, r3, #7
 8007464:	3308      	adds	r3, #8
 8007466:	9303      	str	r3, [sp, #12]
 8007468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800746a:	443b      	add	r3, r7
 800746c:	9309      	str	r3, [sp, #36]	; 0x24
 800746e:	e767      	b.n	8007340 <_vfiprintf_r+0x94>
 8007470:	fb0c 3202 	mla	r2, ip, r2, r3
 8007474:	460c      	mov	r4, r1
 8007476:	2001      	movs	r0, #1
 8007478:	e7a5      	b.n	80073c6 <_vfiprintf_r+0x11a>
 800747a:	2300      	movs	r3, #0
 800747c:	3401      	adds	r4, #1
 800747e:	9305      	str	r3, [sp, #20]
 8007480:	4619      	mov	r1, r3
 8007482:	f04f 0c0a 	mov.w	ip, #10
 8007486:	4620      	mov	r0, r4
 8007488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800748c:	3a30      	subs	r2, #48	; 0x30
 800748e:	2a09      	cmp	r2, #9
 8007490:	d903      	bls.n	800749a <_vfiprintf_r+0x1ee>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0c5      	beq.n	8007422 <_vfiprintf_r+0x176>
 8007496:	9105      	str	r1, [sp, #20]
 8007498:	e7c3      	b.n	8007422 <_vfiprintf_r+0x176>
 800749a:	fb0c 2101 	mla	r1, ip, r1, r2
 800749e:	4604      	mov	r4, r0
 80074a0:	2301      	movs	r3, #1
 80074a2:	e7f0      	b.n	8007486 <_vfiprintf_r+0x1da>
 80074a4:	ab03      	add	r3, sp, #12
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	462a      	mov	r2, r5
 80074aa:	4b16      	ldr	r3, [pc, #88]	; (8007504 <_vfiprintf_r+0x258>)
 80074ac:	a904      	add	r1, sp, #16
 80074ae:	4630      	mov	r0, r6
 80074b0:	f3af 8000 	nop.w
 80074b4:	4607      	mov	r7, r0
 80074b6:	1c78      	adds	r0, r7, #1
 80074b8:	d1d6      	bne.n	8007468 <_vfiprintf_r+0x1bc>
 80074ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074bc:	07d9      	lsls	r1, r3, #31
 80074be:	d405      	bmi.n	80074cc <_vfiprintf_r+0x220>
 80074c0:	89ab      	ldrh	r3, [r5, #12]
 80074c2:	059a      	lsls	r2, r3, #22
 80074c4:	d402      	bmi.n	80074cc <_vfiprintf_r+0x220>
 80074c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074c8:	f7ff fe55 	bl	8007176 <__retarget_lock_release_recursive>
 80074cc:	89ab      	ldrh	r3, [r5, #12]
 80074ce:	065b      	lsls	r3, r3, #25
 80074d0:	f53f af12 	bmi.w	80072f8 <_vfiprintf_r+0x4c>
 80074d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074d6:	e711      	b.n	80072fc <_vfiprintf_r+0x50>
 80074d8:	ab03      	add	r3, sp, #12
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	462a      	mov	r2, r5
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <_vfiprintf_r+0x258>)
 80074e0:	a904      	add	r1, sp, #16
 80074e2:	4630      	mov	r0, r6
 80074e4:	f000 f880 	bl	80075e8 <_printf_i>
 80074e8:	e7e4      	b.n	80074b4 <_vfiprintf_r+0x208>
 80074ea:	bf00      	nop
 80074ec:	08007a70 	.word	0x08007a70
 80074f0:	08007a90 	.word	0x08007a90
 80074f4:	08007a50 	.word	0x08007a50
 80074f8:	08007ab0 	.word	0x08007ab0
 80074fc:	08007aba 	.word	0x08007aba
 8007500:	00000000 	.word	0x00000000
 8007504:	08007287 	.word	0x08007287
 8007508:	08007ab6 	.word	0x08007ab6

0800750c <_printf_common>:
 800750c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007510:	4616      	mov	r6, r2
 8007512:	4699      	mov	r9, r3
 8007514:	688a      	ldr	r2, [r1, #8]
 8007516:	690b      	ldr	r3, [r1, #16]
 8007518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800751c:	4293      	cmp	r3, r2
 800751e:	bfb8      	it	lt
 8007520:	4613      	movlt	r3, r2
 8007522:	6033      	str	r3, [r6, #0]
 8007524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007528:	4607      	mov	r7, r0
 800752a:	460c      	mov	r4, r1
 800752c:	b10a      	cbz	r2, 8007532 <_printf_common+0x26>
 800752e:	3301      	adds	r3, #1
 8007530:	6033      	str	r3, [r6, #0]
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	0699      	lsls	r1, r3, #26
 8007536:	bf42      	ittt	mi
 8007538:	6833      	ldrmi	r3, [r6, #0]
 800753a:	3302      	addmi	r3, #2
 800753c:	6033      	strmi	r3, [r6, #0]
 800753e:	6825      	ldr	r5, [r4, #0]
 8007540:	f015 0506 	ands.w	r5, r5, #6
 8007544:	d106      	bne.n	8007554 <_printf_common+0x48>
 8007546:	f104 0a19 	add.w	sl, r4, #25
 800754a:	68e3      	ldr	r3, [r4, #12]
 800754c:	6832      	ldr	r2, [r6, #0]
 800754e:	1a9b      	subs	r3, r3, r2
 8007550:	42ab      	cmp	r3, r5
 8007552:	dc26      	bgt.n	80075a2 <_printf_common+0x96>
 8007554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007558:	1e13      	subs	r3, r2, #0
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	bf18      	it	ne
 800755e:	2301      	movne	r3, #1
 8007560:	0692      	lsls	r2, r2, #26
 8007562:	d42b      	bmi.n	80075bc <_printf_common+0xb0>
 8007564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007568:	4649      	mov	r1, r9
 800756a:	4638      	mov	r0, r7
 800756c:	47c0      	blx	r8
 800756e:	3001      	adds	r0, #1
 8007570:	d01e      	beq.n	80075b0 <_printf_common+0xa4>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	68e5      	ldr	r5, [r4, #12]
 8007576:	6832      	ldr	r2, [r6, #0]
 8007578:	f003 0306 	and.w	r3, r3, #6
 800757c:	2b04      	cmp	r3, #4
 800757e:	bf08      	it	eq
 8007580:	1aad      	subeq	r5, r5, r2
 8007582:	68a3      	ldr	r3, [r4, #8]
 8007584:	6922      	ldr	r2, [r4, #16]
 8007586:	bf0c      	ite	eq
 8007588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800758c:	2500      	movne	r5, #0
 800758e:	4293      	cmp	r3, r2
 8007590:	bfc4      	itt	gt
 8007592:	1a9b      	subgt	r3, r3, r2
 8007594:	18ed      	addgt	r5, r5, r3
 8007596:	2600      	movs	r6, #0
 8007598:	341a      	adds	r4, #26
 800759a:	42b5      	cmp	r5, r6
 800759c:	d11a      	bne.n	80075d4 <_printf_common+0xc8>
 800759e:	2000      	movs	r0, #0
 80075a0:	e008      	b.n	80075b4 <_printf_common+0xa8>
 80075a2:	2301      	movs	r3, #1
 80075a4:	4652      	mov	r2, sl
 80075a6:	4649      	mov	r1, r9
 80075a8:	4638      	mov	r0, r7
 80075aa:	47c0      	blx	r8
 80075ac:	3001      	adds	r0, #1
 80075ae:	d103      	bne.n	80075b8 <_printf_common+0xac>
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295
 80075b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b8:	3501      	adds	r5, #1
 80075ba:	e7c6      	b.n	800754a <_printf_common+0x3e>
 80075bc:	18e1      	adds	r1, r4, r3
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	2030      	movs	r0, #48	; 0x30
 80075c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075c6:	4422      	add	r2, r4
 80075c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075d0:	3302      	adds	r3, #2
 80075d2:	e7c7      	b.n	8007564 <_printf_common+0x58>
 80075d4:	2301      	movs	r3, #1
 80075d6:	4622      	mov	r2, r4
 80075d8:	4649      	mov	r1, r9
 80075da:	4638      	mov	r0, r7
 80075dc:	47c0      	blx	r8
 80075de:	3001      	adds	r0, #1
 80075e0:	d0e6      	beq.n	80075b0 <_printf_common+0xa4>
 80075e2:	3601      	adds	r6, #1
 80075e4:	e7d9      	b.n	800759a <_printf_common+0x8e>
	...

080075e8 <_printf_i>:
 80075e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075ec:	460c      	mov	r4, r1
 80075ee:	4691      	mov	r9, r2
 80075f0:	7e27      	ldrb	r7, [r4, #24]
 80075f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075f4:	2f78      	cmp	r7, #120	; 0x78
 80075f6:	4680      	mov	r8, r0
 80075f8:	469a      	mov	sl, r3
 80075fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075fe:	d807      	bhi.n	8007610 <_printf_i+0x28>
 8007600:	2f62      	cmp	r7, #98	; 0x62
 8007602:	d80a      	bhi.n	800761a <_printf_i+0x32>
 8007604:	2f00      	cmp	r7, #0
 8007606:	f000 80d8 	beq.w	80077ba <_printf_i+0x1d2>
 800760a:	2f58      	cmp	r7, #88	; 0x58
 800760c:	f000 80a3 	beq.w	8007756 <_printf_i+0x16e>
 8007610:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007618:	e03a      	b.n	8007690 <_printf_i+0xa8>
 800761a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800761e:	2b15      	cmp	r3, #21
 8007620:	d8f6      	bhi.n	8007610 <_printf_i+0x28>
 8007622:	a001      	add	r0, pc, #4	; (adr r0, 8007628 <_printf_i+0x40>)
 8007624:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007628:	08007681 	.word	0x08007681
 800762c:	08007695 	.word	0x08007695
 8007630:	08007611 	.word	0x08007611
 8007634:	08007611 	.word	0x08007611
 8007638:	08007611 	.word	0x08007611
 800763c:	08007611 	.word	0x08007611
 8007640:	08007695 	.word	0x08007695
 8007644:	08007611 	.word	0x08007611
 8007648:	08007611 	.word	0x08007611
 800764c:	08007611 	.word	0x08007611
 8007650:	08007611 	.word	0x08007611
 8007654:	080077a1 	.word	0x080077a1
 8007658:	080076c5 	.word	0x080076c5
 800765c:	08007783 	.word	0x08007783
 8007660:	08007611 	.word	0x08007611
 8007664:	08007611 	.word	0x08007611
 8007668:	080077c3 	.word	0x080077c3
 800766c:	08007611 	.word	0x08007611
 8007670:	080076c5 	.word	0x080076c5
 8007674:	08007611 	.word	0x08007611
 8007678:	08007611 	.word	0x08007611
 800767c:	0800778b 	.word	0x0800778b
 8007680:	680b      	ldr	r3, [r1, #0]
 8007682:	1d1a      	adds	r2, r3, #4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	600a      	str	r2, [r1, #0]
 8007688:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800768c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007690:	2301      	movs	r3, #1
 8007692:	e0a3      	b.n	80077dc <_printf_i+0x1f4>
 8007694:	6825      	ldr	r5, [r4, #0]
 8007696:	6808      	ldr	r0, [r1, #0]
 8007698:	062e      	lsls	r6, r5, #24
 800769a:	f100 0304 	add.w	r3, r0, #4
 800769e:	d50a      	bpl.n	80076b6 <_printf_i+0xce>
 80076a0:	6805      	ldr	r5, [r0, #0]
 80076a2:	600b      	str	r3, [r1, #0]
 80076a4:	2d00      	cmp	r5, #0
 80076a6:	da03      	bge.n	80076b0 <_printf_i+0xc8>
 80076a8:	232d      	movs	r3, #45	; 0x2d
 80076aa:	426d      	negs	r5, r5
 80076ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b0:	485e      	ldr	r0, [pc, #376]	; (800782c <_printf_i+0x244>)
 80076b2:	230a      	movs	r3, #10
 80076b4:	e019      	b.n	80076ea <_printf_i+0x102>
 80076b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076ba:	6805      	ldr	r5, [r0, #0]
 80076bc:	600b      	str	r3, [r1, #0]
 80076be:	bf18      	it	ne
 80076c0:	b22d      	sxthne	r5, r5
 80076c2:	e7ef      	b.n	80076a4 <_printf_i+0xbc>
 80076c4:	680b      	ldr	r3, [r1, #0]
 80076c6:	6825      	ldr	r5, [r4, #0]
 80076c8:	1d18      	adds	r0, r3, #4
 80076ca:	6008      	str	r0, [r1, #0]
 80076cc:	0628      	lsls	r0, r5, #24
 80076ce:	d501      	bpl.n	80076d4 <_printf_i+0xec>
 80076d0:	681d      	ldr	r5, [r3, #0]
 80076d2:	e002      	b.n	80076da <_printf_i+0xf2>
 80076d4:	0669      	lsls	r1, r5, #25
 80076d6:	d5fb      	bpl.n	80076d0 <_printf_i+0xe8>
 80076d8:	881d      	ldrh	r5, [r3, #0]
 80076da:	4854      	ldr	r0, [pc, #336]	; (800782c <_printf_i+0x244>)
 80076dc:	2f6f      	cmp	r7, #111	; 0x6f
 80076de:	bf0c      	ite	eq
 80076e0:	2308      	moveq	r3, #8
 80076e2:	230a      	movne	r3, #10
 80076e4:	2100      	movs	r1, #0
 80076e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ea:	6866      	ldr	r6, [r4, #4]
 80076ec:	60a6      	str	r6, [r4, #8]
 80076ee:	2e00      	cmp	r6, #0
 80076f0:	bfa2      	ittt	ge
 80076f2:	6821      	ldrge	r1, [r4, #0]
 80076f4:	f021 0104 	bicge.w	r1, r1, #4
 80076f8:	6021      	strge	r1, [r4, #0]
 80076fa:	b90d      	cbnz	r5, 8007700 <_printf_i+0x118>
 80076fc:	2e00      	cmp	r6, #0
 80076fe:	d04d      	beq.n	800779c <_printf_i+0x1b4>
 8007700:	4616      	mov	r6, r2
 8007702:	fbb5 f1f3 	udiv	r1, r5, r3
 8007706:	fb03 5711 	mls	r7, r3, r1, r5
 800770a:	5dc7      	ldrb	r7, [r0, r7]
 800770c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007710:	462f      	mov	r7, r5
 8007712:	42bb      	cmp	r3, r7
 8007714:	460d      	mov	r5, r1
 8007716:	d9f4      	bls.n	8007702 <_printf_i+0x11a>
 8007718:	2b08      	cmp	r3, #8
 800771a:	d10b      	bne.n	8007734 <_printf_i+0x14c>
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	07df      	lsls	r7, r3, #31
 8007720:	d508      	bpl.n	8007734 <_printf_i+0x14c>
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	6861      	ldr	r1, [r4, #4]
 8007726:	4299      	cmp	r1, r3
 8007728:	bfde      	ittt	le
 800772a:	2330      	movle	r3, #48	; 0x30
 800772c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007730:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007734:	1b92      	subs	r2, r2, r6
 8007736:	6122      	str	r2, [r4, #16]
 8007738:	f8cd a000 	str.w	sl, [sp]
 800773c:	464b      	mov	r3, r9
 800773e:	aa03      	add	r2, sp, #12
 8007740:	4621      	mov	r1, r4
 8007742:	4640      	mov	r0, r8
 8007744:	f7ff fee2 	bl	800750c <_printf_common>
 8007748:	3001      	adds	r0, #1
 800774a:	d14c      	bne.n	80077e6 <_printf_i+0x1fe>
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	b004      	add	sp, #16
 8007752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007756:	4835      	ldr	r0, [pc, #212]	; (800782c <_printf_i+0x244>)
 8007758:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	680e      	ldr	r6, [r1, #0]
 8007760:	061f      	lsls	r7, r3, #24
 8007762:	f856 5b04 	ldr.w	r5, [r6], #4
 8007766:	600e      	str	r6, [r1, #0]
 8007768:	d514      	bpl.n	8007794 <_printf_i+0x1ac>
 800776a:	07d9      	lsls	r1, r3, #31
 800776c:	bf44      	itt	mi
 800776e:	f043 0320 	orrmi.w	r3, r3, #32
 8007772:	6023      	strmi	r3, [r4, #0]
 8007774:	b91d      	cbnz	r5, 800777e <_printf_i+0x196>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	f023 0320 	bic.w	r3, r3, #32
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	2310      	movs	r3, #16
 8007780:	e7b0      	b.n	80076e4 <_printf_i+0xfc>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	f043 0320 	orr.w	r3, r3, #32
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	2378      	movs	r3, #120	; 0x78
 800778c:	4828      	ldr	r0, [pc, #160]	; (8007830 <_printf_i+0x248>)
 800778e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007792:	e7e3      	b.n	800775c <_printf_i+0x174>
 8007794:	065e      	lsls	r6, r3, #25
 8007796:	bf48      	it	mi
 8007798:	b2ad      	uxthmi	r5, r5
 800779a:	e7e6      	b.n	800776a <_printf_i+0x182>
 800779c:	4616      	mov	r6, r2
 800779e:	e7bb      	b.n	8007718 <_printf_i+0x130>
 80077a0:	680b      	ldr	r3, [r1, #0]
 80077a2:	6826      	ldr	r6, [r4, #0]
 80077a4:	6960      	ldr	r0, [r4, #20]
 80077a6:	1d1d      	adds	r5, r3, #4
 80077a8:	600d      	str	r5, [r1, #0]
 80077aa:	0635      	lsls	r5, r6, #24
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	d501      	bpl.n	80077b4 <_printf_i+0x1cc>
 80077b0:	6018      	str	r0, [r3, #0]
 80077b2:	e002      	b.n	80077ba <_printf_i+0x1d2>
 80077b4:	0671      	lsls	r1, r6, #25
 80077b6:	d5fb      	bpl.n	80077b0 <_printf_i+0x1c8>
 80077b8:	8018      	strh	r0, [r3, #0]
 80077ba:	2300      	movs	r3, #0
 80077bc:	6123      	str	r3, [r4, #16]
 80077be:	4616      	mov	r6, r2
 80077c0:	e7ba      	b.n	8007738 <_printf_i+0x150>
 80077c2:	680b      	ldr	r3, [r1, #0]
 80077c4:	1d1a      	adds	r2, r3, #4
 80077c6:	600a      	str	r2, [r1, #0]
 80077c8:	681e      	ldr	r6, [r3, #0]
 80077ca:	6862      	ldr	r2, [r4, #4]
 80077cc:	2100      	movs	r1, #0
 80077ce:	4630      	mov	r0, r6
 80077d0:	f7f8 fd86 	bl	80002e0 <memchr>
 80077d4:	b108      	cbz	r0, 80077da <_printf_i+0x1f2>
 80077d6:	1b80      	subs	r0, r0, r6
 80077d8:	6060      	str	r0, [r4, #4]
 80077da:	6863      	ldr	r3, [r4, #4]
 80077dc:	6123      	str	r3, [r4, #16]
 80077de:	2300      	movs	r3, #0
 80077e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e4:	e7a8      	b.n	8007738 <_printf_i+0x150>
 80077e6:	6923      	ldr	r3, [r4, #16]
 80077e8:	4632      	mov	r2, r6
 80077ea:	4649      	mov	r1, r9
 80077ec:	4640      	mov	r0, r8
 80077ee:	47d0      	blx	sl
 80077f0:	3001      	adds	r0, #1
 80077f2:	d0ab      	beq.n	800774c <_printf_i+0x164>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	079b      	lsls	r3, r3, #30
 80077f8:	d413      	bmi.n	8007822 <_printf_i+0x23a>
 80077fa:	68e0      	ldr	r0, [r4, #12]
 80077fc:	9b03      	ldr	r3, [sp, #12]
 80077fe:	4298      	cmp	r0, r3
 8007800:	bfb8      	it	lt
 8007802:	4618      	movlt	r0, r3
 8007804:	e7a4      	b.n	8007750 <_printf_i+0x168>
 8007806:	2301      	movs	r3, #1
 8007808:	4632      	mov	r2, r6
 800780a:	4649      	mov	r1, r9
 800780c:	4640      	mov	r0, r8
 800780e:	47d0      	blx	sl
 8007810:	3001      	adds	r0, #1
 8007812:	d09b      	beq.n	800774c <_printf_i+0x164>
 8007814:	3501      	adds	r5, #1
 8007816:	68e3      	ldr	r3, [r4, #12]
 8007818:	9903      	ldr	r1, [sp, #12]
 800781a:	1a5b      	subs	r3, r3, r1
 800781c:	42ab      	cmp	r3, r5
 800781e:	dcf2      	bgt.n	8007806 <_printf_i+0x21e>
 8007820:	e7eb      	b.n	80077fa <_printf_i+0x212>
 8007822:	2500      	movs	r5, #0
 8007824:	f104 0619 	add.w	r6, r4, #25
 8007828:	e7f5      	b.n	8007816 <_printf_i+0x22e>
 800782a:	bf00      	nop
 800782c:	08007ac1 	.word	0x08007ac1
 8007830:	08007ad2 	.word	0x08007ad2

08007834 <__sread>:
 8007834:	b510      	push	{r4, lr}
 8007836:	460c      	mov	r4, r1
 8007838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783c:	f000 f894 	bl	8007968 <_read_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	bfab      	itete	ge
 8007844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007846:	89a3      	ldrhlt	r3, [r4, #12]
 8007848:	181b      	addge	r3, r3, r0
 800784a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800784e:	bfac      	ite	ge
 8007850:	6563      	strge	r3, [r4, #84]	; 0x54
 8007852:	81a3      	strhlt	r3, [r4, #12]
 8007854:	bd10      	pop	{r4, pc}

08007856 <__swrite>:
 8007856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785a:	461f      	mov	r7, r3
 800785c:	898b      	ldrh	r3, [r1, #12]
 800785e:	05db      	lsls	r3, r3, #23
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	4616      	mov	r6, r2
 8007866:	d505      	bpl.n	8007874 <__swrite+0x1e>
 8007868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800786c:	2302      	movs	r3, #2
 800786e:	2200      	movs	r2, #0
 8007870:	f000 f868 	bl	8007944 <_lseek_r>
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800787e:	81a3      	strh	r3, [r4, #12]
 8007880:	4632      	mov	r2, r6
 8007882:	463b      	mov	r3, r7
 8007884:	4628      	mov	r0, r5
 8007886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800788a:	f000 b817 	b.w	80078bc <_write_r>

0800788e <__sseek>:
 800788e:	b510      	push	{r4, lr}
 8007890:	460c      	mov	r4, r1
 8007892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007896:	f000 f855 	bl	8007944 <_lseek_r>
 800789a:	1c43      	adds	r3, r0, #1
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	bf15      	itete	ne
 80078a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80078a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078aa:	81a3      	strheq	r3, [r4, #12]
 80078ac:	bf18      	it	ne
 80078ae:	81a3      	strhne	r3, [r4, #12]
 80078b0:	bd10      	pop	{r4, pc}

080078b2 <__sclose>:
 80078b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b6:	f000 b813 	b.w	80078e0 <_close_r>
	...

080078bc <_write_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d07      	ldr	r5, [pc, #28]	; (80078dc <_write_r+0x20>)
 80078c0:	4604      	mov	r4, r0
 80078c2:	4608      	mov	r0, r1
 80078c4:	4611      	mov	r1, r2
 80078c6:	2200      	movs	r2, #0
 80078c8:	602a      	str	r2, [r5, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	f7f9 ff3b 	bl	8001746 <_write>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d102      	bne.n	80078da <_write_r+0x1e>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	b103      	cbz	r3, 80078da <_write_r+0x1e>
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	24000208 	.word	0x24000208

080078e0 <_close_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d06      	ldr	r5, [pc, #24]	; (80078fc <_close_r+0x1c>)
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7f9 ff47 	bl	800177e <_close>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_close_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_close_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	24000208 	.word	0x24000208

08007900 <_fstat_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4d07      	ldr	r5, [pc, #28]	; (8007920 <_fstat_r+0x20>)
 8007904:	2300      	movs	r3, #0
 8007906:	4604      	mov	r4, r0
 8007908:	4608      	mov	r0, r1
 800790a:	4611      	mov	r1, r2
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	f7f9 ff42 	bl	8001796 <_fstat>
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	d102      	bne.n	800791c <_fstat_r+0x1c>
 8007916:	682b      	ldr	r3, [r5, #0]
 8007918:	b103      	cbz	r3, 800791c <_fstat_r+0x1c>
 800791a:	6023      	str	r3, [r4, #0]
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	bf00      	nop
 8007920:	24000208 	.word	0x24000208

08007924 <_isatty_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d06      	ldr	r5, [pc, #24]	; (8007940 <_isatty_r+0x1c>)
 8007928:	2300      	movs	r3, #0
 800792a:	4604      	mov	r4, r0
 800792c:	4608      	mov	r0, r1
 800792e:	602b      	str	r3, [r5, #0]
 8007930:	f7f9 ff41 	bl	80017b6 <_isatty>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_isatty_r+0x1a>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_isatty_r+0x1a>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	24000208 	.word	0x24000208

08007944 <_lseek_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d07      	ldr	r5, [pc, #28]	; (8007964 <_lseek_r+0x20>)
 8007948:	4604      	mov	r4, r0
 800794a:	4608      	mov	r0, r1
 800794c:	4611      	mov	r1, r2
 800794e:	2200      	movs	r2, #0
 8007950:	602a      	str	r2, [r5, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	f7f9 ff3a 	bl	80017cc <_lseek>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_lseek_r+0x1e>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	b103      	cbz	r3, 8007962 <_lseek_r+0x1e>
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	24000208 	.word	0x24000208

08007968 <_read_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4d07      	ldr	r5, [pc, #28]	; (8007988 <_read_r+0x20>)
 800796c:	4604      	mov	r4, r0
 800796e:	4608      	mov	r0, r1
 8007970:	4611      	mov	r1, r2
 8007972:	2200      	movs	r2, #0
 8007974:	602a      	str	r2, [r5, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	f7f9 fec8 	bl	800170c <_read>
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	d102      	bne.n	8007986 <_read_r+0x1e>
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	b103      	cbz	r3, 8007986 <_read_r+0x1e>
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	bd38      	pop	{r3, r4, r5, pc}
 8007988:	24000208 	.word	0x24000208

0800798c <_init>:
 800798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798e:	bf00      	nop
 8007990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007992:	bc08      	pop	{r3}
 8007994:	469e      	mov	lr, r3
 8007996:	4770      	bx	lr

08007998 <_fini>:
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799a:	bf00      	nop
 800799c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799e:	bc08      	pop	{r3}
 80079a0:	469e      	mov	lr, r3
 80079a2:	4770      	bx	lr
