
GPIO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a40  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007dac  08007dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007db0  08007db0  00017db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08007db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000042bc  20000074  08007e28  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004330  08007e28  00024330  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021b15  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003db9  00000000  00000000  00041bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f0  00000000  00000000  00045970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f88  00000000  00000000  00046a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000414c8  00000000  00000000  000479e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016012  00000000  00000000  00088eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019b327  00000000  00000000  0009eec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0023a1e9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b80  00000000  00000000  0023a23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000074 	.word	0x20000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007cc0 	.word	0x08007cc0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000078 	.word	0x20000078
 80002d4:	08007cc0 	.word	0x08007cc0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <__io_putchar>:
static void MX_UART8_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_SDMMC1_SD_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar (int ch) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, 1000);
 8000712:	f107 010f 	add.w	r1, r7, #15
 8000716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071a:	2201      	movs	r2, #1
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <__io_putchar+0x28>)
 800071e:	f004 fb63 	bl	8004de8 <HAL_UART_Transmit>
	return ch;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200001bc 	.word	0x200001bc

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800073c:	bf00      	nop
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <main+0xb0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d004      	beq.n	8000754 <main+0x24>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	dcf4      	bgt.n	800073e <main+0xe>
	if ( timeout < 0 )
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	da01      	bge.n	800075e <main+0x2e>
	{
	Error_Handler();
 800075a:	f000 fa03 	bl	8000b64 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fc33 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f841 	bl	80007e8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <main+0xb0>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <main+0xb0>)
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <main+0xb0>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000784:	2000      	movs	r0, #0
 8000786:	f001 f9ff 	bl	8001b88 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800078a:	2100      	movs	r1, #0
 800078c:	2000      	movs	r0, #0
 800078e:	f001 fa15 	bl	8001bbc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000796:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000798:	bf00      	nop
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <main+0xb0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d104      	bne.n	80007b0 <main+0x80>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dcf4      	bgt.n	800079a <main+0x6a>
if ( timeout < 0 )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	da01      	bge.n	80007ba <main+0x8a>
{
Error_Handler();
 80007b6:	f000 f9d5 	bl	8000b64 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f951 	bl	8000a60 <MX_GPIO_Init>
  MX_UART8_Init();
 80007be:	f000 f8b7 	bl	8000930 <MX_UART8_Init>
  MX_USART1_UART_Init();
 80007c2:	f000 f901 	bl	80009c8 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80007c6:	f000 f88d 	bl	80008e4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80007ca:	f006 fb33 	bl	8006e34 <MX_FATFS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		printf("=====Tran Minh Tan=====\r\n");
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <main+0xb4>)
 80007d0:	f006 fe1e 	bl	8007410 <puts>
		HAL_Delay(1000);
 80007d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d8:	f000 fc88 	bl	80010ec <HAL_Delay>
		printf("=====Tran Minh Tan=====\r\n");
 80007dc:	e7f7      	b.n	80007ce <main+0x9e>
 80007de:	bf00      	nop
 80007e0:	58024400 	.word	0x58024400
 80007e4:	08007cd8 	.word	0x08007cd8

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09e      	sub	sp, #120	; 0x78
 80007ec:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f4:	2004      	movs	r0, #4
 80007f6:	f001 f9f5 	bl	8001be4 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b37      	ldr	r3, [pc, #220]	; (80008dc <SystemClock_Config+0xf4>)
 8000800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000802:	4a36      	ldr	r2, [pc, #216]	; (80008dc <SystemClock_Config+0xf4>)
 8000804:	f023 0301 	bic.w	r3, r3, #1
 8000808:	62d3      	str	r3, [r2, #44]	; 0x2c
 800080a:	4b34      	ldr	r3, [pc, #208]	; (80008dc <SystemClock_Config+0xf4>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <SystemClock_Config+0xf8>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a31      	ldr	r2, [pc, #196]	; (80008e0 <SystemClock_Config+0xf8>)
 800081a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <SystemClock_Config+0xf8>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800082c:	bf00      	nop
 800082e:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <SystemClock_Config+0xf8>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800083a:	d1f8      	bne.n	800082e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083c:	2301      	movs	r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	2302      	movs	r3, #2
 8000854:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000856:	2305      	movs	r3, #5
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800086a:	2304      	movs	r3, #4
 800086c:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800086e:	2300      	movs	r3, #0
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000872:	2308      	movs	r3, #8
 8000874:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fa0c 	bl	8001c98 <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000886:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800088e:	f000 f969 	bl	8000b64 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000892:	233f      	movs	r3, #63	; 0x3f
 8000894:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2303      	movs	r3, #3
 8000898:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800089e:	2308      	movs	r3, #8
 80008a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a2:	2340      	movs	r3, #64	; 0x40
 80008a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b0:	2340      	movs	r3, #64	; 0x40
 80008b2:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80008b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008b8:	2104      	movs	r1, #4
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 fdfc 	bl	80024b8 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80008c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008ce:	f000 f949 	bl	8000b64 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 80008d2:	bf00      	nop
 80008d4:	3778      	adds	r7, #120	; 0x78
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	58000400 	.word	0x58000400
 80008e0:	58024800 	.word	0x58024800

080008e4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SDMMC1_SD_Init+0x44>)
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <MX_SDMMC1_SD_Init+0x48>)
 80008ec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SDMMC1_SD_Init+0x44>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SDMMC1_SD_Init+0x44>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_SDMMC1_SD_Init+0x44>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SDMMC1_SD_Init+0x44>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_SDMMC1_SD_Init+0x44>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SDMMC1_SD_Init+0x44>)
 800090e:	2201      	movs	r2, #1
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_SDMMC1_SD_Init+0x44>)
 8000914:	f003 f824 	bl	8003960 <HAL_SD_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800091e:	f000 f921 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000b0 	.word	0x200000b0
 800092c:	52007000 	.word	0x52007000

08000930 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_UART8_Init+0x90>)
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <MX_UART8_Init+0x94>)
 8000938:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_UART8_Init+0x90>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_UART8_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_UART8_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_UART8_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_UART8_Init+0x90>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_UART8_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_UART8_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_UART8_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_UART8_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_UART8_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_UART8_Init+0x90>)
 800097a:	f004 f9e5 	bl	8004d48 <HAL_UART_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f8ee 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_UART8_Init+0x90>)
 800098c:	f005 fbcf 	bl	800612e <HAL_UARTEx_SetTxFifoThreshold>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000996:	f000 f8e5 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4808      	ldr	r0, [pc, #32]	; (80009c0 <MX_UART8_Init+0x90>)
 800099e:	f005 fc04 	bl	80061aa <HAL_UARTEx_SetRxFifoThreshold>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f8dc 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_UART8_Init+0x90>)
 80009ae:	f005 fb85 	bl	80060bc <HAL_UARTEx_DisableFifoMode>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f000 f8d4 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001bc 	.word	0x200001bc
 80009c4:	40007c00 	.word	0x40007c00

080009c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009ce:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <MX_USART1_UART_Init+0x94>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a10:	4811      	ldr	r0, [pc, #68]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a12:	f004 f999 	bl	8004d48 <HAL_UART_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a1c:	f000 f8a2 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a24:	f005 fb83 	bl	800612e <HAL_UARTEx_SetTxFifoThreshold>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2e:	f000 f899 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a36:	f005 fbb8 	bl	80061aa <HAL_UARTEx_SetRxFifoThreshold>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a40:	f000 f890 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a46:	f005 fb39 	bl	80060bc <HAL_UARTEx_DisableFifoMode>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f888 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000130 	.word	0x20000130
 8000a5c:	40011000 	.word	0x40011000

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	; 0x30
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a37      	ldr	r2, [pc, #220]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a94:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a30      	ldr	r2, [pc, #192]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	4a28      	ldr	r2, [pc, #160]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_GPIO_Init+0xfc>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <MX_GPIO_Init+0x100>)
 8000b32:	f001 f80f 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b36:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_GPIO_Init+0x100>)
 8000b50:	f000 fe50 	bl	80017f4 <HAL_GPIO_Init>

}
 8000b54:	bf00      	nop
 8000b56:	3730      	adds	r7, #48	; 0x30
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58022000 	.word	0x58022000

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_MspInit+0x30>)
 8000b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b80:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x30>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x30>)
 8000b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a2a      	ldr	r2, [pc, #168]	; (8000c70 <HAL_SD_MspInit+0xc8>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d14d      	bne.n	8000c66 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <HAL_SD_MspInit+0xcc>)
 8000bcc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bd0:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <HAL_SD_MspInit+0xcc>)
 8000bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <HAL_SD_MspInit+0xcc>)
 8000bdc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <HAL_SD_MspInit+0xcc>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <HAL_SD_MspInit+0xcc>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <HAL_SD_MspInit+0xcc>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_SD_MspInit+0xcc>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_SD_MspInit+0xcc>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_SD_MspInit+0xcc>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000c24:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000c36:	230c      	movs	r3, #12
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <HAL_SD_MspInit+0xd0>)
 8000c42:	f000 fdd7 	bl	80017f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c46:	2304      	movs	r3, #4
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000c56:	230c      	movs	r3, #12
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <HAL_SD_MspInit+0xd4>)
 8000c62:	f000 fdc7 	bl	80017f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	52007000 	.word	0x52007000
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020800 	.word	0x58020800
 8000c7c:	58020c00 	.word	0x58020c00

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	; 0x30
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a3d      	ldr	r2, [pc, #244]	; (8000d94 <HAL_UART_MspInit+0x114>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d137      	bne.n	8000d12 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca8:	4a3b      	ldr	r2, [pc, #236]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cb2:	4b39      	ldr	r3, [pc, #228]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cc0:	4b35      	ldr	r3, [pc, #212]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	4a34      	ldr	r2, [pc, #208]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd0:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000cde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4828      	ldr	r0, [pc, #160]	; (8000d9c <HAL_UART_MspInit+0x11c>)
 8000cfc:	f000 fd7a 	bl	80017f4 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2053      	movs	r0, #83	; 0x53
 8000d06:	f000 fafc 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000d0a:	2053      	movs	r0, #83	; 0x53
 8000d0c:	f000 fb13 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d10:	e03b      	b.n	8000d8a <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <HAL_UART_MspInit+0x120>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d136      	bne.n	8000d8a <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d22:	4a1d      	ldr	r2, [pc, #116]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <HAL_UART_MspInit+0x118>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000d58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	480b      	ldr	r0, [pc, #44]	; (8000da4 <HAL_UART_MspInit+0x124>)
 8000d76:	f000 fd3d 	bl	80017f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2025      	movs	r0, #37	; 0x25
 8000d80:	f000 fabf 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d84:	2025      	movs	r0, #37	; 0x25
 8000d86:	f000 fad6 	bl	8001336 <HAL_NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3730      	adds	r7, #48	; 0x30
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40007c00 	.word	0x40007c00
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	58022400 	.word	0x58022400
 8000da0:	40011000 	.word	0x40011000
 8000da4:	58020000 	.word	0x58020000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f956 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <USART1_IRQHandler+0x10>)
 8000e0a:	f004 f883 	bl	8004f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000130 	.word	0x20000130

08000e18 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <UART8_IRQHandler+0x10>)
 8000e1e:	f004 f879 	bl	8004f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200001bc 	.word	0x200001bc

08000e2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	e00a      	b.n	8000e54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e3e:	f3af 8000 	nop.w
 8000e42:	4601      	mov	r1, r0
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60ba      	str	r2, [r7, #8]
 8000e4a:	b2ca      	uxtb	r2, r1
 8000e4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbf0      	blt.n	8000e3e <_read+0x12>
	}

return len;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e009      	b.n	8000e8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	60ba      	str	r2, [r7, #8]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc3f 	bl	8000704 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dbf1      	blt.n	8000e78 <_write+0x12>
	}
	return len;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_close>:

int _close(int file)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_isatty>:

int _isatty(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f006 f9ca 	bl	80072d0 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20020000 	.word	0x20020000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	20000090 	.word	0x20000090
 8000f70:	20004330 	.word	0x20004330

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f78:	f7ff fb2a 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f7e:	e003      	b.n	8000f88 <LoopCopyDataInit>

08000f80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000f82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f86:	3104      	adds	r1, #4

08000f88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000f8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f90:	d3f6      	bcc.n	8000f80 <CopyDataInit>
  ldr  r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000f94:	e002      	b.n	8000f9c <LoopFillZerobss>

08000f96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f98:	f842 3b04 	str.w	r3, [r2], #4

08000f9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000f9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fa0:	d3f9      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f006 f99b 	bl	80072dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff fbc3 	bl	8000730 <main>
  bx  lr    
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fb0:	08007db4 	.word	0x08007db4
  ldr  r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fb8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000fbc:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000fc0:	20004330 	.word	0x20004330

08000fc4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC3_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f000 f98c 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fd4:	f001 fc26 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_Init+0x68>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	4913      	ldr	r1, [pc, #76]	; (8001034 <HAL_Init+0x6c>)
 8000fe6:	5ccb      	ldrb	r3, [r1, r3]
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_Init+0x68>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_Init+0x6c>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	f003 031f 	and.w	r3, r3, #31
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
 8001008:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <HAL_Init+0x70>)
 800100a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <HAL_Init+0x74>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f814 	bl	8001040 <HAL_InitTick>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e002      	b.n	8001028 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001022:	f7ff fda7 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58024400 	.word	0x58024400
 8001034:	08007d04 	.word	0x08007d04
 8001038:	20000004 	.word	0x20000004
 800103c:	20000000 	.word	0x20000000

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_InitTick+0x60>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e021      	b.n	8001098 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_InitTick+0x64>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_InitTick+0x60>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f971 	bl	8001352 <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f93b 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x68>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000000c 	.word	0x2000000c
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000008 	.word	0x20000008

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2000000c 	.word	0x2000000c
 80010d0:	200022b0 	.word	0x200022b0

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200022b0 	.word	0x200022b0

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000000c 	.word	0x2000000c

08001134 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetREVID+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0c1b      	lsrs	r3, r3, #16
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	5c001000 	.word	0x5c001000

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	4313      	orrs	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	05fa0000 	.word	0x05fa0000

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff40 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff90 	bl	8001240 <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5f 	bl	80011ec <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff33 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa4 	bl	80012a8 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e205      	b.n	800178a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d004      	beq.n	8001394 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e1fa      	b.n	800178a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a8c      	ldr	r2, [pc, #560]	; (80015cc <HAL_DMA_Abort_IT+0x260>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d04a      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a8b      	ldr	r2, [pc, #556]	; (80015d0 <HAL_DMA_Abort_IT+0x264>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d045      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a89      	ldr	r2, [pc, #548]	; (80015d4 <HAL_DMA_Abort_IT+0x268>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d040      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a88      	ldr	r2, [pc, #544]	; (80015d8 <HAL_DMA_Abort_IT+0x26c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d03b      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a86      	ldr	r2, [pc, #536]	; (80015dc <HAL_DMA_Abort_IT+0x270>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d036      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a85      	ldr	r2, [pc, #532]	; (80015e0 <HAL_DMA_Abort_IT+0x274>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d031      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a83      	ldr	r2, [pc, #524]	; (80015e4 <HAL_DMA_Abort_IT+0x278>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d02c      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a82      	ldr	r2, [pc, #520]	; (80015e8 <HAL_DMA_Abort_IT+0x27c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d027      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a80      	ldr	r2, [pc, #512]	; (80015ec <HAL_DMA_Abort_IT+0x280>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d022      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a7f      	ldr	r2, [pc, #508]	; (80015f0 <HAL_DMA_Abort_IT+0x284>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d01d      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a7d      	ldr	r2, [pc, #500]	; (80015f4 <HAL_DMA_Abort_IT+0x288>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d018      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a7c      	ldr	r2, [pc, #496]	; (80015f8 <HAL_DMA_Abort_IT+0x28c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d013      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a7a      	ldr	r2, [pc, #488]	; (80015fc <HAL_DMA_Abort_IT+0x290>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00e      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a79      	ldr	r2, [pc, #484]	; (8001600 <HAL_DMA_Abort_IT+0x294>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d009      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a77      	ldr	r2, [pc, #476]	; (8001604 <HAL_DMA_Abort_IT+0x298>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d004      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a76      	ldr	r2, [pc, #472]	; (8001608 <HAL_DMA_Abort_IT+0x29c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d101      	bne.n	8001438 <HAL_DMA_Abort_IT+0xcc>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_DMA_Abort_IT+0xce>
 8001438:	2300      	movs	r3, #0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d065      	beq.n	800150a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2204      	movs	r2, #4
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a60      	ldr	r2, [pc, #384]	; (80015cc <HAL_DMA_Abort_IT+0x260>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d04a      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a5e      	ldr	r2, [pc, #376]	; (80015d0 <HAL_DMA_Abort_IT+0x264>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d045      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a5d      	ldr	r2, [pc, #372]	; (80015d4 <HAL_DMA_Abort_IT+0x268>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d040      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a5b      	ldr	r2, [pc, #364]	; (80015d8 <HAL_DMA_Abort_IT+0x26c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d03b      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a5a      	ldr	r2, [pc, #360]	; (80015dc <HAL_DMA_Abort_IT+0x270>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d036      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_DMA_Abort_IT+0x274>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d031      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <HAL_DMA_Abort_IT+0x278>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d02c      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a55      	ldr	r2, [pc, #340]	; (80015e8 <HAL_DMA_Abort_IT+0x27c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d027      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a54      	ldr	r2, [pc, #336]	; (80015ec <HAL_DMA_Abort_IT+0x280>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d022      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_DMA_Abort_IT+0x284>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01d      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a51      	ldr	r2, [pc, #324]	; (80015f4 <HAL_DMA_Abort_IT+0x288>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d018      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <HAL_DMA_Abort_IT+0x28c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a4e      	ldr	r2, [pc, #312]	; (80015fc <HAL_DMA_Abort_IT+0x290>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d00e      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a4c      	ldr	r2, [pc, #304]	; (8001600 <HAL_DMA_Abort_IT+0x294>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d009      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a4b      	ldr	r2, [pc, #300]	; (8001604 <HAL_DMA_Abort_IT+0x298>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d004      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a49      	ldr	r2, [pc, #292]	; (8001608 <HAL_DMA_Abort_IT+0x29c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d108      	bne.n	80014f8 <HAL_DMA_Abort_IT+0x18c>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e147      	b.n	8001788 <HAL_DMA_Abort_IT+0x41c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e13e      	b.n	8001788 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 020e 	bic.w	r2, r2, #14
 8001518:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <HAL_DMA_Abort_IT+0x260>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d04a      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <HAL_DMA_Abort_IT+0x264>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d045      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a28      	ldr	r2, [pc, #160]	; (80015d4 <HAL_DMA_Abort_IT+0x268>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d040      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <HAL_DMA_Abort_IT+0x26c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d03b      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a25      	ldr	r2, [pc, #148]	; (80015dc <HAL_DMA_Abort_IT+0x270>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d036      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <HAL_DMA_Abort_IT+0x274>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d031      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a22      	ldr	r2, [pc, #136]	; (80015e4 <HAL_DMA_Abort_IT+0x278>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d02c      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a20      	ldr	r2, [pc, #128]	; (80015e8 <HAL_DMA_Abort_IT+0x27c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d027      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <HAL_DMA_Abort_IT+0x280>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d022      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_DMA_Abort_IT+0x284>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01d      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <HAL_DMA_Abort_IT+0x288>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d018      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <HAL_DMA_Abort_IT+0x28c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_DMA_Abort_IT+0x290>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00e      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_DMA_Abort_IT+0x294>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d009      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a16      	ldr	r2, [pc, #88]	; (8001604 <HAL_DMA_Abort_IT+0x298>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d004      	beq.n	80015ba <HAL_DMA_Abort_IT+0x24e>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_DMA_Abort_IT+0x29c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d128      	bne.n	800160c <HAL_DMA_Abort_IT+0x2a0>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e027      	b.n	800161c <HAL_DMA_Abort_IT+0x2b0>
 80015cc:	40020010 	.word	0x40020010
 80015d0:	40020028 	.word	0x40020028
 80015d4:	40020040 	.word	0x40020040
 80015d8:	40020058 	.word	0x40020058
 80015dc:	40020070 	.word	0x40020070
 80015e0:	40020088 	.word	0x40020088
 80015e4:	400200a0 	.word	0x400200a0
 80015e8:	400200b8 	.word	0x400200b8
 80015ec:	40020410 	.word	0x40020410
 80015f0:	40020428 	.word	0x40020428
 80015f4:	40020440 	.word	0x40020440
 80015f8:	40020458 	.word	0x40020458
 80015fc:	40020470 	.word	0x40020470
 8001600:	40020488 	.word	0x40020488
 8001604:	400204a0 	.word	0x400204a0
 8001608:	400204b8 	.word	0x400204b8
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a5c      	ldr	r2, [pc, #368]	; (8001794 <HAL_DMA_Abort_IT+0x428>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d072      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5b      	ldr	r2, [pc, #364]	; (8001798 <HAL_DMA_Abort_IT+0x42c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d06d      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a59      	ldr	r2, [pc, #356]	; (800179c <HAL_DMA_Abort_IT+0x430>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d068      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <HAL_DMA_Abort_IT+0x434>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d063      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a56      	ldr	r2, [pc, #344]	; (80017a4 <HAL_DMA_Abort_IT+0x438>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d05e      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a55      	ldr	r2, [pc, #340]	; (80017a8 <HAL_DMA_Abort_IT+0x43c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d059      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a53      	ldr	r2, [pc, #332]	; (80017ac <HAL_DMA_Abort_IT+0x440>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d054      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a52      	ldr	r2, [pc, #328]	; (80017b0 <HAL_DMA_Abort_IT+0x444>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d04f      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a50      	ldr	r2, [pc, #320]	; (80017b4 <HAL_DMA_Abort_IT+0x448>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d04a      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4f      	ldr	r2, [pc, #316]	; (80017b8 <HAL_DMA_Abort_IT+0x44c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d045      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4d      	ldr	r2, [pc, #308]	; (80017bc <HAL_DMA_Abort_IT+0x450>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d040      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4c      	ldr	r2, [pc, #304]	; (80017c0 <HAL_DMA_Abort_IT+0x454>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d03b      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <HAL_DMA_Abort_IT+0x458>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d036      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a49      	ldr	r2, [pc, #292]	; (80017c8 <HAL_DMA_Abort_IT+0x45c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d031      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a47      	ldr	r2, [pc, #284]	; (80017cc <HAL_DMA_Abort_IT+0x460>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d02c      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a46      	ldr	r2, [pc, #280]	; (80017d0 <HAL_DMA_Abort_IT+0x464>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d027      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a44      	ldr	r2, [pc, #272]	; (80017d4 <HAL_DMA_Abort_IT+0x468>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d022      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a43      	ldr	r2, [pc, #268]	; (80017d8 <HAL_DMA_Abort_IT+0x46c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d01d      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a41      	ldr	r2, [pc, #260]	; (80017dc <HAL_DMA_Abort_IT+0x470>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d018      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a40      	ldr	r2, [pc, #256]	; (80017e0 <HAL_DMA_Abort_IT+0x474>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d013      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a3e      	ldr	r2, [pc, #248]	; (80017e4 <HAL_DMA_Abort_IT+0x478>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00e      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a3d      	ldr	r2, [pc, #244]	; (80017e8 <HAL_DMA_Abort_IT+0x47c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d009      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a3b      	ldr	r2, [pc, #236]	; (80017ec <HAL_DMA_Abort_IT+0x480>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d004      	beq.n	800170c <HAL_DMA_Abort_IT+0x3a0>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a3a      	ldr	r2, [pc, #232]	; (80017f0 <HAL_DMA_Abort_IT+0x484>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_DMA_Abort_IT+0x3a4>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_DMA_Abort_IT+0x3a6>
 8001710:	2300      	movs	r3, #0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d028      	beq.n	8001768 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001724:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	2201      	movs	r2, #1
 8001736:	409a      	lsls	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001744:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00c      	beq.n	8001768 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800175c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001766:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40020010 	.word	0x40020010
 8001798:	40020028 	.word	0x40020028
 800179c:	40020040 	.word	0x40020040
 80017a0:	40020058 	.word	0x40020058
 80017a4:	40020070 	.word	0x40020070
 80017a8:	40020088 	.word	0x40020088
 80017ac:	400200a0 	.word	0x400200a0
 80017b0:	400200b8 	.word	0x400200b8
 80017b4:	40020410 	.word	0x40020410
 80017b8:	40020428 	.word	0x40020428
 80017bc:	40020440 	.word	0x40020440
 80017c0:	40020458 	.word	0x40020458
 80017c4:	40020470 	.word	0x40020470
 80017c8:	40020488 	.word	0x40020488
 80017cc:	400204a0 	.word	0x400204a0
 80017d0:	400204b8 	.word	0x400204b8
 80017d4:	58025408 	.word	0x58025408
 80017d8:	5802541c 	.word	0x5802541c
 80017dc:	58025430 	.word	0x58025430
 80017e0:	58025444 	.word	0x58025444
 80017e4:	58025458 	.word	0x58025458
 80017e8:	5802546c 	.word	0x5802546c
 80017ec:	58025480 	.word	0x58025480
 80017f0:	58025494 	.word	0x58025494

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001802:	4b89      	ldr	r3, [pc, #548]	; (8001a28 <HAL_GPIO_Init+0x234>)
 8001804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001806:	e194      	b.n	8001b32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8186 	beq.w	8001b2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d00b      	beq.n	8001840 <HAL_GPIO_Init+0x4c>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d007      	beq.n	8001840 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001834:	2b11      	cmp	r3, #17
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b12      	cmp	r3, #18
 800183e:	d130      	bne.n	80018a2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001876:	2201      	movs	r2, #1
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	f003 0201 	and.w	r2, r3, #1
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0xee>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b12      	cmp	r3, #18
 80018e0:	d123      	bne.n	800192a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	69b9      	ldr	r1, [r7, #24]
 8001926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0203 	and.w	r2, r3, #3
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 80e0 	beq.w	8001b2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <HAL_GPIO_Init+0x238>)
 800196e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001972:	4a2e      	ldr	r2, [pc, #184]	; (8001a2c <HAL_GPIO_Init+0x238>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800197c:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_GPIO_Init+0x238>)
 800197e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800198a:	4a29      	ldr	r2, [pc, #164]	; (8001a30 <HAL_GPIO_Init+0x23c>)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <HAL_GPIO_Init+0x240>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d052      	beq.n	8001a5c <HAL_GPIO_Init+0x268>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_GPIO_Init+0x244>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d031      	beq.n	8001a22 <HAL_GPIO_Init+0x22e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_GPIO_Init+0x248>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d02b      	beq.n	8001a1e <HAL_GPIO_Init+0x22a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <HAL_GPIO_Init+0x24c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d025      	beq.n	8001a1a <HAL_GPIO_Init+0x226>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_GPIO_Init+0x250>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d01f      	beq.n	8001a16 <HAL_GPIO_Init+0x222>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_GPIO_Init+0x254>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0x21e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a1a      	ldr	r2, [pc, #104]	; (8001a4c <HAL_GPIO_Init+0x258>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0x21a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_GPIO_Init+0x25c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00d      	beq.n	8001a0a <HAL_GPIO_Init+0x216>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <HAL_GPIO_Init+0x260>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x212>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_GPIO_Init+0x264>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_GPIO_Init+0x20e>
 80019fe:	2309      	movs	r3, #9
 8001a00:	e02d      	b.n	8001a5e <HAL_GPIO_Init+0x26a>
 8001a02:	230a      	movs	r3, #10
 8001a04:	e02b      	b.n	8001a5e <HAL_GPIO_Init+0x26a>
 8001a06:	2308      	movs	r3, #8
 8001a08:	e029      	b.n	8001a5e <HAL_GPIO_Init+0x26a>
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	e027      	b.n	8001a5e <HAL_GPIO_Init+0x26a>
 8001a0e:	2306      	movs	r3, #6
 8001a10:	e025      	b.n	8001a5e <HAL_GPIO_Init+0x26a>
 8001a12:	2305      	movs	r3, #5
 8001a14:	e023      	b.n	8001a5e <HAL_GPIO_Init+0x26a>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e021      	b.n	8001a5e <HAL_GPIO_Init+0x26a>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e01f      	b.n	8001a5e <HAL_GPIO_Init+0x26a>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e01d      	b.n	8001a5e <HAL_GPIO_Init+0x26a>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e01b      	b.n	8001a5e <HAL_GPIO_Init+0x26a>
 8001a26:	bf00      	nop
 8001a28:	58000080 	.word	0x58000080
 8001a2c:	58024400 	.word	0x58024400
 8001a30:	58000400 	.word	0x58000400
 8001a34:	58020000 	.word	0x58020000
 8001a38:	58020400 	.word	0x58020400
 8001a3c:	58020800 	.word	0x58020800
 8001a40:	58020c00 	.word	0x58020c00
 8001a44:	58021000 	.word	0x58021000
 8001a48:	58021400 	.word	0x58021400
 8001a4c:	58021800 	.word	0x58021800
 8001a50:	58021c00 	.word	0x58021c00
 8001a54:	58022000 	.word	0x58022000
 8001a58:	58022400 	.word	0x58022400
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	f002 0203 	and.w	r2, r2, #3
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	4093      	lsls	r3, r2
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a6e:	4938      	ldr	r1, [pc, #224]	; (8001b50 <HAL_GPIO_Init+0x35c>)
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f47f ae63 	bne.w	8001808 <HAL_GPIO_Init+0x14>
  }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	3724      	adds	r7, #36	; 0x24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	58000400 	.word	0x58000400

08001b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b64:	787b      	ldrb	r3, [r7, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b70:	e003      	b.n	8001b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	041a      	lsls	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	619a      	str	r2, [r3, #24]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001b90:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <HAL_HSEM_FastTake+0x2c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3320      	adds	r3, #32
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_HSEM_FastTake+0x30>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	58026400 	.word	0x58026400
 8001bb8:	80000300 	.word	0x80000300

08001bbc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001bc6:	4906      	ldr	r1, [pc, #24]	; (8001be0 <HAL_HSEM_Release+0x24>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	58026400 	.word	0x58026400

08001be4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001bec:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	2b06      	cmp	r3, #6
 8001bf6:	d00a      	beq.n	8001c0e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001bf8:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e040      	b.n	8001c8c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e03e      	b.n	8001c8c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001c16:	491f      	ldr	r1, [pc, #124]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c1e:	f7ff fa59 	bl	80010d4 <HAL_GetTick>
 8001c22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c24:	e009      	b.n	8001c3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c26:	f7ff fa55 	bl	80010d4 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c34:	d901      	bls.n	8001c3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e028      	b.n	8001c8c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c46:	d1ee      	bne.n	8001c26 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b1e      	cmp	r3, #30
 8001c4c:	d008      	beq.n	8001c60 <HAL_PWREx_ConfigSupply+0x7c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b2e      	cmp	r3, #46	; 0x2e
 8001c52:	d005      	beq.n	8001c60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b1d      	cmp	r3, #29
 8001c58:	d002      	beq.n	8001c60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b2d      	cmp	r3, #45	; 0x2d
 8001c5e:	d114      	bne.n	8001c8a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001c60:	f7ff fa38 	bl	80010d4 <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c66:	e009      	b.n	8001c7c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c68:	f7ff fa34 	bl	80010d4 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c76:	d901      	bls.n	8001c7c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e007      	b.n	8001c8c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d1ee      	bne.n	8001c68 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	58024800 	.word	0x58024800

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	; 0x30
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e3ff      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8087 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb8:	4b99      	ldr	r3, [pc, #612]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cc2:	4b97      	ldr	r3, [pc, #604]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d007      	beq.n	8001cde <HAL_RCC_OscConfig+0x46>
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	2b18      	cmp	r3, #24
 8001cd2:	d110      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5e>
 8001cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	4b90      	ldr	r3, [pc, #576]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d06c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x12c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d168      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e3d9      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x76>
 8001d00:	4b87      	ldr	r3, [pc, #540]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a86      	ldr	r2, [pc, #536]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e02e      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x98>
 8001d16:	4b82      	ldr	r3, [pc, #520]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a81      	ldr	r2, [pc, #516]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b7f      	ldr	r3, [pc, #508]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7e      	ldr	r2, [pc, #504]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e01d      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0xbc>
 8001d3a:	4b79      	ldr	r3, [pc, #484]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a78      	ldr	r2, [pc, #480]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b76      	ldr	r3, [pc, #472]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a75      	ldr	r2, [pc, #468]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d54:	4b72      	ldr	r3, [pc, #456]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a71      	ldr	r2, [pc, #452]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a6e      	ldr	r2, [pc, #440]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7ff f9ae 	bl	80010d4 <HAL_GetTick>
 8001d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff f9aa 	bl	80010d4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e38d      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d8e:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe4>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f99a 	bl	80010d4 <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff f996 	bl	80010d4 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e379      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001db6:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x10c>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80ae 	beq.w	8001f30 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd4:	4b52      	ldr	r3, [pc, #328]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ddc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dde:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <HAL_RCC_OscConfig+0x162>
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	2b18      	cmp	r3, #24
 8001dee:	d13a      	bne.n	8001e66 <HAL_RCC_OscConfig+0x1ce>
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d135      	bne.n	8001e66 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfa:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x17a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e34b      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e12:	f7ff f98f 	bl	8001134 <HAL_GetREVID>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d817      	bhi.n	8001e50 <HAL_RCC_OscConfig+0x1b8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b40      	cmp	r3, #64	; 0x40
 8001e26:	d108      	bne.n	8001e3a <HAL_RCC_OscConfig+0x1a2>
 8001e28:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e30:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e36:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e38:	e07a      	b.n	8001f30 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	031b      	lsls	r3, r3, #12
 8001e48:	4935      	ldr	r1, [pc, #212]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e4e:	e06f      	b.n	8001f30 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4930      	ldr	r1, [pc, #192]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e64:	e064      	b.n	8001f30 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d045      	beq.n	8001efa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0219 	bic.w	r2, r3, #25
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4929      	ldr	r1, [pc, #164]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff f928 	bl	80010d4 <HAL_GetTick>
 8001e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e88:	f7ff f924 	bl	80010d4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e307      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e9a:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	f7ff f945 	bl	8001134 <HAL_GetREVID>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f241 0203 	movw	r2, #4099	; 0x1003
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d817      	bhi.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2b40      	cmp	r3, #64	; 0x40
 8001eba:	d108      	bne.n	8001ece <HAL_RCC_OscConfig+0x236>
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ec4:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eca:	6053      	str	r3, [r2, #4]
 8001ecc:	e030      	b.n	8001f30 <HAL_RCC_OscConfig+0x298>
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	031b      	lsls	r3, r3, #12
 8001edc:	4910      	ldr	r1, [pc, #64]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
 8001ee2:	e025      	b.n	8001f30 <HAL_RCC_OscConfig+0x298>
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	490b      	ldr	r1, [pc, #44]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
 8001ef8:	e01a      	b.n	8001f30 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_RCC_OscConfig+0x288>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7ff f8e5 	bl	80010d4 <HAL_GetTick>
 8001f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7ff f8e1 	bl	80010d4 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d903      	bls.n	8001f24 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e2c4      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
 8001f20:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f24:	4ba4      	ldr	r3, [pc, #656]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ee      	bne.n	8001f0e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80a9 	beq.w	8002090 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3e:	4b9e      	ldr	r3, [pc, #632]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f48:	4b9b      	ldr	r3, [pc, #620]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d007      	beq.n	8001f64 <HAL_RCC_OscConfig+0x2cc>
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b18      	cmp	r3, #24
 8001f58:	d13a      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x338>
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d135      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f64:	4b94      	ldr	r3, [pc, #592]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_OscConfig+0x2e4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b80      	cmp	r3, #128	; 0x80
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e296      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f7c:	f7ff f8da 	bl	8001134 <HAL_GetREVID>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d817      	bhi.n	8001fba <HAL_RCC_OscConfig+0x322>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	d108      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x30c>
 8001f92:	4b89      	ldr	r3, [pc, #548]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f9a:	4a87      	ldr	r2, [pc, #540]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fa0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fa2:	e075      	b.n	8002090 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fa4:	4b84      	ldr	r3, [pc, #528]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	069b      	lsls	r3, r3, #26
 8001fb2:	4981      	ldr	r1, [pc, #516]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fb8:	e06a      	b.n	8002090 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fba:	4b7f      	ldr	r3, [pc, #508]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	061b      	lsls	r3, r3, #24
 8001fc8:	497b      	ldr	r1, [pc, #492]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fce:	e05f      	b.n	8002090 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d042      	beq.n	800205e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001fd8:	4b77      	ldr	r3, [pc, #476]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a76      	ldr	r2, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8001fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff f876 	bl	80010d4 <HAL_GetTick>
 8001fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001fec:	f7ff f872 	bl	80010d4 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e255      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ffe:	4b6e      	ldr	r3, [pc, #440]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800200a:	f7ff f893 	bl	8001134 <HAL_GetREVID>
 800200e:	4603      	mov	r3, r0
 8002010:	f241 0203 	movw	r2, #4099	; 0x1003
 8002014:	4293      	cmp	r3, r2
 8002016:	d817      	bhi.n	8002048 <HAL_RCC_OscConfig+0x3b0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	2b20      	cmp	r3, #32
 800201e:	d108      	bne.n	8002032 <HAL_RCC_OscConfig+0x39a>
 8002020:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002028:	4a63      	ldr	r2, [pc, #396]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 800202a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800202e:	6053      	str	r3, [r2, #4]
 8002030:	e02e      	b.n	8002090 <HAL_RCC_OscConfig+0x3f8>
 8002032:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	069b      	lsls	r3, r3, #26
 8002040:	495d      	ldr	r1, [pc, #372]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
 8002046:	e023      	b.n	8002090 <HAL_RCC_OscConfig+0x3f8>
 8002048:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	4958      	ldr	r1, [pc, #352]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002058:	4313      	orrs	r3, r2
 800205a:	60cb      	str	r3, [r1, #12]
 800205c:	e018      	b.n	8002090 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800205e:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a55      	ldr	r2, [pc, #340]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7ff f833 	bl	80010d4 <HAL_GetTick>
 800206e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002072:	f7ff f82f 	bl	80010d4 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e212      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002084:	4b4c      	ldr	r3, [pc, #304]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d036      	beq.n	800210a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d019      	beq.n	80020d8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a4:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 80020a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a8:	4a43      	ldr	r2, [pc, #268]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff f810 	bl	80010d4 <HAL_GetTick>
 80020b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff f80c 	bl	80010d4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e1ef      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 80020cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x420>
 80020d6:	e018      	b.n	800210a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d8:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 80020da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020dc:	4a36      	ldr	r2, [pc, #216]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7fe fff6 	bl	80010d4 <HAL_GetTick>
 80020e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ec:	f7fe fff2 	bl	80010d4 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1d5      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d036      	beq.n	8002184 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d019      	beq.n	8002152 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002124:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002128:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800212a:	f7fe ffd3 	bl	80010d4 <HAL_GetTick>
 800212e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002132:	f7fe ffcf 	bl	80010d4 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e1b2      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002144:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x49a>
 8002150:	e018      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 8002158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800215c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800215e:	f7fe ffb9 	bl	80010d4 <HAL_GetTick>
 8002162:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002166:	f7fe ffb5 	bl	80010d4 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e198      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_RCC_OscConfig+0x520>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f0      	bne.n	8002166 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8085 	beq.w	800229c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_OscConfig+0x524>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_RCC_OscConfig+0x524>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800219e:	f7fe ff99 	bl	80010d4 <HAL_GetTick>
 80021a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021a4:	e00c      	b.n	80021c0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021a6:	f7fe ff95 	bl	80010d4 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b64      	cmp	r3, #100	; 0x64
 80021b2:	d905      	bls.n	80021c0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e178      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
 80021b8:	58024400 	.word	0x58024400
 80021bc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021c0:	4b96      	ldr	r3, [pc, #600]	; (800241c <HAL_RCC_OscConfig+0x784>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ec      	beq.n	80021a6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_OscConfig+0x54a>
 80021d4:	4b92      	ldr	r3, [pc, #584]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a91      	ldr	r2, [pc, #580]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
 80021e0:	e02d      	b.n	800223e <HAL_RCC_OscConfig+0x5a6>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x56c>
 80021ea:	4b8d      	ldr	r3, [pc, #564]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	4a8c      	ldr	r2, [pc, #560]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6713      	str	r3, [r2, #112]	; 0x70
 80021f6:	4b8a      	ldr	r3, [pc, #552]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	4a89      	ldr	r2, [pc, #548]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	6713      	str	r3, [r2, #112]	; 0x70
 8002202:	e01c      	b.n	800223e <HAL_RCC_OscConfig+0x5a6>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d10c      	bne.n	8002226 <HAL_RCC_OscConfig+0x58e>
 800220c:	4b84      	ldr	r3, [pc, #528]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a83      	ldr	r2, [pc, #524]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
 8002218:	4b81      	ldr	r3, [pc, #516]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	4a80      	ldr	r2, [pc, #512]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6713      	str	r3, [r2, #112]	; 0x70
 8002224:	e00b      	b.n	800223e <HAL_RCC_OscConfig+0x5a6>
 8002226:	4b7e      	ldr	r3, [pc, #504]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222a:	4a7d      	ldr	r2, [pc, #500]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6713      	str	r3, [r2, #112]	; 0x70
 8002232:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	4a7a      	ldr	r2, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d015      	beq.n	8002272 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002246:	f7fe ff45 	bl	80010d4 <HAL_GetTick>
 800224a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe ff41 	bl	80010d4 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e122      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002264:	4b6e      	ldr	r3, [pc, #440]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ee      	beq.n	800224e <HAL_RCC_OscConfig+0x5b6>
 8002270:	e014      	b.n	800229c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7fe ff2f 	bl	80010d4 <HAL_GetTick>
 8002276:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7fe ff2b 	bl	80010d4 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e10c      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002290:	4b63      	ldr	r3, [pc, #396]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ee      	bne.n	800227a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 8101 	beq.w	80024a8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022a6:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ae:	2b18      	cmp	r3, #24
 80022b0:	f000 80bc 	beq.w	800242c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	f040 8095 	bne.w	80023e8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b58      	ldr	r3, [pc, #352]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a57      	ldr	r2, [pc, #348]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80022c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe ff03 	bl	80010d4 <HAL_GetTick>
 80022ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe feff 	bl	80010d4 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0e2      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022e4:	4b4e      	ldr	r3, [pc, #312]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f0:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80022f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f4:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <HAL_RCC_OscConfig+0x78c>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	430a      	orrs	r2, r1
 8002304:	4946      	ldr	r1, [pc, #280]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002306:	4313      	orrs	r3, r2
 8002308:	628b      	str	r3, [r1, #40]	; 0x28
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	3b01      	subs	r3, #1
 8002310:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002318:	3b01      	subs	r3, #1
 800231a:	025b      	lsls	r3, r3, #9
 800231c:	b29b      	uxth	r3, r3
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	3b01      	subs	r3, #1
 8002326:	041b      	lsls	r3, r3, #16
 8002328:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	3b01      	subs	r3, #1
 8002334:	061b      	lsls	r3, r3, #24
 8002336:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800233a:	4939      	ldr	r1, [pc, #228]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 800233c:	4313      	orrs	r3, r2
 800233e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002340:	4b37      	ldr	r3, [pc, #220]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	4a36      	ldr	r2, [pc, #216]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 800234e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002350:	4b35      	ldr	r3, [pc, #212]	; (8002428 <HAL_RCC_OscConfig+0x790>)
 8002352:	4013      	ands	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002358:	00d2      	lsls	r2, r2, #3
 800235a:	4931      	ldr	r1, [pc, #196]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 800235c:	4313      	orrs	r3, r2
 800235e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002360:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	f023 020c 	bic.w	r2, r3, #12
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	492c      	ldr	r1, [pc, #176]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 800236e:	4313      	orrs	r3, r2
 8002370:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002372:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	f023 0202 	bic.w	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	4928      	ldr	r1, [pc, #160]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002380:	4313      	orrs	r3, r2
 8002382:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	4a25      	ldr	r2, [pc, #148]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	4a22      	ldr	r2, [pc, #136]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80023a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fe88 	bl	80010d4 <HAL_GetTick>
 80023c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fe84 	bl	80010d4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e067      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x730>
 80023e6:	e05f      	b.n	80024a8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 80023ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe fe6e 	bl	80010d4 <HAL_GetTick>
 80023f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fe6a 	bl	80010d4 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04d      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <HAL_RCC_OscConfig+0x788>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x764>
 800241a:	e045      	b.n	80024a8 <HAL_RCC_OscConfig+0x810>
 800241c:	58024800 	.word	0x58024800
 8002420:	58024400 	.word	0x58024400
 8002424:	fffffc0c 	.word	0xfffffc0c
 8002428:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <HAL_RCC_OscConfig+0x81c>)
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_RCC_OscConfig+0x81c>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	2b01      	cmp	r3, #1
 800243e:	d031      	beq.n	80024a4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f003 0203 	and.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d12a      	bne.n	80024a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d122      	bne.n	80024a4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d11a      	bne.n	80024a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	0a5b      	lsrs	r3, r3, #9
 8002472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d111      	bne.n	80024a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	0c1b      	lsrs	r3, r3, #16
 8002484:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d108      	bne.n	80024a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	0e1b      	lsrs	r3, r3, #24
 8002496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3730      	adds	r7, #48	; 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	58024400 	.word	0x58024400

080024b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e19c      	b.n	8002806 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b8a      	ldr	r3, [pc, #552]	; (80026f8 <HAL_RCC_ClockConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d910      	bls.n	80024fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b87      	ldr	r3, [pc, #540]	; (80026f8 <HAL_RCC_ClockConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 020f 	bic.w	r2, r3, #15
 80024e2:	4985      	ldr	r1, [pc, #532]	; (80026f8 <HAL_RCC_ClockConfig+0x240>)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b83      	ldr	r3, [pc, #524]	; (80026f8 <HAL_RCC_ClockConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e184      	b.n	8002806 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d010      	beq.n	800252a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	4b7b      	ldr	r3, [pc, #492]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002514:	429a      	cmp	r2, r3
 8002516:	d908      	bls.n	800252a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002518:	4b78      	ldr	r3, [pc, #480]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	4975      	ldr	r1, [pc, #468]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 8002526:	4313      	orrs	r3, r2
 8002528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d010      	beq.n	8002558 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	4b70      	ldr	r3, [pc, #448]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002542:	429a      	cmp	r2, r3
 8002544:	d908      	bls.n	8002558 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002546:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	496a      	ldr	r1, [pc, #424]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 8002554:	4313      	orrs	r3, r2
 8002556:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d010      	beq.n	8002586 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	4b64      	ldr	r3, [pc, #400]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002570:	429a      	cmp	r2, r3
 8002572:	d908      	bls.n	8002586 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002574:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	495e      	ldr	r1, [pc, #376]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 8002582:	4313      	orrs	r3, r2
 8002584:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d010      	beq.n	80025b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800259e:	429a      	cmp	r2, r3
 80025a0:	d908      	bls.n	80025b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80025a2:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4953      	ldr	r1, [pc, #332]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d908      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f023 020f 	bic.w	r2, r3, #15
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4947      	ldr	r1, [pc, #284]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d055      	beq.n	800269a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025ee:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4940      	ldr	r1, [pc, #256]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d107      	bne.n	8002618 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002608:	4b3c      	ldr	r3, [pc, #240]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d121      	bne.n	8002658 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0f6      	b.n	8002806 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d107      	bne.n	8002630 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002620:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d115      	bne.n	8002658 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0ea      	b.n	8002806 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d107      	bne.n	8002648 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002638:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0de      	b.n	8002806 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002648:	4b2c      	ldr	r3, [pc, #176]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0d6      	b.n	8002806 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002658:	4b28      	ldr	r3, [pc, #160]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f023 0207 	bic.w	r2, r3, #7
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4925      	ldr	r1, [pc, #148]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 8002666:	4313      	orrs	r3, r2
 8002668:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fd33 	bl	80010d4 <HAL_GetTick>
 800266e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002670:	e00a      	b.n	8002688 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002672:	f7fe fd2f 	bl	80010d4 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0be      	b.n	8002806 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002688:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	429a      	cmp	r2, r3
 8002698:	d1eb      	bne.n	8002672 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d010      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d208      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f023 020f 	bic.w	r2, r3, #15
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	490e      	ldr	r1, [pc, #56]	; (80026fc <HAL_RCC_ClockConfig+0x244>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_ClockConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d214      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_RCC_ClockConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 020f 	bic.w	r2, r3, #15
 80026de:	4906      	ldr	r1, [pc, #24]	; (80026f8 <HAL_RCC_ClockConfig+0x240>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <HAL_RCC_ClockConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e086      	b.n	8002806 <HAL_RCC_ClockConfig+0x34e>
 80026f8:	52002000 	.word	0x52002000
 80026fc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002718:	429a      	cmp	r2, r3
 800271a:	d208      	bcs.n	800272e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800271c:	4b3c      	ldr	r3, [pc, #240]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	4939      	ldr	r1, [pc, #228]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 800272a:	4313      	orrs	r3, r2
 800272c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	4b34      	ldr	r3, [pc, #208]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002746:	429a      	cmp	r2, r3
 8002748:	d208      	bcs.n	800275c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800274a:	4b31      	ldr	r3, [pc, #196]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	492e      	ldr	r1, [pc, #184]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 8002758:	4313      	orrs	r3, r2
 800275a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	d010      	beq.n	800278a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002774:	429a      	cmp	r2, r3
 8002776:	d208      	bcs.n	800278a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002778:	4b25      	ldr	r3, [pc, #148]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4922      	ldr	r1, [pc, #136]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 8002786:	4313      	orrs	r3, r2
 8002788:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d010      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d208      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4917      	ldr	r1, [pc, #92]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027b8:	f000 f834 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	4912      	ldr	r1, [pc, #72]	; (8002814 <HAL_RCC_ClockConfig+0x35c>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
 80027d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_RCC_ClockConfig+0x358>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <HAL_RCC_ClockConfig+0x35c>)
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <HAL_RCC_ClockConfig+0x360>)
 80027ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_RCC_ClockConfig+0x364>)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_RCC_ClockConfig+0x368>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fc20 	bl	8001040 <HAL_InitTick>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	58024400 	.word	0x58024400
 8002814:	08007d04 	.word	0x08007d04
 8002818:	20000004 	.word	0x20000004
 800281c:	20000000 	.word	0x20000000
 8002820:	20000008 	.word	0x20000008

08002824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	; 0x24
 8002828:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800282a:	4bb3      	ldr	r3, [pc, #716]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002832:	2b18      	cmp	r3, #24
 8002834:	f200 8155 	bhi.w	8002ae2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <HAL_RCC_GetSysClockFreq+0x1c>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	080028a5 	.word	0x080028a5
 8002844:	08002ae3 	.word	0x08002ae3
 8002848:	08002ae3 	.word	0x08002ae3
 800284c:	08002ae3 	.word	0x08002ae3
 8002850:	08002ae3 	.word	0x08002ae3
 8002854:	08002ae3 	.word	0x08002ae3
 8002858:	08002ae3 	.word	0x08002ae3
 800285c:	08002ae3 	.word	0x08002ae3
 8002860:	080028cb 	.word	0x080028cb
 8002864:	08002ae3 	.word	0x08002ae3
 8002868:	08002ae3 	.word	0x08002ae3
 800286c:	08002ae3 	.word	0x08002ae3
 8002870:	08002ae3 	.word	0x08002ae3
 8002874:	08002ae3 	.word	0x08002ae3
 8002878:	08002ae3 	.word	0x08002ae3
 800287c:	08002ae3 	.word	0x08002ae3
 8002880:	080028d1 	.word	0x080028d1
 8002884:	08002ae3 	.word	0x08002ae3
 8002888:	08002ae3 	.word	0x08002ae3
 800288c:	08002ae3 	.word	0x08002ae3
 8002890:	08002ae3 	.word	0x08002ae3
 8002894:	08002ae3 	.word	0x08002ae3
 8002898:	08002ae3 	.word	0x08002ae3
 800289c:	08002ae3 	.word	0x08002ae3
 80028a0:	080028d7 	.word	0x080028d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028a4:	4b94      	ldr	r3, [pc, #592]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d009      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028b0:	4b91      	ldr	r3, [pc, #580]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	4a90      	ldr	r2, [pc, #576]	; (8002afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80028c2:	e111      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80028c4:	4b8d      	ldr	r3, [pc, #564]	; (8002afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028c6:	61bb      	str	r3, [r7, #24]
    break;
 80028c8:	e10e      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80028ca:	4b8d      	ldr	r3, [pc, #564]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028cc:	61bb      	str	r3, [r7, #24]
    break;
 80028ce:	e10b      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80028d0:	4b8c      	ldr	r3, [pc, #560]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80028d2:	61bb      	str	r3, [r7, #24]
    break;
 80028d4:	e108      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028d6:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80028e0:	4b85      	ldr	r3, [pc, #532]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028ec:	4b82      	ldr	r3, [pc, #520]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80028f6:	4b80      	ldr	r3, [pc, #512]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fa:	08db      	lsrs	r3, r3, #3
 80028fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800290e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80e1 	beq.w	8002adc <HAL_RCC_GetSysClockFreq+0x2b8>
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b02      	cmp	r3, #2
 800291e:	f000 8083 	beq.w	8002a28 <HAL_RCC_GetSysClockFreq+0x204>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b02      	cmp	r3, #2
 8002926:	f200 80a1 	bhi.w	8002a6c <HAL_RCC_GetSysClockFreq+0x248>
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x114>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d056      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002936:	e099      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002938:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d02d      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002944:	4b6c      	ldr	r3, [pc, #432]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	08db      	lsrs	r3, r3, #3
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	4a6b      	ldr	r2, [pc, #428]	; (8002afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	ee07 3a90 	vmov	s15, r3
 800295c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800296e:	4b62      	ldr	r3, [pc, #392]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002982:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800298a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800298e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800299e:	e087      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002b0c <HAL_RCC_GetSysClockFreq+0x2e8>
 80029ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029b2:	4b51      	ldr	r3, [pc, #324]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80029c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029e2:	e065      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002b10 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029f6:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a26:	e043      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a32:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a6a:	e021      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a76:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002b10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002aae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	0a5b      	lsrs	r3, r3, #9
 8002ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aba:	3301      	adds	r3, #1
 8002abc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad4:	ee17 3a90 	vmov	r3, s15
 8002ad8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002ada:	e005      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
    break;
 8002ae0:	e002      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ae4:	61bb      	str	r3, [r7, #24]
    break;
 8002ae6:	bf00      	nop
  }

  return sysclockfreq;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	58024400 	.word	0x58024400
 8002afc:	03d09000 	.word	0x03d09000
 8002b00:	003d0900 	.word	0x003d0900
 8002b04:	017d7840 	.word	0x017d7840
 8002b08:	46000000 	.word	0x46000000
 8002b0c:	4c742400 	.word	0x4c742400
 8002b10:	4a742400 	.word	0x4a742400
 8002b14:	4bbebc20 	.word	0x4bbebc20

08002b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002b1e:	f7ff fe81 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <HAL_RCC_GetHCLKFreq+0x50>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490f      	ldr	r1, [pc, #60]	; (8002b6c <HAL_RCC_GetHCLKFreq+0x54>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_RCC_GetHCLKFreq+0x50>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_RCC_GetHCLKFreq+0x54>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b52:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b56:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	08007d04 	.word	0x08007d04
 8002b70:	20000004 	.word	0x20000004
 8002b74:	20000000 	.word	0x20000000

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002b7c:	f7ff ffcc 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4904      	ldr	r1, [pc, #16]	; (8002ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	58024400 	.word	0x58024400
 8002ba0:	08007d04 	.word	0x08007d04

08002ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ba8:	f7ff ffb6 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4904      	ldr	r1, [pc, #16]	; (8002bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	58024400 	.word	0x58024400
 8002bcc:	08007d04 	.word	0x08007d04

08002bd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b090      	sub	sp, #64	; 0x40
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bde:	d14f      	bne.n	8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8002be0:	4ba0      	ldr	r3, [pc, #640]	; (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d844      	bhi.n	8002c7a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c0d 	.word	0x08002c0d
 8002bfc:	08002c1d 	.word	0x08002c1d
 8002c00:	08002c2d 	.word	0x08002c2d
 8002c04:	08002c75 	.word	0x08002c75
 8002c08:	08002c3d 	.word	0x08002c3d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fd53 	bl	80036bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c1a:	e28b      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002c1c:	f107 0318 	add.w	r3, r7, #24
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 faa3 	bl	800316c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c2a:	e283      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fbef 	bl	8003414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c3a:	e27b      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002c3c:	4b89      	ldr	r3, [pc, #548]	; (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002c4c:	4b86      	ldr	r3, [pc, #536]	; (8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002c50:	e270      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c58:	d102      	bne.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8002c5a:	4b84      	ldr	r3, [pc, #528]	; (8002e6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c5e:	e269      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c66:	d102      	bne.n	8002c6e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8002c68:	4b81      	ldr	r3, [pc, #516]	; (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c6c:	e262      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c72:	e25f      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002c74:	4b7f      	ldr	r3, [pc, #508]	; (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c78:	e25c      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c7e:	e259      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c86:	d159      	bne.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8002c88:	4b76      	ldr	r3, [pc, #472]	; (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c98:	d02e      	beq.n	8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca0:	d849      	bhi.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ca6:	d043      	beq.n	8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	2bc0      	cmp	r3, #192	; 0xc0
 8002cac:	d843      	bhi.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	2b80      	cmp	r3, #128	; 0x80
 8002cb2:	d019      	beq.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	2b80      	cmp	r3, #128	; 0x80
 8002cb8:	d83d      	bhi.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d008      	beq.n	8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8002cc6:	e036      	b.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fcf5 	bl	80036bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002cd6:	e22d      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002cd8:	f107 0318 	add.w	r3, r7, #24
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fa45 	bl	800316c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ce6:	e225      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fb91 	bl	8003414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002cf6:	e21d      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002cf8:	4b5a      	ldr	r3, [pc, #360]	; (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002d08:	4b57      	ldr	r3, [pc, #348]	; (8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002d0c:	e212      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d14:	d102      	bne.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
            frequency = CSI_VALUE;
 8002d16:	4b55      	ldr	r3, [pc, #340]	; (8002e6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002d18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d1a:	e20b      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d22:	d102      	bne.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
            frequency = HSE_VALUE;
 8002d24:	4b52      	ldr	r3, [pc, #328]	; (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d28:	e204      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d2e:	e201      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d34:	e1fe      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d3a:	e1fb      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d42:	d15e      	bne.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8002d44:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8002d4c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d54:	d033      	beq.n	8002dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d5c:	d84e      	bhi.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d64:	d047      	beq.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d6c:	d846      	bhi.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d74:	d01b      	beq.n	8002dae <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7c:	d83e      	bhi.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d8a:	d008      	beq.n	8002d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8002d8c:	e036      	b.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fc92 	bl	80036bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d9c:	e1ca      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002d9e:	f107 0318 	add.w	r3, r7, #24
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f9e2 	bl	800316c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002dac:	e1c2      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fb2e 	bl	8003414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002dbc:	e1ba      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002dbe:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dc6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d102      	bne.n	8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002dce:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002dd2:	e1af      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dda:	d102      	bne.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
            frequency = CSI_VALUE;
 8002ddc:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002de0:	e1a8      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de8:	d102      	bne.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
            frequency = HSE_VALUE;
 8002dea:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002dee:	e1a1      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002df4:	e19e      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002df6:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002dfa:	e19b      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e00:	e198      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e08:	d168      	bne.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e1a:	d03d      	beq.n	8002e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e22:	d858      	bhi.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e2a:	d051      	beq.n	8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e32:	d850      	bhi.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e3a:	d025      	beq.n	8002e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e42:	d848      	bhi.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e50:	d012      	beq.n	8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8002e52:	e040      	b.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fc2f 	bl	80036bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e62:	e167      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8002e64:	58024400 	.word	0x58024400
 8002e68:	03d09000 	.word	0x03d09000
 8002e6c:	003d0900 	.word	0x003d0900
 8002e70:	017d7840 	.word	0x017d7840
 8002e74:	00bb8000 	.word	0x00bb8000
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002e78:	f107 0318 	add.w	r3, r7, #24
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 f975 	bl	800316c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e86:	e155      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002e88:	f107 030c 	add.w	r3, r7, #12
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fac1 	bl	8003414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e96:	e14d      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002e98:	4ba0      	ldr	r3, [pc, #640]	; (800311c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002ea8:	4b9d      	ldr	r3, [pc, #628]	; (8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8002eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002eac:	e142      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb4:	d102      	bne.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
            frequency = CSI_VALUE;
 8002eb6:	4b9b      	ldr	r3, [pc, #620]	; (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002eba:	e13b      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ec2:	d102      	bne.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
            frequency = HSE_VALUE;
 8002ec4:	4b98      	ldr	r3, [pc, #608]	; (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ec8:	e134      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ece:	e131      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002ed0:	4b96      	ldr	r3, [pc, #600]	; (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8002ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ed4:	e12e      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002eda:	e12b      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d15e      	bne.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8002ee4:	4b8d      	ldr	r3, [pc, #564]	; (800311c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002eec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef4:	d033      	beq.n	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002efc:	d84e      	bhi.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f04:	d047      	beq.n	8002f96 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8002f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f0c:	d846      	bhi.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f14:	d01b      	beq.n	8002f4e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1c:	d83e      	bhi.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8002f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8002f2c:	e036      	b.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fbc2 	bl	80036bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f3c:	e0fa      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f3e:	f107 0318 	add.w	r3, r7, #24
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f912 	bl	800316c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f4c:	e0f2      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fa5e 	bl	8003414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f5c:	e0ea      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f5e:	4b6f      	ldr	r3, [pc, #444]	; (800311c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002f6e:	4b6c      	ldr	r3, [pc, #432]	; (8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8002f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002f72:	e0df      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
            frequency = CSI_VALUE;
 8002f7c:	4b69      	ldr	r3, [pc, #420]	; (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f80:	e0d8      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f88:	d102      	bne.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
            frequency = HSE_VALUE;
 8002f8a:	4b67      	ldr	r3, [pc, #412]	; (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f8e:	e0d1      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f94:	e0ce      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002f96:	4b65      	ldr	r3, [pc, #404]	; (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8002f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f9a:	e0cb      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fa0:	e0c8      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fa8:	d143      	bne.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8002faa:	4b5c      	ldr	r3, [pc, #368]	; (800311c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fba:	d01b      	beq.n	8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fc2:	d833      	bhi.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d004      	beq.n	8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8002fd2:	e02b      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002fd4:	f107 0318 	add.w	r3, r7, #24
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f8c7 	bl	800316c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fe2:	e0a7      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fa13 	bl	8003414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ff2:	e09f      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002ff4:	4b49      	ldr	r3, [pc, #292]	; (800311c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003004:	4b46      	ldr	r3, [pc, #280]	; (8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003008:	e094      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003010:	d102      	bne.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
            frequency = CSI_VALUE;
 8003012:	4b44      	ldr	r3, [pc, #272]	; (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003016:	e08d      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800301e:	d102      	bne.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            frequency = HSE_VALUE;
 8003020:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003024:	e086      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800302a:	e083      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003030:	e080      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003038:	d11f      	bne.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800303a:	4b38      	ldr	r3, [pc, #224]	; (800311c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003042:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003050:	d008      	beq.n	8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
 8003052:	e00f      	b.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fb2f 	bl	80036bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003062:	e067      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003064:	f107 0318 	add.w	r3, r7, #24
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f87f 	bl	800316c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003072:	e05f      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003078:	e05c      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003080:	d156      	bne.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8003082:	4b26      	ldr	r3, [pc, #152]	; (800311c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800308a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003092:	d03d      	beq.n	8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309a:	d83c      	bhi.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a2:	d032      	beq.n	800310a <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 80030a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030aa:	d834      	bhi.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80030ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030b2:	d027      	beq.n	8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
 80030b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030ba:	d82c      	bhi.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030c2:	d017      	beq.n	80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ca:	d824      	bhi.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d004      	beq.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030d8:	d004      	beq.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 80030da:	e01c      	b.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80030dc:	f000 f830 	bl	8003140 <HAL_RCCEx_GetD3PCLK1Freq>
 80030e0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80030e2:	e027      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80030e4:	f107 0318 	add.w	r3, r7, #24
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f83f 	bl	800316c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030f2:	e01f      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f98b 	bl	8003414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003102:	e017      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003108:	e014      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800310c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800310e:	e011      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003114:	e00e      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800311a:	e00b      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 800311c:	58024400 	.word	0x58024400
 8003120:	03d09000 	.word	0x03d09000
 8003124:	003d0900 	.word	0x003d0900
 8003128:	017d7840 	.word	0x017d7840
 800312c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else
    {
      frequency = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8003134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003136:	4618      	mov	r0, r3
 8003138:	3740      	adds	r7, #64	; 0x40
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop

08003140 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003144:	f7ff fce8 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4904      	ldr	r1, [pc, #16]	; (8003168 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	58024400 	.word	0x58024400
 8003168:	08007d04 	.word	0x08007d04

0800316c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003174:	4ba1      	ldr	r3, [pc, #644]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800317e:	4b9f      	ldr	r3, [pc, #636]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	0b1b      	lsrs	r3, r3, #12
 8003184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003188:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800318a:	4b9c      	ldr	r3, [pc, #624]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003196:	4b99      	ldr	r3, [pc, #612]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	08db      	lsrs	r3, r3, #3
 800319c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8111 	beq.w	80033dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	f000 8083 	beq.w	80032c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	f200 80a1 	bhi.w	800330c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d056      	beq.n	8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80031d6:	e099      	b.n	800330c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031d8:	4b88      	ldr	r3, [pc, #544]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d02d      	beq.n	8003240 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031e4:	4b85      	ldr	r3, [pc, #532]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	08db      	lsrs	r3, r3, #3
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	4a84      	ldr	r2, [pc, #528]	; (8003400 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
 80031f4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	ee07 3a90 	vmov	s15, r3
 80031fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	4b7b      	ldr	r3, [pc, #492]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003222:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800323e:	e087      	b.n	8003350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003408 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800324e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003252:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003262:	ed97 6a03 	vldr	s12, [r7, #12]
 8003266:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800326a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003282:	e065      	b.n	8003350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800340c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003296:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80032aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80032c6:	e043      	b.n	8003350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003410 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80032d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032da:	4b48      	ldr	r3, [pc, #288]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80032ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800330a:	e021      	b.n	8003350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800340c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800331a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800331e:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003332:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800333e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800334e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003350:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	0a5b      	lsrs	r3, r3, #9
 8003356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800336a:	edd7 6a07 	vldr	s13, [r7, #28]
 800336e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003376:	ee17 2a90 	vmov	r2, s15
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800337e:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003388:	ee07 3a90 	vmov	s15, r3
 800338c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003394:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003398:	edd7 6a07 	vldr	s13, [r7, #28]
 800339c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033a4:	ee17 2a90 	vmov	r2, s15
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80033ac:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	0e1b      	lsrs	r3, r3, #24
 80033b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80033c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80033ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033d2:	ee17 2a90 	vmov	r2, s15
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80033da:	e008      	b.n	80033ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
}
 80033ee:	bf00      	nop
 80033f0:	3724      	adds	r7, #36	; 0x24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	58024400 	.word	0x58024400
 8003400:	03d09000 	.word	0x03d09000
 8003404:	46000000 	.word	0x46000000
 8003408:	4c742400 	.word	0x4c742400
 800340c:	4a742400 	.word	0x4a742400
 8003410:	4bbebc20 	.word	0x4bbebc20

08003414 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800341c:	4ba1      	ldr	r3, [pc, #644]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003426:	4b9f      	ldr	r3, [pc, #636]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	0d1b      	lsrs	r3, r3, #20
 800342c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003430:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003432:	4b9c      	ldr	r3, [pc, #624]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800343e:	4b99      	ldr	r3, [pc, #612]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	08db      	lsrs	r3, r3, #3
 8003444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003456:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8111 	beq.w	8003684 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b02      	cmp	r3, #2
 8003466:	f000 8083 	beq.w	8003570 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b02      	cmp	r3, #2
 800346e:	f200 80a1 	bhi.w	80035b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d056      	beq.n	800352c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800347e:	e099      	b.n	80035b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003480:	4b88      	ldr	r3, [pc, #544]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02d      	beq.n	80034e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800348c:	4b85      	ldr	r3, [pc, #532]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	08db      	lsrs	r3, r3, #3
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	4a84      	ldr	r2, [pc, #528]	; (80036a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
 800349c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b6:	4b7b      	ldr	r3, [pc, #492]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80034ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80036ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80034ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80034e6:	e087      	b.n	80035f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80036b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80034f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034fa:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800350a:	ed97 6a03 	vldr	s12, [r7, #12]
 800350e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80036ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800351a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800351e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003526:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800352a:	e065      	b.n	80035f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003536:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80036b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800353a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353e:	4b59      	ldr	r3, [pc, #356]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003552:	eddf 5a56 	vldr	s11, [pc, #344]	; 80036ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800356e:	e043      	b.n	80035f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80036b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800357e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003582:	4b48      	ldr	r3, [pc, #288]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003592:	ed97 6a03 	vldr	s12, [r7, #12]
 8003596:	eddf 5a45 	vldr	s11, [pc, #276]	; 80036ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800359a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035b2:	e021      	b.n	80035f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80036b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80035c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c6:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80035da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80036ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80035de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80035f8:	4b2a      	ldr	r3, [pc, #168]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	0a5b      	lsrs	r3, r3, #9
 80035fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800360e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003612:	edd7 6a07 	vldr	s13, [r7, #28]
 8003616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800361a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800361e:	ee17 2a90 	vmov	r2, s15
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003626:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	0c1b      	lsrs	r3, r3, #16
 800362c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800363c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003640:	edd7 6a07 	vldr	s13, [r7, #28]
 8003644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800364c:	ee17 2a90 	vmov	r2, s15
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003654:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	0e1b      	lsrs	r3, r3, #24
 800365a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800366a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800366e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800367a:	ee17 2a90 	vmov	r2, s15
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003682:	e008      	b.n	8003696 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
}
 8003696:	bf00      	nop
 8003698:	3724      	adds	r7, #36	; 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	58024400 	.word	0x58024400
 80036a8:	03d09000 	.word	0x03d09000
 80036ac:	46000000 	.word	0x46000000
 80036b0:	4c742400 	.word	0x4c742400
 80036b4:	4a742400 	.word	0x4a742400
 80036b8:	4bbebc20 	.word	0x4bbebc20

080036bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036c4:	4ba0      	ldr	r3, [pc, #640]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80036ce:	4b9e      	ldr	r3, [pc, #632]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80036da:	4b9b      	ldr	r3, [pc, #620]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80036e4:	4b98      	ldr	r3, [pc, #608]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80036e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e8:	08db      	lsrs	r3, r3, #3
 80036ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	fb02 f303 	mul.w	r3, r2, r3
 80036f4:	ee07 3a90 	vmov	s15, r3
 80036f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8111 	beq.w	800392a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b02      	cmp	r3, #2
 800370c:	f000 8083 	beq.w	8003816 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b02      	cmp	r3, #2
 8003714:	f200 80a1 	bhi.w	800385a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d056      	beq.n	80037d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8003724:	e099      	b.n	800385a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003726:	4b88      	ldr	r3, [pc, #544]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d02d      	beq.n	800378e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003732:	4b85      	ldr	r3, [pc, #532]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	08db      	lsrs	r3, r3, #3
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	4a83      	ldr	r2, [pc, #524]	; (800394c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800373e:	fa22 f303 	lsr.w	r3, r2, r3
 8003742:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800375c:	4b7a      	ldr	r3, [pc, #488]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800376c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003770:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800377c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003788:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800378c:	e087      	b.n	800389e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003798:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003954 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800379c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a0:	4b69      	ldr	r3, [pc, #420]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a8:	ee07 3a90 	vmov	s15, r3
 80037ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80037b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80037b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037d0:	e065      	b.n	800389e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003958 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80037e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e4:	4b58      	ldr	r3, [pc, #352]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80037f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80037fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800380c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003810:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003814:	e043      	b.n	800389e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	ee07 3a90 	vmov	s15, r3
 800381c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003820:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800395c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8003824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003828:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003838:	ed97 6a03 	vldr	s12, [r7, #12]
 800383c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003848:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800384c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003854:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003858:	e021      	b.n	800389e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003864:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003958 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8003868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386c:	4b36      	ldr	r3, [pc, #216]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003874:	ee07 3a90 	vmov	s15, r3
 8003878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003880:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003898:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800389c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800389e:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	0a5b      	lsrs	r3, r3, #9
 80038a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a8:	ee07 3a90 	vmov	s15, r3
 80038ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80038bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c4:	ee17 2a90 	vmov	r2, s15
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80038cc:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f2:	ee17 2a90 	vmov	r2, s15
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	0e1b      	lsrs	r3, r3, #24
 8003900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003904:	ee07 3a90 	vmov	s15, r3
 8003908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003910:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003914:	edd7 6a07 	vldr	s13, [r7, #28]
 8003918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800391c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003920:	ee17 2a90 	vmov	r2, s15
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003928:	e008      	b.n	800393c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
}
 800393c:	bf00      	nop
 800393e:	3724      	adds	r7, #36	; 0x24
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	58024400 	.word	0x58024400
 800394c:	03d09000 	.word	0x03d09000
 8003950:	46000000 	.word	0x46000000
 8003954:	4c742400 	.word	0x4c742400
 8003958:	4a742400 	.word	0x4a742400
 800395c:	4bbebc20 	.word	0x4bbebc20

08003960 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e07c      	b.n	8003a6c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10c      	bne.n	8003998 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd f908 	bl	8000ba8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2203      	movs	r2, #3
 800399c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f867 	bl	8003a74 <HAL_SD_InitCard>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e05d      	b.n	8003a6c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80039b0:	f107 0308 	add.w	r3, r7, #8
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fbf6 	bl	80041a8 <HAL_SD_GetCardStatus>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e052      	b.n	8003a6c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80039c6:	7e3b      	ldrb	r3, [r7, #24]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80039cc:	7e7b      	ldrb	r3, [r7, #25]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10a      	bne.n	80039f0 <HAL_SD_Init+0x90>
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <HAL_SD_Init+0x86>
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80039ee:	e00b      	b.n	8003a08 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d104      	bne.n	8003a02 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a00:	e002      	b.n	8003a08 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fcac 	bl	800436c <HAL_SD_ConfigWideBusOperation>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e026      	b.n	8003a6c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8003a1e:	f7fd fb59 	bl	80010d4 <HAL_GetTick>
 8003a22:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8003a24:	e011      	b.n	8003a4a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8003a26:	f7fd fb55 	bl	80010d4 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d109      	bne.n	8003a4a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e010      	b.n	8003a6c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fd38 	bl	80044c0 <HAL_SD_GetCardState>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d1e7      	bne.n	8003a26 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3728      	adds	r7, #40	; 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a74:	b5b0      	push	{r4, r5, r7, lr}
 8003a76:	b08e      	sub	sp, #56	; 0x38
 8003a78:	af04      	add	r7, sp, #16
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8003a8c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003a90:	f7ff f89e 	bl	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a94:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	0a1b      	lsrs	r3, r3, #8
 8003a9a:	4a40      	ldr	r2, [pc, #256]	; (8003b9c <HAL_SD_InitCard+0x128>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d107      	bne.n	8003abc <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0210 	orr.w	r2, r2, #16
 8003aba:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681d      	ldr	r5, [r3, #0]
 8003ac0:	466c      	mov	r4, sp
 8003ac2:	f107 0314 	add.w	r3, r7, #20
 8003ac6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ace:	f107 0308 	add.w	r3, r7, #8
 8003ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f002 fc0f 	bl	80062f8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 fc41 	bl	8006366 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003af6:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <HAL_SD_InitCard+0x12c>)
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	3301      	adds	r3, #1
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd faf3 	bl	80010ec <HAL_Delay>
 8003b06:	e002      	b.n	8003b0e <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8003b08:	2002      	movs	r0, #2
 8003b0a:	f7fd faef 	bl	80010ec <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fdb4 	bl	800467c <SD_PowerON>
 8003b14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e02e      	b.n	8003b92 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fce3 	bl	8004500 <SD_InitCard>
 8003b3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e01b      	b.n	8003b92 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b62:	4618      	mov	r0, r3
 8003b64:	f002 fc94 	bl	8006490 <SDMMC_CmdBlockLength>
 8003b68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00f      	beq.n	8003b90 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0b      	ldr	r2, [pc, #44]	; (8003ba4 <HAL_SD_InitCard+0x130>)
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3728      	adds	r7, #40	; 0x28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	014f8b59 	.word	0x014f8b59
 8003ba0:	00012110 	.word	0x00012110
 8003ba4:	1fe00fff 	.word	0x1fe00fff

08003ba8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	; 0x30
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d107      	bne.n	8003bd0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e08d      	b.n	8003cec <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	f040 8086 	bne.w	8003cea <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	441a      	add	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d907      	bls.n	8003c02 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e074      	b.n	8003cec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2203      	movs	r2, #3
 8003c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	025a      	lsls	r2, r3, #9
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d002      	beq.n	8003c2e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	025b      	lsls	r3, r3, #9
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	025b      	lsls	r3, r3, #9
 8003c38:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003c3a:	2390      	movs	r3, #144	; 0x90
 8003c3c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f107 0210 	add.w	r2, r7, #16
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f002 fbef 	bl	8006438 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c68:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2201      	movs	r2, #1
 8003c78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d90a      	bls.n	8003c96 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2282      	movs	r2, #130	; 0x82
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f002 fc45 	bl	800651c <SDMMC_CmdReadMultiBlock>
 8003c92:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003c94:	e009      	b.n	8003caa <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2281      	movs	r2, #129	; 0x81
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f002 fc17 	bl	80064d6 <SDMMC_CmdReadSingleBlock>
 8003ca8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d012      	beq.n	8003cd6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e00a      	b.n	8003cec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003ce4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e000      	b.n	8003cec <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
  }
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3730      	adds	r7, #48	; 0x30
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	1fe00fff 	.word	0x1fe00fff

08003cf8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08c      	sub	sp, #48	; 0x30
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e08d      	b.n	8003e3c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	f040 8086 	bne.w	8003e3a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	441a      	add	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d907      	bls.n	8003d52 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e074      	b.n	8003e3c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2203      	movs	r2, #3
 8003d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	025a      	lsls	r2, r3, #9
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d002      	beq.n	8003d7e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	025b      	lsls	r3, r3, #9
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d82:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	025b      	lsls	r3, r3, #9
 8003d88:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003d8a:	2390      	movs	r3, #144	; 0x90
 8003d8c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f107 0210 	add.w	r2, r7, #16
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f002 fb47 	bl	8006438 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d90a      	bls.n	8003de6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	22a0      	movs	r2, #160	; 0xa0
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f002 fbe3 	bl	80065a8 <SDMMC_CmdWriteMultiBlock>
 8003de2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003de4:	e009      	b.n	8003dfa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2290      	movs	r2, #144	; 0x90
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df2:	4618      	mov	r0, r3
 8003df4:	f002 fbb5 	bl	8006562 <SDMMC_CmdWriteSingleBlock>
 8003df8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d012      	beq.n	8003e26 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00a      	b.n	8003e3c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8003e34:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e000      	b.n	8003e3c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003e3a:	2302      	movs	r3, #2
  }
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3730      	adds	r7, #48	; 0x30
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	1fe00fff 	.word	0x1fe00fff

08003e48 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6e:	0f9b      	lsrs	r3, r3, #30
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7a:	0e9b      	lsrs	r3, r3, #26
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8c:	0e1b      	lsrs	r3, r3, #24
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	0c1b      	lsrs	r3, r3, #16
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec0:	0d1b      	lsrs	r3, r3, #20
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ecc:	0c1b      	lsrs	r3, r3, #16
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ede:	0bdb      	lsrs	r3, r3, #15
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef0:	0b9b      	lsrs	r3, r3, #14
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f02:	0b5b      	lsrs	r3, r3, #13
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f14:	0b1b      	lsrs	r3, r3, #12
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2200      	movs	r2, #0
 8003f26:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d163      	bne.n	8003ff8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f34:	009a      	lsls	r2, r3, #2
 8003f36:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f40:	0f92      	lsrs	r2, r2, #30
 8003f42:	431a      	orrs	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4c:	0edb      	lsrs	r3, r3, #27
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5e:	0e1b      	lsrs	r3, r3, #24
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f70:	0d5b      	lsrs	r3, r3, #21
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f82:	0c9b      	lsrs	r3, r3, #18
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f94:	0bdb      	lsrs	r3, r3, #15
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	7e1b      	ldrb	r3, [r3, #24]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	3302      	adds	r3, #2
 8003fb8:	2201      	movs	r2, #1
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003fc2:	fb02 f203 	mul.w	r2, r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	7a1b      	ldrb	r3, [r3, #8]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fe4:	0a52      	lsrs	r2, r2, #9
 8003fe6:	fb02 f203 	mul.w	r2, r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff4:	659a      	str	r2, [r3, #88]	; 0x58
 8003ff6:	e031      	b.n	800405c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d11d      	bne.n	800403c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800400e:	0c1b      	lsrs	r3, r3, #16
 8004010:	431a      	orrs	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	3301      	adds	r3, #1
 800401c:	029a      	lsls	r2, r3, #10
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004030:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	659a      	str	r2, [r3, #88]	; 0x58
 800403a:	e00f      	b.n	800405c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a58      	ldr	r2, [pc, #352]	; (80041a4 <HAL_SD_GetCardCSD+0x344>)
 8004042:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e09d      	b.n	8004198 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004060:	0b9b      	lsrs	r3, r3, #14
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	b2da      	uxtb	r2, r3
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004072:	09db      	lsrs	r3, r3, #7
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800407a:	b2da      	uxtb	r2, r3
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800408a:	b2da      	uxtb	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004094:	0fdb      	lsrs	r3, r3, #31
 8004096:	b2da      	uxtb	r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a0:	0f5b      	lsrs	r3, r3, #29
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b2:	0e9b      	lsrs	r3, r3, #26
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c4:	0d9b      	lsrs	r3, r3, #22
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d6:	0d5b      	lsrs	r3, r3, #21
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f2:	0c1b      	lsrs	r3, r3, #16
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004106:	0bdb      	lsrs	r3, r3, #15
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800411a:	0b9b      	lsrs	r3, r3, #14
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	b2da      	uxtb	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800412e:	0b5b      	lsrs	r3, r3, #13
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	b2da      	uxtb	r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004142:	0b1b      	lsrs	r3, r3, #12
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	b2da      	uxtb	r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	b2da      	uxtb	r2, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	b2da      	uxtb	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004186:	b2da      	uxtb	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	1fe00fff 	.word	0x1fe00fff

080041a8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b094      	sub	sp, #80	; 0x50
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80041b8:	f107 0308 	add.w	r3, r7, #8
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fb64 	bl	800488c <SD_SendSDStatus>
 80041c4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80041c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d011      	beq.n	80041f0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a4f      	ldr	r2, [pc, #316]	; (8004310 <HAL_SD_GetCardStatus+0x168>)
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80041ee:	e070      	b.n	80042d2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	b29b      	uxth	r3, r3
 8004216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800421a:	b29a      	uxth	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	0e1b      	lsrs	r3, r3, #24
 8004220:	b29b      	uxth	r3, r3
 8004222:	4313      	orrs	r3, r2
 8004224:	b29a      	uxth	r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	061a      	lsls	r2, r3, #24
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004236:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004240:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	0e1b      	lsrs	r3, r3, #24
 8004246:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	b2da      	uxtb	r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	b2da      	uxtb	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	0d1b      	lsrs	r3, r3, #20
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	b2da      	uxtb	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	b29b      	uxth	r3, r3
 8004274:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004278:	b29a      	uxth	r2, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	b29b      	uxth	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	b29b      	uxth	r3, r3
 8004282:	4313      	orrs	r3, r2
 8004284:	b29a      	uxth	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	0a9b      	lsrs	r3, r3, #10
 800428e:	b2db      	uxtb	r3, r3
 8004290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004294:	b2da      	uxtb	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	091b      	lsrs	r3, r3, #4
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	0e1b      	lsrs	r3, r3, #24
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042da:	4618      	mov	r0, r3
 80042dc:	f002 f8d8 	bl	8006490 <SDMMC_CmdBlockLength>
 80042e0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80042e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00d      	beq.n	8004304 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a08      	ldr	r2, [pc, #32]	; (8004310 <HAL_SD_GetCardStatus+0x168>)
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8004304:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004308:	4618      	mov	r0, r3
 800430a:	3750      	adds	r7, #80	; 0x50
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	1fe00fff 	.word	0x1fe00fff

08004314 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800436c:	b5b0      	push	{r4, r5, r7, lr}
 800436e:	b08e      	sub	sp, #56	; 0x38
 8004370:	af04      	add	r7, sp, #16
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2203      	movs	r2, #3
 8004380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	2b03      	cmp	r3, #3
 800438a:	d02e      	beq.n	80043ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004392:	d106      	bne.n	80043a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
 80043a0:	e029      	b.n	80043f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043a8:	d10a      	bne.n	80043c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fb66 	bl	8004a7c <SD_WideBus_Enable>
 80043b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
 80043be:	e01a      	b.n	80043f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fba3 	bl	8004b12 <SD_WideBus_Disable>
 80043cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
 80043da:	e00c      	b.n	80043f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	639a      	str	r2, [r3, #56]	; 0x38
 80043e8:	e005      	b.n	80043f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d007      	beq.n	800440e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a2e      	ldr	r2, [pc, #184]	; (80044bc <HAL_SD_ConfigWideBusOperation+0x150>)
 8004404:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800440c:	e034      	b.n	8004478 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	2b03      	cmp	r3, #3
 800442a:	d903      	bls.n	8004434 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e012      	b.n	800445a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800443c:	d103      	bne.n	8004446 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e009      	b.n	800445a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444e:	d102      	bne.n	8004456 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8004450:	2302      	movs	r3, #2
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	e001      	b.n	800445a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8004456:	2304      	movs	r3, #4
 8004458:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681d      	ldr	r5, [r3, #0]
 800445e:	466c      	mov	r4, sp
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800446c:	f107 0308 	add.w	r3, r7, #8
 8004470:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004472:	4628      	mov	r0, r5
 8004474:	f001 ff40 	bl	80062f8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004480:	4618      	mov	r0, r3
 8004482:	f002 f805 	bl	8006490 <SDMMC_CmdBlockLength>
 8004486:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <HAL_SD_ConfigWideBusOperation+0x150>)
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80044b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3728      	adds	r7, #40	; 0x28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bdb0      	pop	{r4, r5, r7, pc}
 80044bc:	1fe00fff 	.word	0x1fe00fff

080044c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80044cc:	f107 030c 	add.w	r3, r7, #12
 80044d0:	4619      	mov	r1, r3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 faaa 	bl	8004a2c <SD_SendStatus>
 80044d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	0a5b      	lsrs	r3, r3, #9
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80044f6:	693b      	ldr	r3, [r7, #16]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b090      	sub	sp, #64	; 0x40
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004508:	2301      	movs	r3, #1
 800450a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f001 ff39 	bl	8006388 <SDMMC_GetPowerState>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800451c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004520:	e0a7      	b.n	8004672 <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	2b03      	cmp	r3, #3
 8004528:	d02e      	beq.n	8004588 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f002 f947 	bl	80067c2 <SDMMC_CmdSendCID>
 8004534:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <SD_InitCard+0x40>
    {
      return errorstate;
 800453c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453e:	e098      	b.n	8004672 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f001 ff63 	bl	8006412 <SDMMC_GetResponse>
 800454c:	4602      	mov	r2, r0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2104      	movs	r1, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f001 ff5a 	bl	8006412 <SDMMC_GetResponse>
 800455e:	4602      	mov	r2, r0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2108      	movs	r1, #8
 800456a:	4618      	mov	r0, r3
 800456c:	f001 ff51 	bl	8006412 <SDMMC_GetResponse>
 8004570:	4602      	mov	r2, r0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	210c      	movs	r1, #12
 800457c:	4618      	mov	r0, r3
 800457e:	f001 ff48 	bl	8006412 <SDMMC_GetResponse>
 8004582:	4602      	mov	r2, r0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458c:	2b03      	cmp	r3, #3
 800458e:	d00d      	beq.n	80045ac <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f107 020e 	add.w	r2, r7, #14
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f002 f950 	bl	8006840 <SDMMC_CmdSetRelAdd>
 80045a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <SD_InitCard+0xac>
    {
      return errorstate;
 80045a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045aa:	e062      	b.n	8004672 <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d036      	beq.n	8004622 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80045b4:	89fb      	ldrh	r3, [r7, #14]
 80045b6:	461a      	mov	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f002 f919 	bl	8006800 <SDMMC_CmdSendCSD>
 80045ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <SD_InitCard+0xda>
    {
      return errorstate;
 80045d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d8:	e04b      	b.n	8004672 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f001 ff16 	bl	8006412 <SDMMC_GetResponse>
 80045e6:	4602      	mov	r2, r0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2104      	movs	r1, #4
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 ff0d 	bl	8006412 <SDMMC_GetResponse>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2108      	movs	r1, #8
 8004604:	4618      	mov	r0, r3
 8004606:	f001 ff04 	bl	8006412 <SDMMC_GetResponse>
 800460a:	4602      	mov	r2, r0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	210c      	movs	r1, #12
 8004616:	4618      	mov	r0, r3
 8004618:	f001 fefb 	bl	8006412 <SDMMC_GetResponse>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2104      	movs	r1, #4
 8004628:	4618      	mov	r0, r3
 800462a:	f001 fef2 	bl	8006412 <SDMMC_GetResponse>
 800462e:	4603      	mov	r3, r0
 8004630:	0d1a      	lsrs	r2, r3, #20
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004636:	f107 0310 	add.w	r3, r7, #16
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff fc0f 	bl	8003e60 <HAL_SD_GetCardCSD>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004648:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800464c:	e011      	b.n	8004672 <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6819      	ldr	r1, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	461a      	mov	r2, r3
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	4608      	mov	r0, r1
 8004660:	f001 ffc5 	bl	80065ee <SDMMC_CmdSelDesel>
 8004664:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <SD_InitCard+0x170>
  {
    return errorstate;
 800466c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466e:	e000      	b.n	8004672 <SD_InitCard+0x172>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3740      	adds	r7, #64	; 0x40
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8004690:	f7fc fd20 	bl	80010d4 <HAL_GetTick>
 8004694:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f001 ffcb 	bl	8006636 <SDMMC_CmdGoIdleState>
 80046a0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <SD_PowerON+0x30>
  {
    return errorstate;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	e0e9      	b.n	8004880 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 ffde 	bl	8006672 <SDMMC_CmdOperCond>
 80046b6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 ffb4 	bl	8006636 <SDMMC_CmdGoIdleState>
 80046ce:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d004      	beq.n	80046e0 <SD_PowerON+0x64>
    {
      return errorstate;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	e0d2      	b.n	8004880 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d137      	bne.n	8004758 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 ffdf 	bl	80066b2 <SDMMC_CmdAppCommand>
 80046f4:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d02d      	beq.n	8004758 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004700:	e0be      	b.n	8004880 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f001 ffd2 	bl	80066b2 <SDMMC_CmdAppCommand>
 800470e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <SD_PowerON+0x9e>
    {
      return errorstate;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	e0b2      	b.n	8004880 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	495a      	ldr	r1, [pc, #360]	; (8004888 <SD_PowerON+0x20c>)
 8004720:	4618      	mov	r0, r3
 8004722:	f001 ffe9 	bl	80066f8 <SDMMC_CmdAppOperCommand>
 8004726:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800472e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004732:	e0a5      	b.n	8004880 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f001 fe69 	bl	8006412 <SDMMC_GetResponse>
 8004740:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	0fdb      	lsrs	r3, r3, #31
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <SD_PowerON+0xd2>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <SD_PowerON+0xd4>
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]

    count++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3301      	adds	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800475e:	4293      	cmp	r3, r2
 8004760:	d802      	bhi.n	8004768 <SD_PowerON+0xec>
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0cc      	beq.n	8004702 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800476e:	4293      	cmp	r3, r2
 8004770:	d902      	bls.n	8004778 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004772:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004776:	e083      	b.n	8004880 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d07d      	beq.n	800487e <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d176      	bne.n	800487e <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d071      	beq.n	800487e <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0208 	orr.w	r2, r2, #8
 80047b0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f002 f8a9 	bl	800690e <SDMMC_CmdVoltageSwitch>
 80047bc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00c      	beq.n	80047de <SD_PowerON+0x162>
        {
          return errorstate;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	e05b      	b.n	8004880 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80047c8:	f7fc fc84 	bl	80010d4 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d102      	bne.n	80047de <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80047d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047dc:	e050      	b.n	8004880 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ec:	d1ec      	bne.n	80047c8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004806:	d002      	beq.n	800480e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8004808:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800480c:	e038      	b.n	8004880 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800480e:	2001      	movs	r0, #1
 8004810:	f7ff fb1a 	bl	8003e48 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0204 	orr.w	r2, r2, #4
 8004822:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8004824:	e00a      	b.n	800483c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004826:	f7fc fc55 	bl	80010d4 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d102      	bne.n	800483c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8004836:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800483a:	e021      	b.n	8004880 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800484a:	d1ec      	bne.n	8004826 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004854:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004864:	d102      	bne.n	800486c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004866:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800486a:	e009      	b.n	8004880 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2213      	movs	r2, #19
 8004872:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f04f 32ff 	mov.w	r2, #4294967295
 800487c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	c1100000 	.word	0xc1100000

0800488c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08c      	sub	sp, #48	; 0x30
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004896:	f7fc fc1d 	bl	80010d4 <HAL_GetTick>
 800489a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 fdb3 	bl	8006412 <SDMMC_GetResponse>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048b6:	d102      	bne.n	80048be <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80048b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048bc:	e0b0      	b.n	8004a20 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2140      	movs	r1, #64	; 0x40
 80048c4:	4618      	mov	r0, r3
 80048c6:	f001 fde3 	bl	8006490 <SDMMC_CmdBlockLength>
 80048ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	e0a0      	b.n	8004a20 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f001 fee1 	bl	80066b2 <SDMMC_CmdAppCommand>
 80048f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	e08d      	b.n	8004a20 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004904:	f04f 33ff 	mov.w	r3, #4294967295
 8004908:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800490a:	2340      	movs	r3, #64	; 0x40
 800490c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800490e:	2360      	movs	r3, #96	; 0x60
 8004910:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004912:	2302      	movs	r3, #2
 8004914:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800491a:	2301      	movs	r3, #1
 800491c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f107 0208 	add.w	r2, r7, #8
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f001 fd85 	bl	8006438 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f001 ffc9 	bl	80068ca <SDMMC_CmdStatusRegister>
 8004938:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d02b      	beq.n	8004998 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	e069      	b.n	8004a20 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d013      	beq.n	8004982 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800495a:	2300      	movs	r3, #0
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800495e:	e00d      	b.n	800497c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f001 fcf1 	bl	800634c <SDMMC_ReadFIFO>
 800496a:	4602      	mov	r2, r0
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	601a      	str	r2, [r3, #0]
        pData++;
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	3304      	adds	r3, #4
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	3301      	adds	r3, #1
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	2b07      	cmp	r3, #7
 8004980:	d9ee      	bls.n	8004960 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004982:	f7fc fba7 	bl	80010d4 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d102      	bne.n	8004998 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004992:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004996:	e043      	b.n	8004a20 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0d2      	beq.n	800494c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80049b4:	2308      	movs	r3, #8
 80049b6:	e033      	b.n	8004a20 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80049c6:	2302      	movs	r3, #2
 80049c8:	e02a      	b.n	8004a20 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d017      	beq.n	8004a08 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80049d8:	2320      	movs	r3, #32
 80049da:	e021      	b.n	8004a20 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 fcb3 	bl	800634c <SDMMC_ReadFIFO>
 80049e6:	4602      	mov	r2, r0
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	601a      	str	r2, [r3, #0]
    pData++;
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	3304      	adds	r3, #4
 80049f0:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80049f2:	f7fc fb6f 	bl	80010d4 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d102      	bne.n	8004a08 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004a02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a06:	e00b      	b.n	8004a20 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e2      	bne.n	80049dc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a03      	ldr	r2, [pc, #12]	; (8004a28 <SD_SendSDStatus+0x19c>)
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3730      	adds	r7, #48	; 0x30
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	18000f3a 	.word	0x18000f3a

08004a2c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004a3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a40:	e018      	b.n	8004a74 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f001 ff18 	bl	8006884 <SDMMC_CmdSendStatus>
 8004a54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	e009      	b.n	8004a74 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2100      	movs	r1, #0
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 fcd3 	bl	8006412 <SDMMC_GetResponse>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2100      	movs	r1, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 fcbd 	bl	8006412 <SDMMC_GetResponse>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aa2:	d102      	bne.n	8004aaa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004aa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aa8:	e02f      	b.n	8004b0a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004aaa:	f107 030c 	add.w	r3, r7, #12
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f879 	bl	8004ba8 <SD_FindSCR>
 8004ab6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	e023      	b.n	8004b0a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01c      	beq.n	8004b06 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad4:	041b      	lsls	r3, r3, #16
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f001 fdea 	bl	80066b2 <SDMMC_CmdAppCommand>
 8004ade:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	e00f      	b.n	8004b0a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2102      	movs	r1, #2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fe21 	bl	8006738 <SDMMC_CmdBusWidth>
 8004af6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	e003      	b.n	8004b0a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e001      	b.n	8004b0a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b086      	sub	sp, #24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 fc72 	bl	8006412 <SDMMC_GetResponse>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b38:	d102      	bne.n	8004b40 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b3e:	e02f      	b.n	8004ba0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b40:	f107 030c 	add.w	r3, r7, #12
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f82e 	bl	8004ba8 <SD_FindSCR>
 8004b4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	e023      	b.n	8004ba0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01c      	beq.n	8004b9c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6a:	041b      	lsls	r3, r3, #16
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f001 fd9f 	bl	80066b2 <SDMMC_CmdAppCommand>
 8004b74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	e00f      	b.n	8004ba0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f001 fdd6 	bl	8006738 <SDMMC_CmdBusWidth>
 8004b8c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	e003      	b.n	8004ba0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e001      	b.n	8004ba0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08e      	sub	sp, #56	; 0x38
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004bb2:	f7fc fa8f 	bl	80010d4 <HAL_GetTick>
 8004bb6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2108      	movs	r1, #8
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 fc5e 	bl	8006490 <SDMMC_CmdBlockLength>
 8004bd4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	e0ad      	b.n	8004d3c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	4619      	mov	r1, r3
 8004bec:	4610      	mov	r0, r2
 8004bee:	f001 fd60 	bl	80066b2 <SDMMC_CmdAppCommand>
 8004bf2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <SD_FindSCR+0x56>
  {
    return errorstate;
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	e09e      	b.n	8004d3c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004c02:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004c04:	2308      	movs	r3, #8
 8004c06:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004c08:	2330      	movs	r3, #48	; 0x30
 8004c0a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004c14:	2301      	movs	r3, #1
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f107 0210 	add.w	r2, r7, #16
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f001 fc08 	bl	8006438 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fda6 	bl	800677e <SDMMC_CmdSendSCR>
 8004c32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d027      	beq.n	8004c8a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	e07e      	b.n	8004d3c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d113      	bne.n	8004c74 <SD_FindSCR+0xcc>
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d110      	bne.n	8004c74 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 fb78 	bl	800634c <SDMMC_ReadFIFO>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 fb71 	bl	800634c <SDMMC_ReadFIFO>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	60fb      	str	r3, [r7, #12]
      index++;
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c70:	3301      	adds	r3, #1
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004c74:	f7fc fa2e 	bl	80010d4 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d102      	bne.n	8004c8a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004c84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c88:	e058      	b.n	8004d3c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c90:	f240 532a 	movw	r3, #1322	; 0x52a
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0d1      	beq.n	8004c3e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2208      	movs	r2, #8
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	e043      	b.n	8004d3c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d005      	beq.n	8004cce <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e036      	b.n	8004d3c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	e029      	b.n	8004d3c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a15      	ldr	r2, [pc, #84]	; (8004d44 <SD_FindSCR+0x19c>)
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	061a      	lsls	r2, r3, #24
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cfc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	0a1b      	lsrs	r3, r3, #8
 8004d02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d06:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	0e1b      	lsrs	r3, r3, #24
 8004d0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	601a      	str	r2, [r3, #0]
    scr++;
 8004d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d14:	3304      	adds	r3, #4
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	061a      	lsls	r2, r3, #24
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d24:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	0a1b      	lsrs	r3, r3, #8
 8004d2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d2e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	0e1b      	lsrs	r3, r3, #24
 8004d34:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3738      	adds	r7, #56	; 0x38
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	18000f3a 	.word	0x18000f3a

08004d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e042      	b.n	8004de0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb ff87 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2224      	movs	r2, #36	; 0x24
 8004d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0201 	bic.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fa54 	bl	8005238 <UART_SetConfig>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e022      	b.n	8004de0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 ffae 	bl	8005d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 f835 	bl	8005e48 <UART_CheckIdleState>
 8004dde:	4603      	mov	r3, r0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	4613      	mov	r3, r2
 8004df6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	f040 8083 	bne.w	8004f0a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_UART_Transmit+0x28>
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e07b      	b.n	8004f0c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Transmit+0x3a>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e074      	b.n	8004f0c <HAL_UART_Transmit+0x124>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2221      	movs	r2, #33	; 0x21
 8004e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004e3a:	f7fc f94b 	bl	80010d4 <HAL_GetTick>
 8004e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e58:	d108      	bne.n	8004e6c <HAL_UART_Transmit+0x84>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d104      	bne.n	8004e6c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e003      	b.n	8004e74 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004e7c:	e02c      	b.n	8004ed8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2200      	movs	r2, #0
 8004e86:	2180      	movs	r1, #128	; 0x80
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f001 f825 	bl	8005ed8 <UART_WaitOnFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e039      	b.n	8004f0c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10b      	bne.n	8004eb6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	e007      	b.n	8004ec6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	781a      	ldrb	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1cc      	bne.n	8004e7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2200      	movs	r2, #0
 8004eec:	2140      	movs	r1, #64	; 0x40
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fff2 	bl	8005ed8 <UART_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e006      	b.n	8004f0c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e000      	b.n	8004f0c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
  }
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3720      	adds	r7, #32
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d118      	bne.n	8004f76 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d013      	beq.n	8004f76 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8144 	beq.w	80051f4 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
      }
      return;
 8004f74:	e13e      	b.n	80051f4 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 80e8 	beq.w	800514e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4ba0      	ldr	r3, [pc, #640]	; (8005204 <HAL_UART_IRQHandler+0x2f0>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d105      	bne.n	8004f94 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4b9f      	ldr	r3, [pc, #636]	; (8005208 <HAL_UART_IRQHandler+0x2f4>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 80dd 	beq.w	800514e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d010      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xac>
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <HAL_UART_IRQHandler+0xd8>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00b      	beq.n	8004fec <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f043 0204 	orr.w	r2, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d010      	beq.n	8005018 <HAL_UART_IRQHandler+0x104>
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00b      	beq.n	8005018 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2204      	movs	r2, #4
 8005006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f043 0202 	orr.w	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d015      	beq.n	800504e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d104      	bne.n	8005036 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4b75      	ldr	r3, [pc, #468]	; (8005204 <HAL_UART_IRQHandler+0x2f0>)
 8005030:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2208      	movs	r2, #8
 800503c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	f043 0208 	orr.w	r2, r3, #8
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005054:	2b00      	cmp	r3, #0
 8005056:	d011      	beq.n	800507c <HAL_UART_IRQHandler+0x168>
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00c      	beq.n	800507c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800506a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 80b8 	beq.w	80051f8 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d011      	beq.n	80050b6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d104      	bne.n	80050a6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050bc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d004      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d031      	beq.n	800513a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 ff7e 	bl	8005fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d123      	bne.n	8005132 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d013      	beq.n	800512a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005106:	4a41      	ldr	r2, [pc, #260]	; (800520c <HAL_UART_IRQHandler+0x2f8>)
 8005108:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800510e:	4618      	mov	r0, r3
 8005110:	f7fc f92c 	bl	800136c <HAL_DMA_Abort_IT>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d017      	beq.n	800514a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800511e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005124:	4610      	mov	r0, r2
 8005126:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005128:	e00f      	b.n	800514a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f87a 	bl	8005224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005130:	e00b      	b.n	800514a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f876 	bl	8005224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	e007      	b.n	800514a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f872 	bl	8005224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005148:	e056      	b.n	80051f8 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514a:	bf00      	nop
    return;
 800514c:	e054      	b.n	80051f8 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00d      	beq.n	8005174 <HAL_UART_IRQHandler+0x260>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800516a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 ff87 	bl	8006080 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005172:	e044      	b.n	80051fe <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517a:	2b00      	cmp	r3, #0
 800517c:	d012      	beq.n	80051a4 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	2b00      	cmp	r3, #0
 8005198:	d030      	beq.n	80051fc <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
    }
    return;
 80051a2:	e02b      	b.n	80051fc <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_UART_IRQHandler+0x2ac>
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 ff47 	bl	800604c <UART_EndTransmit_IT>
    return;
 80051be:	e01e      	b.n	80051fe <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_UART_IRQHandler+0x2c8>
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 ff67 	bl	80060a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051da:	e010      	b.n	80051fe <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00b      	beq.n	80051fe <HAL_UART_IRQHandler+0x2ea>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	da08      	bge.n	80051fe <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 ff51 	bl	8006094 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051f2:	e004      	b.n	80051fe <HAL_UART_IRQHandler+0x2ea>
      return;
 80051f4:	bf00      	nop
 80051f6:	e002      	b.n	80051fe <HAL_UART_IRQHandler+0x2ea>
    return;
 80051f8:	bf00      	nop
 80051fa:	e000      	b.n	80051fe <HAL_UART_IRQHandler+0x2ea>
    return;
 80051fc:	bf00      	nop
  }
}
 80051fe:	3720      	adds	r7, #32
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	10000001 	.word	0x10000001
 8005208:	04000120 	.word	0x04000120
 800520c:	08006021 	.word	0x08006021

08005210 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005238:	b5b0      	push	{r4, r5, r7, lr}
 800523a:	b08e      	sub	sp, #56	; 0x38
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	4313      	orrs	r3, r2
 800525c:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005264:	4313      	orrs	r3, r2
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4bc0      	ldr	r3, [pc, #768]	; (8005570 <UART_SetConfig+0x338>)
 8005270:	4013      	ands	r3, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6812      	ldr	r2, [r2, #0]
 8005276:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005278:	430b      	orrs	r3, r1
 800527a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4ab5      	ldr	r2, [pc, #724]	; (8005574 <UART_SetConfig+0x33c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a8:	4313      	orrs	r3, r2
 80052aa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	4bb1      	ldr	r3, [pc, #708]	; (8005578 <UART_SetConfig+0x340>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052bc:	430b      	orrs	r3, r1
 80052be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	f023 010f 	bic.w	r1, r3, #15
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4aa8      	ldr	r2, [pc, #672]	; (800557c <UART_SetConfig+0x344>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d177      	bne.n	80053d0 <UART_SetConfig+0x198>
 80052e0:	4ba7      	ldr	r3, [pc, #668]	; (8005580 <UART_SetConfig+0x348>)
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052e8:	2b28      	cmp	r3, #40	; 0x28
 80052ea:	d86d      	bhi.n	80053c8 <UART_SetConfig+0x190>
 80052ec:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <UART_SetConfig+0xbc>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005399 	.word	0x08005399
 80052f8:	080053c9 	.word	0x080053c9
 80052fc:	080053c9 	.word	0x080053c9
 8005300:	080053c9 	.word	0x080053c9
 8005304:	080053c9 	.word	0x080053c9
 8005308:	080053c9 	.word	0x080053c9
 800530c:	080053c9 	.word	0x080053c9
 8005310:	080053c9 	.word	0x080053c9
 8005314:	080053a1 	.word	0x080053a1
 8005318:	080053c9 	.word	0x080053c9
 800531c:	080053c9 	.word	0x080053c9
 8005320:	080053c9 	.word	0x080053c9
 8005324:	080053c9 	.word	0x080053c9
 8005328:	080053c9 	.word	0x080053c9
 800532c:	080053c9 	.word	0x080053c9
 8005330:	080053c9 	.word	0x080053c9
 8005334:	080053a9 	.word	0x080053a9
 8005338:	080053c9 	.word	0x080053c9
 800533c:	080053c9 	.word	0x080053c9
 8005340:	080053c9 	.word	0x080053c9
 8005344:	080053c9 	.word	0x080053c9
 8005348:	080053c9 	.word	0x080053c9
 800534c:	080053c9 	.word	0x080053c9
 8005350:	080053c9 	.word	0x080053c9
 8005354:	080053b1 	.word	0x080053b1
 8005358:	080053c9 	.word	0x080053c9
 800535c:	080053c9 	.word	0x080053c9
 8005360:	080053c9 	.word	0x080053c9
 8005364:	080053c9 	.word	0x080053c9
 8005368:	080053c9 	.word	0x080053c9
 800536c:	080053c9 	.word	0x080053c9
 8005370:	080053c9 	.word	0x080053c9
 8005374:	080053b9 	.word	0x080053b9
 8005378:	080053c9 	.word	0x080053c9
 800537c:	080053c9 	.word	0x080053c9
 8005380:	080053c9 	.word	0x080053c9
 8005384:	080053c9 	.word	0x080053c9
 8005388:	080053c9 	.word	0x080053c9
 800538c:	080053c9 	.word	0x080053c9
 8005390:	080053c9 	.word	0x080053c9
 8005394:	080053c1 	.word	0x080053c1
 8005398:	2301      	movs	r3, #1
 800539a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539e:	e222      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80053a0:	2304      	movs	r3, #4
 80053a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a6:	e21e      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80053a8:	2308      	movs	r3, #8
 80053aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ae:	e21a      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80053b0:	2310      	movs	r3, #16
 80053b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b6:	e216      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80053b8:	2320      	movs	r3, #32
 80053ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053be:	e212      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80053c0:	2340      	movs	r3, #64	; 0x40
 80053c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c6:	e20e      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80053c8:	2380      	movs	r3, #128	; 0x80
 80053ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ce:	e20a      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a6b      	ldr	r2, [pc, #428]	; (8005584 <UART_SetConfig+0x34c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d130      	bne.n	800543c <UART_SetConfig+0x204>
 80053da:	4b69      	ldr	r3, [pc, #420]	; (8005580 <UART_SetConfig+0x348>)
 80053dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b05      	cmp	r3, #5
 80053e4:	d826      	bhi.n	8005434 <UART_SetConfig+0x1fc>
 80053e6:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <UART_SetConfig+0x1b4>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005405 	.word	0x08005405
 80053f0:	0800540d 	.word	0x0800540d
 80053f4:	08005415 	.word	0x08005415
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	08005425 	.word	0x08005425
 8005400:	0800542d 	.word	0x0800542d
 8005404:	2300      	movs	r3, #0
 8005406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540a:	e1ec      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005412:	e1e8      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541a:	e1e4      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e1e0      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005424:	2320      	movs	r3, #32
 8005426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542a:	e1dc      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800542c:	2340      	movs	r3, #64	; 0x40
 800542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005432:	e1d8      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543a:	e1d4      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a51      	ldr	r2, [pc, #324]	; (8005588 <UART_SetConfig+0x350>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d130      	bne.n	80054a8 <UART_SetConfig+0x270>
 8005446:	4b4e      	ldr	r3, [pc, #312]	; (8005580 <UART_SetConfig+0x348>)
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	2b05      	cmp	r3, #5
 8005450:	d826      	bhi.n	80054a0 <UART_SetConfig+0x268>
 8005452:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <UART_SetConfig+0x220>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	08005471 	.word	0x08005471
 800545c:	08005479 	.word	0x08005479
 8005460:	08005481 	.word	0x08005481
 8005464:	08005489 	.word	0x08005489
 8005468:	08005491 	.word	0x08005491
 800546c:	08005499 	.word	0x08005499
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005476:	e1b6      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005478:	2304      	movs	r3, #4
 800547a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800547e:	e1b2      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005480:	2308      	movs	r3, #8
 8005482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005486:	e1ae      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005488:	2310      	movs	r3, #16
 800548a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548e:	e1aa      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005490:	2320      	movs	r3, #32
 8005492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005496:	e1a6      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005498:	2340      	movs	r3, #64	; 0x40
 800549a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800549e:	e1a2      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054a6:	e19e      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a37      	ldr	r2, [pc, #220]	; (800558c <UART_SetConfig+0x354>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d130      	bne.n	8005514 <UART_SetConfig+0x2dc>
 80054b2:	4b33      	ldr	r3, [pc, #204]	; (8005580 <UART_SetConfig+0x348>)
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	d826      	bhi.n	800550c <UART_SetConfig+0x2d4>
 80054be:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <UART_SetConfig+0x28c>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054dd 	.word	0x080054dd
 80054c8:	080054e5 	.word	0x080054e5
 80054cc:	080054ed 	.word	0x080054ed
 80054d0:	080054f5 	.word	0x080054f5
 80054d4:	080054fd 	.word	0x080054fd
 80054d8:	08005505 	.word	0x08005505
 80054dc:	2300      	movs	r3, #0
 80054de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054e2:	e180      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80054e4:	2304      	movs	r3, #4
 80054e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ea:	e17c      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80054ec:	2308      	movs	r3, #8
 80054ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054f2:	e178      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80054f4:	2310      	movs	r3, #16
 80054f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fa:	e174      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80054fc:	2320      	movs	r3, #32
 80054fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005502:	e170      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005504:	2340      	movs	r3, #64	; 0x40
 8005506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550a:	e16c      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005512:	e168      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <UART_SetConfig+0x358>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d142      	bne.n	80055a4 <UART_SetConfig+0x36c>
 800551e:	4b18      	ldr	r3, [pc, #96]	; (8005580 <UART_SetConfig+0x348>)
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	2b05      	cmp	r3, #5
 8005528:	d838      	bhi.n	800559c <UART_SetConfig+0x364>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <UART_SetConfig+0x2f8>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005549 	.word	0x08005549
 8005534:	08005551 	.word	0x08005551
 8005538:	08005559 	.word	0x08005559
 800553c:	08005561 	.word	0x08005561
 8005540:	08005569 	.word	0x08005569
 8005544:	08005595 	.word	0x08005595
 8005548:	2300      	movs	r3, #0
 800554a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554e:	e14a      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005550:	2304      	movs	r3, #4
 8005552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005556:	e146      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005558:	2308      	movs	r3, #8
 800555a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555e:	e142      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005560:	2310      	movs	r3, #16
 8005562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005566:	e13e      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005568:	2320      	movs	r3, #32
 800556a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556e:	e13a      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005570:	cfff69f3 	.word	0xcfff69f3
 8005574:	58000c00 	.word	0x58000c00
 8005578:	11fff4ff 	.word	0x11fff4ff
 800557c:	40011000 	.word	0x40011000
 8005580:	58024400 	.word	0x58024400
 8005584:	40004400 	.word	0x40004400
 8005588:	40004800 	.word	0x40004800
 800558c:	40004c00 	.word	0x40004c00
 8005590:	40005000 	.word	0x40005000
 8005594:	2340      	movs	r3, #64	; 0x40
 8005596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559a:	e124      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800559c:	2380      	movs	r3, #128	; 0x80
 800559e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a2:	e120      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4acc      	ldr	r2, [pc, #816]	; (80058dc <UART_SetConfig+0x6a4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d176      	bne.n	800569c <UART_SetConfig+0x464>
 80055ae:	4bcc      	ldr	r3, [pc, #816]	; (80058e0 <UART_SetConfig+0x6a8>)
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055b6:	2b28      	cmp	r3, #40	; 0x28
 80055b8:	d86c      	bhi.n	8005694 <UART_SetConfig+0x45c>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <UART_SetConfig+0x388>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	08005665 	.word	0x08005665
 80055c4:	08005695 	.word	0x08005695
 80055c8:	08005695 	.word	0x08005695
 80055cc:	08005695 	.word	0x08005695
 80055d0:	08005695 	.word	0x08005695
 80055d4:	08005695 	.word	0x08005695
 80055d8:	08005695 	.word	0x08005695
 80055dc:	08005695 	.word	0x08005695
 80055e0:	0800566d 	.word	0x0800566d
 80055e4:	08005695 	.word	0x08005695
 80055e8:	08005695 	.word	0x08005695
 80055ec:	08005695 	.word	0x08005695
 80055f0:	08005695 	.word	0x08005695
 80055f4:	08005695 	.word	0x08005695
 80055f8:	08005695 	.word	0x08005695
 80055fc:	08005695 	.word	0x08005695
 8005600:	08005675 	.word	0x08005675
 8005604:	08005695 	.word	0x08005695
 8005608:	08005695 	.word	0x08005695
 800560c:	08005695 	.word	0x08005695
 8005610:	08005695 	.word	0x08005695
 8005614:	08005695 	.word	0x08005695
 8005618:	08005695 	.word	0x08005695
 800561c:	08005695 	.word	0x08005695
 8005620:	0800567d 	.word	0x0800567d
 8005624:	08005695 	.word	0x08005695
 8005628:	08005695 	.word	0x08005695
 800562c:	08005695 	.word	0x08005695
 8005630:	08005695 	.word	0x08005695
 8005634:	08005695 	.word	0x08005695
 8005638:	08005695 	.word	0x08005695
 800563c:	08005695 	.word	0x08005695
 8005640:	08005685 	.word	0x08005685
 8005644:	08005695 	.word	0x08005695
 8005648:	08005695 	.word	0x08005695
 800564c:	08005695 	.word	0x08005695
 8005650:	08005695 	.word	0x08005695
 8005654:	08005695 	.word	0x08005695
 8005658:	08005695 	.word	0x08005695
 800565c:	08005695 	.word	0x08005695
 8005660:	0800568d 	.word	0x0800568d
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566a:	e0bc      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005672:	e0b8      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567a:	e0b4      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005682:	e0b0      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005684:	2320      	movs	r3, #32
 8005686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568a:	e0ac      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800568c:	2340      	movs	r3, #64	; 0x40
 800568e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005692:	e0a8      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800569a:	e0a4      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a90      	ldr	r2, [pc, #576]	; (80058e4 <UART_SetConfig+0x6ac>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d130      	bne.n	8005708 <UART_SetConfig+0x4d0>
 80056a6:	4b8e      	ldr	r3, [pc, #568]	; (80058e0 <UART_SetConfig+0x6a8>)
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	d826      	bhi.n	8005700 <UART_SetConfig+0x4c8>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <UART_SetConfig+0x480>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056d1 	.word	0x080056d1
 80056bc:	080056d9 	.word	0x080056d9
 80056c0:	080056e1 	.word	0x080056e1
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d6:	e086      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80056d8:	2304      	movs	r3, #4
 80056da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056de:	e082      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80056e0:	2308      	movs	r3, #8
 80056e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056e6:	e07e      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ee:	e07a      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80056f0:	2320      	movs	r3, #32
 80056f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f6:	e076      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80056f8:	2340      	movs	r3, #64	; 0x40
 80056fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056fe:	e072      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005706:	e06e      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a76      	ldr	r2, [pc, #472]	; (80058e8 <UART_SetConfig+0x6b0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d130      	bne.n	8005774 <UART_SetConfig+0x53c>
 8005712:	4b73      	ldr	r3, [pc, #460]	; (80058e0 <UART_SetConfig+0x6a8>)
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	2b05      	cmp	r3, #5
 800571c:	d826      	bhi.n	800576c <UART_SetConfig+0x534>
 800571e:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <UART_SetConfig+0x4ec>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	0800573d 	.word	0x0800573d
 8005728:	08005745 	.word	0x08005745
 800572c:	0800574d 	.word	0x0800574d
 8005730:	08005755 	.word	0x08005755
 8005734:	0800575d 	.word	0x0800575d
 8005738:	08005765 	.word	0x08005765
 800573c:	2300      	movs	r3, #0
 800573e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005742:	e050      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005744:	2304      	movs	r3, #4
 8005746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574a:	e04c      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800574c:	2308      	movs	r3, #8
 800574e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005752:	e048      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005754:	2310      	movs	r3, #16
 8005756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800575a:	e044      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800575c:	2320      	movs	r3, #32
 800575e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005762:	e040      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005764:	2340      	movs	r3, #64	; 0x40
 8005766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800576a:	e03c      	b.n	80057e6 <UART_SetConfig+0x5ae>
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005772:	e038      	b.n	80057e6 <UART_SetConfig+0x5ae>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a5c      	ldr	r2, [pc, #368]	; (80058ec <UART_SetConfig+0x6b4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d130      	bne.n	80057e0 <UART_SetConfig+0x5a8>
 800577e:	4b58      	ldr	r3, [pc, #352]	; (80058e0 <UART_SetConfig+0x6a8>)
 8005780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	2b05      	cmp	r3, #5
 8005788:	d826      	bhi.n	80057d8 <UART_SetConfig+0x5a0>
 800578a:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <UART_SetConfig+0x558>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	080057a9 	.word	0x080057a9
 8005794:	080057b1 	.word	0x080057b1
 8005798:	080057b9 	.word	0x080057b9
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057c9 	.word	0x080057c9
 80057a4:	080057d1 	.word	0x080057d1
 80057a8:	2302      	movs	r3, #2
 80057aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ae:	e01a      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80057b0:	2304      	movs	r3, #4
 80057b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b6:	e016      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80057b8:	2308      	movs	r3, #8
 80057ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057be:	e012      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80057c0:	2310      	movs	r3, #16
 80057c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057c6:	e00e      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80057c8:	2320      	movs	r3, #32
 80057ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ce:	e00a      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80057d0:	2340      	movs	r3, #64	; 0x40
 80057d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d6:	e006      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057de:	e002      	b.n	80057e6 <UART_SetConfig+0x5ae>
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a40      	ldr	r2, [pc, #256]	; (80058ec <UART_SetConfig+0x6b4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	f040 80ef 	bne.w	80059d0 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	dc46      	bgt.n	8005888 <UART_SetConfig+0x650>
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	f2c0 8081 	blt.w	8005902 <UART_SetConfig+0x6ca>
 8005800:	3b02      	subs	r3, #2
 8005802:	2b1e      	cmp	r3, #30
 8005804:	d87d      	bhi.n	8005902 <UART_SetConfig+0x6ca>
 8005806:	a201      	add	r2, pc, #4	; (adr r2, 800580c <UART_SetConfig+0x5d4>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	0800588f 	.word	0x0800588f
 8005810:	08005903 	.word	0x08005903
 8005814:	08005897 	.word	0x08005897
 8005818:	08005903 	.word	0x08005903
 800581c:	08005903 	.word	0x08005903
 8005820:	08005903 	.word	0x08005903
 8005824:	080058a7 	.word	0x080058a7
 8005828:	08005903 	.word	0x08005903
 800582c:	08005903 	.word	0x08005903
 8005830:	08005903 	.word	0x08005903
 8005834:	08005903 	.word	0x08005903
 8005838:	08005903 	.word	0x08005903
 800583c:	08005903 	.word	0x08005903
 8005840:	08005903 	.word	0x08005903
 8005844:	080058b7 	.word	0x080058b7
 8005848:	08005903 	.word	0x08005903
 800584c:	08005903 	.word	0x08005903
 8005850:	08005903 	.word	0x08005903
 8005854:	08005903 	.word	0x08005903
 8005858:	08005903 	.word	0x08005903
 800585c:	08005903 	.word	0x08005903
 8005860:	08005903 	.word	0x08005903
 8005864:	08005903 	.word	0x08005903
 8005868:	08005903 	.word	0x08005903
 800586c:	08005903 	.word	0x08005903
 8005870:	08005903 	.word	0x08005903
 8005874:	08005903 	.word	0x08005903
 8005878:	08005903 	.word	0x08005903
 800587c:	08005903 	.word	0x08005903
 8005880:	08005903 	.word	0x08005903
 8005884:	080058f5 	.word	0x080058f5
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d036      	beq.n	80058fa <UART_SetConfig+0x6c2>
 800588c:	e039      	b.n	8005902 <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800588e:	f7fd fc57 	bl	8003140 <HAL_RCCEx_GetD3PCLK1Freq>
 8005892:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005894:	e03b      	b.n	800590e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005896:	f107 0314 	add.w	r3, r7, #20
 800589a:	4618      	mov	r0, r3
 800589c:	f7fd fc66 	bl	800316c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058a4:	e033      	b.n	800590e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058a6:	f107 0308 	add.w	r3, r7, #8
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fd fdb2 	bl	8003414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058b4:	e02b      	b.n	800590e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058b6:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <UART_SetConfig+0x6a8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058c2:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <UART_SetConfig+0x6a8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	08db      	lsrs	r3, r3, #3
 80058c8:	f003 0303 	and.w	r3, r3, #3
 80058cc:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <UART_SetConfig+0x6b8>)
 80058ce:	fa22 f303 	lsr.w	r3, r2, r3
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058d4:	e01b      	b.n	800590e <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <UART_SetConfig+0x6b8>)
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058da:	e018      	b.n	800590e <UART_SetConfig+0x6d6>
 80058dc:	40011400 	.word	0x40011400
 80058e0:	58024400 	.word	0x58024400
 80058e4:	40007800 	.word	0x40007800
 80058e8:	40007c00 	.word	0x40007c00
 80058ec:	58000c00 	.word	0x58000c00
 80058f0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058f4:	4bc4      	ldr	r3, [pc, #784]	; (8005c08 <UART_SetConfig+0x9d0>)
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058f8:	e009      	b.n	800590e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005900:	e005      	b.n	800590e <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800590c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 81da 	beq.w	8005cca <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	4abc      	ldr	r2, [pc, #752]	; (8005c0c <UART_SetConfig+0x9d4>)
 800591c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005920:	461a      	mov	r2, r3
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	fbb3 f3f2 	udiv	r3, r3, r2
 8005928:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	4413      	add	r3, r2
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	429a      	cmp	r2, r3
 8005938:	d305      	bcc.n	8005946 <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005940:	6a3a      	ldr	r2, [r7, #32]
 8005942:	429a      	cmp	r2, r3
 8005944:	d903      	bls.n	800594e <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800594c:	e1bd      	b.n	8005cca <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	4618      	mov	r0, r3
 8005952:	f04f 0100 	mov.w	r1, #0
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	4aac      	ldr	r2, [pc, #688]	; (8005c0c <UART_SetConfig+0x9d4>)
 800595c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005960:	b29a      	uxth	r2, r3
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	f7fa fcb7 	bl	80002d8 <__aeabi_uldivmod>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4610      	mov	r0, r2
 8005970:	4619      	mov	r1, r3
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	020b      	lsls	r3, r1, #8
 800597c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005980:	0202      	lsls	r2, r0, #8
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	6849      	ldr	r1, [r1, #4]
 8005986:	0849      	lsrs	r1, r1, #1
 8005988:	4608      	mov	r0, r1
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	1814      	adds	r4, r2, r0
 8005990:	eb43 0501 	adc.w	r5, r3, r1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	461a      	mov	r2, r3
 800599a:	f04f 0300 	mov.w	r3, #0
 800599e:	4620      	mov	r0, r4
 80059a0:	4629      	mov	r1, r5
 80059a2:	f7fa fc99 	bl	80002d8 <__aeabi_uldivmod>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4613      	mov	r3, r2
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059b4:	d308      	bcc.n	80059c8 <UART_SetConfig+0x790>
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059bc:	d204      	bcs.n	80059c8 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	e180      	b.n	8005cca <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80059ce:	e17c      	b.n	8005cca <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d8:	f040 80bf 	bne.w	8005b5a <UART_SetConfig+0x922>
  {
    switch (clocksource)
 80059dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	dc49      	bgt.n	8005a78 <UART_SetConfig+0x840>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	db7c      	blt.n	8005ae2 <UART_SetConfig+0x8aa>
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d87a      	bhi.n	8005ae2 <UART_SetConfig+0x8aa>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0x7bc>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a7f 	.word	0x08005a7f
 80059f8:	08005a87 	.word	0x08005a87
 80059fc:	08005ae3 	.word	0x08005ae3
 8005a00:	08005ae3 	.word	0x08005ae3
 8005a04:	08005a8f 	.word	0x08005a8f
 8005a08:	08005ae3 	.word	0x08005ae3
 8005a0c:	08005ae3 	.word	0x08005ae3
 8005a10:	08005ae3 	.word	0x08005ae3
 8005a14:	08005a9f 	.word	0x08005a9f
 8005a18:	08005ae3 	.word	0x08005ae3
 8005a1c:	08005ae3 	.word	0x08005ae3
 8005a20:	08005ae3 	.word	0x08005ae3
 8005a24:	08005ae3 	.word	0x08005ae3
 8005a28:	08005ae3 	.word	0x08005ae3
 8005a2c:	08005ae3 	.word	0x08005ae3
 8005a30:	08005ae3 	.word	0x08005ae3
 8005a34:	08005aaf 	.word	0x08005aaf
 8005a38:	08005ae3 	.word	0x08005ae3
 8005a3c:	08005ae3 	.word	0x08005ae3
 8005a40:	08005ae3 	.word	0x08005ae3
 8005a44:	08005ae3 	.word	0x08005ae3
 8005a48:	08005ae3 	.word	0x08005ae3
 8005a4c:	08005ae3 	.word	0x08005ae3
 8005a50:	08005ae3 	.word	0x08005ae3
 8005a54:	08005ae3 	.word	0x08005ae3
 8005a58:	08005ae3 	.word	0x08005ae3
 8005a5c:	08005ae3 	.word	0x08005ae3
 8005a60:	08005ae3 	.word	0x08005ae3
 8005a64:	08005ae3 	.word	0x08005ae3
 8005a68:	08005ae3 	.word	0x08005ae3
 8005a6c:	08005ae3 	.word	0x08005ae3
 8005a70:	08005ae3 	.word	0x08005ae3
 8005a74:	08005ad5 	.word	0x08005ad5
 8005a78:	2b40      	cmp	r3, #64	; 0x40
 8005a7a:	d02e      	beq.n	8005ada <UART_SetConfig+0x8a2>
 8005a7c:	e031      	b.n	8005ae2 <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a7e:	f7fd f87b 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8005a82:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a84:	e033      	b.n	8005aee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a86:	f7fd f88d 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8005a8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a8c:	e02f      	b.n	8005aee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a8e:	f107 0314 	add.w	r3, r7, #20
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fd fb6a 	bl	800316c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a9c:	e027      	b.n	8005aee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a9e:	f107 0308 	add.w	r3, r7, #8
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fd fcb6 	bl	8003414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005aac:	e01f      	b.n	8005aee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aae:	4b58      	ldr	r3, [pc, #352]	; (8005c10 <UART_SetConfig+0x9d8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005aba:	4b55      	ldr	r3, [pc, #340]	; (8005c10 <UART_SetConfig+0x9d8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	08db      	lsrs	r3, r3, #3
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	4a53      	ldr	r2, [pc, #332]	; (8005c14 <UART_SetConfig+0x9dc>)
 8005ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005acc:	e00f      	b.n	8005aee <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 8005ace:	4b51      	ldr	r3, [pc, #324]	; (8005c14 <UART_SetConfig+0x9dc>)
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ad2:	e00c      	b.n	8005aee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ad4:	4b4c      	ldr	r3, [pc, #304]	; (8005c08 <UART_SetConfig+0x9d0>)
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ad8:	e009      	b.n	8005aee <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ae0:	e005      	b.n	8005aee <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005aec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80ea 	beq.w	8005cca <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	4a44      	ldr	r2, [pc, #272]	; (8005c0c <UART_SetConfig+0x9d4>)
 8005afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b00:	461a      	mov	r2, r3
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b08:	005a      	lsls	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	085b      	lsrs	r3, r3, #1
 8005b10:	441a      	add	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	2b0f      	cmp	r3, #15
 8005b22:	d916      	bls.n	8005b52 <UART_SetConfig+0x91a>
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2a:	d212      	bcs.n	8005b52 <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f023 030f 	bic.w	r3, r3, #15
 8005b34:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	085b      	lsrs	r3, r3, #1
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b44:	4313      	orrs	r3, r2
 8005b46:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b4e:	60da      	str	r2, [r3, #12]
 8005b50:	e0bb      	b.n	8005cca <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005b58:	e0b7      	b.n	8005cca <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	dc4a      	bgt.n	8005bf8 <UART_SetConfig+0x9c0>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f2c0 8086 	blt.w	8005c74 <UART_SetConfig+0xa3c>
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	f200 8083 	bhi.w	8005c74 <UART_SetConfig+0xa3c>
 8005b6e:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <UART_SetConfig+0x93c>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005bff 	.word	0x08005bff
 8005b78:	08005c19 	.word	0x08005c19
 8005b7c:	08005c75 	.word	0x08005c75
 8005b80:	08005c75 	.word	0x08005c75
 8005b84:	08005c21 	.word	0x08005c21
 8005b88:	08005c75 	.word	0x08005c75
 8005b8c:	08005c75 	.word	0x08005c75
 8005b90:	08005c75 	.word	0x08005c75
 8005b94:	08005c31 	.word	0x08005c31
 8005b98:	08005c75 	.word	0x08005c75
 8005b9c:	08005c75 	.word	0x08005c75
 8005ba0:	08005c75 	.word	0x08005c75
 8005ba4:	08005c75 	.word	0x08005c75
 8005ba8:	08005c75 	.word	0x08005c75
 8005bac:	08005c75 	.word	0x08005c75
 8005bb0:	08005c75 	.word	0x08005c75
 8005bb4:	08005c41 	.word	0x08005c41
 8005bb8:	08005c75 	.word	0x08005c75
 8005bbc:	08005c75 	.word	0x08005c75
 8005bc0:	08005c75 	.word	0x08005c75
 8005bc4:	08005c75 	.word	0x08005c75
 8005bc8:	08005c75 	.word	0x08005c75
 8005bcc:	08005c75 	.word	0x08005c75
 8005bd0:	08005c75 	.word	0x08005c75
 8005bd4:	08005c75 	.word	0x08005c75
 8005bd8:	08005c75 	.word	0x08005c75
 8005bdc:	08005c75 	.word	0x08005c75
 8005be0:	08005c75 	.word	0x08005c75
 8005be4:	08005c75 	.word	0x08005c75
 8005be8:	08005c75 	.word	0x08005c75
 8005bec:	08005c75 	.word	0x08005c75
 8005bf0:	08005c75 	.word	0x08005c75
 8005bf4:	08005c67 	.word	0x08005c67
 8005bf8:	2b40      	cmp	r3, #64	; 0x40
 8005bfa:	d037      	beq.n	8005c6c <UART_SetConfig+0xa34>
 8005bfc:	e03a      	b.n	8005c74 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bfe:	f7fc ffbb 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8005c02:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c04:	e03c      	b.n	8005c80 <UART_SetConfig+0xa48>
 8005c06:	bf00      	nop
 8005c08:	003d0900 	.word	0x003d0900
 8005c0c:	08007d14 	.word	0x08007d14
 8005c10:	58024400 	.word	0x58024400
 8005c14:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c18:	f7fc ffc4 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8005c1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c1e:	e02f      	b.n	8005c80 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c20:	f107 0314 	add.w	r3, r7, #20
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fd faa1 	bl	800316c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c2e:	e027      	b.n	8005c80 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c30:	f107 0308 	add.w	r3, r7, #8
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fd fbed 	bl	8003414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c3e:	e01f      	b.n	8005c80 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c40:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <UART_SetConfig+0xabc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c4c:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <UART_SetConfig+0xabc>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	08db      	lsrs	r3, r3, #3
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	4a28      	ldr	r2, [pc, #160]	; (8005cf8 <UART_SetConfig+0xac0>)
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c5e:	e00f      	b.n	8005c80 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8005c60:	4b25      	ldr	r3, [pc, #148]	; (8005cf8 <UART_SetConfig+0xac0>)
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c64:	e00c      	b.n	8005c80 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c66:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <UART_SetConfig+0xac4>)
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c6a:	e009      	b.n	8005c80 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c72:	e005      	b.n	8005c80 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005c7e:	bf00      	nop
    }

    if (pclk != 0U)
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d021      	beq.n	8005cca <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	; (8005d00 <UART_SetConfig+0xac8>)
 8005c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c90:	461a      	mov	r2, r3
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	085b      	lsrs	r3, r3, #1
 8005c9e:	441a      	add	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	2b0f      	cmp	r3, #15
 8005cb0:	d908      	bls.n	8005cc4 <UART_SetConfig+0xa8c>
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb8:	d204      	bcs.n	8005cc4 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	e002      	b.n	8005cca <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005ce6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3738      	adds	r7, #56	; 0x38
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	58024400 	.word	0x58024400
 8005cf8:	03d09000 	.word	0x03d09000
 8005cfc:	003d0900 	.word	0x003d0900
 8005d00:	08007d14 	.word	0x08007d14

08005d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00a      	beq.n	8005db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01a      	beq.n	8005e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e02:	d10a      	bne.n	8005e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	605a      	str	r2, [r3, #4]
  }
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005e58:	f7fb f93c 	bl	80010d4 <HAL_GetTick>
 8005e5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d10e      	bne.n	8005e8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f82c 	bl	8005ed8 <UART_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e022      	b.n	8005ed0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d10e      	bne.n	8005eb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f816 	bl	8005ed8 <UART_WaitOnFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e00c      	b.n	8005ed0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee8:	e062      	b.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d05e      	beq.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef2:	f7fb f8ef 	bl	80010d4 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d302      	bcc.n	8005f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d11d      	bne.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f16:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0201 	bic.w	r2, r2, #1
 8005f26:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e045      	b.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d02e      	beq.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f60:	d126      	bne.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f6a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e00f      	b.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	bf0c      	ite	eq
 8005fc0:	2301      	moveq	r3, #1
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d08d      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6899      	ldr	r1, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b08      	ldr	r3, [pc, #32]	; (800601c <UART_EndRxTransfer+0x44>)
 8005ffc:	400b      	ands	r3, r1
 8005ffe:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	effffffe 	.word	0xeffffffe

08006020 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff f8f0 	bl	8005224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006062:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff f8cc 	bl	8005210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e027      	b.n	8006122 <HAL_UARTEx_DisableFifoMode+0x66>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2224      	movs	r2, #36	; 0x24
 80060de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006142:	2302      	movs	r3, #2
 8006144:	e02d      	b.n	80061a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2224      	movs	r2, #36	; 0x24
 8006152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f850 	bl	8006228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061be:	2302      	movs	r3, #2
 80061c0:	e02d      	b.n	800621e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2224      	movs	r2, #36	; 0x24
 80061ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f812 	bl	8006228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b089      	sub	sp, #36	; 0x24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006230:	4a2f      	ldr	r2, [pc, #188]	; (80062f0 <UARTEx_SetNbDataToProcess+0xc8>)
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	e892 0003 	ldmia.w	r2, {r0, r1}
 800623a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800623e:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <UARTEx_SetNbDataToProcess+0xcc>)
 8006240:	f107 030c 	add.w	r3, r7, #12
 8006244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006248:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006250:	2b00      	cmp	r3, #0
 8006252:	d108      	bne.n	8006266 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006264:	e03d      	b.n	80062e2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006266:	2310      	movs	r3, #16
 8006268:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800626a:	2310      	movs	r3, #16
 800626c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	0e5b      	lsrs	r3, r3, #25
 8006276:	b2db      	uxtb	r3, r3
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	0f5b      	lsrs	r3, r3, #29
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800628e:	7fbb      	ldrb	r3, [r7, #30]
 8006290:	7f3a      	ldrb	r2, [r7, #28]
 8006292:	f107 0120 	add.w	r1, r7, #32
 8006296:	440a      	add	r2, r1
 8006298:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800629c:	fb02 f303 	mul.w	r3, r2, r3
 80062a0:	7f3a      	ldrb	r2, [r7, #28]
 80062a2:	f107 0120 	add.w	r1, r7, #32
 80062a6:	440a      	add	r2, r1
 80062a8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80062ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80062b8:	7ffb      	ldrb	r3, [r7, #31]
 80062ba:	7f7a      	ldrb	r2, [r7, #29]
 80062bc:	f107 0120 	add.w	r1, r7, #32
 80062c0:	440a      	add	r2, r1
 80062c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
 80062ca:	7f7a      	ldrb	r2, [r7, #29]
 80062cc:	f107 0120 	add.w	r1, r7, #32
 80062d0:	440a      	add	r2, r1
 80062d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80062d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80062da:	b29a      	uxth	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80062e2:	bf00      	nop
 80062e4:	3724      	adds	r7, #36	; 0x24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	08007cf4 	.word	0x08007cf4
 80062f4:	08007cfc 	.word	0x08007cfc

080062f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80062f8:	b084      	sub	sp, #16
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	f107 001c 	add.w	r0, r7, #28
 8006306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800630e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8006310:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006312:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8006316:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800631a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800631e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	4b07      	ldr	r3, [pc, #28]	; (8006348 <SDMMC_Init+0x50>)
 800632c:	4013      	ands	r3, r2
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	b004      	add	sp, #16
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	ffc02c00 	.word	0xffc02c00

0800634c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f043 0203 	orr.w	r2, r3, #3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0303 	and.w	r3, r3, #3
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80063c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80063ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <SDMMC_SendCommand+0x50>)
 80063dc:	4013      	ands	r3, r2
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	fffee0c0 	.word	0xfffee0c0

080063f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	b2db      	uxtb	r3, r3
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3314      	adds	r3, #20
 8006420:	461a      	mov	r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	4413      	add	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800645e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006464:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800646a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006482:	2300      	movs	r3, #0

}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800649e:	2310      	movs	r3, #16
 80064a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064a8:	2300      	movs	r3, #0
 80064aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064b2:	f107 0308 	add.w	r3, r7, #8
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff73 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80064be:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c2:	2110      	movs	r1, #16
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fa73 	bl	80069b0 <SDMMC_GetCmdResp1>
 80064ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064cc:	69fb      	ldr	r3, [r7, #28]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b088      	sub	sp, #32
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80064e4:	2311      	movs	r3, #17
 80064e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064f8:	f107 0308 	add.w	r3, r7, #8
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff ff50 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006504:	f241 3288 	movw	r2, #5000	; 0x1388
 8006508:	2111      	movs	r1, #17
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa50 	bl	80069b0 <SDMMC_GetCmdResp1>
 8006510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006512:	69fb      	ldr	r3, [r7, #28]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800652a:	2312      	movs	r3, #18
 800652c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800652e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800653c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800653e:	f107 0308 	add.w	r3, r7, #8
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ff2d 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800654a:	f241 3288 	movw	r2, #5000	; 0x1388
 800654e:	2112      	movs	r1, #18
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa2d 	bl	80069b0 <SDMMC_GetCmdResp1>
 8006556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006558:	69fb      	ldr	r3, [r7, #28]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3720      	adds	r7, #32
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b088      	sub	sp, #32
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006570:	2318      	movs	r3, #24
 8006572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800657e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006582:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006584:	f107 0308 	add.w	r3, r7, #8
 8006588:	4619      	mov	r1, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff ff0a 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006590:	f241 3288 	movw	r2, #5000	; 0x1388
 8006594:	2118      	movs	r1, #24
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fa0a 	bl	80069b0 <SDMMC_GetCmdResp1>
 800659c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800659e:	69fb      	ldr	r3, [r7, #28]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3720      	adds	r7, #32
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80065b6:	2319      	movs	r3, #25
 80065b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80065ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80065c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80065ca:	f107 0308 	add.w	r3, r7, #8
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fee7 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80065d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065da:	2119      	movs	r1, #25
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f9e7 	bl	80069b0 <SDMMC_GetCmdResp1>
 80065e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065e4:	69fb      	ldr	r3, [r7, #28]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3720      	adds	r7, #32
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b08a      	sub	sp, #40	; 0x28
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80065fe:	2307      	movs	r3, #7
 8006600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006606:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006608:	2300      	movs	r3, #0
 800660a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800660c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006610:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006612:	f107 0310 	add.w	r3, r7, #16
 8006616:	4619      	mov	r1, r3
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7ff fec3 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800661e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006622:	2107      	movs	r1, #7
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f9c3 	bl	80069b0 <SDMMC_GetCmdResp1>
 800662a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800662e:	4618      	mov	r0, r3
 8006630:	3728      	adds	r7, #40	; 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b088      	sub	sp, #32
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006646:	2300      	movs	r3, #0
 8006648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800664e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006652:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006654:	f107 0308 	add.w	r3, r7, #8
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff fea2 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f977 	bl	8006954 <SDMMC_GetCmdError>
 8006666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006668:	69fb      	ldr	r3, [r7, #28]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b088      	sub	sp, #32
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800667a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800667e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006680:	2308      	movs	r3, #8
 8006682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800668e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006692:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006694:	f107 0308 	add.w	r3, r7, #8
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff fe82 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fb79 	bl	8006d98 <SDMMC_GetCmdResp7>
 80066a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066a8:	69fb      	ldr	r3, [r7, #28]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b088      	sub	sp, #32
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80066c0:	2337      	movs	r3, #55	; 0x37
 80066c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066d4:	f107 0308 	add.w	r3, r7, #8
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff fe62 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80066e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e4:	2137      	movs	r1, #55	; 0x37
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f962 	bl	80069b0 <SDMMC_GetCmdResp1>
 80066ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066ee:	69fb      	ldr	r3, [r7, #28]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3720      	adds	r7, #32
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006706:	2329      	movs	r3, #41	; 0x29
 8006708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800670a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800670e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006718:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800671a:	f107 0308 	add.w	r3, r7, #8
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff fe3f 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa7e 	bl	8006c28 <SDMMC_GetCmdResp3>
 800672c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800672e:	69fb      	ldr	r3, [r7, #28]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3720      	adds	r7, #32
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006746:	2306      	movs	r3, #6
 8006748:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800674a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800674e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006758:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800675a:	f107 0308 	add.w	r3, r7, #8
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff fe1f 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006766:	f241 3288 	movw	r2, #5000	; 0x1388
 800676a:	2106      	movs	r1, #6
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f91f 	bl	80069b0 <SDMMC_GetCmdResp1>
 8006772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006774:	69fb      	ldr	r3, [r7, #28]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b088      	sub	sp, #32
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800678a:	2333      	movs	r3, #51	; 0x33
 800678c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800678e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800679c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800679e:	f107 0308 	add.w	r3, r7, #8
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7ff fdfd 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80067aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ae:	2133      	movs	r1, #51	; 0x33
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f8fd 	bl	80069b0 <SDMMC_GetCmdResp1>
 80067b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067b8:	69fb      	ldr	r3, [r7, #28]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b088      	sub	sp, #32
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80067ce:	2302      	movs	r3, #2
 80067d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80067d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80067d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067e2:	f107 0308 	add.w	r3, r7, #8
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff fddb 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f9d0 	bl	8006b94 <SDMMC_GetCmdResp2>
 80067f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067f6:	69fb      	ldr	r3, [r7, #28]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800680e:	2309      	movs	r3, #9
 8006810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006812:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800681c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006820:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006822:	f107 0308 	add.w	r3, r7, #8
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fdbb 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f9b0 	bl	8006b94 <SDMMC_GetCmdResp2>
 8006834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006836:	69fb      	ldr	r3, [r7, #28]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800684e:	2303      	movs	r3, #3
 8006850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800685c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006860:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006862:	f107 0308 	add.w	r3, r7, #8
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff fd9b 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	2103      	movs	r1, #3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa18 	bl	8006ca8 <SDMMC_GetCmdResp6>
 8006878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800687a:	69fb      	ldr	r3, [r7, #28]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3720      	adds	r7, #32
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006892:	230d      	movs	r3, #13
 8006894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800689a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068a6:	f107 0308 	add.w	r3, r7, #8
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff fd79 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80068b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b6:	210d      	movs	r1, #13
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f879 	bl	80069b0 <SDMMC_GetCmdResp1>
 80068be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068c0:	69fb      	ldr	r3, [r7, #28]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b088      	sub	sp, #32
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80068d6:	230d      	movs	r3, #13
 80068d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068ea:	f107 0308 	add.w	r3, r7, #8
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff fd57 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80068f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fa:	210d      	movs	r1, #13
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f857 	bl	80069b0 <SDMMC_GetCmdResp1>
 8006902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006904:	69fb      	ldr	r3, [r7, #28]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3720      	adds	r7, #32
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b088      	sub	sp, #32
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8006916:	2300      	movs	r3, #0
 8006918:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800691a:	230b      	movs	r3, #11
 800691c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800691e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800692c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800692e:	f107 0308 	add.w	r3, r7, #8
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff fd35 	bl	80063a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800693a:	f241 3288 	movw	r2, #5000	; 0x1388
 800693e:	210b      	movs	r1, #11
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f835 	bl	80069b0 <SDMMC_GetCmdResp1>
 8006946:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006948:	69fb      	ldr	r3, [r7, #28]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3720      	adds	r7, #32
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800695c:	4b11      	ldr	r3, [pc, #68]	; (80069a4 <SDMMC_GetCmdError+0x50>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a11      	ldr	r2, [pc, #68]	; (80069a8 <SDMMC_GetCmdError+0x54>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	0a5b      	lsrs	r3, r3, #9
 8006968:	f241 3288 	movw	r2, #5000	; 0x1388
 800696c:	fb02 f303 	mul.w	r3, r2, r3
 8006970:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1e5a      	subs	r2, r3, #1
 8006976:	60fa      	str	r2, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d102      	bne.n	8006982 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800697c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006980:	e009      	b.n	8006996 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0f1      	beq.n	8006972 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a06      	ldr	r2, [pc, #24]	; (80069ac <SDMMC_GetCmdError+0x58>)
 8006992:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000000 	.word	0x20000000
 80069a8:	10624dd3 	.word	0x10624dd3
 80069ac:	002000c5 	.word	0x002000c5

080069b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	460b      	mov	r3, r1
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80069be:	4b70      	ldr	r3, [pc, #448]	; (8006b80 <SDMMC_GetCmdResp1+0x1d0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a70      	ldr	r2, [pc, #448]	; (8006b84 <SDMMC_GetCmdResp1+0x1d4>)
 80069c4:	fba2 2303 	umull	r2, r3, r2, r3
 80069c8:	0a5a      	lsrs	r2, r3, #9
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	fb02 f303 	mul.w	r3, r2, r3
 80069d0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	1e5a      	subs	r2, r3, #1
 80069d6:	61fa      	str	r2, [r7, #28]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d102      	bne.n	80069e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80069dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80069e0:	e0c9      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	4b67      	ldr	r3, [pc, #412]	; (8006b88 <SDMMC_GetCmdResp1+0x1d8>)
 80069ec:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0ef      	beq.n	80069d2 <SDMMC_GetCmdResp1+0x22>
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1ea      	bne.n	80069d2 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a0e:	2304      	movs	r3, #4
 8006a10:	e0b1      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e0a6      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4a58      	ldr	r2, [pc, #352]	; (8006b8c <SDMMC_GetCmdResp1+0x1dc>)
 8006a2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f7ff fce2 	bl	80063f8 <SDMMC_GetCommandResponse>
 8006a34:	4603      	mov	r3, r0
 8006a36:	461a      	mov	r2, r3
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d001      	beq.n	8006a42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e099      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006a42:	2100      	movs	r1, #0
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff fce4 	bl	8006412 <SDMMC_GetResponse>
 8006a4a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4b50      	ldr	r3, [pc, #320]	; (8006b90 <SDMMC_GetCmdResp1+0x1e0>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	e08d      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	da02      	bge.n	8006a66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006a60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a64:	e087      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006a70:	2340      	movs	r3, #64	; 0x40
 8006a72:	e080      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006a7e:	2380      	movs	r3, #128	; 0x80
 8006a80:	e079      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a90:	e071      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa0:	e069      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ab0:	e061      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006abc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ac0:	e059      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ad0:	e051      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ae0:	e049      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006af0:	e041      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b00:	e039      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b10:	e031      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006b1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006b20:	e029      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006b2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b30:	e021      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006b3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b40:	e019      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006b4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b50:	e011      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006b5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006b60:	e009      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006b6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006b70:	e001      	b.n	8006b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3720      	adds	r7, #32
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000000 	.word	0x20000000
 8006b84:	10624dd3 	.word	0x10624dd3
 8006b88:	00200045 	.word	0x00200045
 8006b8c:	002000c5 	.word	0x002000c5
 8006b90:	fdffe008 	.word	0xfdffe008

08006b94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b9c:	4b1f      	ldr	r3, [pc, #124]	; (8006c1c <SDMMC_GetCmdResp2+0x88>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <SDMMC_GetCmdResp2+0x8c>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	0a5b      	lsrs	r3, r3, #9
 8006ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
 8006bb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1e5a      	subs	r2, r3, #1
 8006bb6:	60fa      	str	r2, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bc0:	e026      	b.n	8006c10 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0ef      	beq.n	8006bb2 <SDMMC_GetCmdResp2+0x1e>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1ea      	bne.n	8006bb2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2204      	movs	r2, #4
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006bee:	2304      	movs	r3, #4
 8006bf0:	e00e      	b.n	8006c10 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e003      	b.n	8006c10 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a06      	ldr	r2, [pc, #24]	; (8006c24 <SDMMC_GetCmdResp2+0x90>)
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20000000 	.word	0x20000000
 8006c20:	10624dd3 	.word	0x10624dd3
 8006c24:	002000c5 	.word	0x002000c5

08006c28 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c30:	4b1a      	ldr	r3, [pc, #104]	; (8006c9c <SDMMC_GetCmdResp3+0x74>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1a      	ldr	r2, [pc, #104]	; (8006ca0 <SDMMC_GetCmdResp3+0x78>)
 8006c36:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3a:	0a5b      	lsrs	r3, r3, #9
 8006c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c40:	fb02 f303 	mul.w	r3, r2, r3
 8006c44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	1e5a      	subs	r2, r3, #1
 8006c4a:	60fa      	str	r2, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d102      	bne.n	8006c56 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c54:	e01b      	b.n	8006c8e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0ef      	beq.n	8006c46 <SDMMC_GetCmdResp3+0x1e>
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1ea      	bne.n	8006c46 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c82:	2304      	movs	r3, #4
 8006c84:	e003      	b.n	8006c8e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a06      	ldr	r2, [pc, #24]	; (8006ca4 <SDMMC_GetCmdResp3+0x7c>)
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000000 	.word	0x20000000
 8006ca0:	10624dd3 	.word	0x10624dd3
 8006ca4:	002000c5 	.word	0x002000c5

08006ca8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cb6:	4b35      	ldr	r3, [pc, #212]	; (8006d8c <SDMMC_GetCmdResp6+0xe4>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a35      	ldr	r2, [pc, #212]	; (8006d90 <SDMMC_GetCmdResp6+0xe8>)
 8006cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc0:	0a5b      	lsrs	r3, r3, #9
 8006cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	1e5a      	subs	r2, r3, #1
 8006cd0:	61fa      	str	r2, [r7, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006cd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cda:	e052      	b.n	8006d82 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0ef      	beq.n	8006ccc <SDMMC_GetCmdResp6+0x24>
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1ea      	bne.n	8006ccc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2204      	movs	r2, #4
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d08:	2304      	movs	r3, #4
 8006d0a:	e03a      	b.n	8006d82 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e02f      	b.n	8006d82 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7ff fb68 	bl	80063f8 <SDMMC_GetCommandResponse>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d001      	beq.n	8006d36 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e025      	b.n	8006d82 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4a16      	ldr	r2, [pc, #88]	; (8006d94 <SDMMC_GetCmdResp6+0xec>)
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f7ff fb67 	bl	8006412 <SDMMC_GetResponse>
 8006d44:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d106      	bne.n	8006d5e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	0c1b      	lsrs	r3, r3, #16
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e011      	b.n	8006d82 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d6c:	e009      	b.n	8006d82 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d7c:	e001      	b.n	8006d82 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000000 	.word	0x20000000
 8006d90:	10624dd3 	.word	0x10624dd3
 8006d94:	002000c5 	.word	0x002000c5

08006d98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006da0:	4b22      	ldr	r3, [pc, #136]	; (8006e2c <SDMMC_GetCmdResp7+0x94>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a22      	ldr	r2, [pc, #136]	; (8006e30 <SDMMC_GetCmdResp7+0x98>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	0a5b      	lsrs	r3, r3, #9
 8006dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db0:	fb02 f303 	mul.w	r3, r2, r3
 8006db4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	1e5a      	subs	r2, r3, #1
 8006dba:	60fa      	str	r2, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006dc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006dc4:	e02c      	b.n	8006e20 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0ef      	beq.n	8006db6 <SDMMC_GetCmdResp7+0x1e>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1ea      	bne.n	8006db6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d004      	beq.n	8006df6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2204      	movs	r2, #4
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006df2:	2304      	movs	r3, #4
 8006df4:	e014      	b.n	8006e20 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e009      	b.n	8006e20 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2240      	movs	r2, #64	; 0x40
 8006e1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006e1e:	2300      	movs	r3, #0

}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	20000000 	.word	0x20000000
 8006e30:	10624dd3 	.word	0x10624dd3

08006e34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006e38:	4904      	ldr	r1, [pc, #16]	; (8006e4c <MX_FATFS_Init+0x18>)
 8006e3a:	4805      	ldr	r0, [pc, #20]	; (8006e50 <MX_FATFS_Init+0x1c>)
 8006e3c:	f000 fa38 	bl	80072b0 <FATFS_LinkDriver>
 8006e40:	4603      	mov	r3, r0
 8006e42:	461a      	mov	r2, r3
 8006e44:	4b03      	ldr	r3, [pc, #12]	; (8006e54 <MX_FATFS_Init+0x20>)
 8006e46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e48:	bf00      	nop
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	200022b8 	.word	0x200022b8
 8006e50:	08007d2c 	.word	0x08007d2c
 8006e54:	200022b4 	.word	0x200022b4

08006e58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006e62:	f000 f863 	bl	8006f2c <BSP_SD_IsDetected>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d001      	beq.n	8006e70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e005      	b.n	8006e7c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006e70:	4804      	ldr	r0, [pc, #16]	; (8006e84 <BSP_SD_Init+0x2c>)
 8006e72:	f7fc fd75 	bl	8003960 <HAL_SD_Init>
 8006e76:	4603      	mov	r3, r0
 8006e78:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	200000b0 	.word	0x200000b0

08006e88 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	68f9      	ldr	r1, [r7, #12]
 8006e9e:	4806      	ldr	r0, [pc, #24]	; (8006eb8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006ea0:	f7fc fe82 	bl	8003ba8 <HAL_SD_ReadBlocks_DMA>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	200000b0 	.word	0x200000b0

08006ebc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	68f9      	ldr	r1, [r7, #12]
 8006ed2:	4806      	ldr	r0, [pc, #24]	; (8006eec <BSP_SD_WriteBlocks_DMA+0x30>)
 8006ed4:	f7fc ff10 	bl	8003cf8 <HAL_SD_WriteBlocks_DMA>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	200000b0 	.word	0x200000b0

08006ef0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006ef4:	4805      	ldr	r0, [pc, #20]	; (8006f0c <BSP_SD_GetCardState+0x1c>)
 8006ef6:	f7fd fae3 	bl	80044c0 <HAL_SD_GetCardState>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	bf14      	ite	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	2300      	moveq	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200000b0 	.word	0x200000b0

08006f10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	4803      	ldr	r0, [pc, #12]	; (8006f28 <BSP_SD_GetCardInfo+0x18>)
 8006f1c:	f7fd f9fa 	bl	8004314 <HAL_SD_GetCardInfo>
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	200000b0 	.word	0x200000b0

08006f2c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006f32:	2301      	movs	r3, #1
 8006f34:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	b2db      	uxtb	r3, r3
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006f4e:	f7fa f8c1 	bl	80010d4 <HAL_GetTick>
 8006f52:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006f54:	e006      	b.n	8006f64 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006f56:	f7ff ffcb 	bl	8006ef0 <BSP_SD_GetCardState>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	e009      	b.n	8006f78 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006f64:	f7fa f8b6 	bl	80010d4 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d8f0      	bhi.n	8006f56 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <SD_CheckStatus+0x38>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006f90:	f7ff ffae 	bl	8006ef0 <BSP_SD_GetCardState>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d107      	bne.n	8006faa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006f9a:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <SD_CheckStatus+0x38>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <SD_CheckStatus+0x38>)
 8006fa8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006faa:	4b03      	ldr	r3, [pc, #12]	; (8006fb8 <SD_CheckStatus+0x38>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	b2db      	uxtb	r3, r3
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	2000000d 	.word	0x2000000d

08006fbc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006fc6:	f7ff ff47 	bl	8006e58 <BSP_SD_Init>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d107      	bne.n	8006fe0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff ffd4 	bl	8006f80 <SD_CheckStatus>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <SD_initialize+0x34>)
 8006fde:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006fe0:	4b03      	ldr	r3, [pc, #12]	; (8006ff0 <SD_initialize+0x34>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	b2db      	uxtb	r3, r3
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	2000000d 	.word	0x2000000d

08006ff4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff ffbd 	bl	8006f80 <SD_CheckStatus>
 8007006:	4603      	mov	r3, r0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	4603      	mov	r3, r0
 800701e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007024:	f247 5030 	movw	r0, #30000	; 0x7530
 8007028:	f7ff ff8d 	bl	8006f46 <SD_CheckStatusWithTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	da01      	bge.n	8007036 <SD_read+0x26>
  {
    return res;
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	e03b      	b.n	80070ae <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	68b8      	ldr	r0, [r7, #8]
 800703c:	f7ff ff24 	bl	8006e88 <BSP_SD_ReadBlocks_DMA>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d132      	bne.n	80070ac <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007046:	4b1c      	ldr	r3, [pc, #112]	; (80070b8 <SD_read+0xa8>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800704c:	f7fa f842 	bl	80010d4 <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007052:	bf00      	nop
 8007054:	4b18      	ldr	r3, [pc, #96]	; (80070b8 <SD_read+0xa8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d108      	bne.n	800706e <SD_read+0x5e>
 800705c:	f7fa f83a 	bl	80010d4 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	f247 522f 	movw	r2, #29999	; 0x752f
 800706a:	4293      	cmp	r3, r2
 800706c:	d9f2      	bls.n	8007054 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800706e:	4b12      	ldr	r3, [pc, #72]	; (80070b8 <SD_read+0xa8>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d102      	bne.n	800707c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	75fb      	strb	r3, [r7, #23]
 800707a:	e017      	b.n	80070ac <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800707c:	4b0e      	ldr	r3, [pc, #56]	; (80070b8 <SD_read+0xa8>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007082:	f7fa f827 	bl	80010d4 <HAL_GetTick>
 8007086:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007088:	e007      	b.n	800709a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800708a:	f7ff ff31 	bl	8006ef0 <BSP_SD_GetCardState>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <SD_read+0x8a>
          {
            res = RES_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007098:	e008      	b.n	80070ac <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800709a:	f7fa f81b 	bl	80010d4 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	f247 522f 	movw	r2, #29999	; 0x752f
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d9ee      	bls.n	800708a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000098 	.word	0x20000098

080070bc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80070d0:	4b24      	ldr	r3, [pc, #144]	; (8007164 <SD_write+0xa8>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80070d6:	f247 5030 	movw	r0, #30000	; 0x7530
 80070da:	f7ff ff34 	bl	8006f46 <SD_CheckStatusWithTimeout>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da01      	bge.n	80070e8 <SD_write+0x2c>
  {
    return res;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	e038      	b.n	800715a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	68b8      	ldr	r0, [r7, #8]
 80070ee:	f7ff fee5 	bl	8006ebc <BSP_SD_WriteBlocks_DMA>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d12f      	bne.n	8007158 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80070f8:	f7f9 ffec 	bl	80010d4 <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80070fe:	bf00      	nop
 8007100:	4b18      	ldr	r3, [pc, #96]	; (8007164 <SD_write+0xa8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d108      	bne.n	800711a <SD_write+0x5e>
 8007108:	f7f9 ffe4 	bl	80010d4 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	f247 522f 	movw	r2, #29999	; 0x752f
 8007116:	4293      	cmp	r3, r2
 8007118:	d9f2      	bls.n	8007100 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800711a:	4b12      	ldr	r3, [pc, #72]	; (8007164 <SD_write+0xa8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	75fb      	strb	r3, [r7, #23]
 8007126:	e017      	b.n	8007158 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007128:	4b0e      	ldr	r3, [pc, #56]	; (8007164 <SD_write+0xa8>)
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800712e:	f7f9 ffd1 	bl	80010d4 <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007134:	e007      	b.n	8007146 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007136:	f7ff fedb 	bl	8006ef0 <BSP_SD_GetCardState>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <SD_write+0x8a>
          {
            res = RES_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	75fb      	strb	r3, [r7, #23]
            break;
 8007144:	e008      	b.n	8007158 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007146:	f7f9 ffc5 	bl	80010d4 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	f247 522f 	movw	r2, #29999	; 0x752f
 8007154:	4293      	cmp	r3, r2
 8007156:	d9ee      	bls.n	8007136 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000094 	.word	0x20000094

08007168 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08c      	sub	sp, #48	; 0x30
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	603a      	str	r2, [r7, #0]
 8007172:	71fb      	strb	r3, [r7, #7]
 8007174:	460b      	mov	r3, r1
 8007176:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800717e:	4b25      	ldr	r3, [pc, #148]	; (8007214 <SD_ioctl+0xac>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <SD_ioctl+0x28>
 800718c:	2303      	movs	r3, #3
 800718e:	e03c      	b.n	800720a <SD_ioctl+0xa2>

  switch (cmd)
 8007190:	79bb      	ldrb	r3, [r7, #6]
 8007192:	2b03      	cmp	r3, #3
 8007194:	d834      	bhi.n	8007200 <SD_ioctl+0x98>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <SD_ioctl+0x34>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071b5 	.word	0x080071b5
 80071a4:	080071cd 	.word	0x080071cd
 80071a8:	080071e7 	.word	0x080071e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071b2:	e028      	b.n	8007206 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80071b4:	f107 0308 	add.w	r3, r7, #8
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fea9 	bl	8006f10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80071be:	6a3a      	ldr	r2, [r7, #32]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071ca:	e01c      	b.n	8007206 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80071cc:	f107 0308 	add.w	r3, r7, #8
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff fe9d 	bl	8006f10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	b29a      	uxth	r2, r3
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071e4:	e00f      	b.n	8007206 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80071e6:	f107 0308 	add.w	r3, r7, #8
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff fe90 	bl	8006f10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	0a5a      	lsrs	r2, r3, #9
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071fe:	e002      	b.n	8007206 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007200:	2304      	movs	r3, #4
 8007202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007206:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800720a:	4618      	mov	r0, r3
 800720c:	3730      	adds	r7, #48	; 0x30
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	2000000d 	.word	0x2000000d

08007218 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800722e:	4b1f      	ldr	r3, [pc, #124]	; (80072ac <FATFS_LinkDriverEx+0x94>)
 8007230:	7a5b      	ldrb	r3, [r3, #9]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d131      	bne.n	800729c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007238:	4b1c      	ldr	r3, [pc, #112]	; (80072ac <FATFS_LinkDriverEx+0x94>)
 800723a:	7a5b      	ldrb	r3, [r3, #9]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <FATFS_LinkDriverEx+0x94>)
 8007242:	2100      	movs	r1, #0
 8007244:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007246:	4b19      	ldr	r3, [pc, #100]	; (80072ac <FATFS_LinkDriverEx+0x94>)
 8007248:	7a5b      	ldrb	r3, [r3, #9]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	4a17      	ldr	r2, [pc, #92]	; (80072ac <FATFS_LinkDriverEx+0x94>)
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <FATFS_LinkDriverEx+0x94>)
 8007258:	7a5b      	ldrb	r3, [r3, #9]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	461a      	mov	r2, r3
 800725e:	4b13      	ldr	r3, [pc, #76]	; (80072ac <FATFS_LinkDriverEx+0x94>)
 8007260:	4413      	add	r3, r2
 8007262:	79fa      	ldrb	r2, [r7, #7]
 8007264:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007266:	4b11      	ldr	r3, [pc, #68]	; (80072ac <FATFS_LinkDriverEx+0x94>)
 8007268:	7a5b      	ldrb	r3, [r3, #9]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	b2d1      	uxtb	r1, r2
 8007270:	4a0e      	ldr	r2, [pc, #56]	; (80072ac <FATFS_LinkDriverEx+0x94>)
 8007272:	7251      	strb	r1, [r2, #9]
 8007274:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007276:	7dbb      	ldrb	r3, [r7, #22]
 8007278:	3330      	adds	r3, #48	; 0x30
 800727a:	b2da      	uxtb	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	3301      	adds	r3, #1
 8007284:	223a      	movs	r2, #58	; 0x3a
 8007286:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	3302      	adds	r3, #2
 800728c:	222f      	movs	r2, #47	; 0x2f
 800728e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	3303      	adds	r3, #3
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800729c:	7dfb      	ldrb	r3, [r7, #23]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	2000009c 	.word	0x2000009c

080072b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80072ba:	2200      	movs	r2, #0
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff ffaa 	bl	8007218 <FATFS_LinkDriverEx>
 80072c4:	4603      	mov	r3, r0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <__errno>:
 80072d0:	4b01      	ldr	r3, [pc, #4]	; (80072d8 <__errno+0x8>)
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20000010 	.word	0x20000010

080072dc <__libc_init_array>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4d0d      	ldr	r5, [pc, #52]	; (8007314 <__libc_init_array+0x38>)
 80072e0:	4c0d      	ldr	r4, [pc, #52]	; (8007318 <__libc_init_array+0x3c>)
 80072e2:	1b64      	subs	r4, r4, r5
 80072e4:	10a4      	asrs	r4, r4, #2
 80072e6:	2600      	movs	r6, #0
 80072e8:	42a6      	cmp	r6, r4
 80072ea:	d109      	bne.n	8007300 <__libc_init_array+0x24>
 80072ec:	4d0b      	ldr	r5, [pc, #44]	; (800731c <__libc_init_array+0x40>)
 80072ee:	4c0c      	ldr	r4, [pc, #48]	; (8007320 <__libc_init_array+0x44>)
 80072f0:	f000 fce6 	bl	8007cc0 <_init>
 80072f4:	1b64      	subs	r4, r4, r5
 80072f6:	10a4      	asrs	r4, r4, #2
 80072f8:	2600      	movs	r6, #0
 80072fa:	42a6      	cmp	r6, r4
 80072fc:	d105      	bne.n	800730a <__libc_init_array+0x2e>
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	f855 3b04 	ldr.w	r3, [r5], #4
 8007304:	4798      	blx	r3
 8007306:	3601      	adds	r6, #1
 8007308:	e7ee      	b.n	80072e8 <__libc_init_array+0xc>
 800730a:	f855 3b04 	ldr.w	r3, [r5], #4
 800730e:	4798      	blx	r3
 8007310:	3601      	adds	r6, #1
 8007312:	e7f2      	b.n	80072fa <__libc_init_array+0x1e>
 8007314:	08007dac 	.word	0x08007dac
 8007318:	08007dac 	.word	0x08007dac
 800731c:	08007dac 	.word	0x08007dac
 8007320:	08007db0 	.word	0x08007db0

08007324 <memset>:
 8007324:	4402      	add	r2, r0
 8007326:	4603      	mov	r3, r0
 8007328:	4293      	cmp	r3, r2
 800732a:	d100      	bne.n	800732e <memset+0xa>
 800732c:	4770      	bx	lr
 800732e:	f803 1b01 	strb.w	r1, [r3], #1
 8007332:	e7f9      	b.n	8007328 <memset+0x4>

08007334 <_puts_r>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	460e      	mov	r6, r1
 8007338:	4605      	mov	r5, r0
 800733a:	b118      	cbz	r0, 8007344 <_puts_r+0x10>
 800733c:	6983      	ldr	r3, [r0, #24]
 800733e:	b90b      	cbnz	r3, 8007344 <_puts_r+0x10>
 8007340:	f000 fa48 	bl	80077d4 <__sinit>
 8007344:	69ab      	ldr	r3, [r5, #24]
 8007346:	68ac      	ldr	r4, [r5, #8]
 8007348:	b913      	cbnz	r3, 8007350 <_puts_r+0x1c>
 800734a:	4628      	mov	r0, r5
 800734c:	f000 fa42 	bl	80077d4 <__sinit>
 8007350:	4b2c      	ldr	r3, [pc, #176]	; (8007404 <_puts_r+0xd0>)
 8007352:	429c      	cmp	r4, r3
 8007354:	d120      	bne.n	8007398 <_puts_r+0x64>
 8007356:	686c      	ldr	r4, [r5, #4]
 8007358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800735a:	07db      	lsls	r3, r3, #31
 800735c:	d405      	bmi.n	800736a <_puts_r+0x36>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	0598      	lsls	r0, r3, #22
 8007362:	d402      	bmi.n	800736a <_puts_r+0x36>
 8007364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007366:	f000 fad3 	bl	8007910 <__retarget_lock_acquire_recursive>
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	0719      	lsls	r1, r3, #28
 800736e:	d51d      	bpl.n	80073ac <_puts_r+0x78>
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	b1db      	cbz	r3, 80073ac <_puts_r+0x78>
 8007374:	3e01      	subs	r6, #1
 8007376:	68a3      	ldr	r3, [r4, #8]
 8007378:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800737c:	3b01      	subs	r3, #1
 800737e:	60a3      	str	r3, [r4, #8]
 8007380:	bb39      	cbnz	r1, 80073d2 <_puts_r+0x9e>
 8007382:	2b00      	cmp	r3, #0
 8007384:	da38      	bge.n	80073f8 <_puts_r+0xc4>
 8007386:	4622      	mov	r2, r4
 8007388:	210a      	movs	r1, #10
 800738a:	4628      	mov	r0, r5
 800738c:	f000 f848 	bl	8007420 <__swbuf_r>
 8007390:	3001      	adds	r0, #1
 8007392:	d011      	beq.n	80073b8 <_puts_r+0x84>
 8007394:	250a      	movs	r5, #10
 8007396:	e011      	b.n	80073bc <_puts_r+0x88>
 8007398:	4b1b      	ldr	r3, [pc, #108]	; (8007408 <_puts_r+0xd4>)
 800739a:	429c      	cmp	r4, r3
 800739c:	d101      	bne.n	80073a2 <_puts_r+0x6e>
 800739e:	68ac      	ldr	r4, [r5, #8]
 80073a0:	e7da      	b.n	8007358 <_puts_r+0x24>
 80073a2:	4b1a      	ldr	r3, [pc, #104]	; (800740c <_puts_r+0xd8>)
 80073a4:	429c      	cmp	r4, r3
 80073a6:	bf08      	it	eq
 80073a8:	68ec      	ldreq	r4, [r5, #12]
 80073aa:	e7d5      	b.n	8007358 <_puts_r+0x24>
 80073ac:	4621      	mov	r1, r4
 80073ae:	4628      	mov	r0, r5
 80073b0:	f000 f888 	bl	80074c4 <__swsetup_r>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d0dd      	beq.n	8007374 <_puts_r+0x40>
 80073b8:	f04f 35ff 	mov.w	r5, #4294967295
 80073bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073be:	07da      	lsls	r2, r3, #31
 80073c0:	d405      	bmi.n	80073ce <_puts_r+0x9a>
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	059b      	lsls	r3, r3, #22
 80073c6:	d402      	bmi.n	80073ce <_puts_r+0x9a>
 80073c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ca:	f000 faa2 	bl	8007912 <__retarget_lock_release_recursive>
 80073ce:	4628      	mov	r0, r5
 80073d0:	bd70      	pop	{r4, r5, r6, pc}
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	da04      	bge.n	80073e0 <_puts_r+0xac>
 80073d6:	69a2      	ldr	r2, [r4, #24]
 80073d8:	429a      	cmp	r2, r3
 80073da:	dc06      	bgt.n	80073ea <_puts_r+0xb6>
 80073dc:	290a      	cmp	r1, #10
 80073de:	d004      	beq.n	80073ea <_puts_r+0xb6>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	6022      	str	r2, [r4, #0]
 80073e6:	7019      	strb	r1, [r3, #0]
 80073e8:	e7c5      	b.n	8007376 <_puts_r+0x42>
 80073ea:	4622      	mov	r2, r4
 80073ec:	4628      	mov	r0, r5
 80073ee:	f000 f817 	bl	8007420 <__swbuf_r>
 80073f2:	3001      	adds	r0, #1
 80073f4:	d1bf      	bne.n	8007376 <_puts_r+0x42>
 80073f6:	e7df      	b.n	80073b8 <_puts_r+0x84>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	250a      	movs	r5, #10
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	6022      	str	r2, [r4, #0]
 8007400:	701d      	strb	r5, [r3, #0]
 8007402:	e7db      	b.n	80073bc <_puts_r+0x88>
 8007404:	08007d64 	.word	0x08007d64
 8007408:	08007d84 	.word	0x08007d84
 800740c:	08007d44 	.word	0x08007d44

08007410 <puts>:
 8007410:	4b02      	ldr	r3, [pc, #8]	; (800741c <puts+0xc>)
 8007412:	4601      	mov	r1, r0
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	f7ff bf8d 	b.w	8007334 <_puts_r>
 800741a:	bf00      	nop
 800741c:	20000010 	.word	0x20000010

08007420 <__swbuf_r>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	460e      	mov	r6, r1
 8007424:	4614      	mov	r4, r2
 8007426:	4605      	mov	r5, r0
 8007428:	b118      	cbz	r0, 8007432 <__swbuf_r+0x12>
 800742a:	6983      	ldr	r3, [r0, #24]
 800742c:	b90b      	cbnz	r3, 8007432 <__swbuf_r+0x12>
 800742e:	f000 f9d1 	bl	80077d4 <__sinit>
 8007432:	4b21      	ldr	r3, [pc, #132]	; (80074b8 <__swbuf_r+0x98>)
 8007434:	429c      	cmp	r4, r3
 8007436:	d12b      	bne.n	8007490 <__swbuf_r+0x70>
 8007438:	686c      	ldr	r4, [r5, #4]
 800743a:	69a3      	ldr	r3, [r4, #24]
 800743c:	60a3      	str	r3, [r4, #8]
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	071a      	lsls	r2, r3, #28
 8007442:	d52f      	bpl.n	80074a4 <__swbuf_r+0x84>
 8007444:	6923      	ldr	r3, [r4, #16]
 8007446:	b36b      	cbz	r3, 80074a4 <__swbuf_r+0x84>
 8007448:	6923      	ldr	r3, [r4, #16]
 800744a:	6820      	ldr	r0, [r4, #0]
 800744c:	1ac0      	subs	r0, r0, r3
 800744e:	6963      	ldr	r3, [r4, #20]
 8007450:	b2f6      	uxtb	r6, r6
 8007452:	4283      	cmp	r3, r0
 8007454:	4637      	mov	r7, r6
 8007456:	dc04      	bgt.n	8007462 <__swbuf_r+0x42>
 8007458:	4621      	mov	r1, r4
 800745a:	4628      	mov	r0, r5
 800745c:	f000 f926 	bl	80076ac <_fflush_r>
 8007460:	bb30      	cbnz	r0, 80074b0 <__swbuf_r+0x90>
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	3b01      	subs	r3, #1
 8007466:	60a3      	str	r3, [r4, #8]
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	6022      	str	r2, [r4, #0]
 800746e:	701e      	strb	r6, [r3, #0]
 8007470:	6963      	ldr	r3, [r4, #20]
 8007472:	3001      	adds	r0, #1
 8007474:	4283      	cmp	r3, r0
 8007476:	d004      	beq.n	8007482 <__swbuf_r+0x62>
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	07db      	lsls	r3, r3, #31
 800747c:	d506      	bpl.n	800748c <__swbuf_r+0x6c>
 800747e:	2e0a      	cmp	r6, #10
 8007480:	d104      	bne.n	800748c <__swbuf_r+0x6c>
 8007482:	4621      	mov	r1, r4
 8007484:	4628      	mov	r0, r5
 8007486:	f000 f911 	bl	80076ac <_fflush_r>
 800748a:	b988      	cbnz	r0, 80074b0 <__swbuf_r+0x90>
 800748c:	4638      	mov	r0, r7
 800748e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <__swbuf_r+0x9c>)
 8007492:	429c      	cmp	r4, r3
 8007494:	d101      	bne.n	800749a <__swbuf_r+0x7a>
 8007496:	68ac      	ldr	r4, [r5, #8]
 8007498:	e7cf      	b.n	800743a <__swbuf_r+0x1a>
 800749a:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <__swbuf_r+0xa0>)
 800749c:	429c      	cmp	r4, r3
 800749e:	bf08      	it	eq
 80074a0:	68ec      	ldreq	r4, [r5, #12]
 80074a2:	e7ca      	b.n	800743a <__swbuf_r+0x1a>
 80074a4:	4621      	mov	r1, r4
 80074a6:	4628      	mov	r0, r5
 80074a8:	f000 f80c 	bl	80074c4 <__swsetup_r>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d0cb      	beq.n	8007448 <__swbuf_r+0x28>
 80074b0:	f04f 37ff 	mov.w	r7, #4294967295
 80074b4:	e7ea      	b.n	800748c <__swbuf_r+0x6c>
 80074b6:	bf00      	nop
 80074b8:	08007d64 	.word	0x08007d64
 80074bc:	08007d84 	.word	0x08007d84
 80074c0:	08007d44 	.word	0x08007d44

080074c4 <__swsetup_r>:
 80074c4:	4b32      	ldr	r3, [pc, #200]	; (8007590 <__swsetup_r+0xcc>)
 80074c6:	b570      	push	{r4, r5, r6, lr}
 80074c8:	681d      	ldr	r5, [r3, #0]
 80074ca:	4606      	mov	r6, r0
 80074cc:	460c      	mov	r4, r1
 80074ce:	b125      	cbz	r5, 80074da <__swsetup_r+0x16>
 80074d0:	69ab      	ldr	r3, [r5, #24]
 80074d2:	b913      	cbnz	r3, 80074da <__swsetup_r+0x16>
 80074d4:	4628      	mov	r0, r5
 80074d6:	f000 f97d 	bl	80077d4 <__sinit>
 80074da:	4b2e      	ldr	r3, [pc, #184]	; (8007594 <__swsetup_r+0xd0>)
 80074dc:	429c      	cmp	r4, r3
 80074de:	d10f      	bne.n	8007500 <__swsetup_r+0x3c>
 80074e0:	686c      	ldr	r4, [r5, #4]
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074e8:	0719      	lsls	r1, r3, #28
 80074ea:	d42c      	bmi.n	8007546 <__swsetup_r+0x82>
 80074ec:	06dd      	lsls	r5, r3, #27
 80074ee:	d411      	bmi.n	8007514 <__swsetup_r+0x50>
 80074f0:	2309      	movs	r3, #9
 80074f2:	6033      	str	r3, [r6, #0]
 80074f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295
 80074fe:	e03e      	b.n	800757e <__swsetup_r+0xba>
 8007500:	4b25      	ldr	r3, [pc, #148]	; (8007598 <__swsetup_r+0xd4>)
 8007502:	429c      	cmp	r4, r3
 8007504:	d101      	bne.n	800750a <__swsetup_r+0x46>
 8007506:	68ac      	ldr	r4, [r5, #8]
 8007508:	e7eb      	b.n	80074e2 <__swsetup_r+0x1e>
 800750a:	4b24      	ldr	r3, [pc, #144]	; (800759c <__swsetup_r+0xd8>)
 800750c:	429c      	cmp	r4, r3
 800750e:	bf08      	it	eq
 8007510:	68ec      	ldreq	r4, [r5, #12]
 8007512:	e7e6      	b.n	80074e2 <__swsetup_r+0x1e>
 8007514:	0758      	lsls	r0, r3, #29
 8007516:	d512      	bpl.n	800753e <__swsetup_r+0x7a>
 8007518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800751a:	b141      	cbz	r1, 800752e <__swsetup_r+0x6a>
 800751c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007520:	4299      	cmp	r1, r3
 8007522:	d002      	beq.n	800752a <__swsetup_r+0x66>
 8007524:	4630      	mov	r0, r6
 8007526:	f000 fa59 	bl	80079dc <_free_r>
 800752a:	2300      	movs	r3, #0
 800752c:	6363      	str	r3, [r4, #52]	; 0x34
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	2300      	movs	r3, #0
 8007538:	6063      	str	r3, [r4, #4]
 800753a:	6923      	ldr	r3, [r4, #16]
 800753c:	6023      	str	r3, [r4, #0]
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	f043 0308 	orr.w	r3, r3, #8
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	b94b      	cbnz	r3, 800755e <__swsetup_r+0x9a>
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007554:	d003      	beq.n	800755e <__swsetup_r+0x9a>
 8007556:	4621      	mov	r1, r4
 8007558:	4630      	mov	r0, r6
 800755a:	f000 f9ff 	bl	800795c <__smakebuf_r>
 800755e:	89a0      	ldrh	r0, [r4, #12]
 8007560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007564:	f010 0301 	ands.w	r3, r0, #1
 8007568:	d00a      	beq.n	8007580 <__swsetup_r+0xbc>
 800756a:	2300      	movs	r3, #0
 800756c:	60a3      	str	r3, [r4, #8]
 800756e:	6963      	ldr	r3, [r4, #20]
 8007570:	425b      	negs	r3, r3
 8007572:	61a3      	str	r3, [r4, #24]
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	b943      	cbnz	r3, 800758a <__swsetup_r+0xc6>
 8007578:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800757c:	d1ba      	bne.n	80074f4 <__swsetup_r+0x30>
 800757e:	bd70      	pop	{r4, r5, r6, pc}
 8007580:	0781      	lsls	r1, r0, #30
 8007582:	bf58      	it	pl
 8007584:	6963      	ldrpl	r3, [r4, #20]
 8007586:	60a3      	str	r3, [r4, #8]
 8007588:	e7f4      	b.n	8007574 <__swsetup_r+0xb0>
 800758a:	2000      	movs	r0, #0
 800758c:	e7f7      	b.n	800757e <__swsetup_r+0xba>
 800758e:	bf00      	nop
 8007590:	20000010 	.word	0x20000010
 8007594:	08007d64 	.word	0x08007d64
 8007598:	08007d84 	.word	0x08007d84
 800759c:	08007d44 	.word	0x08007d44

080075a0 <__sflush_r>:
 80075a0:	898a      	ldrh	r2, [r1, #12]
 80075a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a6:	4605      	mov	r5, r0
 80075a8:	0710      	lsls	r0, r2, #28
 80075aa:	460c      	mov	r4, r1
 80075ac:	d458      	bmi.n	8007660 <__sflush_r+0xc0>
 80075ae:	684b      	ldr	r3, [r1, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	dc05      	bgt.n	80075c0 <__sflush_r+0x20>
 80075b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	dc02      	bgt.n	80075c0 <__sflush_r+0x20>
 80075ba:	2000      	movs	r0, #0
 80075bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	d0f9      	beq.n	80075ba <__sflush_r+0x1a>
 80075c6:	2300      	movs	r3, #0
 80075c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075cc:	682f      	ldr	r7, [r5, #0]
 80075ce:	602b      	str	r3, [r5, #0]
 80075d0:	d032      	beq.n	8007638 <__sflush_r+0x98>
 80075d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075d4:	89a3      	ldrh	r3, [r4, #12]
 80075d6:	075a      	lsls	r2, r3, #29
 80075d8:	d505      	bpl.n	80075e6 <__sflush_r+0x46>
 80075da:	6863      	ldr	r3, [r4, #4]
 80075dc:	1ac0      	subs	r0, r0, r3
 80075de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075e0:	b10b      	cbz	r3, 80075e6 <__sflush_r+0x46>
 80075e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075e4:	1ac0      	subs	r0, r0, r3
 80075e6:	2300      	movs	r3, #0
 80075e8:	4602      	mov	r2, r0
 80075ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ec:	6a21      	ldr	r1, [r4, #32]
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b0      	blx	r6
 80075f2:	1c43      	adds	r3, r0, #1
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	d106      	bne.n	8007606 <__sflush_r+0x66>
 80075f8:	6829      	ldr	r1, [r5, #0]
 80075fa:	291d      	cmp	r1, #29
 80075fc:	d82c      	bhi.n	8007658 <__sflush_r+0xb8>
 80075fe:	4a2a      	ldr	r2, [pc, #168]	; (80076a8 <__sflush_r+0x108>)
 8007600:	40ca      	lsrs	r2, r1
 8007602:	07d6      	lsls	r6, r2, #31
 8007604:	d528      	bpl.n	8007658 <__sflush_r+0xb8>
 8007606:	2200      	movs	r2, #0
 8007608:	6062      	str	r2, [r4, #4]
 800760a:	04d9      	lsls	r1, r3, #19
 800760c:	6922      	ldr	r2, [r4, #16]
 800760e:	6022      	str	r2, [r4, #0]
 8007610:	d504      	bpl.n	800761c <__sflush_r+0x7c>
 8007612:	1c42      	adds	r2, r0, #1
 8007614:	d101      	bne.n	800761a <__sflush_r+0x7a>
 8007616:	682b      	ldr	r3, [r5, #0]
 8007618:	b903      	cbnz	r3, 800761c <__sflush_r+0x7c>
 800761a:	6560      	str	r0, [r4, #84]	; 0x54
 800761c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800761e:	602f      	str	r7, [r5, #0]
 8007620:	2900      	cmp	r1, #0
 8007622:	d0ca      	beq.n	80075ba <__sflush_r+0x1a>
 8007624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007628:	4299      	cmp	r1, r3
 800762a:	d002      	beq.n	8007632 <__sflush_r+0x92>
 800762c:	4628      	mov	r0, r5
 800762e:	f000 f9d5 	bl	80079dc <_free_r>
 8007632:	2000      	movs	r0, #0
 8007634:	6360      	str	r0, [r4, #52]	; 0x34
 8007636:	e7c1      	b.n	80075bc <__sflush_r+0x1c>
 8007638:	6a21      	ldr	r1, [r4, #32]
 800763a:	2301      	movs	r3, #1
 800763c:	4628      	mov	r0, r5
 800763e:	47b0      	blx	r6
 8007640:	1c41      	adds	r1, r0, #1
 8007642:	d1c7      	bne.n	80075d4 <__sflush_r+0x34>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0c4      	beq.n	80075d4 <__sflush_r+0x34>
 800764a:	2b1d      	cmp	r3, #29
 800764c:	d001      	beq.n	8007652 <__sflush_r+0xb2>
 800764e:	2b16      	cmp	r3, #22
 8007650:	d101      	bne.n	8007656 <__sflush_r+0xb6>
 8007652:	602f      	str	r7, [r5, #0]
 8007654:	e7b1      	b.n	80075ba <__sflush_r+0x1a>
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800765c:	81a3      	strh	r3, [r4, #12]
 800765e:	e7ad      	b.n	80075bc <__sflush_r+0x1c>
 8007660:	690f      	ldr	r7, [r1, #16]
 8007662:	2f00      	cmp	r7, #0
 8007664:	d0a9      	beq.n	80075ba <__sflush_r+0x1a>
 8007666:	0793      	lsls	r3, r2, #30
 8007668:	680e      	ldr	r6, [r1, #0]
 800766a:	bf08      	it	eq
 800766c:	694b      	ldreq	r3, [r1, #20]
 800766e:	600f      	str	r7, [r1, #0]
 8007670:	bf18      	it	ne
 8007672:	2300      	movne	r3, #0
 8007674:	eba6 0807 	sub.w	r8, r6, r7
 8007678:	608b      	str	r3, [r1, #8]
 800767a:	f1b8 0f00 	cmp.w	r8, #0
 800767e:	dd9c      	ble.n	80075ba <__sflush_r+0x1a>
 8007680:	6a21      	ldr	r1, [r4, #32]
 8007682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007684:	4643      	mov	r3, r8
 8007686:	463a      	mov	r2, r7
 8007688:	4628      	mov	r0, r5
 800768a:	47b0      	blx	r6
 800768c:	2800      	cmp	r0, #0
 800768e:	dc06      	bgt.n	800769e <__sflush_r+0xfe>
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007696:	81a3      	strh	r3, [r4, #12]
 8007698:	f04f 30ff 	mov.w	r0, #4294967295
 800769c:	e78e      	b.n	80075bc <__sflush_r+0x1c>
 800769e:	4407      	add	r7, r0
 80076a0:	eba8 0800 	sub.w	r8, r8, r0
 80076a4:	e7e9      	b.n	800767a <__sflush_r+0xda>
 80076a6:	bf00      	nop
 80076a8:	20400001 	.word	0x20400001

080076ac <_fflush_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	690b      	ldr	r3, [r1, #16]
 80076b0:	4605      	mov	r5, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	b913      	cbnz	r3, 80076bc <_fflush_r+0x10>
 80076b6:	2500      	movs	r5, #0
 80076b8:	4628      	mov	r0, r5
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	b118      	cbz	r0, 80076c6 <_fflush_r+0x1a>
 80076be:	6983      	ldr	r3, [r0, #24]
 80076c0:	b90b      	cbnz	r3, 80076c6 <_fflush_r+0x1a>
 80076c2:	f000 f887 	bl	80077d4 <__sinit>
 80076c6:	4b14      	ldr	r3, [pc, #80]	; (8007718 <_fflush_r+0x6c>)
 80076c8:	429c      	cmp	r4, r3
 80076ca:	d11b      	bne.n	8007704 <_fflush_r+0x58>
 80076cc:	686c      	ldr	r4, [r5, #4]
 80076ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0ef      	beq.n	80076b6 <_fflush_r+0xa>
 80076d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076d8:	07d0      	lsls	r0, r2, #31
 80076da:	d404      	bmi.n	80076e6 <_fflush_r+0x3a>
 80076dc:	0599      	lsls	r1, r3, #22
 80076de:	d402      	bmi.n	80076e6 <_fflush_r+0x3a>
 80076e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076e2:	f000 f915 	bl	8007910 <__retarget_lock_acquire_recursive>
 80076e6:	4628      	mov	r0, r5
 80076e8:	4621      	mov	r1, r4
 80076ea:	f7ff ff59 	bl	80075a0 <__sflush_r>
 80076ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076f0:	07da      	lsls	r2, r3, #31
 80076f2:	4605      	mov	r5, r0
 80076f4:	d4e0      	bmi.n	80076b8 <_fflush_r+0xc>
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	059b      	lsls	r3, r3, #22
 80076fa:	d4dd      	bmi.n	80076b8 <_fflush_r+0xc>
 80076fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076fe:	f000 f908 	bl	8007912 <__retarget_lock_release_recursive>
 8007702:	e7d9      	b.n	80076b8 <_fflush_r+0xc>
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <_fflush_r+0x70>)
 8007706:	429c      	cmp	r4, r3
 8007708:	d101      	bne.n	800770e <_fflush_r+0x62>
 800770a:	68ac      	ldr	r4, [r5, #8]
 800770c:	e7df      	b.n	80076ce <_fflush_r+0x22>
 800770e:	4b04      	ldr	r3, [pc, #16]	; (8007720 <_fflush_r+0x74>)
 8007710:	429c      	cmp	r4, r3
 8007712:	bf08      	it	eq
 8007714:	68ec      	ldreq	r4, [r5, #12]
 8007716:	e7da      	b.n	80076ce <_fflush_r+0x22>
 8007718:	08007d64 	.word	0x08007d64
 800771c:	08007d84 	.word	0x08007d84
 8007720:	08007d44 	.word	0x08007d44

08007724 <std>:
 8007724:	2300      	movs	r3, #0
 8007726:	b510      	push	{r4, lr}
 8007728:	4604      	mov	r4, r0
 800772a:	e9c0 3300 	strd	r3, r3, [r0]
 800772e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007732:	6083      	str	r3, [r0, #8]
 8007734:	8181      	strh	r1, [r0, #12]
 8007736:	6643      	str	r3, [r0, #100]	; 0x64
 8007738:	81c2      	strh	r2, [r0, #14]
 800773a:	6183      	str	r3, [r0, #24]
 800773c:	4619      	mov	r1, r3
 800773e:	2208      	movs	r2, #8
 8007740:	305c      	adds	r0, #92	; 0x5c
 8007742:	f7ff fdef 	bl	8007324 <memset>
 8007746:	4b05      	ldr	r3, [pc, #20]	; (800775c <std+0x38>)
 8007748:	6263      	str	r3, [r4, #36]	; 0x24
 800774a:	4b05      	ldr	r3, [pc, #20]	; (8007760 <std+0x3c>)
 800774c:	62a3      	str	r3, [r4, #40]	; 0x28
 800774e:	4b05      	ldr	r3, [pc, #20]	; (8007764 <std+0x40>)
 8007750:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007752:	4b05      	ldr	r3, [pc, #20]	; (8007768 <std+0x44>)
 8007754:	6224      	str	r4, [r4, #32]
 8007756:	6323      	str	r3, [r4, #48]	; 0x30
 8007758:	bd10      	pop	{r4, pc}
 800775a:	bf00      	nop
 800775c:	08007b51 	.word	0x08007b51
 8007760:	08007b73 	.word	0x08007b73
 8007764:	08007bab 	.word	0x08007bab
 8007768:	08007bcf 	.word	0x08007bcf

0800776c <_cleanup_r>:
 800776c:	4901      	ldr	r1, [pc, #4]	; (8007774 <_cleanup_r+0x8>)
 800776e:	f000 b8af 	b.w	80078d0 <_fwalk_reent>
 8007772:	bf00      	nop
 8007774:	080076ad 	.word	0x080076ad

08007778 <__sfmoreglue>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	1e4a      	subs	r2, r1, #1
 800777c:	2568      	movs	r5, #104	; 0x68
 800777e:	4355      	muls	r5, r2
 8007780:	460e      	mov	r6, r1
 8007782:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007786:	f000 f979 	bl	8007a7c <_malloc_r>
 800778a:	4604      	mov	r4, r0
 800778c:	b140      	cbz	r0, 80077a0 <__sfmoreglue+0x28>
 800778e:	2100      	movs	r1, #0
 8007790:	e9c0 1600 	strd	r1, r6, [r0]
 8007794:	300c      	adds	r0, #12
 8007796:	60a0      	str	r0, [r4, #8]
 8007798:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800779c:	f7ff fdc2 	bl	8007324 <memset>
 80077a0:	4620      	mov	r0, r4
 80077a2:	bd70      	pop	{r4, r5, r6, pc}

080077a4 <__sfp_lock_acquire>:
 80077a4:	4801      	ldr	r0, [pc, #4]	; (80077ac <__sfp_lock_acquire+0x8>)
 80077a6:	f000 b8b3 	b.w	8007910 <__retarget_lock_acquire_recursive>
 80077aa:	bf00      	nop
 80077ac:	20004328 	.word	0x20004328

080077b0 <__sfp_lock_release>:
 80077b0:	4801      	ldr	r0, [pc, #4]	; (80077b8 <__sfp_lock_release+0x8>)
 80077b2:	f000 b8ae 	b.w	8007912 <__retarget_lock_release_recursive>
 80077b6:	bf00      	nop
 80077b8:	20004328 	.word	0x20004328

080077bc <__sinit_lock_acquire>:
 80077bc:	4801      	ldr	r0, [pc, #4]	; (80077c4 <__sinit_lock_acquire+0x8>)
 80077be:	f000 b8a7 	b.w	8007910 <__retarget_lock_acquire_recursive>
 80077c2:	bf00      	nop
 80077c4:	20004323 	.word	0x20004323

080077c8 <__sinit_lock_release>:
 80077c8:	4801      	ldr	r0, [pc, #4]	; (80077d0 <__sinit_lock_release+0x8>)
 80077ca:	f000 b8a2 	b.w	8007912 <__retarget_lock_release_recursive>
 80077ce:	bf00      	nop
 80077d0:	20004323 	.word	0x20004323

080077d4 <__sinit>:
 80077d4:	b510      	push	{r4, lr}
 80077d6:	4604      	mov	r4, r0
 80077d8:	f7ff fff0 	bl	80077bc <__sinit_lock_acquire>
 80077dc:	69a3      	ldr	r3, [r4, #24]
 80077de:	b11b      	cbz	r3, 80077e8 <__sinit+0x14>
 80077e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e4:	f7ff bff0 	b.w	80077c8 <__sinit_lock_release>
 80077e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077ec:	6523      	str	r3, [r4, #80]	; 0x50
 80077ee:	4b13      	ldr	r3, [pc, #76]	; (800783c <__sinit+0x68>)
 80077f0:	4a13      	ldr	r2, [pc, #76]	; (8007840 <__sinit+0x6c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80077f6:	42a3      	cmp	r3, r4
 80077f8:	bf04      	itt	eq
 80077fa:	2301      	moveq	r3, #1
 80077fc:	61a3      	streq	r3, [r4, #24]
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 f820 	bl	8007844 <__sfp>
 8007804:	6060      	str	r0, [r4, #4]
 8007806:	4620      	mov	r0, r4
 8007808:	f000 f81c 	bl	8007844 <__sfp>
 800780c:	60a0      	str	r0, [r4, #8]
 800780e:	4620      	mov	r0, r4
 8007810:	f000 f818 	bl	8007844 <__sfp>
 8007814:	2200      	movs	r2, #0
 8007816:	60e0      	str	r0, [r4, #12]
 8007818:	2104      	movs	r1, #4
 800781a:	6860      	ldr	r0, [r4, #4]
 800781c:	f7ff ff82 	bl	8007724 <std>
 8007820:	68a0      	ldr	r0, [r4, #8]
 8007822:	2201      	movs	r2, #1
 8007824:	2109      	movs	r1, #9
 8007826:	f7ff ff7d 	bl	8007724 <std>
 800782a:	68e0      	ldr	r0, [r4, #12]
 800782c:	2202      	movs	r2, #2
 800782e:	2112      	movs	r1, #18
 8007830:	f7ff ff78 	bl	8007724 <std>
 8007834:	2301      	movs	r3, #1
 8007836:	61a3      	str	r3, [r4, #24]
 8007838:	e7d2      	b.n	80077e0 <__sinit+0xc>
 800783a:	bf00      	nop
 800783c:	08007d40 	.word	0x08007d40
 8007840:	0800776d 	.word	0x0800776d

08007844 <__sfp>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	4607      	mov	r7, r0
 8007848:	f7ff ffac 	bl	80077a4 <__sfp_lock_acquire>
 800784c:	4b1e      	ldr	r3, [pc, #120]	; (80078c8 <__sfp+0x84>)
 800784e:	681e      	ldr	r6, [r3, #0]
 8007850:	69b3      	ldr	r3, [r6, #24]
 8007852:	b913      	cbnz	r3, 800785a <__sfp+0x16>
 8007854:	4630      	mov	r0, r6
 8007856:	f7ff ffbd 	bl	80077d4 <__sinit>
 800785a:	3648      	adds	r6, #72	; 0x48
 800785c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007860:	3b01      	subs	r3, #1
 8007862:	d503      	bpl.n	800786c <__sfp+0x28>
 8007864:	6833      	ldr	r3, [r6, #0]
 8007866:	b30b      	cbz	r3, 80078ac <__sfp+0x68>
 8007868:	6836      	ldr	r6, [r6, #0]
 800786a:	e7f7      	b.n	800785c <__sfp+0x18>
 800786c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007870:	b9d5      	cbnz	r5, 80078a8 <__sfp+0x64>
 8007872:	4b16      	ldr	r3, [pc, #88]	; (80078cc <__sfp+0x88>)
 8007874:	60e3      	str	r3, [r4, #12]
 8007876:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800787a:	6665      	str	r5, [r4, #100]	; 0x64
 800787c:	f000 f847 	bl	800790e <__retarget_lock_init_recursive>
 8007880:	f7ff ff96 	bl	80077b0 <__sfp_lock_release>
 8007884:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007888:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800788c:	6025      	str	r5, [r4, #0]
 800788e:	61a5      	str	r5, [r4, #24]
 8007890:	2208      	movs	r2, #8
 8007892:	4629      	mov	r1, r5
 8007894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007898:	f7ff fd44 	bl	8007324 <memset>
 800789c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078a4:	4620      	mov	r0, r4
 80078a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a8:	3468      	adds	r4, #104	; 0x68
 80078aa:	e7d9      	b.n	8007860 <__sfp+0x1c>
 80078ac:	2104      	movs	r1, #4
 80078ae:	4638      	mov	r0, r7
 80078b0:	f7ff ff62 	bl	8007778 <__sfmoreglue>
 80078b4:	4604      	mov	r4, r0
 80078b6:	6030      	str	r0, [r6, #0]
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d1d5      	bne.n	8007868 <__sfp+0x24>
 80078bc:	f7ff ff78 	bl	80077b0 <__sfp_lock_release>
 80078c0:	230c      	movs	r3, #12
 80078c2:	603b      	str	r3, [r7, #0]
 80078c4:	e7ee      	b.n	80078a4 <__sfp+0x60>
 80078c6:	bf00      	nop
 80078c8:	08007d40 	.word	0x08007d40
 80078cc:	ffff0001 	.word	0xffff0001

080078d0 <_fwalk_reent>:
 80078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	4606      	mov	r6, r0
 80078d6:	4688      	mov	r8, r1
 80078d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078dc:	2700      	movs	r7, #0
 80078de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078e2:	f1b9 0901 	subs.w	r9, r9, #1
 80078e6:	d505      	bpl.n	80078f4 <_fwalk_reent+0x24>
 80078e8:	6824      	ldr	r4, [r4, #0]
 80078ea:	2c00      	cmp	r4, #0
 80078ec:	d1f7      	bne.n	80078de <_fwalk_reent+0xe>
 80078ee:	4638      	mov	r0, r7
 80078f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f4:	89ab      	ldrh	r3, [r5, #12]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d907      	bls.n	800790a <_fwalk_reent+0x3a>
 80078fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078fe:	3301      	adds	r3, #1
 8007900:	d003      	beq.n	800790a <_fwalk_reent+0x3a>
 8007902:	4629      	mov	r1, r5
 8007904:	4630      	mov	r0, r6
 8007906:	47c0      	blx	r8
 8007908:	4307      	orrs	r7, r0
 800790a:	3568      	adds	r5, #104	; 0x68
 800790c:	e7e9      	b.n	80078e2 <_fwalk_reent+0x12>

0800790e <__retarget_lock_init_recursive>:
 800790e:	4770      	bx	lr

08007910 <__retarget_lock_acquire_recursive>:
 8007910:	4770      	bx	lr

08007912 <__retarget_lock_release_recursive>:
 8007912:	4770      	bx	lr

08007914 <__swhatbuf_r>:
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	460e      	mov	r6, r1
 8007918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791c:	2900      	cmp	r1, #0
 800791e:	b096      	sub	sp, #88	; 0x58
 8007920:	4614      	mov	r4, r2
 8007922:	461d      	mov	r5, r3
 8007924:	da07      	bge.n	8007936 <__swhatbuf_r+0x22>
 8007926:	2300      	movs	r3, #0
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	89b3      	ldrh	r3, [r6, #12]
 800792c:	061a      	lsls	r2, r3, #24
 800792e:	d410      	bmi.n	8007952 <__swhatbuf_r+0x3e>
 8007930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007934:	e00e      	b.n	8007954 <__swhatbuf_r+0x40>
 8007936:	466a      	mov	r2, sp
 8007938:	f000 f970 	bl	8007c1c <_fstat_r>
 800793c:	2800      	cmp	r0, #0
 800793e:	dbf2      	blt.n	8007926 <__swhatbuf_r+0x12>
 8007940:	9a01      	ldr	r2, [sp, #4]
 8007942:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007946:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800794a:	425a      	negs	r2, r3
 800794c:	415a      	adcs	r2, r3
 800794e:	602a      	str	r2, [r5, #0]
 8007950:	e7ee      	b.n	8007930 <__swhatbuf_r+0x1c>
 8007952:	2340      	movs	r3, #64	; 0x40
 8007954:	2000      	movs	r0, #0
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	b016      	add	sp, #88	; 0x58
 800795a:	bd70      	pop	{r4, r5, r6, pc}

0800795c <__smakebuf_r>:
 800795c:	898b      	ldrh	r3, [r1, #12]
 800795e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007960:	079d      	lsls	r5, r3, #30
 8007962:	4606      	mov	r6, r0
 8007964:	460c      	mov	r4, r1
 8007966:	d507      	bpl.n	8007978 <__smakebuf_r+0x1c>
 8007968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	6123      	str	r3, [r4, #16]
 8007970:	2301      	movs	r3, #1
 8007972:	6163      	str	r3, [r4, #20]
 8007974:	b002      	add	sp, #8
 8007976:	bd70      	pop	{r4, r5, r6, pc}
 8007978:	ab01      	add	r3, sp, #4
 800797a:	466a      	mov	r2, sp
 800797c:	f7ff ffca 	bl	8007914 <__swhatbuf_r>
 8007980:	9900      	ldr	r1, [sp, #0]
 8007982:	4605      	mov	r5, r0
 8007984:	4630      	mov	r0, r6
 8007986:	f000 f879 	bl	8007a7c <_malloc_r>
 800798a:	b948      	cbnz	r0, 80079a0 <__smakebuf_r+0x44>
 800798c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007990:	059a      	lsls	r2, r3, #22
 8007992:	d4ef      	bmi.n	8007974 <__smakebuf_r+0x18>
 8007994:	f023 0303 	bic.w	r3, r3, #3
 8007998:	f043 0302 	orr.w	r3, r3, #2
 800799c:	81a3      	strh	r3, [r4, #12]
 800799e:	e7e3      	b.n	8007968 <__smakebuf_r+0xc>
 80079a0:	4b0d      	ldr	r3, [pc, #52]	; (80079d8 <__smakebuf_r+0x7c>)
 80079a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	6020      	str	r0, [r4, #0]
 80079a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ac:	81a3      	strh	r3, [r4, #12]
 80079ae:	9b00      	ldr	r3, [sp, #0]
 80079b0:	6163      	str	r3, [r4, #20]
 80079b2:	9b01      	ldr	r3, [sp, #4]
 80079b4:	6120      	str	r0, [r4, #16]
 80079b6:	b15b      	cbz	r3, 80079d0 <__smakebuf_r+0x74>
 80079b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079bc:	4630      	mov	r0, r6
 80079be:	f000 f93f 	bl	8007c40 <_isatty_r>
 80079c2:	b128      	cbz	r0, 80079d0 <__smakebuf_r+0x74>
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	f023 0303 	bic.w	r3, r3, #3
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	81a3      	strh	r3, [r4, #12]
 80079d0:	89a0      	ldrh	r0, [r4, #12]
 80079d2:	4305      	orrs	r5, r0
 80079d4:	81a5      	strh	r5, [r4, #12]
 80079d6:	e7cd      	b.n	8007974 <__smakebuf_r+0x18>
 80079d8:	0800776d 	.word	0x0800776d

080079dc <_free_r>:
 80079dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079de:	2900      	cmp	r1, #0
 80079e0:	d048      	beq.n	8007a74 <_free_r+0x98>
 80079e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e6:	9001      	str	r0, [sp, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f1a1 0404 	sub.w	r4, r1, #4
 80079ee:	bfb8      	it	lt
 80079f0:	18e4      	addlt	r4, r4, r3
 80079f2:	f000 f947 	bl	8007c84 <__malloc_lock>
 80079f6:	4a20      	ldr	r2, [pc, #128]	; (8007a78 <_free_r+0x9c>)
 80079f8:	9801      	ldr	r0, [sp, #4]
 80079fa:	6813      	ldr	r3, [r2, #0]
 80079fc:	4615      	mov	r5, r2
 80079fe:	b933      	cbnz	r3, 8007a0e <_free_r+0x32>
 8007a00:	6063      	str	r3, [r4, #4]
 8007a02:	6014      	str	r4, [r2, #0]
 8007a04:	b003      	add	sp, #12
 8007a06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a0a:	f000 b941 	b.w	8007c90 <__malloc_unlock>
 8007a0e:	42a3      	cmp	r3, r4
 8007a10:	d90b      	bls.n	8007a2a <_free_r+0x4e>
 8007a12:	6821      	ldr	r1, [r4, #0]
 8007a14:	1862      	adds	r2, r4, r1
 8007a16:	4293      	cmp	r3, r2
 8007a18:	bf04      	itt	eq
 8007a1a:	681a      	ldreq	r2, [r3, #0]
 8007a1c:	685b      	ldreq	r3, [r3, #4]
 8007a1e:	6063      	str	r3, [r4, #4]
 8007a20:	bf04      	itt	eq
 8007a22:	1852      	addeq	r2, r2, r1
 8007a24:	6022      	streq	r2, [r4, #0]
 8007a26:	602c      	str	r4, [r5, #0]
 8007a28:	e7ec      	b.n	8007a04 <_free_r+0x28>
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	b10b      	cbz	r3, 8007a34 <_free_r+0x58>
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d9fa      	bls.n	8007a2a <_free_r+0x4e>
 8007a34:	6811      	ldr	r1, [r2, #0]
 8007a36:	1855      	adds	r5, r2, r1
 8007a38:	42a5      	cmp	r5, r4
 8007a3a:	d10b      	bne.n	8007a54 <_free_r+0x78>
 8007a3c:	6824      	ldr	r4, [r4, #0]
 8007a3e:	4421      	add	r1, r4
 8007a40:	1854      	adds	r4, r2, r1
 8007a42:	42a3      	cmp	r3, r4
 8007a44:	6011      	str	r1, [r2, #0]
 8007a46:	d1dd      	bne.n	8007a04 <_free_r+0x28>
 8007a48:	681c      	ldr	r4, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	6053      	str	r3, [r2, #4]
 8007a4e:	4421      	add	r1, r4
 8007a50:	6011      	str	r1, [r2, #0]
 8007a52:	e7d7      	b.n	8007a04 <_free_r+0x28>
 8007a54:	d902      	bls.n	8007a5c <_free_r+0x80>
 8007a56:	230c      	movs	r3, #12
 8007a58:	6003      	str	r3, [r0, #0]
 8007a5a:	e7d3      	b.n	8007a04 <_free_r+0x28>
 8007a5c:	6825      	ldr	r5, [r4, #0]
 8007a5e:	1961      	adds	r1, r4, r5
 8007a60:	428b      	cmp	r3, r1
 8007a62:	bf04      	itt	eq
 8007a64:	6819      	ldreq	r1, [r3, #0]
 8007a66:	685b      	ldreq	r3, [r3, #4]
 8007a68:	6063      	str	r3, [r4, #4]
 8007a6a:	bf04      	itt	eq
 8007a6c:	1949      	addeq	r1, r1, r5
 8007a6e:	6021      	streq	r1, [r4, #0]
 8007a70:	6054      	str	r4, [r2, #4]
 8007a72:	e7c7      	b.n	8007a04 <_free_r+0x28>
 8007a74:	b003      	add	sp, #12
 8007a76:	bd30      	pop	{r4, r5, pc}
 8007a78:	200000a8 	.word	0x200000a8

08007a7c <_malloc_r>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	1ccd      	adds	r5, r1, #3
 8007a80:	f025 0503 	bic.w	r5, r5, #3
 8007a84:	3508      	adds	r5, #8
 8007a86:	2d0c      	cmp	r5, #12
 8007a88:	bf38      	it	cc
 8007a8a:	250c      	movcc	r5, #12
 8007a8c:	2d00      	cmp	r5, #0
 8007a8e:	4606      	mov	r6, r0
 8007a90:	db01      	blt.n	8007a96 <_malloc_r+0x1a>
 8007a92:	42a9      	cmp	r1, r5
 8007a94:	d903      	bls.n	8007a9e <_malloc_r+0x22>
 8007a96:	230c      	movs	r3, #12
 8007a98:	6033      	str	r3, [r6, #0]
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a9e:	f000 f8f1 	bl	8007c84 <__malloc_lock>
 8007aa2:	4921      	ldr	r1, [pc, #132]	; (8007b28 <_malloc_r+0xac>)
 8007aa4:	680a      	ldr	r2, [r1, #0]
 8007aa6:	4614      	mov	r4, r2
 8007aa8:	b99c      	cbnz	r4, 8007ad2 <_malloc_r+0x56>
 8007aaa:	4f20      	ldr	r7, [pc, #128]	; (8007b2c <_malloc_r+0xb0>)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	b923      	cbnz	r3, 8007aba <_malloc_r+0x3e>
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f000 f83c 	bl	8007b30 <_sbrk_r>
 8007ab8:	6038      	str	r0, [r7, #0]
 8007aba:	4629      	mov	r1, r5
 8007abc:	4630      	mov	r0, r6
 8007abe:	f000 f837 	bl	8007b30 <_sbrk_r>
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	d123      	bne.n	8007b0e <_malloc_r+0x92>
 8007ac6:	230c      	movs	r3, #12
 8007ac8:	6033      	str	r3, [r6, #0]
 8007aca:	4630      	mov	r0, r6
 8007acc:	f000 f8e0 	bl	8007c90 <__malloc_unlock>
 8007ad0:	e7e3      	b.n	8007a9a <_malloc_r+0x1e>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	1b5b      	subs	r3, r3, r5
 8007ad6:	d417      	bmi.n	8007b08 <_malloc_r+0x8c>
 8007ad8:	2b0b      	cmp	r3, #11
 8007ada:	d903      	bls.n	8007ae4 <_malloc_r+0x68>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	441c      	add	r4, r3
 8007ae0:	6025      	str	r5, [r4, #0]
 8007ae2:	e004      	b.n	8007aee <_malloc_r+0x72>
 8007ae4:	6863      	ldr	r3, [r4, #4]
 8007ae6:	42a2      	cmp	r2, r4
 8007ae8:	bf0c      	ite	eq
 8007aea:	600b      	streq	r3, [r1, #0]
 8007aec:	6053      	strne	r3, [r2, #4]
 8007aee:	4630      	mov	r0, r6
 8007af0:	f000 f8ce 	bl	8007c90 <__malloc_unlock>
 8007af4:	f104 000b 	add.w	r0, r4, #11
 8007af8:	1d23      	adds	r3, r4, #4
 8007afa:	f020 0007 	bic.w	r0, r0, #7
 8007afe:	1ac2      	subs	r2, r0, r3
 8007b00:	d0cc      	beq.n	8007a9c <_malloc_r+0x20>
 8007b02:	1a1b      	subs	r3, r3, r0
 8007b04:	50a3      	str	r3, [r4, r2]
 8007b06:	e7c9      	b.n	8007a9c <_malloc_r+0x20>
 8007b08:	4622      	mov	r2, r4
 8007b0a:	6864      	ldr	r4, [r4, #4]
 8007b0c:	e7cc      	b.n	8007aa8 <_malloc_r+0x2c>
 8007b0e:	1cc4      	adds	r4, r0, #3
 8007b10:	f024 0403 	bic.w	r4, r4, #3
 8007b14:	42a0      	cmp	r0, r4
 8007b16:	d0e3      	beq.n	8007ae0 <_malloc_r+0x64>
 8007b18:	1a21      	subs	r1, r4, r0
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f000 f808 	bl	8007b30 <_sbrk_r>
 8007b20:	3001      	adds	r0, #1
 8007b22:	d1dd      	bne.n	8007ae0 <_malloc_r+0x64>
 8007b24:	e7cf      	b.n	8007ac6 <_malloc_r+0x4a>
 8007b26:	bf00      	nop
 8007b28:	200000a8 	.word	0x200000a8
 8007b2c:	200000ac 	.word	0x200000ac

08007b30 <_sbrk_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d06      	ldr	r5, [pc, #24]	; (8007b4c <_sbrk_r+0x1c>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	f7f9 f9e4 	bl	8000f08 <_sbrk>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_sbrk_r+0x1a>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_sbrk_r+0x1a>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	2000432c 	.word	0x2000432c

08007b50 <__sread>:
 8007b50:	b510      	push	{r4, lr}
 8007b52:	460c      	mov	r4, r1
 8007b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b58:	f000 f8a0 	bl	8007c9c <_read_r>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	bfab      	itete	ge
 8007b60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b62:	89a3      	ldrhlt	r3, [r4, #12]
 8007b64:	181b      	addge	r3, r3, r0
 8007b66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b6a:	bfac      	ite	ge
 8007b6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b6e:	81a3      	strhlt	r3, [r4, #12]
 8007b70:	bd10      	pop	{r4, pc}

08007b72 <__swrite>:
 8007b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b76:	461f      	mov	r7, r3
 8007b78:	898b      	ldrh	r3, [r1, #12]
 8007b7a:	05db      	lsls	r3, r3, #23
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	4616      	mov	r6, r2
 8007b82:	d505      	bpl.n	8007b90 <__swrite+0x1e>
 8007b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b88:	2302      	movs	r3, #2
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f000 f868 	bl	8007c60 <_lseek_r>
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b9a:	81a3      	strh	r3, [r4, #12]
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba6:	f000 b817 	b.w	8007bd8 <_write_r>

08007baa <__sseek>:
 8007baa:	b510      	push	{r4, lr}
 8007bac:	460c      	mov	r4, r1
 8007bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb2:	f000 f855 	bl	8007c60 <_lseek_r>
 8007bb6:	1c43      	adds	r3, r0, #1
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	bf15      	itete	ne
 8007bbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bc6:	81a3      	strheq	r3, [r4, #12]
 8007bc8:	bf18      	it	ne
 8007bca:	81a3      	strhne	r3, [r4, #12]
 8007bcc:	bd10      	pop	{r4, pc}

08007bce <__sclose>:
 8007bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd2:	f000 b813 	b.w	8007bfc <_close_r>
	...

08007bd8 <_write_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4d07      	ldr	r5, [pc, #28]	; (8007bf8 <_write_r+0x20>)
 8007bdc:	4604      	mov	r4, r0
 8007bde:	4608      	mov	r0, r1
 8007be0:	4611      	mov	r1, r2
 8007be2:	2200      	movs	r2, #0
 8007be4:	602a      	str	r2, [r5, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f7f9 f93d 	bl	8000e66 <_write>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_write_r+0x1e>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_write_r+0x1e>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	2000432c 	.word	0x2000432c

08007bfc <_close_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4d06      	ldr	r5, [pc, #24]	; (8007c18 <_close_r+0x1c>)
 8007c00:	2300      	movs	r3, #0
 8007c02:	4604      	mov	r4, r0
 8007c04:	4608      	mov	r0, r1
 8007c06:	602b      	str	r3, [r5, #0]
 8007c08:	f7f9 f949 	bl	8000e9e <_close>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_close_r+0x1a>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_close_r+0x1a>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	2000432c 	.word	0x2000432c

08007c1c <_fstat_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4d07      	ldr	r5, [pc, #28]	; (8007c3c <_fstat_r+0x20>)
 8007c20:	2300      	movs	r3, #0
 8007c22:	4604      	mov	r4, r0
 8007c24:	4608      	mov	r0, r1
 8007c26:	4611      	mov	r1, r2
 8007c28:	602b      	str	r3, [r5, #0]
 8007c2a:	f7f9 f944 	bl	8000eb6 <_fstat>
 8007c2e:	1c43      	adds	r3, r0, #1
 8007c30:	d102      	bne.n	8007c38 <_fstat_r+0x1c>
 8007c32:	682b      	ldr	r3, [r5, #0]
 8007c34:	b103      	cbz	r3, 8007c38 <_fstat_r+0x1c>
 8007c36:	6023      	str	r3, [r4, #0]
 8007c38:	bd38      	pop	{r3, r4, r5, pc}
 8007c3a:	bf00      	nop
 8007c3c:	2000432c 	.word	0x2000432c

08007c40 <_isatty_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d06      	ldr	r5, [pc, #24]	; (8007c5c <_isatty_r+0x1c>)
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	602b      	str	r3, [r5, #0]
 8007c4c:	f7f9 f943 	bl	8000ed6 <_isatty>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d102      	bne.n	8007c5a <_isatty_r+0x1a>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	b103      	cbz	r3, 8007c5a <_isatty_r+0x1a>
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	2000432c 	.word	0x2000432c

08007c60 <_lseek_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d07      	ldr	r5, [pc, #28]	; (8007c80 <_lseek_r+0x20>)
 8007c64:	4604      	mov	r4, r0
 8007c66:	4608      	mov	r0, r1
 8007c68:	4611      	mov	r1, r2
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	602a      	str	r2, [r5, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f7f9 f93c 	bl	8000eec <_lseek>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_lseek_r+0x1e>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_lseek_r+0x1e>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	2000432c 	.word	0x2000432c

08007c84 <__malloc_lock>:
 8007c84:	4801      	ldr	r0, [pc, #4]	; (8007c8c <__malloc_lock+0x8>)
 8007c86:	f7ff be43 	b.w	8007910 <__retarget_lock_acquire_recursive>
 8007c8a:	bf00      	nop
 8007c8c:	20004324 	.word	0x20004324

08007c90 <__malloc_unlock>:
 8007c90:	4801      	ldr	r0, [pc, #4]	; (8007c98 <__malloc_unlock+0x8>)
 8007c92:	f7ff be3e 	b.w	8007912 <__retarget_lock_release_recursive>
 8007c96:	bf00      	nop
 8007c98:	20004324 	.word	0x20004324

08007c9c <_read_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d07      	ldr	r5, [pc, #28]	; (8007cbc <_read_r+0x20>)
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	602a      	str	r2, [r5, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	f7f9 f8be 	bl	8000e2c <_read>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d102      	bne.n	8007cba <_read_r+0x1e>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	b103      	cbz	r3, 8007cba <_read_r+0x1e>
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	2000432c 	.word	0x2000432c

08007cc0 <_init>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr

08007ccc <_fini>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr
