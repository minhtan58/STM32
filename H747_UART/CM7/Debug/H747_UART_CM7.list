
H747_UART_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000689c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bec  08006bec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006bec  08006bec  00016bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bf4  08006bf4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bf4  08006bf4  00016bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  24000074  08006c70  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000260  08006c70  00020260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019251  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d39  00000000  00000000  000392f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0003c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  0003ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f272  00000000  00000000  0003d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001026a  00000000  00000000  0007caca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194cee  00000000  00000000  0008cd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00221a22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003928  00000000  00000000  00221a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006b1c 	.word	0x08006b1c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	08006b1c 	.word	0x08006b1c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_UART8_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar (int ch) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
 8000712:	f107 010f 	add.w	r1, r7, #15
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	2201      	movs	r2, #1
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <__io_putchar+0x28>)
 800071e:	f004 f943 	bl	80049a8 <HAL_UART_Transmit>
	return ch;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2400009c 	.word	0x2400009c

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800073c:	bf00      	nop
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <main+0xac>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d004      	beq.n	8000754 <main+0x24>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	dcf4      	bgt.n	800073e <main+0xe>
  if ( timeout < 0 )
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	da01      	bge.n	800075e <main+0x2e>
  {
  Error_Handler();
 800075a:	f000 f9ed 	bl	8000b38 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fc39 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f83f 	bl	80007e4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <main+0xac>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <main+0xac>)
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <main+0xac>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000784:	2000      	movs	r0, #0
 8000786:	f001 fd09 	bl	800219c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800078a:	2100      	movs	r1, #0
 800078c:	2000      	movs	r0, #0
 800078e:	f001 fd1f 	bl	80021d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000796:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000798:	bf00      	nop
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <main+0xac>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d104      	bne.n	80007b0 <main+0x80>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dcf4      	bgt.n	800079a <main+0x6a>
if ( timeout < 0 )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	da01      	bge.n	80007ba <main+0x8a>
{
Error_Handler();
 80007b6:	f000 f9bf 	bl	8000b38 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f975 	bl	8000aa8 <MX_GPIO_Init>
  MX_UART8_Init();
 80007be:	f000 f88f 	bl	80008e0 <MX_UART8_Init>
  MX_USART1_UART_Init();
 80007c2:	f000 f8d9 	bl	8000978 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007c6:	f000 f923 	bl	8000a10 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		printf("=====Tran Minh Tan=====\r\n");
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <main+0xb0>)
 80007cc:	f005 fd4e 	bl	800626c <puts>
		HAL_Delay(1000);
 80007d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d4:	f000 fc90 	bl	80010f8 <HAL_Delay>
		printf("=====Tran Minh Tan=====\r\n");
 80007d8:	e7f7      	b.n	80007ca <main+0x9a>
 80007da:	bf00      	nop
 80007dc:	58024400 	.word	0x58024400
 80007e0:	08006b34 	.word	0x08006b34

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09e      	sub	sp, #120	; 0x78
 80007e8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f0:	2004      	movs	r0, #4
 80007f2:	f001 fd01 	bl	80021f8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b37      	ldr	r3, [pc, #220]	; (80008d8 <SystemClock_Config+0xf4>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	4a36      	ldr	r2, [pc, #216]	; (80008d8 <SystemClock_Config+0xf4>)
 8000800:	f023 0301 	bic.w	r3, r3, #1
 8000804:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000806:	4b34      	ldr	r3, [pc, #208]	; (80008d8 <SystemClock_Config+0xf4>)
 8000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b32      	ldr	r3, [pc, #200]	; (80008dc <SystemClock_Config+0xf8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a31      	ldr	r2, [pc, #196]	; (80008dc <SystemClock_Config+0xf8>)
 8000816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <SystemClock_Config+0xf8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000828:	bf00      	nop
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <SystemClock_Config+0xf8>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000836:	d1f8      	bne.n	800082a <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000838:	2301      	movs	r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000840:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	2302      	movs	r3, #2
 8000850:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000852:	2305      	movs	r3, #5
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000856:	23a0      	movs	r3, #160	; 0xa0
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000866:	2304      	movs	r3, #4
 8000868:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800086a:	2300      	movs	r3, #0
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800086e:	2308      	movs	r3, #8
 8000870:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fd18 	bl	80022ac <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000882:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800088a:	f000 f955 	bl	8000b38 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800088e:	233f      	movs	r3, #63	; 0x3f
 8000890:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000892:	2303      	movs	r3, #3
 8000894:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800089a:	2308      	movs	r3, #8
 800089c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a2:	2340      	movs	r3, #64	; 0x40
 80008a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80008b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008b4:	2104      	movs	r1, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 f908 	bl	8002acc <HAL_RCC_ClockConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80008c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008ca:	f000 f935 	bl	8000b38 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 80008ce:	bf00      	nop
 80008d0:	3778      	adds	r7, #120	; 0x78
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	58000400 	.word	0x58000400
 80008dc:	58024800 	.word	0x58024800

080008e0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_UART8_Init+0x90>)
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <MX_UART8_Init+0x94>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_UART8_Init+0x90>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_UART8_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_UART8_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_UART8_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_UART8_Init+0x90>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_UART8_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_UART8_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_UART8_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_UART8_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_UART8_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_UART8_Init+0x90>)
 800092a:	f003 ffed 	bl	8004908 <HAL_UART_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f900 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_UART8_Init+0x90>)
 800093c:	f005 fb2b 	bl	8005f96 <HAL_UARTEx_SetTxFifoThreshold>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000946:	f000 f8f7 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <MX_UART8_Init+0x90>)
 800094e:	f005 fb60 	bl	8006012 <HAL_UARTEx_SetRxFifoThreshold>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000958:	f000 f8ee 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_UART8_Init+0x90>)
 800095e:	f005 fae1 	bl	8005f24 <HAL_UARTEx_DisableFifoMode>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f8e6 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2400012c 	.word	0x2400012c
 8000974:	40007c00 	.word	0x40007c00

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <MX_USART1_UART_Init+0x94>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009c2:	f003 ffa1 	bl	8004908 <HAL_UART_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f8b4 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009d4:	f005 fadf 	bl	8005f96 <HAL_UARTEx_SetTxFifoThreshold>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f8ab 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009e6:	f005 fb14 	bl	8006012 <HAL_UARTEx_SetRxFifoThreshold>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009f0:	f000 f8a2 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_USART1_UART_Init+0x90>)
 80009f6:	f005 fa95 	bl	8005f24 <HAL_UARTEx_DisableFifoMode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f89a 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2400009c 	.word	0x2400009c
 8000a0c:	40011000 	.word	0x40011000

08000a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a5a:	f003 ff55 	bl	8004908 <HAL_UART_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f868 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a6c:	f005 fa93 	bl	8005f96 <HAL_UARTEx_SetTxFifoThreshold>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a76:	f000 f85f 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a7e:	f005 fac8 	bl	8006012 <HAL_UARTEx_SetRxFifoThreshold>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 f856 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a8e:	f005 fa49 	bl	8005f24 <HAL_UARTEx_DisableFifoMode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f84e 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	240001bc 	.word	0x240001bc
 8000aa4:	40004400 	.word	0x40004400

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad2:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	58024400 	.word	0x58024400

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_MspInit+0x30>)
 8000b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b54:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x30>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x30>)
 8000b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	58024400 	.word	0x58024400

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0be      	sub	sp, #248	; 0xf8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	22c0      	movs	r2, #192	; 0xc0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 faef 	bl	8006180 <memset>
  if(huart->Instance==UART8)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a79      	ldr	r2, [pc, #484]	; (8000d8c <HAL_UART_MspInit+0x210>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d14b      	bne.n	8000c44 <HAL_UART_MspInit+0xc8>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000bac:	2302      	movs	r3, #2
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fb12 	bl	80031e4 <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bc6:	f7ff ffb7 	bl	8000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000bca:	4b71      	ldr	r3, [pc, #452]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bd0:	4a6f      	ldr	r2, [pc, #444]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bda:	4b6d      	ldr	r3, [pc, #436]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000be4:	623b      	str	r3, [r7, #32]
 8000be6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000be8:	4b69      	ldr	r3, [pc, #420]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	4a68      	ldr	r2, [pc, #416]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000bf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf8:	4b65      	ldr	r3, [pc, #404]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000c06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000c20:	2308      	movs	r3, #8
 8000c22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4859      	ldr	r0, [pc, #356]	; (8000d94 <HAL_UART_MspInit+0x218>)
 8000c2e:	f001 f905 	bl	8001e3c <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2053      	movs	r0, #83	; 0x53
 8000c38:	f000 fb69 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000c3c:	2053      	movs	r0, #83	; 0x53
 8000c3e:	f000 fb80 	bl	8001342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c42:	e09f      	b.n	8000d84 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a53      	ldr	r2, [pc, #332]	; (8000d98 <HAL_UART_MspInit+0x21c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d14b      	bne.n	8000ce6 <HAL_UART_MspInit+0x16a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fac1 	bl	80031e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000c68:	f7ff ff66 	bl	8000b38 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6c:	4b48      	ldr	r3, [pc, #288]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000c6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c72:	4a47      	ldr	r2, [pc, #284]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c7c:	4b44      	ldr	r3, [pc, #272]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b41      	ldr	r3, [pc, #260]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4a3f      	ldr	r2, [pc, #252]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4b3d      	ldr	r3, [pc, #244]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000ca8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4833      	ldr	r0, [pc, #204]	; (8000d9c <HAL_UART_MspInit+0x220>)
 8000cd0:	f001 f8b4 	bl	8001e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2025      	movs	r0, #37	; 0x25
 8000cda:	f000 fb18 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cde:	2025      	movs	r0, #37	; 0x25
 8000ce0:	f000 fb2f 	bl	8001342 <HAL_NVIC_EnableIRQ>
}
 8000ce4:	e04e      	b.n	8000d84 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a2d      	ldr	r2, [pc, #180]	; (8000da0 <HAL_UART_MspInit+0x224>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d149      	bne.n	8000d84 <HAL_UART_MspInit+0x208>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 fa70 	bl	80031e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_UART_MspInit+0x192>
      Error_Handler();
 8000d0a:	f7ff ff15 	bl	8000b38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d14:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_UART_MspInit+0x214>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d4a:	2360      	movs	r3, #96	; 0x60
 8000d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d62:	2307      	movs	r3, #7
 8000d64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480d      	ldr	r0, [pc, #52]	; (8000da4 <HAL_UART_MspInit+0x228>)
 8000d70:	f001 f864 	bl	8001e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	2026      	movs	r0, #38	; 0x26
 8000d7a:	f000 fac8 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d7e:	2026      	movs	r0, #38	; 0x26
 8000d80:	f000 fadf 	bl	8001342 <HAL_NVIC_EnableIRQ>
}
 8000d84:	bf00      	nop
 8000d86:	37f8      	adds	r7, #248	; 0xf8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40007c00 	.word	0x40007c00
 8000d90:	58024400 	.word	0x58024400
 8000d94:	58022400 	.word	0x58022400
 8000d98:	40011000 	.word	0x40011000
 8000d9c:	58020000 	.word	0x58020000
 8000da0:	40004400 	.word	0x40004400
 8000da4:	58020c00 	.word	0x58020c00

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f960 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <USART1_IRQHandler+0x10>)
 8000e02:	f003 fe67 	bl	8004ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2400009c 	.word	0x2400009c

08000e10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <USART2_IRQHandler+0x10>)
 8000e16:	f003 fe5d 	bl	8004ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	240001bc 	.word	0x240001bc

08000e24 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <UART8_IRQHandler+0x10>)
 8000e2a:	f003 fe53 	bl	8004ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2400012c 	.word	0x2400012c

08000e38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	e00a      	b.n	8000e60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e4a:	f3af 8000 	nop.w
 8000e4e:	4601      	mov	r1, r0
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	60ba      	str	r2, [r7, #8]
 8000e56:	b2ca      	uxtb	r2, r1
 8000e58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	dbf0      	blt.n	8000e4a <_read+0x12>
	}

return len;
 8000e68:	687b      	ldr	r3, [r7, #4]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e009      	b.n	8000e98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fc39 	bl	8000704 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	dbf1      	blt.n	8000e84 <_write+0x12>
	}
	return len;
 8000ea0:	687b      	ldr	r3, [r7, #4]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <_close>:

int _close(int file)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
	return -1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ed2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_isatty>:

int _isatty(int file)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	return 1;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	return 0;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <_sbrk+0x5c>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <_sbrk+0x60>)
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <_sbrk+0x64>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <_sbrk+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d207      	bcs.n	8000f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f44:	f005 f8f2 	bl	800612c <__errno>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	24040000 	.word	0x24040000
 8000f74:	00000400 	.word	0x00000400
 8000f78:	24000090 	.word	0x24000090
 8000f7c:	24000260 	.word	0x24000260

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f84:	f7ff fb24 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	; (8000fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fae:	f005 f8c3 	bl	8006138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fbbd 	bl	8000730 <main>
  bx  lr
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8000fbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fc0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000fc4:	08006bfc 	.word	0x08006bfc
  ldr r2, =_sbss
 8000fc8:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000fcc:	24000260 	.word	0x24000260

08000fd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC3_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f000 f98c 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fe0:	f001 ff2a 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_Init+0x68>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	4913      	ldr	r1, [pc, #76]	; (8001040 <HAL_Init+0x6c>)
 8000ff2:	5ccb      	ldrb	r3, [r1, r3]
 8000ff4:	f003 031f 	and.w	r3, r3, #31
 8000ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_Init+0x68>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <HAL_Init+0x6c>)
 8001008:	5cd3      	ldrb	r3, [r2, r3]
 800100a:	f003 031f 	and.w	r3, r3, #31
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <HAL_Init+0x70>)
 8001016:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_Init+0x74>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f814 	bl	800104c <HAL_InitTick>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e002      	b.n	8001034 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800102e:	f7ff fd8b 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	58024400 	.word	0x58024400
 8001040:	08006b50 	.word	0x08006b50
 8001044:	24000004 	.word	0x24000004
 8001048:	24000000 	.word	0x24000000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_InitTick+0x60>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e021      	b.n	80010a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_InitTick+0x64>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_InitTick+0x60>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f971 	bl	800135e <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 f93b 	bl	800130e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_InitTick+0x68>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2400000c 	.word	0x2400000c
 80010b0:	24000000 	.word	0x24000000
 80010b4:	24000008 	.word	0x24000008

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2400000c 	.word	0x2400000c
 80010dc:	2400024c 	.word	0x2400024c

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2400024c 	.word	0x2400024c

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff ffee 	bl	80010e0 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffde 	bl	80010e0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2400000c 	.word	0x2400000c

08001140 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetREVID+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	0c1b      	lsrs	r3, r3, #16
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	5c001000 	.word	0x5c001000

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <__NVIC_SetPriorityGrouping+0x40>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	4313      	orrs	r3, r2
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	; (8001198 <__NVIC_SetPriorityGrouping+0x40>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00
 800119c:	05fa0000 	.word	0x05fa0000

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	; (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff8e 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff29 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff40 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff90 	bl	800124c <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5f 	bl	80011f8 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff33 	bl	80011bc <__NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffa4 	bl	80012b4 <SysTick_Config>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff feae 	bl	80010e0 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e2dc      	b.n	800194a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d008      	beq.n	80013ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e2cd      	b.n	800194a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a76      	ldr	r2, [pc, #472]	; (800158c <HAL_DMA_Abort+0x214>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d04a      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a74      	ldr	r2, [pc, #464]	; (8001590 <HAL_DMA_Abort+0x218>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d045      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a73      	ldr	r2, [pc, #460]	; (8001594 <HAL_DMA_Abort+0x21c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d040      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a71      	ldr	r2, [pc, #452]	; (8001598 <HAL_DMA_Abort+0x220>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d03b      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a70      	ldr	r2, [pc, #448]	; (800159c <HAL_DMA_Abort+0x224>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d036      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a6e      	ldr	r2, [pc, #440]	; (80015a0 <HAL_DMA_Abort+0x228>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d031      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a6d      	ldr	r2, [pc, #436]	; (80015a4 <HAL_DMA_Abort+0x22c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d02c      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a6b      	ldr	r2, [pc, #428]	; (80015a8 <HAL_DMA_Abort+0x230>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d027      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6a      	ldr	r2, [pc, #424]	; (80015ac <HAL_DMA_Abort+0x234>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d022      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a68      	ldr	r2, [pc, #416]	; (80015b0 <HAL_DMA_Abort+0x238>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d01d      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a67      	ldr	r2, [pc, #412]	; (80015b4 <HAL_DMA_Abort+0x23c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d018      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a65      	ldr	r2, [pc, #404]	; (80015b8 <HAL_DMA_Abort+0x240>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d013      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a64      	ldr	r2, [pc, #400]	; (80015bc <HAL_DMA_Abort+0x244>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d00e      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a62      	ldr	r2, [pc, #392]	; (80015c0 <HAL_DMA_Abort+0x248>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d009      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a61      	ldr	r2, [pc, #388]	; (80015c4 <HAL_DMA_Abort+0x24c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d004      	beq.n	800144e <HAL_DMA_Abort+0xd6>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a5f      	ldr	r2, [pc, #380]	; (80015c8 <HAL_DMA_Abort+0x250>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_DMA_Abort+0xda>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <HAL_DMA_Abort+0xdc>
 8001452:	2300      	movs	r3, #0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d013      	beq.n	8001480 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 021e 	bic.w	r2, r2, #30
 8001466:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001476:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e00a      	b.n	8001496 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 020e 	bic.w	r2, r2, #14
 800148e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a3c      	ldr	r2, [pc, #240]	; (800158c <HAL_DMA_Abort+0x214>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d072      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a3a      	ldr	r2, [pc, #232]	; (8001590 <HAL_DMA_Abort+0x218>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d06d      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a39      	ldr	r2, [pc, #228]	; (8001594 <HAL_DMA_Abort+0x21c>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d068      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a37      	ldr	r2, [pc, #220]	; (8001598 <HAL_DMA_Abort+0x220>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d063      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a36      	ldr	r2, [pc, #216]	; (800159c <HAL_DMA_Abort+0x224>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d05e      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a34      	ldr	r2, [pc, #208]	; (80015a0 <HAL_DMA_Abort+0x228>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d059      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a33      	ldr	r2, [pc, #204]	; (80015a4 <HAL_DMA_Abort+0x22c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d054      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a31      	ldr	r2, [pc, #196]	; (80015a8 <HAL_DMA_Abort+0x230>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d04f      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a30      	ldr	r2, [pc, #192]	; (80015ac <HAL_DMA_Abort+0x234>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d04a      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a2e      	ldr	r2, [pc, #184]	; (80015b0 <HAL_DMA_Abort+0x238>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d045      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a2d      	ldr	r2, [pc, #180]	; (80015b4 <HAL_DMA_Abort+0x23c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d040      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a2b      	ldr	r2, [pc, #172]	; (80015b8 <HAL_DMA_Abort+0x240>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d03b      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a2a      	ldr	r2, [pc, #168]	; (80015bc <HAL_DMA_Abort+0x244>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d036      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a28      	ldr	r2, [pc, #160]	; (80015c0 <HAL_DMA_Abort+0x248>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d031      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <HAL_DMA_Abort+0x24c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d02c      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a25      	ldr	r2, [pc, #148]	; (80015c8 <HAL_DMA_Abort+0x250>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d027      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a24      	ldr	r2, [pc, #144]	; (80015cc <HAL_DMA_Abort+0x254>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d022      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <HAL_DMA_Abort+0x258>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d01d      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <HAL_DMA_Abort+0x25c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d018      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <HAL_DMA_Abort+0x260>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d013      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <HAL_DMA_Abort+0x264>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d00e      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <HAL_DMA_Abort+0x268>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d009      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <HAL_DMA_Abort+0x26c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d004      	beq.n	8001586 <HAL_DMA_Abort+0x20e>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_DMA_Abort+0x270>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d132      	bne.n	80015ec <HAL_DMA_Abort+0x274>
 8001586:	2301      	movs	r3, #1
 8001588:	e031      	b.n	80015ee <HAL_DMA_Abort+0x276>
 800158a:	bf00      	nop
 800158c:	40020010 	.word	0x40020010
 8001590:	40020028 	.word	0x40020028
 8001594:	40020040 	.word	0x40020040
 8001598:	40020058 	.word	0x40020058
 800159c:	40020070 	.word	0x40020070
 80015a0:	40020088 	.word	0x40020088
 80015a4:	400200a0 	.word	0x400200a0
 80015a8:	400200b8 	.word	0x400200b8
 80015ac:	40020410 	.word	0x40020410
 80015b0:	40020428 	.word	0x40020428
 80015b4:	40020440 	.word	0x40020440
 80015b8:	40020458 	.word	0x40020458
 80015bc:	40020470 	.word	0x40020470
 80015c0:	40020488 	.word	0x40020488
 80015c4:	400204a0 	.word	0x400204a0
 80015c8:	400204b8 	.word	0x400204b8
 80015cc:	58025408 	.word	0x58025408
 80015d0:	5802541c 	.word	0x5802541c
 80015d4:	58025430 	.word	0x58025430
 80015d8:	58025444 	.word	0x58025444
 80015dc:	58025458 	.word	0x58025458
 80015e0:	5802546c 	.word	0x5802546c
 80015e4:	58025480 	.word	0x58025480
 80015e8:	58025494 	.word	0x58025494
 80015ec:	2300      	movs	r3, #0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001600:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6d      	ldr	r2, [pc, #436]	; (80017bc <HAL_DMA_Abort+0x444>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d04a      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a6b      	ldr	r2, [pc, #428]	; (80017c0 <HAL_DMA_Abort+0x448>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d045      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6a      	ldr	r2, [pc, #424]	; (80017c4 <HAL_DMA_Abort+0x44c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d040      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a68      	ldr	r2, [pc, #416]	; (80017c8 <HAL_DMA_Abort+0x450>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d03b      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a67      	ldr	r2, [pc, #412]	; (80017cc <HAL_DMA_Abort+0x454>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d036      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a65      	ldr	r2, [pc, #404]	; (80017d0 <HAL_DMA_Abort+0x458>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d031      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a64      	ldr	r2, [pc, #400]	; (80017d4 <HAL_DMA_Abort+0x45c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d02c      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a62      	ldr	r2, [pc, #392]	; (80017d8 <HAL_DMA_Abort+0x460>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d027      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a61      	ldr	r2, [pc, #388]	; (80017dc <HAL_DMA_Abort+0x464>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d022      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a5f      	ldr	r2, [pc, #380]	; (80017e0 <HAL_DMA_Abort+0x468>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01d      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a5e      	ldr	r2, [pc, #376]	; (80017e4 <HAL_DMA_Abort+0x46c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d018      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a5c      	ldr	r2, [pc, #368]	; (80017e8 <HAL_DMA_Abort+0x470>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a5b      	ldr	r2, [pc, #364]	; (80017ec <HAL_DMA_Abort+0x474>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00e      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a59      	ldr	r2, [pc, #356]	; (80017f0 <HAL_DMA_Abort+0x478>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d009      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a58      	ldr	r2, [pc, #352]	; (80017f4 <HAL_DMA_Abort+0x47c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d004      	beq.n	80016a2 <HAL_DMA_Abort+0x32a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a56      	ldr	r2, [pc, #344]	; (80017f8 <HAL_DMA_Abort+0x480>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d108      	bne.n	80016b4 <HAL_DMA_Abort+0x33c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0201 	bic.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e007      	b.n	80016c4 <HAL_DMA_Abort+0x34c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0201 	bic.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80016c4:	e013      	b.n	80016ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016c6:	f7ff fd0b 	bl	80010e0 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d90c      	bls.n	80016ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2220      	movs	r2, #32
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2203      	movs	r2, #3
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e12d      	b.n	800194a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1e5      	bne.n	80016c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a2f      	ldr	r2, [pc, #188]	; (80017bc <HAL_DMA_Abort+0x444>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d04a      	beq.n	800179a <HAL_DMA_Abort+0x422>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a2d      	ldr	r2, [pc, #180]	; (80017c0 <HAL_DMA_Abort+0x448>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d045      	beq.n	800179a <HAL_DMA_Abort+0x422>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a2c      	ldr	r2, [pc, #176]	; (80017c4 <HAL_DMA_Abort+0x44c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d040      	beq.n	800179a <HAL_DMA_Abort+0x422>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a2a      	ldr	r2, [pc, #168]	; (80017c8 <HAL_DMA_Abort+0x450>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d03b      	beq.n	800179a <HAL_DMA_Abort+0x422>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a29      	ldr	r2, [pc, #164]	; (80017cc <HAL_DMA_Abort+0x454>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d036      	beq.n	800179a <HAL_DMA_Abort+0x422>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <HAL_DMA_Abort+0x458>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d031      	beq.n	800179a <HAL_DMA_Abort+0x422>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_DMA_Abort+0x45c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d02c      	beq.n	800179a <HAL_DMA_Abort+0x422>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_DMA_Abort+0x460>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d027      	beq.n	800179a <HAL_DMA_Abort+0x422>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a23      	ldr	r2, [pc, #140]	; (80017dc <HAL_DMA_Abort+0x464>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d022      	beq.n	800179a <HAL_DMA_Abort+0x422>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <HAL_DMA_Abort+0x468>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01d      	beq.n	800179a <HAL_DMA_Abort+0x422>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a20      	ldr	r2, [pc, #128]	; (80017e4 <HAL_DMA_Abort+0x46c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d018      	beq.n	800179a <HAL_DMA_Abort+0x422>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_DMA_Abort+0x470>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_DMA_Abort+0x422>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_DMA_Abort+0x474>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00e      	beq.n	800179a <HAL_DMA_Abort+0x422>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <HAL_DMA_Abort+0x478>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d009      	beq.n	800179a <HAL_DMA_Abort+0x422>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <HAL_DMA_Abort+0x47c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d004      	beq.n	800179a <HAL_DMA_Abort+0x422>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <HAL_DMA_Abort+0x480>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_DMA_Abort+0x426>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_DMA_Abort+0x428>
 800179e:	2300      	movs	r3, #0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d02b      	beq.n	80017fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	223f      	movs	r2, #63	; 0x3f
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	e02a      	b.n	8001812 <HAL_DMA_Abort+0x49a>
 80017bc:	40020010 	.word	0x40020010
 80017c0:	40020028 	.word	0x40020028
 80017c4:	40020040 	.word	0x40020040
 80017c8:	40020058 	.word	0x40020058
 80017cc:	40020070 	.word	0x40020070
 80017d0:	40020088 	.word	0x40020088
 80017d4:	400200a0 	.word	0x400200a0
 80017d8:	400200b8 	.word	0x400200b8
 80017dc:	40020410 	.word	0x40020410
 80017e0:	40020428 	.word	0x40020428
 80017e4:	40020440 	.word	0x40020440
 80017e8:	40020458 	.word	0x40020458
 80017ec:	40020470 	.word	0x40020470
 80017f0:	40020488 	.word	0x40020488
 80017f4:	400204a0 	.word	0x400204a0
 80017f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	2201      	movs	r2, #1
 800180c:	409a      	lsls	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a4f      	ldr	r2, [pc, #316]	; (8001954 <HAL_DMA_Abort+0x5dc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d072      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a4d      	ldr	r2, [pc, #308]	; (8001958 <HAL_DMA_Abort+0x5e0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d06d      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a4c      	ldr	r2, [pc, #304]	; (800195c <HAL_DMA_Abort+0x5e4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d068      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a4a      	ldr	r2, [pc, #296]	; (8001960 <HAL_DMA_Abort+0x5e8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d063      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a49      	ldr	r2, [pc, #292]	; (8001964 <HAL_DMA_Abort+0x5ec>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d05e      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a47      	ldr	r2, [pc, #284]	; (8001968 <HAL_DMA_Abort+0x5f0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d059      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a46      	ldr	r2, [pc, #280]	; (800196c <HAL_DMA_Abort+0x5f4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d054      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a44      	ldr	r2, [pc, #272]	; (8001970 <HAL_DMA_Abort+0x5f8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d04f      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a43      	ldr	r2, [pc, #268]	; (8001974 <HAL_DMA_Abort+0x5fc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d04a      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a41      	ldr	r2, [pc, #260]	; (8001978 <HAL_DMA_Abort+0x600>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d045      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a40      	ldr	r2, [pc, #256]	; (800197c <HAL_DMA_Abort+0x604>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d040      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a3e      	ldr	r2, [pc, #248]	; (8001980 <HAL_DMA_Abort+0x608>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d03b      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a3d      	ldr	r2, [pc, #244]	; (8001984 <HAL_DMA_Abort+0x60c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d036      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a3b      	ldr	r2, [pc, #236]	; (8001988 <HAL_DMA_Abort+0x610>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d031      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a3a      	ldr	r2, [pc, #232]	; (800198c <HAL_DMA_Abort+0x614>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d02c      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a38      	ldr	r2, [pc, #224]	; (8001990 <HAL_DMA_Abort+0x618>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d027      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a37      	ldr	r2, [pc, #220]	; (8001994 <HAL_DMA_Abort+0x61c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d022      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a35      	ldr	r2, [pc, #212]	; (8001998 <HAL_DMA_Abort+0x620>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d01d      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a34      	ldr	r2, [pc, #208]	; (800199c <HAL_DMA_Abort+0x624>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d018      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a32      	ldr	r2, [pc, #200]	; (80019a0 <HAL_DMA_Abort+0x628>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <HAL_DMA_Abort+0x62c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00e      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2f      	ldr	r2, [pc, #188]	; (80019a8 <HAL_DMA_Abort+0x630>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d009      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a2e      	ldr	r2, [pc, #184]	; (80019ac <HAL_DMA_Abort+0x634>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d004      	beq.n	8001902 <HAL_DMA_Abort+0x58a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2c      	ldr	r2, [pc, #176]	; (80019b0 <HAL_DMA_Abort+0x638>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d101      	bne.n	8001906 <HAL_DMA_Abort+0x58e>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_DMA_Abort+0x590>
 8001906:	2300      	movs	r3, #0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d015      	beq.n	8001938 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001914:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00c      	beq.n	8001938 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800192c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001936:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40020010 	.word	0x40020010
 8001958:	40020028 	.word	0x40020028
 800195c:	40020040 	.word	0x40020040
 8001960:	40020058 	.word	0x40020058
 8001964:	40020070 	.word	0x40020070
 8001968:	40020088 	.word	0x40020088
 800196c:	400200a0 	.word	0x400200a0
 8001970:	400200b8 	.word	0x400200b8
 8001974:	40020410 	.word	0x40020410
 8001978:	40020428 	.word	0x40020428
 800197c:	40020440 	.word	0x40020440
 8001980:	40020458 	.word	0x40020458
 8001984:	40020470 	.word	0x40020470
 8001988:	40020488 	.word	0x40020488
 800198c:	400204a0 	.word	0x400204a0
 8001990:	400204b8 	.word	0x400204b8
 8001994:	58025408 	.word	0x58025408
 8001998:	5802541c 	.word	0x5802541c
 800199c:	58025430 	.word	0x58025430
 80019a0:	58025444 	.word	0x58025444
 80019a4:	58025458 	.word	0x58025458
 80019a8:	5802546c 	.word	0x5802546c
 80019ac:	58025480 	.word	0x58025480
 80019b0:	58025494 	.word	0x58025494

080019b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e205      	b.n	8001dd2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d004      	beq.n	80019dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e1fa      	b.n	8001dd2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a8c      	ldr	r2, [pc, #560]	; (8001c14 <HAL_DMA_Abort_IT+0x260>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d04a      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a8b      	ldr	r2, [pc, #556]	; (8001c18 <HAL_DMA_Abort_IT+0x264>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d045      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a89      	ldr	r2, [pc, #548]	; (8001c1c <HAL_DMA_Abort_IT+0x268>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d040      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a88      	ldr	r2, [pc, #544]	; (8001c20 <HAL_DMA_Abort_IT+0x26c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d03b      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a86      	ldr	r2, [pc, #536]	; (8001c24 <HAL_DMA_Abort_IT+0x270>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d036      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a85      	ldr	r2, [pc, #532]	; (8001c28 <HAL_DMA_Abort_IT+0x274>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d031      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a83      	ldr	r2, [pc, #524]	; (8001c2c <HAL_DMA_Abort_IT+0x278>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d02c      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a82      	ldr	r2, [pc, #520]	; (8001c30 <HAL_DMA_Abort_IT+0x27c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d027      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a80      	ldr	r2, [pc, #512]	; (8001c34 <HAL_DMA_Abort_IT+0x280>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d022      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a7f      	ldr	r2, [pc, #508]	; (8001c38 <HAL_DMA_Abort_IT+0x284>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d01d      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a7d      	ldr	r2, [pc, #500]	; (8001c3c <HAL_DMA_Abort_IT+0x288>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d018      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7c      	ldr	r2, [pc, #496]	; (8001c40 <HAL_DMA_Abort_IT+0x28c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d013      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a7a      	ldr	r2, [pc, #488]	; (8001c44 <HAL_DMA_Abort_IT+0x290>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00e      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a79      	ldr	r2, [pc, #484]	; (8001c48 <HAL_DMA_Abort_IT+0x294>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d009      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a77      	ldr	r2, [pc, #476]	; (8001c4c <HAL_DMA_Abort_IT+0x298>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d004      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xc8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a76      	ldr	r2, [pc, #472]	; (8001c50 <HAL_DMA_Abort_IT+0x29c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d101      	bne.n	8001a80 <HAL_DMA_Abort_IT+0xcc>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_DMA_Abort_IT+0xce>
 8001a80:	2300      	movs	r3, #0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d065      	beq.n	8001b52 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a60      	ldr	r2, [pc, #384]	; (8001c14 <HAL_DMA_Abort_IT+0x260>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d04a      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a5e      	ldr	r2, [pc, #376]	; (8001c18 <HAL_DMA_Abort_IT+0x264>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d045      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a5d      	ldr	r2, [pc, #372]	; (8001c1c <HAL_DMA_Abort_IT+0x268>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d040      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a5b      	ldr	r2, [pc, #364]	; (8001c20 <HAL_DMA_Abort_IT+0x26c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d03b      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <HAL_DMA_Abort_IT+0x270>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d036      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_DMA_Abort_IT+0x274>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d031      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_DMA_Abort_IT+0x278>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d02c      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a55      	ldr	r2, [pc, #340]	; (8001c30 <HAL_DMA_Abort_IT+0x27c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d027      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a54      	ldr	r2, [pc, #336]	; (8001c34 <HAL_DMA_Abort_IT+0x280>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d022      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_DMA_Abort_IT+0x284>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01d      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a51      	ldr	r2, [pc, #324]	; (8001c3c <HAL_DMA_Abort_IT+0x288>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d018      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <HAL_DMA_Abort_IT+0x28c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d013      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <HAL_DMA_Abort_IT+0x290>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00e      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a4c      	ldr	r2, [pc, #304]	; (8001c48 <HAL_DMA_Abort_IT+0x294>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d009      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <HAL_DMA_Abort_IT+0x298>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d004      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x17a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a49      	ldr	r2, [pc, #292]	; (8001c50 <HAL_DMA_Abort_IT+0x29c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d108      	bne.n	8001b40 <HAL_DMA_Abort_IT+0x18c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0201 	bic.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e147      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x41c>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e13e      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 020e 	bic.w	r2, r2, #14
 8001b60:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a2b      	ldr	r2, [pc, #172]	; (8001c14 <HAL_DMA_Abort_IT+0x260>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d04a      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a29      	ldr	r2, [pc, #164]	; (8001c18 <HAL_DMA_Abort_IT+0x264>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d045      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <HAL_DMA_Abort_IT+0x268>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d040      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <HAL_DMA_Abort_IT+0x26c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d03b      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <HAL_DMA_Abort_IT+0x270>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d036      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_DMA_Abort_IT+0x274>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d031      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a22      	ldr	r2, [pc, #136]	; (8001c2c <HAL_DMA_Abort_IT+0x278>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d02c      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <HAL_DMA_Abort_IT+0x27c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d027      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1f      	ldr	r2, [pc, #124]	; (8001c34 <HAL_DMA_Abort_IT+0x280>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d022      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_DMA_Abort_IT+0x284>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01d      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <HAL_DMA_Abort_IT+0x288>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d018      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	; (8001c40 <HAL_DMA_Abort_IT+0x28c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_DMA_Abort_IT+0x290>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00e      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_DMA_Abort_IT+0x294>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <HAL_DMA_Abort_IT+0x298>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d004      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x24e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_DMA_Abort_IT+0x29c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d128      	bne.n	8001c54 <HAL_DMA_Abort_IT+0x2a0>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e027      	b.n	8001c64 <HAL_DMA_Abort_IT+0x2b0>
 8001c14:	40020010 	.word	0x40020010
 8001c18:	40020028 	.word	0x40020028
 8001c1c:	40020040 	.word	0x40020040
 8001c20:	40020058 	.word	0x40020058
 8001c24:	40020070 	.word	0x40020070
 8001c28:	40020088 	.word	0x40020088
 8001c2c:	400200a0 	.word	0x400200a0
 8001c30:	400200b8 	.word	0x400200b8
 8001c34:	40020410 	.word	0x40020410
 8001c38:	40020428 	.word	0x40020428
 8001c3c:	40020440 	.word	0x40020440
 8001c40:	40020458 	.word	0x40020458
 8001c44:	40020470 	.word	0x40020470
 8001c48:	40020488 	.word	0x40020488
 8001c4c:	400204a0 	.word	0x400204a0
 8001c50:	400204b8 	.word	0x400204b8
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a5c      	ldr	r2, [pc, #368]	; (8001ddc <HAL_DMA_Abort_IT+0x428>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d072      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a5b      	ldr	r2, [pc, #364]	; (8001de0 <HAL_DMA_Abort_IT+0x42c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d06d      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a59      	ldr	r2, [pc, #356]	; (8001de4 <HAL_DMA_Abort_IT+0x430>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d068      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <HAL_DMA_Abort_IT+0x434>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d063      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a56      	ldr	r2, [pc, #344]	; (8001dec <HAL_DMA_Abort_IT+0x438>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d05e      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a55      	ldr	r2, [pc, #340]	; (8001df0 <HAL_DMA_Abort_IT+0x43c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d059      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a53      	ldr	r2, [pc, #332]	; (8001df4 <HAL_DMA_Abort_IT+0x440>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d054      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_DMA_Abort_IT+0x444>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d04f      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a50      	ldr	r2, [pc, #320]	; (8001dfc <HAL_DMA_Abort_IT+0x448>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d04a      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a4f      	ldr	r2, [pc, #316]	; (8001e00 <HAL_DMA_Abort_IT+0x44c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d045      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a4d      	ldr	r2, [pc, #308]	; (8001e04 <HAL_DMA_Abort_IT+0x450>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d040      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a4c      	ldr	r2, [pc, #304]	; (8001e08 <HAL_DMA_Abort_IT+0x454>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d03b      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	; (8001e0c <HAL_DMA_Abort_IT+0x458>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d036      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a49      	ldr	r2, [pc, #292]	; (8001e10 <HAL_DMA_Abort_IT+0x45c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d031      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a47      	ldr	r2, [pc, #284]	; (8001e14 <HAL_DMA_Abort_IT+0x460>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02c      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a46      	ldr	r2, [pc, #280]	; (8001e18 <HAL_DMA_Abort_IT+0x464>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d027      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a44      	ldr	r2, [pc, #272]	; (8001e1c <HAL_DMA_Abort_IT+0x468>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d022      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a43      	ldr	r2, [pc, #268]	; (8001e20 <HAL_DMA_Abort_IT+0x46c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d01d      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a41      	ldr	r2, [pc, #260]	; (8001e24 <HAL_DMA_Abort_IT+0x470>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d018      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a40      	ldr	r2, [pc, #256]	; (8001e28 <HAL_DMA_Abort_IT+0x474>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d013      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a3e      	ldr	r2, [pc, #248]	; (8001e2c <HAL_DMA_Abort_IT+0x478>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00e      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a3d      	ldr	r2, [pc, #244]	; (8001e30 <HAL_DMA_Abort_IT+0x47c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a3b      	ldr	r2, [pc, #236]	; (8001e34 <HAL_DMA_Abort_IT+0x480>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x3a0>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a3a      	ldr	r2, [pc, #232]	; (8001e38 <HAL_DMA_Abort_IT+0x484>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d101      	bne.n	8001d58 <HAL_DMA_Abort_IT+0x3a4>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_DMA_Abort_IT+0x3a6>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d028      	beq.n	8001db0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d8c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00c      	beq.n	8001db0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001dae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40020010 	.word	0x40020010
 8001de0:	40020028 	.word	0x40020028
 8001de4:	40020040 	.word	0x40020040
 8001de8:	40020058 	.word	0x40020058
 8001dec:	40020070 	.word	0x40020070
 8001df0:	40020088 	.word	0x40020088
 8001df4:	400200a0 	.word	0x400200a0
 8001df8:	400200b8 	.word	0x400200b8
 8001dfc:	40020410 	.word	0x40020410
 8001e00:	40020428 	.word	0x40020428
 8001e04:	40020440 	.word	0x40020440
 8001e08:	40020458 	.word	0x40020458
 8001e0c:	40020470 	.word	0x40020470
 8001e10:	40020488 	.word	0x40020488
 8001e14:	400204a0 	.word	0x400204a0
 8001e18:	400204b8 	.word	0x400204b8
 8001e1c:	58025408 	.word	0x58025408
 8001e20:	5802541c 	.word	0x5802541c
 8001e24:	58025430 	.word	0x58025430
 8001e28:	58025444 	.word	0x58025444
 8001e2c:	58025458 	.word	0x58025458
 8001e30:	5802546c 	.word	0x5802546c
 8001e34:	58025480 	.word	0x58025480
 8001e38:	58025494 	.word	0x58025494

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e4a:	4b89      	ldr	r3, [pc, #548]	; (8002070 <HAL_GPIO_Init+0x234>)
 8001e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e4e:	e194      	b.n	800217a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2101      	movs	r1, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8186 	beq.w	8002174 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d00b      	beq.n	8001e88 <HAL_GPIO_Init+0x4c>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7c:	2b11      	cmp	r3, #17
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b12      	cmp	r3, #18
 8001e86:	d130      	bne.n	8001eea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	091b      	lsrs	r3, r3, #4
 8001ed4:	f003 0201 	and.w	r2, r3, #1
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0xee>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d123      	bne.n	8001f72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	69b9      	ldr	r1, [r7, #24]
 8001f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0203 	and.w	r2, r3, #3
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80e0 	beq.w	8002174 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <HAL_GPIO_Init+0x238>)
 8001fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fba:	4a2e      	ldr	r2, [pc, #184]	; (8002074 <HAL_GPIO_Init+0x238>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_GPIO_Init+0x238>)
 8001fc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd2:	4a29      	ldr	r2, [pc, #164]	; (8002078 <HAL_GPIO_Init+0x23c>)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a20      	ldr	r2, [pc, #128]	; (800207c <HAL_GPIO_Init+0x240>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d052      	beq.n	80020a4 <HAL_GPIO_Init+0x268>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a1f      	ldr	r2, [pc, #124]	; (8002080 <HAL_GPIO_Init+0x244>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d031      	beq.n	800206a <HAL_GPIO_Init+0x22e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_GPIO_Init+0x248>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d02b      	beq.n	8002066 <HAL_GPIO_Init+0x22a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a1d      	ldr	r2, [pc, #116]	; (8002088 <HAL_GPIO_Init+0x24c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d025      	beq.n	8002062 <HAL_GPIO_Init+0x226>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a1c      	ldr	r2, [pc, #112]	; (800208c <HAL_GPIO_Init+0x250>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01f      	beq.n	800205e <HAL_GPIO_Init+0x222>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <HAL_GPIO_Init+0x254>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d019      	beq.n	800205a <HAL_GPIO_Init+0x21e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <HAL_GPIO_Init+0x258>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x21a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a19      	ldr	r2, [pc, #100]	; (8002098 <HAL_GPIO_Init+0x25c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x216>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_GPIO_Init+0x260>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x212>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <HAL_GPIO_Init+0x264>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x20e>
 8002046:	2309      	movs	r3, #9
 8002048:	e02d      	b.n	80020a6 <HAL_GPIO_Init+0x26a>
 800204a:	230a      	movs	r3, #10
 800204c:	e02b      	b.n	80020a6 <HAL_GPIO_Init+0x26a>
 800204e:	2308      	movs	r3, #8
 8002050:	e029      	b.n	80020a6 <HAL_GPIO_Init+0x26a>
 8002052:	2307      	movs	r3, #7
 8002054:	e027      	b.n	80020a6 <HAL_GPIO_Init+0x26a>
 8002056:	2306      	movs	r3, #6
 8002058:	e025      	b.n	80020a6 <HAL_GPIO_Init+0x26a>
 800205a:	2305      	movs	r3, #5
 800205c:	e023      	b.n	80020a6 <HAL_GPIO_Init+0x26a>
 800205e:	2304      	movs	r3, #4
 8002060:	e021      	b.n	80020a6 <HAL_GPIO_Init+0x26a>
 8002062:	2303      	movs	r3, #3
 8002064:	e01f      	b.n	80020a6 <HAL_GPIO_Init+0x26a>
 8002066:	2302      	movs	r3, #2
 8002068:	e01d      	b.n	80020a6 <HAL_GPIO_Init+0x26a>
 800206a:	2301      	movs	r3, #1
 800206c:	e01b      	b.n	80020a6 <HAL_GPIO_Init+0x26a>
 800206e:	bf00      	nop
 8002070:	58000080 	.word	0x58000080
 8002074:	58024400 	.word	0x58024400
 8002078:	58000400 	.word	0x58000400
 800207c:	58020000 	.word	0x58020000
 8002080:	58020400 	.word	0x58020400
 8002084:	58020800 	.word	0x58020800
 8002088:	58020c00 	.word	0x58020c00
 800208c:	58021000 	.word	0x58021000
 8002090:	58021400 	.word	0x58021400
 8002094:	58021800 	.word	0x58021800
 8002098:	58021c00 	.word	0x58021c00
 800209c:	58022000 	.word	0x58022000
 80020a0:	58022400 	.word	0x58022400
 80020a4:	2300      	movs	r3, #0
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	f002 0203 	and.w	r2, r2, #3
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	4093      	lsls	r3, r2
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b6:	4938      	ldr	r1, [pc, #224]	; (8002198 <HAL_GPIO_Init+0x35c>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800213e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800216c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	3301      	adds	r3, #1
 8002178:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f ae63 	bne.w	8001e50 <HAL_GPIO_Init+0x14>
  }
}
 800218a:	bf00      	nop
 800218c:	bf00      	nop
 800218e:	3724      	adds	r7, #36	; 0x24
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	58000400 	.word	0x58000400

0800219c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80021a4:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <HAL_HSEM_FastTake+0x2c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3320      	adds	r3, #32
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	4a07      	ldr	r2, [pc, #28]	; (80021cc <HAL_HSEM_FastTake+0x30>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	58026400 	.word	0x58026400
 80021cc:	80000300 	.word	0x80000300

080021d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80021da:	4906      	ldr	r1, [pc, #24]	; (80021f4 <HAL_HSEM_Release+0x24>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	58026400 	.word	0x58026400

080021f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002200:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	2b06      	cmp	r3, #6
 800220a:	d00a      	beq.n	8002222 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800220c:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	d001      	beq.n	800221e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e040      	b.n	80022a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e03e      	b.n	80022a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800222a:	491f      	ldr	r1, [pc, #124]	; (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4313      	orrs	r3, r2
 8002230:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002232:	f7fe ff55 	bl	80010e0 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002238:	e009      	b.n	800224e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800223a:	f7fe ff51 	bl	80010e0 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002248:	d901      	bls.n	800224e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e028      	b.n	80022a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800225a:	d1ee      	bne.n	800223a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b1e      	cmp	r3, #30
 8002260:	d008      	beq.n	8002274 <HAL_PWREx_ConfigSupply+0x7c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b2e      	cmp	r3, #46	; 0x2e
 8002266:	d005      	beq.n	8002274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b1d      	cmp	r3, #29
 800226c:	d002      	beq.n	8002274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b2d      	cmp	r3, #45	; 0x2d
 8002272:	d114      	bne.n	800229e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002274:	f7fe ff34 	bl	80010e0 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800227a:	e009      	b.n	8002290 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800227c:	f7fe ff30 	bl	80010e0 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800228a:	d901      	bls.n	8002290 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e007      	b.n	80022a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d1ee      	bne.n	800227c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	58024800 	.word	0x58024800

080022ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	; 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e3ff      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8087 	beq.w	80023da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022cc:	4b99      	ldr	r3, [pc, #612]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022d6:	4b97      	ldr	r3, [pc, #604]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d007      	beq.n	80022f2 <HAL_RCC_OscConfig+0x46>
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	2b18      	cmp	r3, #24
 80022e6:	d110      	bne.n	800230a <HAL_RCC_OscConfig+0x5e>
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d10b      	bne.n	800230a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f2:	4b90      	ldr	r3, [pc, #576]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d06c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x12c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d168      	bne.n	80023d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e3d9      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x76>
 8002314:	4b87      	ldr	r3, [pc, #540]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a86      	ldr	r2, [pc, #536]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e02e      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x98>
 800232a:	4b82      	ldr	r3, [pc, #520]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a81      	ldr	r2, [pc, #516]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b7f      	ldr	r3, [pc, #508]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a7e      	ldr	r2, [pc, #504]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 800233c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e01d      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0xbc>
 800234e:	4b79      	ldr	r3, [pc, #484]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a78      	ldr	r2, [pc, #480]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b76      	ldr	r3, [pc, #472]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a75      	ldr	r2, [pc, #468]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e00b      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002368:	4b72      	ldr	r3, [pc, #456]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a71      	ldr	r2, [pc, #452]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 800236e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 800237a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe feaa 	bl	80010e0 <HAL_GetTick>
 800238c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002390:	f7fe fea6 	bl	80010e0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e38d      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023a2:	4b64      	ldr	r3, [pc, #400]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0xe4>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fe fe96 	bl	80010e0 <HAL_GetTick>
 80023b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b8:	f7fe fe92 	bl	80010e0 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e379      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023ca:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x10c>
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80ae 	beq.w	8002544 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e8:	4b52      	ldr	r3, [pc, #328]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023f2:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_RCC_OscConfig+0x162>
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	2b18      	cmp	r3, #24
 8002402:	d13a      	bne.n	800247a <HAL_RCC_OscConfig+0x1ce>
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d135      	bne.n	800247a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800240e:	4b49      	ldr	r3, [pc, #292]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x17a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e34b      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	f7fe fe8b 	bl	8001140 <HAL_GetREVID>
 800242a:	4603      	mov	r3, r0
 800242c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002430:	4293      	cmp	r3, r2
 8002432:	d817      	bhi.n	8002464 <HAL_RCC_OscConfig+0x1b8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	d108      	bne.n	800244e <HAL_RCC_OscConfig+0x1a2>
 800243c:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002444:	4a3b      	ldr	r2, [pc, #236]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800244c:	e07a      	b.n	8002544 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b39      	ldr	r3, [pc, #228]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	031b      	lsls	r3, r3, #12
 800245c:	4935      	ldr	r1, [pc, #212]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002462:	e06f      	b.n	8002544 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	061b      	lsls	r3, r3, #24
 8002472:	4930      	ldr	r1, [pc, #192]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002478:	e064      	b.n	8002544 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d045      	beq.n	800250e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002482:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 0219 	bic.w	r2, r3, #25
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4929      	ldr	r1, [pc, #164]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fe24 	bl	80010e0 <HAL_GetTick>
 8002498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249c:	f7fe fe20 	bl	80010e0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e307      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	f7fe fe41 	bl	8001140 <HAL_GetREVID>
 80024be:	4603      	mov	r3, r0
 80024c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d817      	bhi.n	80024f8 <HAL_RCC_OscConfig+0x24c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d108      	bne.n	80024e2 <HAL_RCC_OscConfig+0x236>
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024d8:	4a16      	ldr	r2, [pc, #88]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80024da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024de:	6053      	str	r3, [r2, #4]
 80024e0:	e030      	b.n	8002544 <HAL_RCC_OscConfig+0x298>
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	031b      	lsls	r3, r3, #12
 80024f0:	4910      	ldr	r1, [pc, #64]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
 80024f6:	e025      	b.n	8002544 <HAL_RCC_OscConfig+0x298>
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	490b      	ldr	r1, [pc, #44]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
 800250c:	e01a      	b.n	8002544 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a08      	ldr	r2, [pc, #32]	; (8002534 <HAL_RCC_OscConfig+0x288>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7fe fde1 	bl	80010e0 <HAL_GetTick>
 800251e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002522:	f7fe fddd 	bl	80010e0 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d903      	bls.n	8002538 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e2c4      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
 8002534:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002538:	4ba4      	ldr	r3, [pc, #656]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80a9 	beq.w	80026a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002552:	4b9e      	ldr	r3, [pc, #632]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800255a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800255c:	4b9b      	ldr	r3, [pc, #620]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d007      	beq.n	8002578 <HAL_RCC_OscConfig+0x2cc>
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b18      	cmp	r3, #24
 800256c:	d13a      	bne.n	80025e4 <HAL_RCC_OscConfig+0x338>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d135      	bne.n	80025e4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002578:	4b94      	ldr	r3, [pc, #592]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_OscConfig+0x2e4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d001      	beq.n	8002590 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e296      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002590:	f7fe fdd6 	bl	8001140 <HAL_GetREVID>
 8002594:	4603      	mov	r3, r0
 8002596:	f241 0203 	movw	r2, #4099	; 0x1003
 800259a:	4293      	cmp	r3, r2
 800259c:	d817      	bhi.n	80025ce <HAL_RCC_OscConfig+0x322>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d108      	bne.n	80025b8 <HAL_RCC_OscConfig+0x30c>
 80025a6:	4b89      	ldr	r3, [pc, #548]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025ae:	4a87      	ldr	r2, [pc, #540]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80025b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025b6:	e075      	b.n	80026a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025b8:	4b84      	ldr	r3, [pc, #528]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	069b      	lsls	r3, r3, #26
 80025c6:	4981      	ldr	r1, [pc, #516]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025cc:	e06a      	b.n	80026a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ce:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	061b      	lsls	r3, r3, #24
 80025dc:	497b      	ldr	r1, [pc, #492]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025e2:	e05f      	b.n	80026a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d042      	beq.n	8002672 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025ec:	4b77      	ldr	r3, [pc, #476]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a76      	ldr	r2, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80025f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fd72 	bl	80010e0 <HAL_GetTick>
 80025fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002600:	f7fe fd6e 	bl	80010e0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e255      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002612:	4b6e      	ldr	r3, [pc, #440]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800261e:	f7fe fd8f 	bl	8001140 <HAL_GetREVID>
 8002622:	4603      	mov	r3, r0
 8002624:	f241 0203 	movw	r2, #4099	; 0x1003
 8002628:	4293      	cmp	r3, r2
 800262a:	d817      	bhi.n	800265c <HAL_RCC_OscConfig+0x3b0>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	2b20      	cmp	r3, #32
 8002632:	d108      	bne.n	8002646 <HAL_RCC_OscConfig+0x39a>
 8002634:	4b65      	ldr	r3, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800263c:	4a63      	ldr	r2, [pc, #396]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 800263e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002642:	6053      	str	r3, [r2, #4]
 8002644:	e02e      	b.n	80026a4 <HAL_RCC_OscConfig+0x3f8>
 8002646:	4b61      	ldr	r3, [pc, #388]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	069b      	lsls	r3, r3, #26
 8002654:	495d      	ldr	r1, [pc, #372]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
 800265a:	e023      	b.n	80026a4 <HAL_RCC_OscConfig+0x3f8>
 800265c:	4b5b      	ldr	r3, [pc, #364]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	061b      	lsls	r3, r3, #24
 800266a:	4958      	ldr	r1, [pc, #352]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 800266c:	4313      	orrs	r3, r2
 800266e:	60cb      	str	r3, [r1, #12]
 8002670:	e018      	b.n	80026a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002672:	4b56      	ldr	r3, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a55      	ldr	r2, [pc, #340]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 8002678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800267c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7fe fd2f 	bl	80010e0 <HAL_GetTick>
 8002682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002686:	f7fe fd2b 	bl	80010e0 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e212      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d036      	beq.n	800271e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d019      	beq.n	80026ec <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b8:	4b44      	ldr	r3, [pc, #272]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80026ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026bc:	4a43      	ldr	r2, [pc, #268]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe fd0c 	bl	80010e0 <HAL_GetTick>
 80026c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026cc:	f7fe fd08 	bl	80010e0 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1ef      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x420>
 80026ea:	e018      	b.n	800271e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ec:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80026ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f0:	4a36      	ldr	r2, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7fe fcf2 	bl	80010e0 <HAL_GetTick>
 80026fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002700:	f7fe fcee 	bl	80010e0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1d5      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002712:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b00      	cmp	r3, #0
 8002728:	d036      	beq.n	8002798 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d019      	beq.n	8002766 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a25      	ldr	r2, [pc, #148]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 8002738:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800273c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800273e:	f7fe fccf 	bl	80010e0 <HAL_GetTick>
 8002742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002746:	f7fe fccb 	bl	80010e0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e1b2      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002758:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x49a>
 8002764:	e018      	b.n	8002798 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 800276c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002770:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002772:	f7fe fcb5 	bl	80010e0 <HAL_GetTick>
 8002776:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800277a:	f7fe fcb1 	bl	80010e0 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e198      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_RCC_OscConfig+0x520>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8085 	beq.w	80028b0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_OscConfig+0x524>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_RCC_OscConfig+0x524>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027b2:	f7fe fc95 	bl	80010e0 <HAL_GetTick>
 80027b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027b8:	e00c      	b.n	80027d4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7fe fc91 	bl	80010e0 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b64      	cmp	r3, #100	; 0x64
 80027c6:	d905      	bls.n	80027d4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e178      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
 80027cc:	58024400 	.word	0x58024400
 80027d0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027d4:	4b96      	ldr	r3, [pc, #600]	; (8002a30 <HAL_RCC_OscConfig+0x784>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ec      	beq.n	80027ba <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x54a>
 80027e8:	4b92      	ldr	r3, [pc, #584]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a91      	ldr	r2, [pc, #580]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	e02d      	b.n	8002852 <HAL_RCC_OscConfig+0x5a6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x56c>
 80027fe:	4b8d      	ldr	r3, [pc, #564]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a8c      	ldr	r2, [pc, #560]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
 800280a:	4b8a      	ldr	r3, [pc, #552]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	4a89      	ldr	r2, [pc, #548]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6713      	str	r3, [r2, #112]	; 0x70
 8002816:	e01c      	b.n	8002852 <HAL_RCC_OscConfig+0x5a6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b05      	cmp	r3, #5
 800281e:	d10c      	bne.n	800283a <HAL_RCC_OscConfig+0x58e>
 8002820:	4b84      	ldr	r3, [pc, #528]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	4a83      	ldr	r2, [pc, #524]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6713      	str	r3, [r2, #112]	; 0x70
 800282c:	4b81      	ldr	r3, [pc, #516]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	4a80      	ldr	r2, [pc, #512]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	; 0x70
 8002838:	e00b      	b.n	8002852 <HAL_RCC_OscConfig+0x5a6>
 800283a:	4b7e      	ldr	r3, [pc, #504]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	4a7d      	ldr	r2, [pc, #500]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	; 0x70
 8002846:	4b7b      	ldr	r3, [pc, #492]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	4a7a      	ldr	r2, [pc, #488]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d015      	beq.n	8002886 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe fc41 	bl	80010e0 <HAL_GetTick>
 800285e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe fc3d 	bl	80010e0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e122      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002878:	4b6e      	ldr	r3, [pc, #440]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ee      	beq.n	8002862 <HAL_RCC_OscConfig+0x5b6>
 8002884:	e014      	b.n	80028b0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fc2b 	bl	80010e0 <HAL_GetTick>
 800288a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fc27 	bl	80010e0 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	; 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e10c      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028a4:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ee      	bne.n	800288e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8101 	beq.w	8002abc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028ba:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028c2:	2b18      	cmp	r3, #24
 80028c4:	f000 80bc 	beq.w	8002a40 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	f040 8095 	bne.w	80029fc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b58      	ldr	r3, [pc, #352]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80028d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fbff 	bl	80010e0 <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fbfb 	bl	80010e0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e0e2      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028f8:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002904:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002908:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <HAL_RCC_OscConfig+0x78c>)
 800290a:	4013      	ands	r3, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	430a      	orrs	r2, r1
 8002918:	4946      	ldr	r1, [pc, #280]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 800291a:	4313      	orrs	r3, r2
 800291c:	628b      	str	r3, [r1, #40]	; 0x28
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	3b01      	subs	r3, #1
 8002924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292c:	3b01      	subs	r3, #1
 800292e:	025b      	lsls	r3, r3, #9
 8002930:	b29b      	uxth	r3, r3
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	3b01      	subs	r3, #1
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	3b01      	subs	r3, #1
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800294e:	4939      	ldr	r1, [pc, #228]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002950:	4313      	orrs	r3, r2
 8002952:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002954:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	4a36      	ldr	r2, [pc, #216]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002960:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002964:	4b35      	ldr	r3, [pc, #212]	; (8002a3c <HAL_RCC_OscConfig+0x790>)
 8002966:	4013      	ands	r3, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800296c:	00d2      	lsls	r2, r2, #3
 800296e:	4931      	ldr	r1, [pc, #196]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002970:	4313      	orrs	r3, r2
 8002972:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002974:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	f023 020c 	bic.w	r2, r3, #12
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	492c      	ldr	r1, [pc, #176]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002982:	4313      	orrs	r3, r2
 8002984:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002986:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f023 0202 	bic.w	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	4928      	ldr	r1, [pc, #160]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002994:	4313      	orrs	r3, r2
 8002996:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002998:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	4a25      	ldr	r2, [pc, #148]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 800299e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029a4:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80029aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029b0:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	4a1f      	ldr	r2, [pc, #124]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80029b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fb84 	bl	80010e0 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fb80 	bl	80010e0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e067      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x730>
 80029fa:	e05f      	b.n	8002abc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fb6a 	bl	80010e0 <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe fb66 	bl	80010e0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e04d      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <HAL_RCC_OscConfig+0x788>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x764>
 8002a2e:	e045      	b.n	8002abc <HAL_RCC_OscConfig+0x810>
 8002a30:	58024800 	.word	0x58024800
 8002a34:	58024400 	.word	0x58024400
 8002a38:	fffffc0c 	.word	0xfffffc0c
 8002a3c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <HAL_RCC_OscConfig+0x81c>)
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <HAL_RCC_OscConfig+0x81c>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d031      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f003 0203 	and.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d12a      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d122      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d11a      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	0a5b      	lsrs	r3, r3, #9
 8002a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d111      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d108      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	0e1b      	lsrs	r3, r3, #24
 8002aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3730      	adds	r7, #48	; 0x30
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	58024400 	.word	0x58024400

08002acc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e19c      	b.n	8002e1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b8a      	ldr	r3, [pc, #552]	; (8002d0c <HAL_RCC_ClockConfig+0x240>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d910      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b87      	ldr	r3, [pc, #540]	; (8002d0c <HAL_RCC_ClockConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 020f 	bic.w	r2, r3, #15
 8002af6:	4985      	ldr	r1, [pc, #532]	; (8002d0c <HAL_RCC_ClockConfig+0x240>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b83      	ldr	r3, [pc, #524]	; (8002d0c <HAL_RCC_ClockConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e184      	b.n	8002e1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d010      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	4b7b      	ldr	r3, [pc, #492]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d908      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b2c:	4b78      	ldr	r3, [pc, #480]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	4975      	ldr	r1, [pc, #468]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d010      	beq.n	8002b6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	4b70      	ldr	r3, [pc, #448]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d908      	bls.n	8002b6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	496a      	ldr	r1, [pc, #424]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	4b64      	ldr	r3, [pc, #400]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d908      	bls.n	8002b9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b88:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	495e      	ldr	r1, [pc, #376]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d908      	bls.n	8002bc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002bb6:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4953      	ldr	r1, [pc, #332]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d010      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	4b4d      	ldr	r3, [pc, #308]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d908      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f023 020f 	bic.w	r2, r3, #15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4947      	ldr	r1, [pc, #284]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d055      	beq.n	8002cae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c02:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	4940      	ldr	r1, [pc, #256]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d107      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c1c:	4b3c      	ldr	r3, [pc, #240]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d121      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0f6      	b.n	8002e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c34:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d115      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0ea      	b.n	8002e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c4c:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0de      	b.n	8002e1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c5c:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0d6      	b.n	8002e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f023 0207 	bic.w	r2, r3, #7
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4925      	ldr	r1, [pc, #148]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7e:	f7fe fa2f 	bl	80010e0 <HAL_GetTick>
 8002c82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c86:	f7fe fa2b 	bl	80010e0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0be      	b.n	8002e1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d1eb      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d208      	bcs.n	8002cdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f023 020f 	bic.w	r2, r3, #15
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	490e      	ldr	r1, [pc, #56]	; (8002d10 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_ClockConfig+0x240>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d214      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_RCC_ClockConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 020f 	bic.w	r2, r3, #15
 8002cf2:	4906      	ldr	r1, [pc, #24]	; (8002d0c <HAL_RCC_ClockConfig+0x240>)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <HAL_RCC_ClockConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e086      	b.n	8002e1a <HAL_RCC_ClockConfig+0x34e>
 8002d0c:	52002000 	.word	0x52002000
 8002d10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d010      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d208      	bcs.n	8002d42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d30:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	4939      	ldr	r1, [pc, #228]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d208      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	492e      	ldr	r1, [pc, #184]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d010      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d208      	bcs.n	8002d9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d8c:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	4922      	ldr	r1, [pc, #136]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d010      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d208      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4917      	ldr	r1, [pc, #92]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dcc:	f000 f834 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	4912      	ldr	r1, [pc, #72]	; (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
 8002de8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HAL_RCC_ClockConfig+0x358>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <HAL_RCC_ClockConfig+0x35c>)
 8002df4:	5cd3      	ldrb	r3, [r2, r3]
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002e00:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <HAL_RCC_ClockConfig+0x360>)
 8002e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e04:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <HAL_RCC_ClockConfig+0x364>)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_RCC_ClockConfig+0x368>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe f91c 	bl	800104c <HAL_InitTick>
 8002e14:	4603      	mov	r3, r0
 8002e16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	58024400 	.word	0x58024400
 8002e28:	08006b50 	.word	0x08006b50
 8002e2c:	24000004 	.word	0x24000004
 8002e30:	24000000 	.word	0x24000000
 8002e34:	24000008 	.word	0x24000008

08002e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e3e:	4bb3      	ldr	r3, [pc, #716]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e46:	2b18      	cmp	r3, #24
 8002e48:	f200 8155 	bhi.w	80030f6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e4c:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002eb9 	.word	0x08002eb9
 8002e58:	080030f7 	.word	0x080030f7
 8002e5c:	080030f7 	.word	0x080030f7
 8002e60:	080030f7 	.word	0x080030f7
 8002e64:	080030f7 	.word	0x080030f7
 8002e68:	080030f7 	.word	0x080030f7
 8002e6c:	080030f7 	.word	0x080030f7
 8002e70:	080030f7 	.word	0x080030f7
 8002e74:	08002edf 	.word	0x08002edf
 8002e78:	080030f7 	.word	0x080030f7
 8002e7c:	080030f7 	.word	0x080030f7
 8002e80:	080030f7 	.word	0x080030f7
 8002e84:	080030f7 	.word	0x080030f7
 8002e88:	080030f7 	.word	0x080030f7
 8002e8c:	080030f7 	.word	0x080030f7
 8002e90:	080030f7 	.word	0x080030f7
 8002e94:	08002ee5 	.word	0x08002ee5
 8002e98:	080030f7 	.word	0x080030f7
 8002e9c:	080030f7 	.word	0x080030f7
 8002ea0:	080030f7 	.word	0x080030f7
 8002ea4:	080030f7 	.word	0x080030f7
 8002ea8:	080030f7 	.word	0x080030f7
 8002eac:	080030f7 	.word	0x080030f7
 8002eb0:	080030f7 	.word	0x080030f7
 8002eb4:	08002eeb 	.word	0x08002eeb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002eb8:	4b94      	ldr	r3, [pc, #592]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ec4:	4b91      	ldr	r3, [pc, #580]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	4a90      	ldr	r2, [pc, #576]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002ed6:	e111      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ed8:	4b8d      	ldr	r3, [pc, #564]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eda:	61bb      	str	r3, [r7, #24]
    break;
 8002edc:	e10e      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002ede:	4b8d      	ldr	r3, [pc, #564]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ee0:	61bb      	str	r3, [r7, #24]
    break;
 8002ee2:	e10b      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002ee4:	4b8c      	ldr	r3, [pc, #560]	; (8003118 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ee6:	61bb      	str	r3, [r7, #24]
    break;
 8002ee8:	e108      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eea:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ef4:	4b85      	ldr	r3, [pc, #532]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002efe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f00:	4b82      	ldr	r3, [pc, #520]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002f0a:	4b80      	ldr	r3, [pc, #512]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0e:	08db      	lsrs	r3, r3, #3
 8002f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80e1 	beq.w	80030f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	f000 8083 	beq.w	800303c <HAL_RCC_GetSysClockFreq+0x204>
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	f200 80a1 	bhi.w	8003080 <HAL_RCC_GetSysClockFreq+0x248>
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x114>
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d056      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f4a:	e099      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d02d      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f58:	4b6c      	ldr	r3, [pc, #432]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	4a6b      	ldr	r2, [pc, #428]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
 8002f68:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f82:	4b62      	ldr	r3, [pc, #392]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8a:	ee07 3a90 	vmov	s15, r3
 8002f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f96:	eddf 5a61 	vldr	s11, [pc, #388]	; 800311c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002fb2:	e087      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003120 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fc6:	4b51      	ldr	r3, [pc, #324]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fce:	ee07 3a90 	vmov	s15, r3
 8002fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fda:	eddf 5a50 	vldr	s11, [pc, #320]	; 800311c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ff6:	e065      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003002:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003124 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300a:	4b40      	ldr	r3, [pc, #256]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800301a:	ed97 6a02 	vldr	s12, [r7, #8]
 800301e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800311c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800302a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800302e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800303a:	e043      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003046:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003128 <HAL_RCC_GetSysClockFreq+0x2f0>
 800304a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800304e:	4b2f      	ldr	r3, [pc, #188]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800305e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003062:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800311c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800306a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800306e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800307e:	e021      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003124 <HAL_RCC_GetSysClockFreq+0x2ec>
 800308e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003092:	4b1e      	ldr	r3, [pc, #120]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800311c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	0a5b      	lsrs	r3, r3, #9
 80030ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ce:	3301      	adds	r3, #1
 80030d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	ee07 3a90 	vmov	s15, r3
 80030d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80030e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030e8:	ee17 3a90 	vmov	r3, s15
 80030ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80030ee:	e005      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
    break;
 80030f4:	e002      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030f8:	61bb      	str	r3, [r7, #24]
    break;
 80030fa:	bf00      	nop
  }

  return sysclockfreq;
 80030fc:	69bb      	ldr	r3, [r7, #24]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3724      	adds	r7, #36	; 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	58024400 	.word	0x58024400
 8003110:	03d09000 	.word	0x03d09000
 8003114:	003d0900 	.word	0x003d0900
 8003118:	017d7840 	.word	0x017d7840
 800311c:	46000000 	.word	0x46000000
 8003120:	4c742400 	.word	0x4c742400
 8003124:	4a742400 	.word	0x4a742400
 8003128:	4bbebc20 	.word	0x4bbebc20

0800312c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003132:	f7ff fe81 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8003136:	4602      	mov	r2, r0
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_RCC_GetHCLKFreq+0x50>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	490f      	ldr	r1, [pc, #60]	; (8003180 <HAL_RCC_GetHCLKFreq+0x54>)
 8003144:	5ccb      	ldrb	r3, [r1, r3]
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	fa22 f303 	lsr.w	r3, r2, r3
 800314e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <HAL_RCC_GetHCLKFreq+0x50>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_RCC_GetHCLKFreq+0x54>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	4a07      	ldr	r2, [pc, #28]	; (8003184 <HAL_RCC_GetHCLKFreq+0x58>)
 8003168:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800316a:	4a07      	ldr	r2, [pc, #28]	; (8003188 <HAL_RCC_GetHCLKFreq+0x5c>)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <HAL_RCC_GetHCLKFreq+0x58>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	58024400 	.word	0x58024400
 8003180:	08006b50 	.word	0x08006b50
 8003184:	24000004 	.word	0x24000004
 8003188:	24000000 	.word	0x24000000

0800318c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003190:	f7ff ffcc 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4904      	ldr	r1, [pc, #16]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	58024400 	.word	0x58024400
 80031b4:	08006b50 	.word	0x08006b50

080031b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80031bc:	f7ff ffb6 	bl	800312c <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4904      	ldr	r1, [pc, #16]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	58024400 	.word	0x58024400
 80031e0:	08006b50 	.word	0x08006b50

080031e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031ec:	2300      	movs	r3, #0
 80031ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f0:	2300      	movs	r3, #0
 80031f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d03f      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003204:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003208:	d02a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800320a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800320e:	d824      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003214:	d018      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800321a:	d81e      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003224:	d007      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003226:	e018      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003228:	4bab      	ldr	r3, [pc, #684]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	4aaa      	ldr	r2, [pc, #680]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800322e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003234:	e015      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3304      	adds	r3, #4
 800323a:	2102      	movs	r1, #2
 800323c:	4618      	mov	r0, r3
 800323e:	f001 f9ff 	bl	8004640 <RCCEx_PLL2_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003246:	e00c      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3324      	adds	r3, #36	; 0x24
 800324c:	2102      	movs	r1, #2
 800324e:	4618      	mov	r0, r3
 8003250:	f001 faa8 	bl	80047a4 <RCCEx_PLL3_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003258:	e003      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
      break;
 800325e:	e000      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003268:	4b9b      	ldr	r3, [pc, #620]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800326a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003274:	4998      	ldr	r1, [pc, #608]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	650b      	str	r3, [r1, #80]	; 0x50
 800327a:	e001      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d03d      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003290:	2b04      	cmp	r3, #4
 8003292:	d826      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032b1 	.word	0x080032b1
 80032a0:	080032bf 	.word	0x080032bf
 80032a4:	080032d1 	.word	0x080032d1
 80032a8:	080032e9 	.word	0x080032e9
 80032ac:	080032e9 	.word	0x080032e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b0:	4b89      	ldr	r3, [pc, #548]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	4a88      	ldr	r2, [pc, #544]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032bc:	e015      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 f9bb 	bl	8004640 <RCCEx_PLL2_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032ce:	e00c      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3324      	adds	r3, #36	; 0x24
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 fa64 	bl	80047a4 <RCCEx_PLL3_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032e0:	e003      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
      break;
 80032e6:	e000      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d109      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032f0:	4b79      	ldr	r3, [pc, #484]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f4:	f023 0207 	bic.w	r2, r3, #7
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	4976      	ldr	r1, [pc, #472]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	650b      	str	r3, [r1, #80]	; 0x50
 8003302:	e001      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003310:	2b00      	cmp	r3, #0
 8003312:	d042      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331c:	d02b      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800331e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003322:	d825      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003324:	2bc0      	cmp	r3, #192	; 0xc0
 8003326:	d028      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003328:	2bc0      	cmp	r3, #192	; 0xc0
 800332a:	d821      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800332c:	2b80      	cmp	r3, #128	; 0x80
 800332e:	d016      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003330:	2b80      	cmp	r3, #128	; 0x80
 8003332:	d81d      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d007      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800333c:	e018      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800333e:	4b66      	ldr	r3, [pc, #408]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	4a65      	ldr	r2, [pc, #404]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800334a:	e017      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f001 f974 	bl	8004640 <RCCEx_PLL2_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800335c:	e00e      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3324      	adds	r3, #36	; 0x24
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fa1d 	bl	80047a4 <RCCEx_PLL3_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800336e:	e005      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	75fb      	strb	r3, [r7, #23]
      break;
 8003374:	e002      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800337a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003382:	4b55      	ldr	r3, [pc, #340]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003386:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	4952      	ldr	r1, [pc, #328]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003390:	4313      	orrs	r3, r2
 8003392:	650b      	str	r3, [r1, #80]	; 0x50
 8003394:	e001      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d049      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033b0:	d030      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80033b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033b6:	d82a      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033bc:	d02c      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80033be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033c2:	d824      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c8:	d018      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80033ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ce:	d81e      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80033d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033d8:	d007      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80033da:	e018      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033dc:	4b3e      	ldr	r3, [pc, #248]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	4a3d      	ldr	r2, [pc, #244]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033e8:	e017      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3304      	adds	r3, #4
 80033ee:	2100      	movs	r1, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 f925 	bl	8004640 <RCCEx_PLL2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033fa:	e00e      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3324      	adds	r3, #36	; 0x24
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f001 f9ce 	bl	80047a4 <RCCEx_PLL3_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800340c:	e005      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
      break;
 8003412:	e002      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003414:	bf00      	nop
 8003416:	e000      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800342e:	492a      	ldr	r1, [pc, #168]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003430:	4313      	orrs	r3, r2
 8003432:	658b      	str	r3, [r1, #88]	; 0x58
 8003434:	e001      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003442:	2b00      	cmp	r3, #0
 8003444:	d04c      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800344c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003450:	d030      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003456:	d82a      	bhi.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003458:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800345c:	d02c      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800345e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003462:	d824      	bhi.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003468:	d018      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800346a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800346e:	d81e      	bhi.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003478:	d007      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800347a:	e018      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347c:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003488:	e017      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f001 f8d5 	bl	8004640 <RCCEx_PLL2_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800349a:	e00e      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3324      	adds	r3, #36	; 0x24
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 f97e 	bl	80047a4 <RCCEx_PLL3_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034ac:	e005      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	75fb      	strb	r3, [r7, #23]
      break;
 80034b2:	e002      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80034b4:	bf00      	nop
 80034b6:	e000      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80034b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034ce:	4902      	ldr	r1, [pc, #8]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	658b      	str	r3, [r1, #88]	; 0x58
 80034d4:	e004      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80034d6:	bf00      	nop
 80034d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d032      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f0:	2b30      	cmp	r3, #48	; 0x30
 80034f2:	d01c      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80034f4:	2b30      	cmp	r3, #48	; 0x30
 80034f6:	d817      	bhi.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d00c      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d813      	bhi.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d016      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003504:	2b10      	cmp	r3, #16
 8003506:	d10f      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003508:	4bb1      	ldr	r3, [pc, #708]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	4ab0      	ldr	r2, [pc, #704]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800350e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003514:	e00e      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	2102      	movs	r1, #2
 800351c:	4618      	mov	r0, r3
 800351e:	f001 f88f 	bl	8004640 <RCCEx_PLL2_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003526:	e005      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
      break;
 800352c:	e002      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800352e:	bf00      	nop
 8003530:	e000      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800353a:	4ba5      	ldr	r3, [pc, #660]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003546:	49a2      	ldr	r1, [pc, #648]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003548:	4313      	orrs	r3, r2
 800354a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800354c:	e001      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d047      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003566:	d030      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800356c:	d82a      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800356e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003572:	d02c      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003574:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003578:	d824      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800357a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357e:	d018      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003584:	d81e      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358e:	d007      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003590:	e018      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003592:	4b8f      	ldr	r3, [pc, #572]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	4a8e      	ldr	r2, [pc, #568]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800359e:	e017      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 f84a 	bl	8004640 <RCCEx_PLL2_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035b0:	e00e      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3324      	adds	r3, #36	; 0x24
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 f8f3 	bl	80047a4 <RCCEx_PLL3_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035c2:	e005      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	75fb      	strb	r3, [r7, #23]
      break;
 80035c8:	e002      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80035ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035d6:	4b7e      	ldr	r3, [pc, #504]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e2:	497b      	ldr	r1, [pc, #492]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	650b      	str	r3, [r1, #80]	; 0x50
 80035e8:	e001      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d049      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003602:	d02e      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d828      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800360a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800360e:	d02a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003614:	d822      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003616:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800361a:	d026      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800361c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003620:	d81c      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003626:	d010      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800362c:	d816      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01d      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003636:	d111      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3304      	adds	r3, #4
 800363c:	2101      	movs	r1, #1
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fffe 	bl	8004640 <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003648:	e012      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3324      	adds	r3, #36	; 0x24
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f001 f8a7 	bl	80047a4 <RCCEx_PLL3_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800365a:	e009      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
      break;
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003662:	bf00      	nop
 8003664:	e004      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800366e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003676:	4b56      	ldr	r3, [pc, #344]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003682:	4953      	ldr	r1, [pc, #332]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003684:	4313      	orrs	r3, r2
 8003686:	650b      	str	r3, [r1, #80]	; 0x50
 8003688:	e001      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d04b      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a4:	d02e      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80036a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036aa:	d828      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b0:	d02a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d822      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036bc:	d026      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80036be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036c2:	d81c      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c8:	d010      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x508>
 80036ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ce:	d816      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80036d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036d8:	d111      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3304      	adds	r3, #4
 80036de:	2101      	movs	r1, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 ffad 	bl	8004640 <RCCEx_PLL2_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036ea:	e012      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3324      	adds	r3, #36	; 0x24
 80036f0:	2101      	movs	r1, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 f856 	bl	80047a4 <RCCEx_PLL3_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036fc:	e009      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	75fb      	strb	r3, [r7, #23]
      break;
 8003702:	e006      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003704:	bf00      	nop
 8003706:	e004      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003708:	bf00      	nop
 800370a:	e002      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800370c:	bf00      	nop
 800370e:	e000      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003718:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003726:	492a      	ldr	r1, [pc, #168]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003728:	4313      	orrs	r3, r2
 800372a:	658b      	str	r3, [r1, #88]	; 0x58
 800372c:	e001      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d022      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00e      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374a:	d108      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f000 ff74 	bl	8004640 <RCCEx_PLL2_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 800375c:	e003      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]
      break;
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8003764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d109      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800376c:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800376e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003778:	4915      	ldr	r1, [pc, #84]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800377a:	4313      	orrs	r3, r2
 800377c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800377e:	e001      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d031      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003798:	d00e      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800379a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800379e:	d814      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d017      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80037a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a8:	d10f      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	4a08      	ldr	r2, [pc, #32]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80037b6:	e00e      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	2101      	movs	r1, #1
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 ff3e 	bl	8004640 <RCCEx_PLL2_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80037c8:	e005      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
      break;
 80037ce:	e002      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80037d0:	58024400 	.word	0x58024400
      break;
 80037d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037dc:	4bbc      	ldr	r3, [pc, #752]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	49b9      	ldr	r1, [pc, #740]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	650b      	str	r3, [r1, #80]	; 0x50
 80037ee:	e001      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d032      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	2b03      	cmp	r3, #3
 8003806:	d81b      	bhi.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003808:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	08003847 	.word	0x08003847
 8003814:	08003821 	.word	0x08003821
 8003818:	0800382f 	.word	0x0800382f
 800381c:	08003847 	.word	0x08003847
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003820:	4bab      	ldr	r3, [pc, #684]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	4aaa      	ldr	r2, [pc, #680]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800382c:	e00c      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	2102      	movs	r1, #2
 8003834:	4618      	mov	r0, r3
 8003836:	f000 ff03 	bl	8004640 <RCCEx_PLL2_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800383e:	e003      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	75fb      	strb	r3, [r7, #23]
      break;
 8003844:	e000      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8003846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800384e:	4ba0      	ldr	r3, [pc, #640]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	f023 0203 	bic.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	499d      	ldr	r1, [pc, #628]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800385c:	4313      	orrs	r3, r2
 800385e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003860:	e001      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8086 	beq.w	8003980 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003874:	4b97      	ldr	r3, [pc, #604]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a96      	ldr	r2, [pc, #600]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800387a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003880:	f7fd fc2e 	bl	80010e0 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003886:	e009      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003888:	f7fd fc2a 	bl	80010e0 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d902      	bls.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	75fb      	strb	r3, [r7, #23]
        break;
 800389a:	e005      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800389c:	4b8d      	ldr	r3, [pc, #564]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ef      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d166      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038ae:	4b88      	ldr	r3, [pc, #544]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038b8:	4053      	eors	r3, r2
 80038ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d013      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038c2:	4b83      	ldr	r3, [pc, #524]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038cc:	4b80      	ldr	r3, [pc, #512]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a7f      	ldr	r2, [pc, #508]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038d8:	4b7d      	ldr	r3, [pc, #500]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a7c      	ldr	r2, [pc, #496]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038e4:	4a7a      	ldr	r2, [pc, #488]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f4:	d115      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fd fbf3 	bl	80010e0 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038fc:	e00b      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fd fbef 	bl	80010e0 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d902      	bls.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	75fb      	strb	r3, [r7, #23]
            break;
 8003914:	e005      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003916:	4b6e      	ldr	r3, [pc, #440]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0ed      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d126      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003936:	d10d      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8003938:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003946:	0919      	lsrs	r1, r3, #4
 8003948:	4b63      	ldr	r3, [pc, #396]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 800394a:	400b      	ands	r3, r1
 800394c:	4960      	ldr	r1, [pc, #384]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800394e:	4313      	orrs	r3, r2
 8003950:	610b      	str	r3, [r1, #16]
 8003952:	e005      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8003954:	4b5e      	ldr	r3, [pc, #376]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	4a5d      	ldr	r2, [pc, #372]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800395a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800395e:	6113      	str	r3, [r2, #16]
 8003960:	4b5b      	ldr	r3, [pc, #364]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003962:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800396a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396e:	4958      	ldr	r1, [pc, #352]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003970:	4313      	orrs	r3, r2
 8003972:	670b      	str	r3, [r1, #112]	; 0x70
 8003974:	e004      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	75bb      	strb	r3, [r7, #22]
 800397a:	e001      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d07e      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003990:	2b28      	cmp	r3, #40	; 0x28
 8003992:	d867      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	08003a6b 	.word	0x08003a6b
 80039a0:	08003a65 	.word	0x08003a65
 80039a4:	08003a65 	.word	0x08003a65
 80039a8:	08003a65 	.word	0x08003a65
 80039ac:	08003a65 	.word	0x08003a65
 80039b0:	08003a65 	.word	0x08003a65
 80039b4:	08003a65 	.word	0x08003a65
 80039b8:	08003a65 	.word	0x08003a65
 80039bc:	08003a41 	.word	0x08003a41
 80039c0:	08003a65 	.word	0x08003a65
 80039c4:	08003a65 	.word	0x08003a65
 80039c8:	08003a65 	.word	0x08003a65
 80039cc:	08003a65 	.word	0x08003a65
 80039d0:	08003a65 	.word	0x08003a65
 80039d4:	08003a65 	.word	0x08003a65
 80039d8:	08003a65 	.word	0x08003a65
 80039dc:	08003a53 	.word	0x08003a53
 80039e0:	08003a65 	.word	0x08003a65
 80039e4:	08003a65 	.word	0x08003a65
 80039e8:	08003a65 	.word	0x08003a65
 80039ec:	08003a65 	.word	0x08003a65
 80039f0:	08003a65 	.word	0x08003a65
 80039f4:	08003a65 	.word	0x08003a65
 80039f8:	08003a65 	.word	0x08003a65
 80039fc:	08003a6b 	.word	0x08003a6b
 8003a00:	08003a65 	.word	0x08003a65
 8003a04:	08003a65 	.word	0x08003a65
 8003a08:	08003a65 	.word	0x08003a65
 8003a0c:	08003a65 	.word	0x08003a65
 8003a10:	08003a65 	.word	0x08003a65
 8003a14:	08003a65 	.word	0x08003a65
 8003a18:	08003a65 	.word	0x08003a65
 8003a1c:	08003a6b 	.word	0x08003a6b
 8003a20:	08003a65 	.word	0x08003a65
 8003a24:	08003a65 	.word	0x08003a65
 8003a28:	08003a65 	.word	0x08003a65
 8003a2c:	08003a65 	.word	0x08003a65
 8003a30:	08003a65 	.word	0x08003a65
 8003a34:	08003a65 	.word	0x08003a65
 8003a38:	08003a65 	.word	0x08003a65
 8003a3c:	08003a6b 	.word	0x08003a6b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fdfa 	bl	8004640 <RCCEx_PLL2_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a50:	e00c      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3324      	adds	r3, #36	; 0x24
 8003a56:	2101      	movs	r1, #1
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fea3 	bl	80047a4 <RCCEx_PLL3_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a62:	e003      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
      break;
 8003a68:	e000      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8003a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a72:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a7e:	4914      	ldr	r1, [pc, #80]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	654b      	str	r3, [r1, #84]	; 0x54
 8003a84:	e001      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d03e      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d827      	bhi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003a9e:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa4:	08003af5 	.word	0x08003af5
 8003aa8:	08003abd 	.word	0x08003abd
 8003aac:	08003add 	.word	0x08003add
 8003ab0:	08003af5 	.word	0x08003af5
 8003ab4:	08003af5 	.word	0x08003af5
 8003ab8:	08003af5 	.word	0x08003af5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fdbc 	bl	8004640 <RCCEx_PLL2_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003acc:	e013      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003ace:	bf00      	nop
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	58024800 	.word	0x58024800
 8003ad8:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3324      	adds	r3, #36	; 0x24
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fe5e 	bl	80047a4 <RCCEx_PLL3_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003aec:	e003      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
      break;
 8003af2:	e000      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8003af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003afc:	4b9f      	ldr	r3, [pc, #636]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f023 0207 	bic.w	r2, r3, #7
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b08:	499c      	ldr	r1, [pc, #624]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	654b      	str	r3, [r1, #84]	; 0x54
 8003b0e:	e001      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d039      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d820      	bhi.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003b2a:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b73 	.word	0x08003b73
 8003b34:	08003b49 	.word	0x08003b49
 8003b38:	08003b5b 	.word	0x08003b5b
 8003b3c:	08003b73 	.word	0x08003b73
 8003b40:	08003b73 	.word	0x08003b73
 8003b44:	08003b73 	.word	0x08003b73
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fd76 	bl	8004640 <RCCEx_PLL2_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b58:	e00c      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3324      	adds	r3, #36	; 0x24
 8003b5e:	2101      	movs	r1, #1
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fe1f 	bl	80047a4 <RCCEx_PLL3_Config>
 8003b66:	4603      	mov	r3, r0
 8003b68:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b6a:	e003      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b70:	e000      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8003b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b7a:	4b80      	ldr	r3, [pc, #512]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	f023 0207 	bic.w	r2, r3, #7
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b88:	497c      	ldr	r1, [pc, #496]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b8e:	e001      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d04b      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003baa:	d02e      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8003bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb0:	d828      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb6:	d02a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbc:	d822      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003bbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bc2:	d026      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8003bc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bc8:	d81c      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bce:	d010      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd4:	d816      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01d      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bde:	d111      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fd2a 	bl	8004640 <RCCEx_PLL2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003bf0:	e012      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3324      	adds	r3, #36	; 0x24
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fdd3 	bl	80047a4 <RCCEx_PLL3_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c02:	e009      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	75fb      	strb	r3, [r7, #23]
      break;
 8003c08:	e006      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e004      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c1e:	4b57      	ldr	r3, [pc, #348]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	4953      	ldr	r1, [pc, #332]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	654b      	str	r3, [r1, #84]	; 0x54
 8003c32:	e001      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d04b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c4e:	d02e      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003c50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c54:	d828      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5a:	d02a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c60:	d822      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003c62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c66:	d026      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003c68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c6c:	d81c      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c72:	d010      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c78:	d816      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01d      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c82:	d111      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3304      	adds	r3, #4
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fcd8 	bl	8004640 <RCCEx_PLL2_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c94:	e012      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3324      	adds	r3, #36	; 0x24
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fd81 	bl	80047a4 <RCCEx_PLL3_Config>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ca6:	e009      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	75fb      	strb	r3, [r7, #23]
      break;
 8003cac:	e006      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cc2:	4b2e      	ldr	r3, [pc, #184]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cd0:	492a      	ldr	r1, [pc, #168]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	658b      	str	r3, [r1, #88]	; 0x58
 8003cd6:	e001      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d04d      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cf2:	d02e      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003cf4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cf8:	d828      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cfe:	d02a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d04:	d822      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003d06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d0a:	d026      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003d0c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d10:	d81c      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d16:	d010      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1c:	d816      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01d      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8003d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d26:	d111      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fc86 	bl	8004640 <RCCEx_PLL2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d38:	e012      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3324      	adds	r3, #36	; 0x24
 8003d3e:	2102      	movs	r1, #2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fd2f 	bl	80047a4 <RCCEx_PLL3_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d4a:	e009      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d50:	e006      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003d52:	bf00      	nop
 8003d54:	e004      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003d56:	bf00      	nop
 8003d58:	e002      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d74:	4901      	ldr	r1, [pc, #4]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	658b      	str	r3, [r1, #88]	; 0x58
 8003d7a:	e003      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003d7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9a:	d10a      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3324      	adds	r3, #36	; 0x24
 8003da0:	2102      	movs	r1, #2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fcfe 	bl	80047a4 <RCCEx_PLL3_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003db2:	4b8c      	ldr	r3, [pc, #560]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc0:	4988      	ldr	r1, [pc, #544]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ddc:	d10a      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3324      	adds	r3, #36	; 0x24
 8003de2:	2102      	movs	r1, #2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fcdd 	bl	80047a4 <RCCEx_PLL3_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003df4:	4b7b      	ldr	r3, [pc, #492]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e02:	4978      	ldr	r1, [pc, #480]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d034      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e1e:	d01d      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e24:	d817      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2e:	d009      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8003e30:	e011      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3304      	adds	r3, #4
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fc01 	bl	8004640 <RCCEx_PLL2_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e42:	e00c      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3324      	adds	r3, #36	; 0x24
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fcaa 	bl	80047a4 <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8003e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e64:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e72:	495c      	ldr	r1, [pc, #368]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	658b      	str	r3, [r1, #88]	; 0x58
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d033      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e94:	d01c      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8003e96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e9a:	d816      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8003e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003ea2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ea6:	d007      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8003ea8:	e00f      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eaa:	4b4e      	ldr	r3, [pc, #312]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	4a4d      	ldr	r2, [pc, #308]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003eb6:	e00c      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3324      	adds	r3, #36	; 0x24
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fc70 	bl	80047a4 <RCCEx_PLL3_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ec8:	e003      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ece:	e000      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8003ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed8:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	493f      	ldr	r1, [pc, #252]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	654b      	str	r3, [r1, #84]	; 0x54
 8003eec:	e001      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d029      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8003f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0a:	d007      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8003f0c:	e00f      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f0e:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	4a34      	ldr	r2, [pc, #208]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	2102      	movs	r1, #2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fb8c 	bl	8004640 <RCCEx_PLL2_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f2c:	e002      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	75fb      	strb	r3, [r7, #23]
      break;
 8003f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f46:	4927      	ldr	r1, [pc, #156]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f4c:	e001      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
 8003f50:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3324      	adds	r3, #36	; 0x24
 8003f62:	2102      	movs	r1, #2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fc1d 	bl	80047a4 <RCCEx_PLL3_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d035      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8a:	d017      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f90:	d811      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f96:	d013      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9c:	d80b      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d010      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa6:	d106      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	4a0d      	ldr	r2, [pc, #52]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003fb4:	e007      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fba:	e004      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003fbc:	bf00      	nop
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003fc0:	bf00      	nop
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10d      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fda:	4902      	ldr	r1, [pc, #8]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	654b      	str	r3, [r1, #84]	; 0x54
 8003fe0:	e004      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8003fe2:	bf00      	nop
 8003fe4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ff8:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004004:	492e      	ldr	r1, [pc, #184]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004024:	4926      	ldr	r1, [pc, #152]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004036:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004042:	491f      	ldr	r1, [pc, #124]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00d      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004054:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800405a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800405e:	6113      	str	r3, [r2, #16]
 8004060:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800406a:	4915      	ldr	r1, [pc, #84]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	da08      	bge.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800407a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004084:	490e      	ldr	r1, [pc, #56]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a4:	4906      	ldr	r1, [pc, #24]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80040aa:	7dbb      	ldrb	r3, [r7, #22]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	58024400 	.word	0x58024400

080040c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80040c8:	f7ff f830 	bl	800312c <HAL_RCC_GetHCLKFreq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4904      	ldr	r1, [pc, #16]	; (80040ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040da:	5ccb      	ldrb	r3, [r1, r3]
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	58024400 	.word	0x58024400
 80040ec:	08006b50 	.word	0x08006b50

080040f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040f8:	4ba1      	ldr	r3, [pc, #644]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004102:	4b9f      	ldr	r3, [pc, #636]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	0b1b      	lsrs	r3, r3, #12
 8004108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800410c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800410e:	4b9c      	ldr	r3, [pc, #624]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800411a:	4b99      	ldr	r3, [pc, #612]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	08db      	lsrs	r3, r3, #3
 8004120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8111 	beq.w	8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b02      	cmp	r3, #2
 8004142:	f000 8083 	beq.w	800424c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b02      	cmp	r3, #2
 800414a:	f200 80a1 	bhi.w	8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d056      	beq.n	8004208 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800415a:	e099      	b.n	8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800415c:	4b88      	ldr	r3, [pc, #544]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02d      	beq.n	80041c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004168:	4b85      	ldr	r3, [pc, #532]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	08db      	lsrs	r3, r3, #3
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	4a84      	ldr	r2, [pc, #528]	; (8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
 8004178:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004192:	4b7b      	ldr	r3, [pc, #492]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80041c2:	e087      	b.n	80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800438c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041d6:	4b6a      	ldr	r3, [pc, #424]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004202:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004206:	e065      	b.n	80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004212:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800421a:	4b59      	ldr	r3, [pc, #356]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422a:	ed97 6a03 	vldr	s12, [r7, #12]
 800422e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800423a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800423e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004246:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800424a:	e043      	b.n	80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800425a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800425e:	4b48      	ldr	r3, [pc, #288]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004272:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800428e:	e021      	b.n	80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800429e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a2:	4b37      	ldr	r3, [pc, #220]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80042d4:	4b2a      	ldr	r3, [pc, #168]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	0a5b      	lsrs	r3, r3, #9
 80042da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80042f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042fa:	ee17 2a90 	vmov	r2, s15
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004302:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800430c:	ee07 3a90 	vmov	s15, r3
 8004310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004314:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004318:	ee37 7a87 	vadd.f32	s14, s15, s14
 800431c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004328:	ee17 2a90 	vmov	r2, s15
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004330:	4b13      	ldr	r3, [pc, #76]	; (8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	0e1b      	lsrs	r3, r3, #24
 8004336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004346:	ee37 7a87 	vadd.f32	s14, s15, s14
 800434a:	edd7 6a07 	vldr	s13, [r7, #28]
 800434e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004356:	ee17 2a90 	vmov	r2, s15
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800435e:	e008      	b.n	8004372 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	609a      	str	r2, [r3, #8]
}
 8004372:	bf00      	nop
 8004374:	3724      	adds	r7, #36	; 0x24
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	58024400 	.word	0x58024400
 8004384:	03d09000 	.word	0x03d09000
 8004388:	46000000 	.word	0x46000000
 800438c:	4c742400 	.word	0x4c742400
 8004390:	4a742400 	.word	0x4a742400
 8004394:	4bbebc20 	.word	0x4bbebc20

08004398 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004398:	b480      	push	{r7}
 800439a:	b089      	sub	sp, #36	; 0x24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043a0:	4ba1      	ldr	r3, [pc, #644]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80043aa:	4b9f      	ldr	r3, [pc, #636]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	0d1b      	lsrs	r3, r3, #20
 80043b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043b6:	4b9c      	ldr	r3, [pc, #624]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80043c2:	4b99      	ldr	r3, [pc, #612]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	08db      	lsrs	r3, r3, #3
 80043c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8111 	beq.w	8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	f000 8083 	beq.w	80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	f200 80a1 	bhi.w	8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d056      	beq.n	80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004402:	e099      	b.n	8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004404:	4b88      	ldr	r3, [pc, #544]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d02d      	beq.n	800446c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004410:	4b85      	ldr	r3, [pc, #532]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	08db      	lsrs	r3, r3, #3
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	4a84      	ldr	r2, [pc, #528]	; (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
 8004420:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443a:	4b7b      	ldr	r3, [pc, #492]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444a:	ed97 6a03 	vldr	s12, [r7, #12]
 800444e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800445e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004466:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800446a:	e087      	b.n	800457c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004476:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800447a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447e:	4b6a      	ldr	r3, [pc, #424]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004492:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800449a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044ae:	e065      	b.n	800457c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c2:	4b59      	ldr	r3, [pc, #356]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044f2:	e043      	b.n	800457c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800463c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004506:	4b48      	ldr	r3, [pc, #288]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004516:	ed97 6a03 	vldr	s12, [r7, #12]
 800451a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800451e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800452a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004532:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004536:	e021      	b.n	800457c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004542:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454a:	4b37      	ldr	r3, [pc, #220]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455a:	ed97 6a03 	vldr	s12, [r7, #12]
 800455e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800456a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004576:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800457a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800457c:	4b2a      	ldr	r3, [pc, #168]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	0a5b      	lsrs	r3, r3, #9
 8004582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004596:	edd7 6a07 	vldr	s13, [r7, #28]
 800459a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a2:	ee17 2a90 	vmov	r2, s15
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80045aa:	4b1f      	ldr	r3, [pc, #124]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	0c1b      	lsrs	r3, r3, #16
 80045b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d0:	ee17 2a90 	vmov	r2, s15
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80045d8:	4b13      	ldr	r3, [pc, #76]	; (8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	0e1b      	lsrs	r3, r3, #24
 80045de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fe:	ee17 2a90 	vmov	r2, s15
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004606:	e008      	b.n	800461a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	609a      	str	r2, [r3, #8]
}
 800461a:	bf00      	nop
 800461c:	3724      	adds	r7, #36	; 0x24
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	58024400 	.word	0x58024400
 800462c:	03d09000 	.word	0x03d09000
 8004630:	46000000 	.word	0x46000000
 8004634:	4c742400 	.word	0x4c742400
 8004638:	4a742400 	.word	0x4a742400
 800463c:	4bbebc20 	.word	0x4bbebc20

08004640 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800464e:	4b53      	ldr	r3, [pc, #332]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b03      	cmp	r3, #3
 8004658:	d101      	bne.n	800465e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e099      	b.n	8004792 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800465e:	4b4f      	ldr	r3, [pc, #316]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a4e      	ldr	r2, [pc, #312]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004664:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800466a:	f7fc fd39 	bl	80010e0 <HAL_GetTick>
 800466e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004670:	e008      	b.n	8004684 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004672:	f7fc fd35 	bl	80010e0 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e086      	b.n	8004792 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004684:	4b45      	ldr	r3, [pc, #276]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1f0      	bne.n	8004672 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004690:	4b42      	ldr	r3, [pc, #264]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	031b      	lsls	r3, r3, #12
 800469e:	493f      	ldr	r1, [pc, #252]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	628b      	str	r3, [r1, #40]	; 0x28
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	025b      	lsls	r3, r3, #9
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	3b01      	subs	r3, #1
 80046c0:	041b      	lsls	r3, r3, #16
 80046c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	061b      	lsls	r3, r3, #24
 80046d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046d4:	4931      	ldr	r1, [pc, #196]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046da:	4b30      	ldr	r3, [pc, #192]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	492d      	ldr	r1, [pc, #180]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046ec:	4b2b      	ldr	r3, [pc, #172]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	f023 0220 	bic.w	r2, r3, #32
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	4928      	ldr	r1, [pc, #160]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046fe:	4b27      	ldr	r3, [pc, #156]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	4a26      	ldr	r2, [pc, #152]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004704:	f023 0310 	bic.w	r3, r3, #16
 8004708:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 800470c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800470e:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <RCCEx_PLL2_Config+0x160>)
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	69d2      	ldr	r2, [r2, #28]
 8004716:	00d2      	lsls	r2, r2, #3
 8004718:	4920      	ldr	r1, [pc, #128]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 800471a:	4313      	orrs	r3, r2
 800471c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800471e:	4b1f      	ldr	r3, [pc, #124]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	4a1e      	ldr	r2, [pc, #120]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004724:	f043 0310 	orr.w	r3, r3, #16
 8004728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d106      	bne.n	800473e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004730:	4b1a      	ldr	r3, [pc, #104]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	4a19      	ldr	r2, [pc, #100]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004736:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800473a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800473c:	e00f      	b.n	800475e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d106      	bne.n	8004752 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004744:	4b15      	ldr	r3, [pc, #84]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	4a14      	ldr	r2, [pc, #80]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 800474a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800474e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004750:	e005      	b.n	800475e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	4a11      	ldr	r2, [pc, #68]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800475c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a0e      	ldr	r2, [pc, #56]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004764:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476a:	f7fc fcb9 	bl	80010e0 <HAL_GetTick>
 800476e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004770:	e008      	b.n	8004784 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004772:	f7fc fcb5 	bl	80010e0 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e006      	b.n	8004792 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <RCCEx_PLL2_Config+0x15c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004790:	7bfb      	ldrb	r3, [r7, #15]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	58024400 	.word	0x58024400
 80047a0:	ffff0007 	.word	0xffff0007

080047a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047b2:	4b53      	ldr	r3, [pc, #332]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d101      	bne.n	80047c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e099      	b.n	80048f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047c2:	4b4f      	ldr	r3, [pc, #316]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a4e      	ldr	r2, [pc, #312]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80047c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ce:	f7fc fc87 	bl	80010e0 <HAL_GetTick>
 80047d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047d6:	f7fc fc83 	bl	80010e0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e086      	b.n	80048f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047e8:	4b45      	ldr	r3, [pc, #276]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f0      	bne.n	80047d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047f4:	4b42      	ldr	r3, [pc, #264]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	051b      	lsls	r3, r3, #20
 8004802:	493f      	ldr	r1, [pc, #252]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 8004804:	4313      	orrs	r3, r2
 8004806:	628b      	str	r3, [r1, #40]	; 0x28
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	3b01      	subs	r3, #1
 800480e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	3b01      	subs	r3, #1
 8004818:	025b      	lsls	r3, r3, #9
 800481a:	b29b      	uxth	r3, r3
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	3b01      	subs	r3, #1
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	3b01      	subs	r3, #1
 8004832:	061b      	lsls	r3, r3, #24
 8004834:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004838:	4931      	ldr	r1, [pc, #196]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800483e:	4b30      	ldr	r3, [pc, #192]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	492d      	ldr	r1, [pc, #180]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 800484c:	4313      	orrs	r3, r2
 800484e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004850:	4b2b      	ldr	r3, [pc, #172]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	4928      	ldr	r1, [pc, #160]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 800485e:	4313      	orrs	r3, r2
 8004860:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004862:	4b27      	ldr	r3, [pc, #156]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	4a26      	ldr	r2, [pc, #152]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 8004868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800486e:	4b24      	ldr	r3, [pc, #144]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 8004870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <RCCEx_PLL3_Config+0x160>)
 8004874:	4013      	ands	r3, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	69d2      	ldr	r2, [r2, #28]
 800487a:	00d2      	lsls	r2, r2, #3
 800487c:	4920      	ldr	r1, [pc, #128]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 800487e:	4313      	orrs	r3, r2
 8004880:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004882:	4b1f      	ldr	r3, [pc, #124]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 8004888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d106      	bne.n	80048a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004894:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	4a19      	ldr	r2, [pc, #100]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 800489a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800489e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048a0:	e00f      	b.n	80048c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d106      	bne.n	80048b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048a8:	4b15      	ldr	r3, [pc, #84]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	4a14      	ldr	r2, [pc, #80]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80048ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048b4:	e005      	b.n	80048c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048b6:	4b12      	ldr	r3, [pc, #72]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	4a11      	ldr	r2, [pc, #68]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80048bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048c2:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a0e      	ldr	r2, [pc, #56]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80048c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ce:	f7fc fc07 	bl	80010e0 <HAL_GetTick>
 80048d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048d4:	e008      	b.n	80048e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048d6:	f7fc fc03 	bl	80010e0 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e006      	b.n	80048f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <RCCEx_PLL3_Config+0x15c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	58024400 	.word	0x58024400
 8004904:	ffff0007 	.word	0xffff0007

08004908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e042      	b.n	80049a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004920:	2b00      	cmp	r3, #0
 8004922:	d106      	bne.n	8004932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7fc f925 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2224      	movs	r2, #36	; 0x24
 8004936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fb9c 	bl	8005088 <UART_SetConfig>
 8004950:	4603      	mov	r3, r0
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e022      	b.n	80049a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 f8f0 	bl	8005b48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f001 f977 	bl	8005c8c <UART_CheckIdleState>
 800499e:	4603      	mov	r3, r0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	; 0x28
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	4613      	mov	r3, r2
 80049b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049be:	2b20      	cmp	r3, #32
 80049c0:	f040 8083 	bne.w	8004aca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_UART_Transmit+0x28>
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e07b      	b.n	8004acc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Transmit+0x3a>
 80049de:	2302      	movs	r3, #2
 80049e0:	e074      	b.n	8004acc <HAL_UART_Transmit+0x124>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2221      	movs	r2, #33	; 0x21
 80049f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049fa:	f7fc fb71 	bl	80010e0 <HAL_GetTick>
 80049fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	88fa      	ldrh	r2, [r7, #6]
 8004a04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a18:	d108      	bne.n	8004a2c <HAL_UART_Transmit+0x84>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	e003      	b.n	8004a34 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004a3c:	e02c      	b.n	8004a98 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	2180      	movs	r1, #128	; 0x80
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f001 f96a 	bl	8005d22 <UART_WaitOnFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e039      	b.n	8004acc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10b      	bne.n	8004a76 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	3302      	adds	r3, #2
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	e007      	b.n	8004a86 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	3301      	adds	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1cc      	bne.n	8004a3e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2140      	movs	r1, #64	; 0x40
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f001 f937 	bl	8005d22 <UART_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e006      	b.n	8004acc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e000      	b.n	8004acc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004aca:	2302      	movs	r3, #2
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004afa:	4013      	ands	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d118      	bne.n	8004b36 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d013      	beq.n	8004b36 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8282 	beq.w	8005030 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	4798      	blx	r3
      }
      return;
 8004b34:	e27c      	b.n	8005030 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80ef 	beq.w	8004d1c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4b73      	ldr	r3, [pc, #460]	; (8004d10 <HAL_UART_IRQHandler+0x23c>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4b72      	ldr	r3, [pc, #456]	; (8004d14 <HAL_UART_IRQHandler+0x240>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80e4 	beq.w	8004d1c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d010      	beq.n	8004b80 <HAL_UART_IRQHandler+0xac>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00b      	beq.n	8004b80 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b76:	f043 0201 	orr.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d010      	beq.n	8004bac <HAL_UART_IRQHandler+0xd8>
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba2:	f043 0204 	orr.w	r2, r3, #4
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d010      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x104>
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00b      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bce:	f043 0202 	orr.w	r2, r3, #2
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d015      	beq.n	8004c0e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4b48      	ldr	r3, [pc, #288]	; (8004d10 <HAL_UART_IRQHandler+0x23c>)
 8004bf0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00b      	beq.n	8004c0e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2208      	movs	r2, #8
 8004bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c04:	f043 0208 	orr.w	r2, r3, #8
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d011      	beq.n	8004c3c <HAL_UART_IRQHandler+0x168>
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c32:	f043 0220 	orr.w	r2, r3, #32
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 81f6 	beq.w	8005034 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d011      	beq.n	8004c76 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d004      	beq.n	8004c96 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d031      	beq.n	8004cfa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f001 f8c4 	bl	8005e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d123      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d013      	beq.n	8004cea <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc6:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <HAL_UART_IRQHandler+0x244>)
 8004cc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fc fe70 	bl	80019b4 <HAL_DMA_Abort_IT>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d017      	beq.n	8004d0a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce8:	e00f      	b.n	8004d0a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9b6 	bl	800505c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	e00b      	b.n	8004d0a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f9b2 	bl	800505c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	e007      	b.n	8004d0a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f9ae 	bl	800505c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004d08:	e194      	b.n	8005034 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0a:	bf00      	nop
    return;
 8004d0c:	e192      	b.n	8005034 <HAL_UART_IRQHandler+0x560>
 8004d0e:	bf00      	nop
 8004d10:	10000001 	.word	0x10000001
 8004d14:	04000120 	.word	0x04000120
 8004d18:	08005e89 	.word	0x08005e89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	f040 810f 	bne.w	8004f44 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8109 	beq.w	8004f44 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8103 	beq.w	8004f44 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2210      	movs	r2, #16
 8004d44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	f040 80bb 	bne.w	8004ecc <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a96      	ldr	r2, [pc, #600]	; (8004fb8 <HAL_UART_IRQHandler+0x4e4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d059      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a94      	ldr	r2, [pc, #592]	; (8004fbc <HAL_UART_IRQHandler+0x4e8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d053      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a92      	ldr	r2, [pc, #584]	; (8004fc0 <HAL_UART_IRQHandler+0x4ec>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d04d      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a90      	ldr	r2, [pc, #576]	; (8004fc4 <HAL_UART_IRQHandler+0x4f0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d047      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a8e      	ldr	r2, [pc, #568]	; (8004fc8 <HAL_UART_IRQHandler+0x4f4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d041      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a8c      	ldr	r2, [pc, #560]	; (8004fcc <HAL_UART_IRQHandler+0x4f8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d03b      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a8a      	ldr	r2, [pc, #552]	; (8004fd0 <HAL_UART_IRQHandler+0x4fc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d035      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a88      	ldr	r2, [pc, #544]	; (8004fd4 <HAL_UART_IRQHandler+0x500>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d02f      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a86      	ldr	r2, [pc, #536]	; (8004fd8 <HAL_UART_IRQHandler+0x504>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d029      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a84      	ldr	r2, [pc, #528]	; (8004fdc <HAL_UART_IRQHandler+0x508>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d023      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a82      	ldr	r2, [pc, #520]	; (8004fe0 <HAL_UART_IRQHandler+0x50c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01d      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a80      	ldr	r2, [pc, #512]	; (8004fe4 <HAL_UART_IRQHandler+0x510>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d017      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a7e      	ldr	r2, [pc, #504]	; (8004fe8 <HAL_UART_IRQHandler+0x514>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d011      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a7c      	ldr	r2, [pc, #496]	; (8004fec <HAL_UART_IRQHandler+0x518>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00b      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a7a      	ldr	r2, [pc, #488]	; (8004ff0 <HAL_UART_IRQHandler+0x51c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_IRQHandler+0x342>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a78      	ldr	r2, [pc, #480]	; (8004ff4 <HAL_UART_IRQHandler+0x520>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d105      	bne.n	8004e22 <HAL_UART_IRQHandler+0x34e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	e004      	b.n	8004e2c <HAL_UART_IRQHandler+0x358>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004e2e:	893b      	ldrh	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8101 	beq.w	8005038 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e3c:	893a      	ldrh	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	f080 80fa 	bcs.w	8005038 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	893a      	ldrh	r2, [r7, #8]
 8004e48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e56:	d02b      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e86:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0210 	bic.w	r2, r2, #16
 8004ea4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fc fa64 	bl	8001378 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f8d3 	bl	8005070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004eca:	e0b5      	b.n	8005038 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 80a8 	beq.w	800503c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8004eec:	897b      	ldrh	r3, [r7, #10]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 80a4 	beq.w	800503c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f02:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6899      	ldr	r1, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b3a      	ldr	r3, [pc, #232]	; (8004ff8 <HAL_UART_IRQHandler+0x524>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0210 	bic.w	r2, r2, #16
 8004f36:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f38:	897b      	ldrh	r3, [r7, #10]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f897 	bl	8005070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f42:	e07b      	b.n	800503c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <HAL_UART_IRQHandler+0x496>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 ffc0 	bl	8005ee8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f68:	e06b      	b.n	8005042 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d012      	beq.n	8004f9a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d104      	bne.n	8004f88 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d057      	beq.n	8005040 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
    }
    return;
 8004f98:	e052      	b.n	8005040 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d02b      	beq.n	8004ffc <HAL_UART_IRQHandler+0x528>
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d026      	beq.n	8004ffc <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 ff80 	bl	8005eb4 <UART_EndTransmit_IT>
    return;
 8004fb4:	e045      	b.n	8005042 <HAL_UART_IRQHandler+0x56e>
 8004fb6:	bf00      	nop
 8004fb8:	40020010 	.word	0x40020010
 8004fbc:	40020028 	.word	0x40020028
 8004fc0:	40020040 	.word	0x40020040
 8004fc4:	40020058 	.word	0x40020058
 8004fc8:	40020070 	.word	0x40020070
 8004fcc:	40020088 	.word	0x40020088
 8004fd0:	400200a0 	.word	0x400200a0
 8004fd4:	400200b8 	.word	0x400200b8
 8004fd8:	40020410 	.word	0x40020410
 8004fdc:	40020428 	.word	0x40020428
 8004fe0:	40020440 	.word	0x40020440
 8004fe4:	40020458 	.word	0x40020458
 8004fe8:	40020470 	.word	0x40020470
 8004fec:	40020488 	.word	0x40020488
 8004ff0:	400204a0 	.word	0x400204a0
 8004ff4:	400204b8 	.word	0x400204b8
 8004ff8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d008      	beq.n	8005018 <HAL_UART_IRQHandler+0x544>
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 ff7d 	bl	8005f10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005016:	e014      	b.n	8005042 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00f      	beq.n	8005042 <HAL_UART_IRQHandler+0x56e>
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	da0c      	bge.n	8005042 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 ff67 	bl	8005efc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800502e:	e008      	b.n	8005042 <HAL_UART_IRQHandler+0x56e>
      return;
 8005030:	bf00      	nop
 8005032:	e006      	b.n	8005042 <HAL_UART_IRQHandler+0x56e>
    return;
 8005034:	bf00      	nop
 8005036:	e004      	b.n	8005042 <HAL_UART_IRQHandler+0x56e>
      return;
 8005038:	bf00      	nop
 800503a:	e002      	b.n	8005042 <HAL_UART_IRQHandler+0x56e>
      return;
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <HAL_UART_IRQHandler+0x56e>
    return;
 8005040:	bf00      	nop
  }
}
 8005042:	3720      	adds	r7, #32
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005088:	b5b0      	push	{r4, r5, r7, lr}
 800508a:	b08e      	sub	sp, #56	; 0x38
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4bbf      	ldr	r3, [pc, #764]	; (80053b4 <UART_SetConfig+0x32c>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050be:	430b      	orrs	r3, r1
 80050c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4ab5      	ldr	r2, [pc, #724]	; (80053b8 <UART_SetConfig+0x330>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ee:	4313      	orrs	r3, r2
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	4bb0      	ldr	r3, [pc, #704]	; (80053bc <UART_SetConfig+0x334>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005102:	430b      	orrs	r3, r1
 8005104:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	f023 010f 	bic.w	r1, r3, #15
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4aa7      	ldr	r2, [pc, #668]	; (80053c0 <UART_SetConfig+0x338>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d176      	bne.n	8005214 <UART_SetConfig+0x18c>
 8005126:	4ba7      	ldr	r3, [pc, #668]	; (80053c4 <UART_SetConfig+0x33c>)
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800512e:	2b28      	cmp	r3, #40	; 0x28
 8005130:	d86c      	bhi.n	800520c <UART_SetConfig+0x184>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <UART_SetConfig+0xb0>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	080051dd 	.word	0x080051dd
 800513c:	0800520d 	.word	0x0800520d
 8005140:	0800520d 	.word	0x0800520d
 8005144:	0800520d 	.word	0x0800520d
 8005148:	0800520d 	.word	0x0800520d
 800514c:	0800520d 	.word	0x0800520d
 8005150:	0800520d 	.word	0x0800520d
 8005154:	0800520d 	.word	0x0800520d
 8005158:	080051e5 	.word	0x080051e5
 800515c:	0800520d 	.word	0x0800520d
 8005160:	0800520d 	.word	0x0800520d
 8005164:	0800520d 	.word	0x0800520d
 8005168:	0800520d 	.word	0x0800520d
 800516c:	0800520d 	.word	0x0800520d
 8005170:	0800520d 	.word	0x0800520d
 8005174:	0800520d 	.word	0x0800520d
 8005178:	080051ed 	.word	0x080051ed
 800517c:	0800520d 	.word	0x0800520d
 8005180:	0800520d 	.word	0x0800520d
 8005184:	0800520d 	.word	0x0800520d
 8005188:	0800520d 	.word	0x0800520d
 800518c:	0800520d 	.word	0x0800520d
 8005190:	0800520d 	.word	0x0800520d
 8005194:	0800520d 	.word	0x0800520d
 8005198:	080051f5 	.word	0x080051f5
 800519c:	0800520d 	.word	0x0800520d
 80051a0:	0800520d 	.word	0x0800520d
 80051a4:	0800520d 	.word	0x0800520d
 80051a8:	0800520d 	.word	0x0800520d
 80051ac:	0800520d 	.word	0x0800520d
 80051b0:	0800520d 	.word	0x0800520d
 80051b4:	0800520d 	.word	0x0800520d
 80051b8:	080051fd 	.word	0x080051fd
 80051bc:	0800520d 	.word	0x0800520d
 80051c0:	0800520d 	.word	0x0800520d
 80051c4:	0800520d 	.word	0x0800520d
 80051c8:	0800520d 	.word	0x0800520d
 80051cc:	0800520d 	.word	0x0800520d
 80051d0:	0800520d 	.word	0x0800520d
 80051d4:	0800520d 	.word	0x0800520d
 80051d8:	08005205 	.word	0x08005205
 80051dc:	2301      	movs	r3, #1
 80051de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e2:	e222      	b.n	800562a <UART_SetConfig+0x5a2>
 80051e4:	2304      	movs	r3, #4
 80051e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ea:	e21e      	b.n	800562a <UART_SetConfig+0x5a2>
 80051ec:	2308      	movs	r3, #8
 80051ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051f2:	e21a      	b.n	800562a <UART_SetConfig+0x5a2>
 80051f4:	2310      	movs	r3, #16
 80051f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fa:	e216      	b.n	800562a <UART_SetConfig+0x5a2>
 80051fc:	2320      	movs	r3, #32
 80051fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005202:	e212      	b.n	800562a <UART_SetConfig+0x5a2>
 8005204:	2340      	movs	r3, #64	; 0x40
 8005206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800520a:	e20e      	b.n	800562a <UART_SetConfig+0x5a2>
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005212:	e20a      	b.n	800562a <UART_SetConfig+0x5a2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a6b      	ldr	r2, [pc, #428]	; (80053c8 <UART_SetConfig+0x340>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d130      	bne.n	8005280 <UART_SetConfig+0x1f8>
 800521e:	4b69      	ldr	r3, [pc, #420]	; (80053c4 <UART_SetConfig+0x33c>)
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	2b05      	cmp	r3, #5
 8005228:	d826      	bhi.n	8005278 <UART_SetConfig+0x1f0>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <UART_SetConfig+0x1a8>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005249 	.word	0x08005249
 8005234:	08005251 	.word	0x08005251
 8005238:	08005259 	.word	0x08005259
 800523c:	08005261 	.word	0x08005261
 8005240:	08005269 	.word	0x08005269
 8005244:	08005271 	.word	0x08005271
 8005248:	2300      	movs	r3, #0
 800524a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524e:	e1ec      	b.n	800562a <UART_SetConfig+0x5a2>
 8005250:	2304      	movs	r3, #4
 8005252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005256:	e1e8      	b.n	800562a <UART_SetConfig+0x5a2>
 8005258:	2308      	movs	r3, #8
 800525a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800525e:	e1e4      	b.n	800562a <UART_SetConfig+0x5a2>
 8005260:	2310      	movs	r3, #16
 8005262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005266:	e1e0      	b.n	800562a <UART_SetConfig+0x5a2>
 8005268:	2320      	movs	r3, #32
 800526a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800526e:	e1dc      	b.n	800562a <UART_SetConfig+0x5a2>
 8005270:	2340      	movs	r3, #64	; 0x40
 8005272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005276:	e1d8      	b.n	800562a <UART_SetConfig+0x5a2>
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800527e:	e1d4      	b.n	800562a <UART_SetConfig+0x5a2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a51      	ldr	r2, [pc, #324]	; (80053cc <UART_SetConfig+0x344>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d130      	bne.n	80052ec <UART_SetConfig+0x264>
 800528a:	4b4e      	ldr	r3, [pc, #312]	; (80053c4 <UART_SetConfig+0x33c>)
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	2b05      	cmp	r3, #5
 8005294:	d826      	bhi.n	80052e4 <UART_SetConfig+0x25c>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0x214>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052b5 	.word	0x080052b5
 80052a0:	080052bd 	.word	0x080052bd
 80052a4:	080052c5 	.word	0x080052c5
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052d5 	.word	0x080052d5
 80052b0:	080052dd 	.word	0x080052dd
 80052b4:	2300      	movs	r3, #0
 80052b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ba:	e1b6      	b.n	800562a <UART_SetConfig+0x5a2>
 80052bc:	2304      	movs	r3, #4
 80052be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052c2:	e1b2      	b.n	800562a <UART_SetConfig+0x5a2>
 80052c4:	2308      	movs	r3, #8
 80052c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ca:	e1ae      	b.n	800562a <UART_SetConfig+0x5a2>
 80052cc:	2310      	movs	r3, #16
 80052ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052d2:	e1aa      	b.n	800562a <UART_SetConfig+0x5a2>
 80052d4:	2320      	movs	r3, #32
 80052d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052da:	e1a6      	b.n	800562a <UART_SetConfig+0x5a2>
 80052dc:	2340      	movs	r3, #64	; 0x40
 80052de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052e2:	e1a2      	b.n	800562a <UART_SetConfig+0x5a2>
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ea:	e19e      	b.n	800562a <UART_SetConfig+0x5a2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a37      	ldr	r2, [pc, #220]	; (80053d0 <UART_SetConfig+0x348>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d130      	bne.n	8005358 <UART_SetConfig+0x2d0>
 80052f6:	4b33      	ldr	r3, [pc, #204]	; (80053c4 <UART_SetConfig+0x33c>)
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	2b05      	cmp	r3, #5
 8005300:	d826      	bhi.n	8005350 <UART_SetConfig+0x2c8>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0x280>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	08005321 	.word	0x08005321
 800530c:	08005329 	.word	0x08005329
 8005310:	08005331 	.word	0x08005331
 8005314:	08005339 	.word	0x08005339
 8005318:	08005341 	.word	0x08005341
 800531c:	08005349 	.word	0x08005349
 8005320:	2300      	movs	r3, #0
 8005322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005326:	e180      	b.n	800562a <UART_SetConfig+0x5a2>
 8005328:	2304      	movs	r3, #4
 800532a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800532e:	e17c      	b.n	800562a <UART_SetConfig+0x5a2>
 8005330:	2308      	movs	r3, #8
 8005332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005336:	e178      	b.n	800562a <UART_SetConfig+0x5a2>
 8005338:	2310      	movs	r3, #16
 800533a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800533e:	e174      	b.n	800562a <UART_SetConfig+0x5a2>
 8005340:	2320      	movs	r3, #32
 8005342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005346:	e170      	b.n	800562a <UART_SetConfig+0x5a2>
 8005348:	2340      	movs	r3, #64	; 0x40
 800534a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534e:	e16c      	b.n	800562a <UART_SetConfig+0x5a2>
 8005350:	2380      	movs	r3, #128	; 0x80
 8005352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005356:	e168      	b.n	800562a <UART_SetConfig+0x5a2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <UART_SetConfig+0x34c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d142      	bne.n	80053e8 <UART_SetConfig+0x360>
 8005362:	4b18      	ldr	r3, [pc, #96]	; (80053c4 <UART_SetConfig+0x33c>)
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	2b05      	cmp	r3, #5
 800536c:	d838      	bhi.n	80053e0 <UART_SetConfig+0x358>
 800536e:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <UART_SetConfig+0x2ec>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	0800538d 	.word	0x0800538d
 8005378:	08005395 	.word	0x08005395
 800537c:	0800539d 	.word	0x0800539d
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053ad 	.word	0x080053ad
 8005388:	080053d9 	.word	0x080053d9
 800538c:	2300      	movs	r3, #0
 800538e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005392:	e14a      	b.n	800562a <UART_SetConfig+0x5a2>
 8005394:	2304      	movs	r3, #4
 8005396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539a:	e146      	b.n	800562a <UART_SetConfig+0x5a2>
 800539c:	2308      	movs	r3, #8
 800539e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a2:	e142      	b.n	800562a <UART_SetConfig+0x5a2>
 80053a4:	2310      	movs	r3, #16
 80053a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053aa:	e13e      	b.n	800562a <UART_SetConfig+0x5a2>
 80053ac:	2320      	movs	r3, #32
 80053ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b2:	e13a      	b.n	800562a <UART_SetConfig+0x5a2>
 80053b4:	cfff69f3 	.word	0xcfff69f3
 80053b8:	58000c00 	.word	0x58000c00
 80053bc:	11fff4ff 	.word	0x11fff4ff
 80053c0:	40011000 	.word	0x40011000
 80053c4:	58024400 	.word	0x58024400
 80053c8:	40004400 	.word	0x40004400
 80053cc:	40004800 	.word	0x40004800
 80053d0:	40004c00 	.word	0x40004c00
 80053d4:	40005000 	.word	0x40005000
 80053d8:	2340      	movs	r3, #64	; 0x40
 80053da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053de:	e124      	b.n	800562a <UART_SetConfig+0x5a2>
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e6:	e120      	b.n	800562a <UART_SetConfig+0x5a2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4acc      	ldr	r2, [pc, #816]	; (8005720 <UART_SetConfig+0x698>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d176      	bne.n	80054e0 <UART_SetConfig+0x458>
 80053f2:	4bcc      	ldr	r3, [pc, #816]	; (8005724 <UART_SetConfig+0x69c>)
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053fa:	2b28      	cmp	r3, #40	; 0x28
 80053fc:	d86c      	bhi.n	80054d8 <UART_SetConfig+0x450>
 80053fe:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <UART_SetConfig+0x37c>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	080054a9 	.word	0x080054a9
 8005408:	080054d9 	.word	0x080054d9
 800540c:	080054d9 	.word	0x080054d9
 8005410:	080054d9 	.word	0x080054d9
 8005414:	080054d9 	.word	0x080054d9
 8005418:	080054d9 	.word	0x080054d9
 800541c:	080054d9 	.word	0x080054d9
 8005420:	080054d9 	.word	0x080054d9
 8005424:	080054b1 	.word	0x080054b1
 8005428:	080054d9 	.word	0x080054d9
 800542c:	080054d9 	.word	0x080054d9
 8005430:	080054d9 	.word	0x080054d9
 8005434:	080054d9 	.word	0x080054d9
 8005438:	080054d9 	.word	0x080054d9
 800543c:	080054d9 	.word	0x080054d9
 8005440:	080054d9 	.word	0x080054d9
 8005444:	080054b9 	.word	0x080054b9
 8005448:	080054d9 	.word	0x080054d9
 800544c:	080054d9 	.word	0x080054d9
 8005450:	080054d9 	.word	0x080054d9
 8005454:	080054d9 	.word	0x080054d9
 8005458:	080054d9 	.word	0x080054d9
 800545c:	080054d9 	.word	0x080054d9
 8005460:	080054d9 	.word	0x080054d9
 8005464:	080054c1 	.word	0x080054c1
 8005468:	080054d9 	.word	0x080054d9
 800546c:	080054d9 	.word	0x080054d9
 8005470:	080054d9 	.word	0x080054d9
 8005474:	080054d9 	.word	0x080054d9
 8005478:	080054d9 	.word	0x080054d9
 800547c:	080054d9 	.word	0x080054d9
 8005480:	080054d9 	.word	0x080054d9
 8005484:	080054c9 	.word	0x080054c9
 8005488:	080054d9 	.word	0x080054d9
 800548c:	080054d9 	.word	0x080054d9
 8005490:	080054d9 	.word	0x080054d9
 8005494:	080054d9 	.word	0x080054d9
 8005498:	080054d9 	.word	0x080054d9
 800549c:	080054d9 	.word	0x080054d9
 80054a0:	080054d9 	.word	0x080054d9
 80054a4:	080054d1 	.word	0x080054d1
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ae:	e0bc      	b.n	800562a <UART_SetConfig+0x5a2>
 80054b0:	2304      	movs	r3, #4
 80054b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054b6:	e0b8      	b.n	800562a <UART_SetConfig+0x5a2>
 80054b8:	2308      	movs	r3, #8
 80054ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054be:	e0b4      	b.n	800562a <UART_SetConfig+0x5a2>
 80054c0:	2310      	movs	r3, #16
 80054c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054c6:	e0b0      	b.n	800562a <UART_SetConfig+0x5a2>
 80054c8:	2320      	movs	r3, #32
 80054ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ce:	e0ac      	b.n	800562a <UART_SetConfig+0x5a2>
 80054d0:	2340      	movs	r3, #64	; 0x40
 80054d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054d6:	e0a8      	b.n	800562a <UART_SetConfig+0x5a2>
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054de:	e0a4      	b.n	800562a <UART_SetConfig+0x5a2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a90      	ldr	r2, [pc, #576]	; (8005728 <UART_SetConfig+0x6a0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d130      	bne.n	800554c <UART_SetConfig+0x4c4>
 80054ea:	4b8e      	ldr	r3, [pc, #568]	; (8005724 <UART_SetConfig+0x69c>)
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d826      	bhi.n	8005544 <UART_SetConfig+0x4bc>
 80054f6:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <UART_SetConfig+0x474>)
 80054f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fc:	08005515 	.word	0x08005515
 8005500:	0800551d 	.word	0x0800551d
 8005504:	08005525 	.word	0x08005525
 8005508:	0800552d 	.word	0x0800552d
 800550c:	08005535 	.word	0x08005535
 8005510:	0800553d 	.word	0x0800553d
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551a:	e086      	b.n	800562a <UART_SetConfig+0x5a2>
 800551c:	2304      	movs	r3, #4
 800551e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005522:	e082      	b.n	800562a <UART_SetConfig+0x5a2>
 8005524:	2308      	movs	r3, #8
 8005526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552a:	e07e      	b.n	800562a <UART_SetConfig+0x5a2>
 800552c:	2310      	movs	r3, #16
 800552e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005532:	e07a      	b.n	800562a <UART_SetConfig+0x5a2>
 8005534:	2320      	movs	r3, #32
 8005536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553a:	e076      	b.n	800562a <UART_SetConfig+0x5a2>
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005542:	e072      	b.n	800562a <UART_SetConfig+0x5a2>
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554a:	e06e      	b.n	800562a <UART_SetConfig+0x5a2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a76      	ldr	r2, [pc, #472]	; (800572c <UART_SetConfig+0x6a4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d130      	bne.n	80055b8 <UART_SetConfig+0x530>
 8005556:	4b73      	ldr	r3, [pc, #460]	; (8005724 <UART_SetConfig+0x69c>)
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	2b05      	cmp	r3, #5
 8005560:	d826      	bhi.n	80055b0 <UART_SetConfig+0x528>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <UART_SetConfig+0x4e0>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	08005581 	.word	0x08005581
 800556c:	08005589 	.word	0x08005589
 8005570:	08005591 	.word	0x08005591
 8005574:	08005599 	.word	0x08005599
 8005578:	080055a1 	.word	0x080055a1
 800557c:	080055a9 	.word	0x080055a9
 8005580:	2300      	movs	r3, #0
 8005582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005586:	e050      	b.n	800562a <UART_SetConfig+0x5a2>
 8005588:	2304      	movs	r3, #4
 800558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558e:	e04c      	b.n	800562a <UART_SetConfig+0x5a2>
 8005590:	2308      	movs	r3, #8
 8005592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005596:	e048      	b.n	800562a <UART_SetConfig+0x5a2>
 8005598:	2310      	movs	r3, #16
 800559a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559e:	e044      	b.n	800562a <UART_SetConfig+0x5a2>
 80055a0:	2320      	movs	r3, #32
 80055a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a6:	e040      	b.n	800562a <UART_SetConfig+0x5a2>
 80055a8:	2340      	movs	r3, #64	; 0x40
 80055aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ae:	e03c      	b.n	800562a <UART_SetConfig+0x5a2>
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b6:	e038      	b.n	800562a <UART_SetConfig+0x5a2>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a5c      	ldr	r2, [pc, #368]	; (8005730 <UART_SetConfig+0x6a8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d130      	bne.n	8005624 <UART_SetConfig+0x59c>
 80055c2:	4b58      	ldr	r3, [pc, #352]	; (8005724 <UART_SetConfig+0x69c>)
 80055c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d826      	bhi.n	800561c <UART_SetConfig+0x594>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0x54c>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	080055ed 	.word	0x080055ed
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	080055fd 	.word	0x080055fd
 80055e0:	08005605 	.word	0x08005605
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	08005615 	.word	0x08005615
 80055ec:	2302      	movs	r3, #2
 80055ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f2:	e01a      	b.n	800562a <UART_SetConfig+0x5a2>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fa:	e016      	b.n	800562a <UART_SetConfig+0x5a2>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	e012      	b.n	800562a <UART_SetConfig+0x5a2>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560a:	e00e      	b.n	800562a <UART_SetConfig+0x5a2>
 800560c:	2320      	movs	r3, #32
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e00a      	b.n	800562a <UART_SetConfig+0x5a2>
 8005614:	2340      	movs	r3, #64	; 0x40
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561a:	e006      	b.n	800562a <UART_SetConfig+0x5a2>
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	e002      	b.n	800562a <UART_SetConfig+0x5a2>
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a40      	ldr	r2, [pc, #256]	; (8005730 <UART_SetConfig+0x6a8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	f040 80ef 	bne.w	8005814 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005636:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800563a:	2b20      	cmp	r3, #32
 800563c:	dc46      	bgt.n	80056cc <UART_SetConfig+0x644>
 800563e:	2b02      	cmp	r3, #2
 8005640:	f2c0 8081 	blt.w	8005746 <UART_SetConfig+0x6be>
 8005644:	3b02      	subs	r3, #2
 8005646:	2b1e      	cmp	r3, #30
 8005648:	d87d      	bhi.n	8005746 <UART_SetConfig+0x6be>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0x5c8>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	080056d3 	.word	0x080056d3
 8005654:	08005747 	.word	0x08005747
 8005658:	080056db 	.word	0x080056db
 800565c:	08005747 	.word	0x08005747
 8005660:	08005747 	.word	0x08005747
 8005664:	08005747 	.word	0x08005747
 8005668:	080056eb 	.word	0x080056eb
 800566c:	08005747 	.word	0x08005747
 8005670:	08005747 	.word	0x08005747
 8005674:	08005747 	.word	0x08005747
 8005678:	08005747 	.word	0x08005747
 800567c:	08005747 	.word	0x08005747
 8005680:	08005747 	.word	0x08005747
 8005684:	08005747 	.word	0x08005747
 8005688:	080056fb 	.word	0x080056fb
 800568c:	08005747 	.word	0x08005747
 8005690:	08005747 	.word	0x08005747
 8005694:	08005747 	.word	0x08005747
 8005698:	08005747 	.word	0x08005747
 800569c:	08005747 	.word	0x08005747
 80056a0:	08005747 	.word	0x08005747
 80056a4:	08005747 	.word	0x08005747
 80056a8:	08005747 	.word	0x08005747
 80056ac:	08005747 	.word	0x08005747
 80056b0:	08005747 	.word	0x08005747
 80056b4:	08005747 	.word	0x08005747
 80056b8:	08005747 	.word	0x08005747
 80056bc:	08005747 	.word	0x08005747
 80056c0:	08005747 	.word	0x08005747
 80056c4:	08005747 	.word	0x08005747
 80056c8:	08005739 	.word	0x08005739
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d036      	beq.n	800573e <UART_SetConfig+0x6b6>
 80056d0:	e039      	b.n	8005746 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80056d2:	f7fe fcf7 	bl	80040c4 <HAL_RCCEx_GetD3PCLK1Freq>
 80056d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80056d8:	e03b      	b.n	8005752 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056da:	f107 0314 	add.w	r3, r7, #20
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fd06 	bl	80040f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056e8:	e033      	b.n	8005752 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ea:	f107 0308 	add.w	r3, r7, #8
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fe52 	bl	8004398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056f8:	e02b      	b.n	8005752 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056fa:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <UART_SetConfig+0x69c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005706:	4b07      	ldr	r3, [pc, #28]	; (8005724 <UART_SetConfig+0x69c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	08db      	lsrs	r3, r3, #3
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	4a08      	ldr	r2, [pc, #32]	; (8005734 <UART_SetConfig+0x6ac>)
 8005712:	fa22 f303 	lsr.w	r3, r2, r3
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005718:	e01b      	b.n	8005752 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <UART_SetConfig+0x6ac>)
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800571e:	e018      	b.n	8005752 <UART_SetConfig+0x6ca>
 8005720:	40011400 	.word	0x40011400
 8005724:	58024400 	.word	0x58024400
 8005728:	40007800 	.word	0x40007800
 800572c:	40007c00 	.word	0x40007c00
 8005730:	58000c00 	.word	0x58000c00
 8005734:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005738:	4bc4      	ldr	r3, [pc, #784]	; (8005a4c <UART_SetConfig+0x9c4>)
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800573c:	e009      	b.n	8005752 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800573e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005744:	e005      	b.n	8005752 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005750:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 81da 	beq.w	8005b0e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	4abc      	ldr	r2, [pc, #752]	; (8005a50 <UART_SetConfig+0x9c8>)
 8005760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005764:	461a      	mov	r2, r3
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	fbb3 f3f2 	udiv	r3, r3, r2
 800576c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	4413      	add	r3, r2
 8005778:	6a3a      	ldr	r2, [r7, #32]
 800577a:	429a      	cmp	r2, r3
 800577c:	d305      	bcc.n	800578a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	429a      	cmp	r2, r3
 8005788:	d903      	bls.n	8005792 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005790:	e1bd      	b.n	8005b0e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	4618      	mov	r0, r3
 8005796:	f04f 0100 	mov.w	r1, #0
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	4aac      	ldr	r2, [pc, #688]	; (8005a50 <UART_SetConfig+0x9c8>)
 80057a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	f7fa fd95 	bl	80002d8 <__aeabi_uldivmod>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	020b      	lsls	r3, r1, #8
 80057c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057c4:	0202      	lsls	r2, r0, #8
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	6849      	ldr	r1, [r1, #4]
 80057ca:	0849      	lsrs	r1, r1, #1
 80057cc:	4608      	mov	r0, r1
 80057ce:	f04f 0100 	mov.w	r1, #0
 80057d2:	1814      	adds	r4, r2, r0
 80057d4:	eb43 0501 	adc.w	r5, r3, r1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	461a      	mov	r2, r3
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	4620      	mov	r0, r4
 80057e4:	4629      	mov	r1, r5
 80057e6:	f7fa fd77 	bl	80002d8 <__aeabi_uldivmod>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4613      	mov	r3, r2
 80057f0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057f8:	d308      	bcc.n	800580c <UART_SetConfig+0x784>
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005800:	d204      	bcs.n	800580c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005808:	60da      	str	r2, [r3, #12]
 800580a:	e180      	b.n	8005b0e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005812:	e17c      	b.n	8005b0e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581c:	f040 80bf 	bne.w	800599e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005820:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005824:	2b20      	cmp	r3, #32
 8005826:	dc49      	bgt.n	80058bc <UART_SetConfig+0x834>
 8005828:	2b00      	cmp	r3, #0
 800582a:	db7c      	blt.n	8005926 <UART_SetConfig+0x89e>
 800582c:	2b20      	cmp	r3, #32
 800582e:	d87a      	bhi.n	8005926 <UART_SetConfig+0x89e>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <UART_SetConfig+0x7b0>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	080058c3 	.word	0x080058c3
 800583c:	080058cb 	.word	0x080058cb
 8005840:	08005927 	.word	0x08005927
 8005844:	08005927 	.word	0x08005927
 8005848:	080058d3 	.word	0x080058d3
 800584c:	08005927 	.word	0x08005927
 8005850:	08005927 	.word	0x08005927
 8005854:	08005927 	.word	0x08005927
 8005858:	080058e3 	.word	0x080058e3
 800585c:	08005927 	.word	0x08005927
 8005860:	08005927 	.word	0x08005927
 8005864:	08005927 	.word	0x08005927
 8005868:	08005927 	.word	0x08005927
 800586c:	08005927 	.word	0x08005927
 8005870:	08005927 	.word	0x08005927
 8005874:	08005927 	.word	0x08005927
 8005878:	080058f3 	.word	0x080058f3
 800587c:	08005927 	.word	0x08005927
 8005880:	08005927 	.word	0x08005927
 8005884:	08005927 	.word	0x08005927
 8005888:	08005927 	.word	0x08005927
 800588c:	08005927 	.word	0x08005927
 8005890:	08005927 	.word	0x08005927
 8005894:	08005927 	.word	0x08005927
 8005898:	08005927 	.word	0x08005927
 800589c:	08005927 	.word	0x08005927
 80058a0:	08005927 	.word	0x08005927
 80058a4:	08005927 	.word	0x08005927
 80058a8:	08005927 	.word	0x08005927
 80058ac:	08005927 	.word	0x08005927
 80058b0:	08005927 	.word	0x08005927
 80058b4:	08005927 	.word	0x08005927
 80058b8:	08005919 	.word	0x08005919
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d02e      	beq.n	800591e <UART_SetConfig+0x896>
 80058c0:	e031      	b.n	8005926 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c2:	f7fd fc63 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80058c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80058c8:	e033      	b.n	8005932 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ca:	f7fd fc75 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 80058ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80058d0:	e02f      	b.n	8005932 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058d2:	f107 0314 	add.w	r3, r7, #20
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe fc0a 	bl	80040f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058e0:	e027      	b.n	8005932 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058e2:	f107 0308 	add.w	r3, r7, #8
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fe fd56 	bl	8004398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058f0:	e01f      	b.n	8005932 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f2:	4b58      	ldr	r3, [pc, #352]	; (8005a54 <UART_SetConfig+0x9cc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058fe:	4b55      	ldr	r3, [pc, #340]	; (8005a54 <UART_SetConfig+0x9cc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	08db      	lsrs	r3, r3, #3
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	4a53      	ldr	r2, [pc, #332]	; (8005a58 <UART_SetConfig+0x9d0>)
 800590a:	fa22 f303 	lsr.w	r3, r2, r3
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005910:	e00f      	b.n	8005932 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005912:	4b51      	ldr	r3, [pc, #324]	; (8005a58 <UART_SetConfig+0x9d0>)
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005916:	e00c      	b.n	8005932 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005918:	4b4c      	ldr	r3, [pc, #304]	; (8005a4c <UART_SetConfig+0x9c4>)
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800591c:	e009      	b.n	8005932 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800591e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005924:	e005      	b.n	8005932 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80ea 	beq.w	8005b0e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	4a44      	ldr	r2, [pc, #272]	; (8005a50 <UART_SetConfig+0x9c8>)
 8005940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005944:	461a      	mov	r2, r3
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	fbb3 f3f2 	udiv	r3, r3, r2
 800594c:	005a      	lsls	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	441a      	add	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	fbb2 f3f3 	udiv	r3, r2, r3
 800595e:	b29b      	uxth	r3, r3
 8005960:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	2b0f      	cmp	r3, #15
 8005966:	d916      	bls.n	8005996 <UART_SetConfig+0x90e>
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596e:	d212      	bcs.n	8005996 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	b29b      	uxth	r3, r3
 8005974:	f023 030f 	bic.w	r3, r3, #15
 8005978:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	b29b      	uxth	r3, r3
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	b29a      	uxth	r2, r3
 8005986:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005988:	4313      	orrs	r3, r2
 800598a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	e0bb      	b.n	8005b0e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800599c:	e0b7      	b.n	8005b0e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800599e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	dc4a      	bgt.n	8005a3c <UART_SetConfig+0x9b4>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f2c0 8086 	blt.w	8005ab8 <UART_SetConfig+0xa30>
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	f200 8083 	bhi.w	8005ab8 <UART_SetConfig+0xa30>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0x930>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	08005a43 	.word	0x08005a43
 80059bc:	08005a5d 	.word	0x08005a5d
 80059c0:	08005ab9 	.word	0x08005ab9
 80059c4:	08005ab9 	.word	0x08005ab9
 80059c8:	08005a65 	.word	0x08005a65
 80059cc:	08005ab9 	.word	0x08005ab9
 80059d0:	08005ab9 	.word	0x08005ab9
 80059d4:	08005ab9 	.word	0x08005ab9
 80059d8:	08005a75 	.word	0x08005a75
 80059dc:	08005ab9 	.word	0x08005ab9
 80059e0:	08005ab9 	.word	0x08005ab9
 80059e4:	08005ab9 	.word	0x08005ab9
 80059e8:	08005ab9 	.word	0x08005ab9
 80059ec:	08005ab9 	.word	0x08005ab9
 80059f0:	08005ab9 	.word	0x08005ab9
 80059f4:	08005ab9 	.word	0x08005ab9
 80059f8:	08005a85 	.word	0x08005a85
 80059fc:	08005ab9 	.word	0x08005ab9
 8005a00:	08005ab9 	.word	0x08005ab9
 8005a04:	08005ab9 	.word	0x08005ab9
 8005a08:	08005ab9 	.word	0x08005ab9
 8005a0c:	08005ab9 	.word	0x08005ab9
 8005a10:	08005ab9 	.word	0x08005ab9
 8005a14:	08005ab9 	.word	0x08005ab9
 8005a18:	08005ab9 	.word	0x08005ab9
 8005a1c:	08005ab9 	.word	0x08005ab9
 8005a20:	08005ab9 	.word	0x08005ab9
 8005a24:	08005ab9 	.word	0x08005ab9
 8005a28:	08005ab9 	.word	0x08005ab9
 8005a2c:	08005ab9 	.word	0x08005ab9
 8005a30:	08005ab9 	.word	0x08005ab9
 8005a34:	08005ab9 	.word	0x08005ab9
 8005a38:	08005aab 	.word	0x08005aab
 8005a3c:	2b40      	cmp	r3, #64	; 0x40
 8005a3e:	d037      	beq.n	8005ab0 <UART_SetConfig+0xa28>
 8005a40:	e03a      	b.n	8005ab8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a42:	f7fd fba3 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8005a46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a48:	e03c      	b.n	8005ac4 <UART_SetConfig+0xa3c>
 8005a4a:	bf00      	nop
 8005a4c:	003d0900 	.word	0x003d0900
 8005a50:	08006b60 	.word	0x08006b60
 8005a54:	58024400 	.word	0x58024400
 8005a58:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a5c:	f7fd fbac 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 8005a60:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a62:	e02f      	b.n	8005ac4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fe fb41 	bl	80040f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a72:	e027      	b.n	8005ac4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a74:	f107 0308 	add.w	r3, r7, #8
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fe fc8d 	bl	8004398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a82:	e01f      	b.n	8005ac4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a84:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <UART_SetConfig+0xab0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a90:	4b29      	ldr	r3, [pc, #164]	; (8005b38 <UART_SetConfig+0xab0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	08db      	lsrs	r3, r3, #3
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	4a28      	ldr	r2, [pc, #160]	; (8005b3c <UART_SetConfig+0xab4>)
 8005a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005aa2:	e00f      	b.n	8005ac4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005aa4:	4b25      	ldr	r3, [pc, #148]	; (8005b3c <UART_SetConfig+0xab4>)
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005aa8:	e00c      	b.n	8005ac4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005aaa:	4b25      	ldr	r3, [pc, #148]	; (8005b40 <UART_SetConfig+0xab8>)
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005aae:	e009      	b.n	8005ac4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ab6:	e005      	b.n	8005ac4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005ac2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d021      	beq.n	8005b0e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <UART_SetConfig+0xabc>)
 8005ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	085b      	lsrs	r3, r3, #1
 8005ae2:	441a      	add	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	2b0f      	cmp	r3, #15
 8005af4:	d908      	bls.n	8005b08 <UART_SetConfig+0xa80>
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005afc:	d204      	bcs.n	8005b08 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b04:	60da      	str	r2, [r3, #12]
 8005b06:	e002      	b.n	8005b0e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3738      	adds	r7, #56	; 0x38
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bdb0      	pop	{r4, r5, r7, pc}
 8005b36:	bf00      	nop
 8005b38:	58024400 	.word	0x58024400
 8005b3c:	03d09000 	.word	0x03d09000
 8005b40:	003d0900 	.word	0x003d0900
 8005b44:	08006b60 	.word	0x08006b60

08005b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01a      	beq.n	8005c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c46:	d10a      	bne.n	8005c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c9c:	f7fb fa20 	bl	80010e0 <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d10e      	bne.n	8005cce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f82f 	bl	8005d22 <UART_WaitOnFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e025      	b.n	8005d1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d10e      	bne.n	8005cfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f819 	bl	8005d22 <UART_WaitOnFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e00f      	b.n	8005d1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	603b      	str	r3, [r7, #0]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d32:	e062      	b.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d05e      	beq.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d3c:	f7fb f9d0 	bl	80010e0 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d302      	bcc.n	8005d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d11d      	bne.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0201 	bic.w	r2, r2, #1
 8005d70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e045      	b.n	8005e1a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d02e      	beq.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005daa:	d126      	bne.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005db4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dc4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0201 	bic.w	r2, r2, #1
 8005dd4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e00f      	b.n	8005e1a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4013      	ands	r3, r2
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	bf0c      	ite	eq
 8005e0a:	2301      	moveq	r3, #1
 8005e0c:	2300      	movne	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d08d      	beq.n	8005d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e3a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6899      	ldr	r1, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <UART_EndRxTransfer+0x60>)
 8005e48:	400b      	ands	r3, r1
 8005e4a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d107      	bne.n	8005e64 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0210 	bic.w	r2, r2, #16
 8005e62:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	effffffe 	.word	0xeffffffe

08005e88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f7ff f8d8 	bl	800505c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff f8b4 	bl	8005048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UARTEx_DisableFifoMode+0x16>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e027      	b.n	8005f8a <HAL_UARTEx_DisableFifoMode+0x66>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2224      	movs	r2, #36	; 0x24
 8005f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e02d      	b.n	800600a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2224      	movs	r2, #36	; 0x24
 8005fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f850 	bl	8006090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006026:	2302      	movs	r3, #2
 8006028:	e02d      	b.n	8006086 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2224      	movs	r2, #36	; 0x24
 8006036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f812 	bl	8006090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800609c:	2b00      	cmp	r3, #0
 800609e:	d108      	bne.n	80060b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060b0:	e031      	b.n	8006116 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060b2:	2310      	movs	r3, #16
 80060b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060b6:	2310      	movs	r3, #16
 80060b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	0e5b      	lsrs	r3, r3, #25
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	0f5b      	lsrs	r3, r3, #29
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	7b3a      	ldrb	r2, [r7, #12]
 80060de:	4911      	ldr	r1, [pc, #68]	; (8006124 <UARTEx_SetNbDataToProcess+0x94>)
 80060e0:	5c8a      	ldrb	r2, [r1, r2]
 80060e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060e6:	7b3a      	ldrb	r2, [r7, #12]
 80060e8:	490f      	ldr	r1, [pc, #60]	; (8006128 <UARTEx_SetNbDataToProcess+0x98>)
 80060ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	7b7a      	ldrb	r2, [r7, #13]
 80060fc:	4909      	ldr	r1, [pc, #36]	; (8006124 <UARTEx_SetNbDataToProcess+0x94>)
 80060fe:	5c8a      	ldrb	r2, [r1, r2]
 8006100:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006104:	7b7a      	ldrb	r2, [r7, #13]
 8006106:	4908      	ldr	r1, [pc, #32]	; (8006128 <UARTEx_SetNbDataToProcess+0x98>)
 8006108:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800610a:	fb93 f3f2 	sdiv	r3, r3, r2
 800610e:	b29a      	uxth	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006116:	bf00      	nop
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	08006b78 	.word	0x08006b78
 8006128:	08006b80 	.word	0x08006b80

0800612c <__errno>:
 800612c:	4b01      	ldr	r3, [pc, #4]	; (8006134 <__errno+0x8>)
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	24000010 	.word	0x24000010

08006138 <__libc_init_array>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	4d0d      	ldr	r5, [pc, #52]	; (8006170 <__libc_init_array+0x38>)
 800613c:	4c0d      	ldr	r4, [pc, #52]	; (8006174 <__libc_init_array+0x3c>)
 800613e:	1b64      	subs	r4, r4, r5
 8006140:	10a4      	asrs	r4, r4, #2
 8006142:	2600      	movs	r6, #0
 8006144:	42a6      	cmp	r6, r4
 8006146:	d109      	bne.n	800615c <__libc_init_array+0x24>
 8006148:	4d0b      	ldr	r5, [pc, #44]	; (8006178 <__libc_init_array+0x40>)
 800614a:	4c0c      	ldr	r4, [pc, #48]	; (800617c <__libc_init_array+0x44>)
 800614c:	f000 fce6 	bl	8006b1c <_init>
 8006150:	1b64      	subs	r4, r4, r5
 8006152:	10a4      	asrs	r4, r4, #2
 8006154:	2600      	movs	r6, #0
 8006156:	42a6      	cmp	r6, r4
 8006158:	d105      	bne.n	8006166 <__libc_init_array+0x2e>
 800615a:	bd70      	pop	{r4, r5, r6, pc}
 800615c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006160:	4798      	blx	r3
 8006162:	3601      	adds	r6, #1
 8006164:	e7ee      	b.n	8006144 <__libc_init_array+0xc>
 8006166:	f855 3b04 	ldr.w	r3, [r5], #4
 800616a:	4798      	blx	r3
 800616c:	3601      	adds	r6, #1
 800616e:	e7f2      	b.n	8006156 <__libc_init_array+0x1e>
 8006170:	08006bf4 	.word	0x08006bf4
 8006174:	08006bf4 	.word	0x08006bf4
 8006178:	08006bf4 	.word	0x08006bf4
 800617c:	08006bf8 	.word	0x08006bf8

08006180 <memset>:
 8006180:	4402      	add	r2, r0
 8006182:	4603      	mov	r3, r0
 8006184:	4293      	cmp	r3, r2
 8006186:	d100      	bne.n	800618a <memset+0xa>
 8006188:	4770      	bx	lr
 800618a:	f803 1b01 	strb.w	r1, [r3], #1
 800618e:	e7f9      	b.n	8006184 <memset+0x4>

08006190 <_puts_r>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	460e      	mov	r6, r1
 8006194:	4605      	mov	r5, r0
 8006196:	b118      	cbz	r0, 80061a0 <_puts_r+0x10>
 8006198:	6983      	ldr	r3, [r0, #24]
 800619a:	b90b      	cbnz	r3, 80061a0 <_puts_r+0x10>
 800619c:	f000 fa48 	bl	8006630 <__sinit>
 80061a0:	69ab      	ldr	r3, [r5, #24]
 80061a2:	68ac      	ldr	r4, [r5, #8]
 80061a4:	b913      	cbnz	r3, 80061ac <_puts_r+0x1c>
 80061a6:	4628      	mov	r0, r5
 80061a8:	f000 fa42 	bl	8006630 <__sinit>
 80061ac:	4b2c      	ldr	r3, [pc, #176]	; (8006260 <_puts_r+0xd0>)
 80061ae:	429c      	cmp	r4, r3
 80061b0:	d120      	bne.n	80061f4 <_puts_r+0x64>
 80061b2:	686c      	ldr	r4, [r5, #4]
 80061b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061b6:	07db      	lsls	r3, r3, #31
 80061b8:	d405      	bmi.n	80061c6 <_puts_r+0x36>
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	0598      	lsls	r0, r3, #22
 80061be:	d402      	bmi.n	80061c6 <_puts_r+0x36>
 80061c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061c2:	f000 fad3 	bl	800676c <__retarget_lock_acquire_recursive>
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	0719      	lsls	r1, r3, #28
 80061ca:	d51d      	bpl.n	8006208 <_puts_r+0x78>
 80061cc:	6923      	ldr	r3, [r4, #16]
 80061ce:	b1db      	cbz	r3, 8006208 <_puts_r+0x78>
 80061d0:	3e01      	subs	r6, #1
 80061d2:	68a3      	ldr	r3, [r4, #8]
 80061d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061d8:	3b01      	subs	r3, #1
 80061da:	60a3      	str	r3, [r4, #8]
 80061dc:	bb39      	cbnz	r1, 800622e <_puts_r+0x9e>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	da38      	bge.n	8006254 <_puts_r+0xc4>
 80061e2:	4622      	mov	r2, r4
 80061e4:	210a      	movs	r1, #10
 80061e6:	4628      	mov	r0, r5
 80061e8:	f000 f848 	bl	800627c <__swbuf_r>
 80061ec:	3001      	adds	r0, #1
 80061ee:	d011      	beq.n	8006214 <_puts_r+0x84>
 80061f0:	250a      	movs	r5, #10
 80061f2:	e011      	b.n	8006218 <_puts_r+0x88>
 80061f4:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <_puts_r+0xd4>)
 80061f6:	429c      	cmp	r4, r3
 80061f8:	d101      	bne.n	80061fe <_puts_r+0x6e>
 80061fa:	68ac      	ldr	r4, [r5, #8]
 80061fc:	e7da      	b.n	80061b4 <_puts_r+0x24>
 80061fe:	4b1a      	ldr	r3, [pc, #104]	; (8006268 <_puts_r+0xd8>)
 8006200:	429c      	cmp	r4, r3
 8006202:	bf08      	it	eq
 8006204:	68ec      	ldreq	r4, [r5, #12]
 8006206:	e7d5      	b.n	80061b4 <_puts_r+0x24>
 8006208:	4621      	mov	r1, r4
 800620a:	4628      	mov	r0, r5
 800620c:	f000 f888 	bl	8006320 <__swsetup_r>
 8006210:	2800      	cmp	r0, #0
 8006212:	d0dd      	beq.n	80061d0 <_puts_r+0x40>
 8006214:	f04f 35ff 	mov.w	r5, #4294967295
 8006218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800621a:	07da      	lsls	r2, r3, #31
 800621c:	d405      	bmi.n	800622a <_puts_r+0x9a>
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	059b      	lsls	r3, r3, #22
 8006222:	d402      	bmi.n	800622a <_puts_r+0x9a>
 8006224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006226:	f000 faa2 	bl	800676e <__retarget_lock_release_recursive>
 800622a:	4628      	mov	r0, r5
 800622c:	bd70      	pop	{r4, r5, r6, pc}
 800622e:	2b00      	cmp	r3, #0
 8006230:	da04      	bge.n	800623c <_puts_r+0xac>
 8006232:	69a2      	ldr	r2, [r4, #24]
 8006234:	429a      	cmp	r2, r3
 8006236:	dc06      	bgt.n	8006246 <_puts_r+0xb6>
 8006238:	290a      	cmp	r1, #10
 800623a:	d004      	beq.n	8006246 <_puts_r+0xb6>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	6022      	str	r2, [r4, #0]
 8006242:	7019      	strb	r1, [r3, #0]
 8006244:	e7c5      	b.n	80061d2 <_puts_r+0x42>
 8006246:	4622      	mov	r2, r4
 8006248:	4628      	mov	r0, r5
 800624a:	f000 f817 	bl	800627c <__swbuf_r>
 800624e:	3001      	adds	r0, #1
 8006250:	d1bf      	bne.n	80061d2 <_puts_r+0x42>
 8006252:	e7df      	b.n	8006214 <_puts_r+0x84>
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	250a      	movs	r5, #10
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	6022      	str	r2, [r4, #0]
 800625c:	701d      	strb	r5, [r3, #0]
 800625e:	e7db      	b.n	8006218 <_puts_r+0x88>
 8006260:	08006bac 	.word	0x08006bac
 8006264:	08006bcc 	.word	0x08006bcc
 8006268:	08006b8c 	.word	0x08006b8c

0800626c <puts>:
 800626c:	4b02      	ldr	r3, [pc, #8]	; (8006278 <puts+0xc>)
 800626e:	4601      	mov	r1, r0
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	f7ff bf8d 	b.w	8006190 <_puts_r>
 8006276:	bf00      	nop
 8006278:	24000010 	.word	0x24000010

0800627c <__swbuf_r>:
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	460e      	mov	r6, r1
 8006280:	4614      	mov	r4, r2
 8006282:	4605      	mov	r5, r0
 8006284:	b118      	cbz	r0, 800628e <__swbuf_r+0x12>
 8006286:	6983      	ldr	r3, [r0, #24]
 8006288:	b90b      	cbnz	r3, 800628e <__swbuf_r+0x12>
 800628a:	f000 f9d1 	bl	8006630 <__sinit>
 800628e:	4b21      	ldr	r3, [pc, #132]	; (8006314 <__swbuf_r+0x98>)
 8006290:	429c      	cmp	r4, r3
 8006292:	d12b      	bne.n	80062ec <__swbuf_r+0x70>
 8006294:	686c      	ldr	r4, [r5, #4]
 8006296:	69a3      	ldr	r3, [r4, #24]
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	071a      	lsls	r2, r3, #28
 800629e:	d52f      	bpl.n	8006300 <__swbuf_r+0x84>
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	b36b      	cbz	r3, 8006300 <__swbuf_r+0x84>
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	6820      	ldr	r0, [r4, #0]
 80062a8:	1ac0      	subs	r0, r0, r3
 80062aa:	6963      	ldr	r3, [r4, #20]
 80062ac:	b2f6      	uxtb	r6, r6
 80062ae:	4283      	cmp	r3, r0
 80062b0:	4637      	mov	r7, r6
 80062b2:	dc04      	bgt.n	80062be <__swbuf_r+0x42>
 80062b4:	4621      	mov	r1, r4
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 f926 	bl	8006508 <_fflush_r>
 80062bc:	bb30      	cbnz	r0, 800630c <__swbuf_r+0x90>
 80062be:	68a3      	ldr	r3, [r4, #8]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	60a3      	str	r3, [r4, #8]
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	6022      	str	r2, [r4, #0]
 80062ca:	701e      	strb	r6, [r3, #0]
 80062cc:	6963      	ldr	r3, [r4, #20]
 80062ce:	3001      	adds	r0, #1
 80062d0:	4283      	cmp	r3, r0
 80062d2:	d004      	beq.n	80062de <__swbuf_r+0x62>
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	07db      	lsls	r3, r3, #31
 80062d8:	d506      	bpl.n	80062e8 <__swbuf_r+0x6c>
 80062da:	2e0a      	cmp	r6, #10
 80062dc:	d104      	bne.n	80062e8 <__swbuf_r+0x6c>
 80062de:	4621      	mov	r1, r4
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 f911 	bl	8006508 <_fflush_r>
 80062e6:	b988      	cbnz	r0, 800630c <__swbuf_r+0x90>
 80062e8:	4638      	mov	r0, r7
 80062ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <__swbuf_r+0x9c>)
 80062ee:	429c      	cmp	r4, r3
 80062f0:	d101      	bne.n	80062f6 <__swbuf_r+0x7a>
 80062f2:	68ac      	ldr	r4, [r5, #8]
 80062f4:	e7cf      	b.n	8006296 <__swbuf_r+0x1a>
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <__swbuf_r+0xa0>)
 80062f8:	429c      	cmp	r4, r3
 80062fa:	bf08      	it	eq
 80062fc:	68ec      	ldreq	r4, [r5, #12]
 80062fe:	e7ca      	b.n	8006296 <__swbuf_r+0x1a>
 8006300:	4621      	mov	r1, r4
 8006302:	4628      	mov	r0, r5
 8006304:	f000 f80c 	bl	8006320 <__swsetup_r>
 8006308:	2800      	cmp	r0, #0
 800630a:	d0cb      	beq.n	80062a4 <__swbuf_r+0x28>
 800630c:	f04f 37ff 	mov.w	r7, #4294967295
 8006310:	e7ea      	b.n	80062e8 <__swbuf_r+0x6c>
 8006312:	bf00      	nop
 8006314:	08006bac 	.word	0x08006bac
 8006318:	08006bcc 	.word	0x08006bcc
 800631c:	08006b8c 	.word	0x08006b8c

08006320 <__swsetup_r>:
 8006320:	4b32      	ldr	r3, [pc, #200]	; (80063ec <__swsetup_r+0xcc>)
 8006322:	b570      	push	{r4, r5, r6, lr}
 8006324:	681d      	ldr	r5, [r3, #0]
 8006326:	4606      	mov	r6, r0
 8006328:	460c      	mov	r4, r1
 800632a:	b125      	cbz	r5, 8006336 <__swsetup_r+0x16>
 800632c:	69ab      	ldr	r3, [r5, #24]
 800632e:	b913      	cbnz	r3, 8006336 <__swsetup_r+0x16>
 8006330:	4628      	mov	r0, r5
 8006332:	f000 f97d 	bl	8006630 <__sinit>
 8006336:	4b2e      	ldr	r3, [pc, #184]	; (80063f0 <__swsetup_r+0xd0>)
 8006338:	429c      	cmp	r4, r3
 800633a:	d10f      	bne.n	800635c <__swsetup_r+0x3c>
 800633c:	686c      	ldr	r4, [r5, #4]
 800633e:	89a3      	ldrh	r3, [r4, #12]
 8006340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006344:	0719      	lsls	r1, r3, #28
 8006346:	d42c      	bmi.n	80063a2 <__swsetup_r+0x82>
 8006348:	06dd      	lsls	r5, r3, #27
 800634a:	d411      	bmi.n	8006370 <__swsetup_r+0x50>
 800634c:	2309      	movs	r3, #9
 800634e:	6033      	str	r3, [r6, #0]
 8006350:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	f04f 30ff 	mov.w	r0, #4294967295
 800635a:	e03e      	b.n	80063da <__swsetup_r+0xba>
 800635c:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <__swsetup_r+0xd4>)
 800635e:	429c      	cmp	r4, r3
 8006360:	d101      	bne.n	8006366 <__swsetup_r+0x46>
 8006362:	68ac      	ldr	r4, [r5, #8]
 8006364:	e7eb      	b.n	800633e <__swsetup_r+0x1e>
 8006366:	4b24      	ldr	r3, [pc, #144]	; (80063f8 <__swsetup_r+0xd8>)
 8006368:	429c      	cmp	r4, r3
 800636a:	bf08      	it	eq
 800636c:	68ec      	ldreq	r4, [r5, #12]
 800636e:	e7e6      	b.n	800633e <__swsetup_r+0x1e>
 8006370:	0758      	lsls	r0, r3, #29
 8006372:	d512      	bpl.n	800639a <__swsetup_r+0x7a>
 8006374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006376:	b141      	cbz	r1, 800638a <__swsetup_r+0x6a>
 8006378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800637c:	4299      	cmp	r1, r3
 800637e:	d002      	beq.n	8006386 <__swsetup_r+0x66>
 8006380:	4630      	mov	r0, r6
 8006382:	f000 fa59 	bl	8006838 <_free_r>
 8006386:	2300      	movs	r3, #0
 8006388:	6363      	str	r3, [r4, #52]	; 0x34
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006390:	81a3      	strh	r3, [r4, #12]
 8006392:	2300      	movs	r3, #0
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	6923      	ldr	r3, [r4, #16]
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	f043 0308 	orr.w	r3, r3, #8
 80063a0:	81a3      	strh	r3, [r4, #12]
 80063a2:	6923      	ldr	r3, [r4, #16]
 80063a4:	b94b      	cbnz	r3, 80063ba <__swsetup_r+0x9a>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b0:	d003      	beq.n	80063ba <__swsetup_r+0x9a>
 80063b2:	4621      	mov	r1, r4
 80063b4:	4630      	mov	r0, r6
 80063b6:	f000 f9ff 	bl	80067b8 <__smakebuf_r>
 80063ba:	89a0      	ldrh	r0, [r4, #12]
 80063bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063c0:	f010 0301 	ands.w	r3, r0, #1
 80063c4:	d00a      	beq.n	80063dc <__swsetup_r+0xbc>
 80063c6:	2300      	movs	r3, #0
 80063c8:	60a3      	str	r3, [r4, #8]
 80063ca:	6963      	ldr	r3, [r4, #20]
 80063cc:	425b      	negs	r3, r3
 80063ce:	61a3      	str	r3, [r4, #24]
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	b943      	cbnz	r3, 80063e6 <__swsetup_r+0xc6>
 80063d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063d8:	d1ba      	bne.n	8006350 <__swsetup_r+0x30>
 80063da:	bd70      	pop	{r4, r5, r6, pc}
 80063dc:	0781      	lsls	r1, r0, #30
 80063de:	bf58      	it	pl
 80063e0:	6963      	ldrpl	r3, [r4, #20]
 80063e2:	60a3      	str	r3, [r4, #8]
 80063e4:	e7f4      	b.n	80063d0 <__swsetup_r+0xb0>
 80063e6:	2000      	movs	r0, #0
 80063e8:	e7f7      	b.n	80063da <__swsetup_r+0xba>
 80063ea:	bf00      	nop
 80063ec:	24000010 	.word	0x24000010
 80063f0:	08006bac 	.word	0x08006bac
 80063f4:	08006bcc 	.word	0x08006bcc
 80063f8:	08006b8c 	.word	0x08006b8c

080063fc <__sflush_r>:
 80063fc:	898a      	ldrh	r2, [r1, #12]
 80063fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006402:	4605      	mov	r5, r0
 8006404:	0710      	lsls	r0, r2, #28
 8006406:	460c      	mov	r4, r1
 8006408:	d458      	bmi.n	80064bc <__sflush_r+0xc0>
 800640a:	684b      	ldr	r3, [r1, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	dc05      	bgt.n	800641c <__sflush_r+0x20>
 8006410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	dc02      	bgt.n	800641c <__sflush_r+0x20>
 8006416:	2000      	movs	r0, #0
 8006418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800641c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800641e:	2e00      	cmp	r6, #0
 8006420:	d0f9      	beq.n	8006416 <__sflush_r+0x1a>
 8006422:	2300      	movs	r3, #0
 8006424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006428:	682f      	ldr	r7, [r5, #0]
 800642a:	602b      	str	r3, [r5, #0]
 800642c:	d032      	beq.n	8006494 <__sflush_r+0x98>
 800642e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	075a      	lsls	r2, r3, #29
 8006434:	d505      	bpl.n	8006442 <__sflush_r+0x46>
 8006436:	6863      	ldr	r3, [r4, #4]
 8006438:	1ac0      	subs	r0, r0, r3
 800643a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800643c:	b10b      	cbz	r3, 8006442 <__sflush_r+0x46>
 800643e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006440:	1ac0      	subs	r0, r0, r3
 8006442:	2300      	movs	r3, #0
 8006444:	4602      	mov	r2, r0
 8006446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006448:	6a21      	ldr	r1, [r4, #32]
 800644a:	4628      	mov	r0, r5
 800644c:	47b0      	blx	r6
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	d106      	bne.n	8006462 <__sflush_r+0x66>
 8006454:	6829      	ldr	r1, [r5, #0]
 8006456:	291d      	cmp	r1, #29
 8006458:	d82c      	bhi.n	80064b4 <__sflush_r+0xb8>
 800645a:	4a2a      	ldr	r2, [pc, #168]	; (8006504 <__sflush_r+0x108>)
 800645c:	40ca      	lsrs	r2, r1
 800645e:	07d6      	lsls	r6, r2, #31
 8006460:	d528      	bpl.n	80064b4 <__sflush_r+0xb8>
 8006462:	2200      	movs	r2, #0
 8006464:	6062      	str	r2, [r4, #4]
 8006466:	04d9      	lsls	r1, r3, #19
 8006468:	6922      	ldr	r2, [r4, #16]
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	d504      	bpl.n	8006478 <__sflush_r+0x7c>
 800646e:	1c42      	adds	r2, r0, #1
 8006470:	d101      	bne.n	8006476 <__sflush_r+0x7a>
 8006472:	682b      	ldr	r3, [r5, #0]
 8006474:	b903      	cbnz	r3, 8006478 <__sflush_r+0x7c>
 8006476:	6560      	str	r0, [r4, #84]	; 0x54
 8006478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800647a:	602f      	str	r7, [r5, #0]
 800647c:	2900      	cmp	r1, #0
 800647e:	d0ca      	beq.n	8006416 <__sflush_r+0x1a>
 8006480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006484:	4299      	cmp	r1, r3
 8006486:	d002      	beq.n	800648e <__sflush_r+0x92>
 8006488:	4628      	mov	r0, r5
 800648a:	f000 f9d5 	bl	8006838 <_free_r>
 800648e:	2000      	movs	r0, #0
 8006490:	6360      	str	r0, [r4, #52]	; 0x34
 8006492:	e7c1      	b.n	8006418 <__sflush_r+0x1c>
 8006494:	6a21      	ldr	r1, [r4, #32]
 8006496:	2301      	movs	r3, #1
 8006498:	4628      	mov	r0, r5
 800649a:	47b0      	blx	r6
 800649c:	1c41      	adds	r1, r0, #1
 800649e:	d1c7      	bne.n	8006430 <__sflush_r+0x34>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0c4      	beq.n	8006430 <__sflush_r+0x34>
 80064a6:	2b1d      	cmp	r3, #29
 80064a8:	d001      	beq.n	80064ae <__sflush_r+0xb2>
 80064aa:	2b16      	cmp	r3, #22
 80064ac:	d101      	bne.n	80064b2 <__sflush_r+0xb6>
 80064ae:	602f      	str	r7, [r5, #0]
 80064b0:	e7b1      	b.n	8006416 <__sflush_r+0x1a>
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	e7ad      	b.n	8006418 <__sflush_r+0x1c>
 80064bc:	690f      	ldr	r7, [r1, #16]
 80064be:	2f00      	cmp	r7, #0
 80064c0:	d0a9      	beq.n	8006416 <__sflush_r+0x1a>
 80064c2:	0793      	lsls	r3, r2, #30
 80064c4:	680e      	ldr	r6, [r1, #0]
 80064c6:	bf08      	it	eq
 80064c8:	694b      	ldreq	r3, [r1, #20]
 80064ca:	600f      	str	r7, [r1, #0]
 80064cc:	bf18      	it	ne
 80064ce:	2300      	movne	r3, #0
 80064d0:	eba6 0807 	sub.w	r8, r6, r7
 80064d4:	608b      	str	r3, [r1, #8]
 80064d6:	f1b8 0f00 	cmp.w	r8, #0
 80064da:	dd9c      	ble.n	8006416 <__sflush_r+0x1a>
 80064dc:	6a21      	ldr	r1, [r4, #32]
 80064de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064e0:	4643      	mov	r3, r8
 80064e2:	463a      	mov	r2, r7
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b0      	blx	r6
 80064e8:	2800      	cmp	r0, #0
 80064ea:	dc06      	bgt.n	80064fa <__sflush_r+0xfe>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295
 80064f8:	e78e      	b.n	8006418 <__sflush_r+0x1c>
 80064fa:	4407      	add	r7, r0
 80064fc:	eba8 0800 	sub.w	r8, r8, r0
 8006500:	e7e9      	b.n	80064d6 <__sflush_r+0xda>
 8006502:	bf00      	nop
 8006504:	20400001 	.word	0x20400001

08006508 <_fflush_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	690b      	ldr	r3, [r1, #16]
 800650c:	4605      	mov	r5, r0
 800650e:	460c      	mov	r4, r1
 8006510:	b913      	cbnz	r3, 8006518 <_fflush_r+0x10>
 8006512:	2500      	movs	r5, #0
 8006514:	4628      	mov	r0, r5
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	b118      	cbz	r0, 8006522 <_fflush_r+0x1a>
 800651a:	6983      	ldr	r3, [r0, #24]
 800651c:	b90b      	cbnz	r3, 8006522 <_fflush_r+0x1a>
 800651e:	f000 f887 	bl	8006630 <__sinit>
 8006522:	4b14      	ldr	r3, [pc, #80]	; (8006574 <_fflush_r+0x6c>)
 8006524:	429c      	cmp	r4, r3
 8006526:	d11b      	bne.n	8006560 <_fflush_r+0x58>
 8006528:	686c      	ldr	r4, [r5, #4]
 800652a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0ef      	beq.n	8006512 <_fflush_r+0xa>
 8006532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006534:	07d0      	lsls	r0, r2, #31
 8006536:	d404      	bmi.n	8006542 <_fflush_r+0x3a>
 8006538:	0599      	lsls	r1, r3, #22
 800653a:	d402      	bmi.n	8006542 <_fflush_r+0x3a>
 800653c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800653e:	f000 f915 	bl	800676c <__retarget_lock_acquire_recursive>
 8006542:	4628      	mov	r0, r5
 8006544:	4621      	mov	r1, r4
 8006546:	f7ff ff59 	bl	80063fc <__sflush_r>
 800654a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800654c:	07da      	lsls	r2, r3, #31
 800654e:	4605      	mov	r5, r0
 8006550:	d4e0      	bmi.n	8006514 <_fflush_r+0xc>
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	059b      	lsls	r3, r3, #22
 8006556:	d4dd      	bmi.n	8006514 <_fflush_r+0xc>
 8006558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800655a:	f000 f908 	bl	800676e <__retarget_lock_release_recursive>
 800655e:	e7d9      	b.n	8006514 <_fflush_r+0xc>
 8006560:	4b05      	ldr	r3, [pc, #20]	; (8006578 <_fflush_r+0x70>)
 8006562:	429c      	cmp	r4, r3
 8006564:	d101      	bne.n	800656a <_fflush_r+0x62>
 8006566:	68ac      	ldr	r4, [r5, #8]
 8006568:	e7df      	b.n	800652a <_fflush_r+0x22>
 800656a:	4b04      	ldr	r3, [pc, #16]	; (800657c <_fflush_r+0x74>)
 800656c:	429c      	cmp	r4, r3
 800656e:	bf08      	it	eq
 8006570:	68ec      	ldreq	r4, [r5, #12]
 8006572:	e7da      	b.n	800652a <_fflush_r+0x22>
 8006574:	08006bac 	.word	0x08006bac
 8006578:	08006bcc 	.word	0x08006bcc
 800657c:	08006b8c 	.word	0x08006b8c

08006580 <std>:
 8006580:	2300      	movs	r3, #0
 8006582:	b510      	push	{r4, lr}
 8006584:	4604      	mov	r4, r0
 8006586:	e9c0 3300 	strd	r3, r3, [r0]
 800658a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800658e:	6083      	str	r3, [r0, #8]
 8006590:	8181      	strh	r1, [r0, #12]
 8006592:	6643      	str	r3, [r0, #100]	; 0x64
 8006594:	81c2      	strh	r2, [r0, #14]
 8006596:	6183      	str	r3, [r0, #24]
 8006598:	4619      	mov	r1, r3
 800659a:	2208      	movs	r2, #8
 800659c:	305c      	adds	r0, #92	; 0x5c
 800659e:	f7ff fdef 	bl	8006180 <memset>
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <std+0x38>)
 80065a4:	6263      	str	r3, [r4, #36]	; 0x24
 80065a6:	4b05      	ldr	r3, [pc, #20]	; (80065bc <std+0x3c>)
 80065a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80065aa:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <std+0x40>)
 80065ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <std+0x44>)
 80065b0:	6224      	str	r4, [r4, #32]
 80065b2:	6323      	str	r3, [r4, #48]	; 0x30
 80065b4:	bd10      	pop	{r4, pc}
 80065b6:	bf00      	nop
 80065b8:	080069ad 	.word	0x080069ad
 80065bc:	080069cf 	.word	0x080069cf
 80065c0:	08006a07 	.word	0x08006a07
 80065c4:	08006a2b 	.word	0x08006a2b

080065c8 <_cleanup_r>:
 80065c8:	4901      	ldr	r1, [pc, #4]	; (80065d0 <_cleanup_r+0x8>)
 80065ca:	f000 b8af 	b.w	800672c <_fwalk_reent>
 80065ce:	bf00      	nop
 80065d0:	08006509 	.word	0x08006509

080065d4 <__sfmoreglue>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	1e4a      	subs	r2, r1, #1
 80065d8:	2568      	movs	r5, #104	; 0x68
 80065da:	4355      	muls	r5, r2
 80065dc:	460e      	mov	r6, r1
 80065de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065e2:	f000 f979 	bl	80068d8 <_malloc_r>
 80065e6:	4604      	mov	r4, r0
 80065e8:	b140      	cbz	r0, 80065fc <__sfmoreglue+0x28>
 80065ea:	2100      	movs	r1, #0
 80065ec:	e9c0 1600 	strd	r1, r6, [r0]
 80065f0:	300c      	adds	r0, #12
 80065f2:	60a0      	str	r0, [r4, #8]
 80065f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065f8:	f7ff fdc2 	bl	8006180 <memset>
 80065fc:	4620      	mov	r0, r4
 80065fe:	bd70      	pop	{r4, r5, r6, pc}

08006600 <__sfp_lock_acquire>:
 8006600:	4801      	ldr	r0, [pc, #4]	; (8006608 <__sfp_lock_acquire+0x8>)
 8006602:	f000 b8b3 	b.w	800676c <__retarget_lock_acquire_recursive>
 8006606:	bf00      	nop
 8006608:	24000258 	.word	0x24000258

0800660c <__sfp_lock_release>:
 800660c:	4801      	ldr	r0, [pc, #4]	; (8006614 <__sfp_lock_release+0x8>)
 800660e:	f000 b8ae 	b.w	800676e <__retarget_lock_release_recursive>
 8006612:	bf00      	nop
 8006614:	24000258 	.word	0x24000258

08006618 <__sinit_lock_acquire>:
 8006618:	4801      	ldr	r0, [pc, #4]	; (8006620 <__sinit_lock_acquire+0x8>)
 800661a:	f000 b8a7 	b.w	800676c <__retarget_lock_acquire_recursive>
 800661e:	bf00      	nop
 8006620:	24000253 	.word	0x24000253

08006624 <__sinit_lock_release>:
 8006624:	4801      	ldr	r0, [pc, #4]	; (800662c <__sinit_lock_release+0x8>)
 8006626:	f000 b8a2 	b.w	800676e <__retarget_lock_release_recursive>
 800662a:	bf00      	nop
 800662c:	24000253 	.word	0x24000253

08006630 <__sinit>:
 8006630:	b510      	push	{r4, lr}
 8006632:	4604      	mov	r4, r0
 8006634:	f7ff fff0 	bl	8006618 <__sinit_lock_acquire>
 8006638:	69a3      	ldr	r3, [r4, #24]
 800663a:	b11b      	cbz	r3, 8006644 <__sinit+0x14>
 800663c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006640:	f7ff bff0 	b.w	8006624 <__sinit_lock_release>
 8006644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006648:	6523      	str	r3, [r4, #80]	; 0x50
 800664a:	4b13      	ldr	r3, [pc, #76]	; (8006698 <__sinit+0x68>)
 800664c:	4a13      	ldr	r2, [pc, #76]	; (800669c <__sinit+0x6c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	62a2      	str	r2, [r4, #40]	; 0x28
 8006652:	42a3      	cmp	r3, r4
 8006654:	bf04      	itt	eq
 8006656:	2301      	moveq	r3, #1
 8006658:	61a3      	streq	r3, [r4, #24]
 800665a:	4620      	mov	r0, r4
 800665c:	f000 f820 	bl	80066a0 <__sfp>
 8006660:	6060      	str	r0, [r4, #4]
 8006662:	4620      	mov	r0, r4
 8006664:	f000 f81c 	bl	80066a0 <__sfp>
 8006668:	60a0      	str	r0, [r4, #8]
 800666a:	4620      	mov	r0, r4
 800666c:	f000 f818 	bl	80066a0 <__sfp>
 8006670:	2200      	movs	r2, #0
 8006672:	60e0      	str	r0, [r4, #12]
 8006674:	2104      	movs	r1, #4
 8006676:	6860      	ldr	r0, [r4, #4]
 8006678:	f7ff ff82 	bl	8006580 <std>
 800667c:	68a0      	ldr	r0, [r4, #8]
 800667e:	2201      	movs	r2, #1
 8006680:	2109      	movs	r1, #9
 8006682:	f7ff ff7d 	bl	8006580 <std>
 8006686:	68e0      	ldr	r0, [r4, #12]
 8006688:	2202      	movs	r2, #2
 800668a:	2112      	movs	r1, #18
 800668c:	f7ff ff78 	bl	8006580 <std>
 8006690:	2301      	movs	r3, #1
 8006692:	61a3      	str	r3, [r4, #24]
 8006694:	e7d2      	b.n	800663c <__sinit+0xc>
 8006696:	bf00      	nop
 8006698:	08006b88 	.word	0x08006b88
 800669c:	080065c9 	.word	0x080065c9

080066a0 <__sfp>:
 80066a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a2:	4607      	mov	r7, r0
 80066a4:	f7ff ffac 	bl	8006600 <__sfp_lock_acquire>
 80066a8:	4b1e      	ldr	r3, [pc, #120]	; (8006724 <__sfp+0x84>)
 80066aa:	681e      	ldr	r6, [r3, #0]
 80066ac:	69b3      	ldr	r3, [r6, #24]
 80066ae:	b913      	cbnz	r3, 80066b6 <__sfp+0x16>
 80066b0:	4630      	mov	r0, r6
 80066b2:	f7ff ffbd 	bl	8006630 <__sinit>
 80066b6:	3648      	adds	r6, #72	; 0x48
 80066b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066bc:	3b01      	subs	r3, #1
 80066be:	d503      	bpl.n	80066c8 <__sfp+0x28>
 80066c0:	6833      	ldr	r3, [r6, #0]
 80066c2:	b30b      	cbz	r3, 8006708 <__sfp+0x68>
 80066c4:	6836      	ldr	r6, [r6, #0]
 80066c6:	e7f7      	b.n	80066b8 <__sfp+0x18>
 80066c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066cc:	b9d5      	cbnz	r5, 8006704 <__sfp+0x64>
 80066ce:	4b16      	ldr	r3, [pc, #88]	; (8006728 <__sfp+0x88>)
 80066d0:	60e3      	str	r3, [r4, #12]
 80066d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066d6:	6665      	str	r5, [r4, #100]	; 0x64
 80066d8:	f000 f847 	bl	800676a <__retarget_lock_init_recursive>
 80066dc:	f7ff ff96 	bl	800660c <__sfp_lock_release>
 80066e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80066e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80066e8:	6025      	str	r5, [r4, #0]
 80066ea:	61a5      	str	r5, [r4, #24]
 80066ec:	2208      	movs	r2, #8
 80066ee:	4629      	mov	r1, r5
 80066f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066f4:	f7ff fd44 	bl	8006180 <memset>
 80066f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80066fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006700:	4620      	mov	r0, r4
 8006702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006704:	3468      	adds	r4, #104	; 0x68
 8006706:	e7d9      	b.n	80066bc <__sfp+0x1c>
 8006708:	2104      	movs	r1, #4
 800670a:	4638      	mov	r0, r7
 800670c:	f7ff ff62 	bl	80065d4 <__sfmoreglue>
 8006710:	4604      	mov	r4, r0
 8006712:	6030      	str	r0, [r6, #0]
 8006714:	2800      	cmp	r0, #0
 8006716:	d1d5      	bne.n	80066c4 <__sfp+0x24>
 8006718:	f7ff ff78 	bl	800660c <__sfp_lock_release>
 800671c:	230c      	movs	r3, #12
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	e7ee      	b.n	8006700 <__sfp+0x60>
 8006722:	bf00      	nop
 8006724:	08006b88 	.word	0x08006b88
 8006728:	ffff0001 	.word	0xffff0001

0800672c <_fwalk_reent>:
 800672c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006730:	4606      	mov	r6, r0
 8006732:	4688      	mov	r8, r1
 8006734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006738:	2700      	movs	r7, #0
 800673a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800673e:	f1b9 0901 	subs.w	r9, r9, #1
 8006742:	d505      	bpl.n	8006750 <_fwalk_reent+0x24>
 8006744:	6824      	ldr	r4, [r4, #0]
 8006746:	2c00      	cmp	r4, #0
 8006748:	d1f7      	bne.n	800673a <_fwalk_reent+0xe>
 800674a:	4638      	mov	r0, r7
 800674c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006750:	89ab      	ldrh	r3, [r5, #12]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d907      	bls.n	8006766 <_fwalk_reent+0x3a>
 8006756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800675a:	3301      	adds	r3, #1
 800675c:	d003      	beq.n	8006766 <_fwalk_reent+0x3a>
 800675e:	4629      	mov	r1, r5
 8006760:	4630      	mov	r0, r6
 8006762:	47c0      	blx	r8
 8006764:	4307      	orrs	r7, r0
 8006766:	3568      	adds	r5, #104	; 0x68
 8006768:	e7e9      	b.n	800673e <_fwalk_reent+0x12>

0800676a <__retarget_lock_init_recursive>:
 800676a:	4770      	bx	lr

0800676c <__retarget_lock_acquire_recursive>:
 800676c:	4770      	bx	lr

0800676e <__retarget_lock_release_recursive>:
 800676e:	4770      	bx	lr

08006770 <__swhatbuf_r>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	460e      	mov	r6, r1
 8006774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006778:	2900      	cmp	r1, #0
 800677a:	b096      	sub	sp, #88	; 0x58
 800677c:	4614      	mov	r4, r2
 800677e:	461d      	mov	r5, r3
 8006780:	da07      	bge.n	8006792 <__swhatbuf_r+0x22>
 8006782:	2300      	movs	r3, #0
 8006784:	602b      	str	r3, [r5, #0]
 8006786:	89b3      	ldrh	r3, [r6, #12]
 8006788:	061a      	lsls	r2, r3, #24
 800678a:	d410      	bmi.n	80067ae <__swhatbuf_r+0x3e>
 800678c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006790:	e00e      	b.n	80067b0 <__swhatbuf_r+0x40>
 8006792:	466a      	mov	r2, sp
 8006794:	f000 f970 	bl	8006a78 <_fstat_r>
 8006798:	2800      	cmp	r0, #0
 800679a:	dbf2      	blt.n	8006782 <__swhatbuf_r+0x12>
 800679c:	9a01      	ldr	r2, [sp, #4]
 800679e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067a6:	425a      	negs	r2, r3
 80067a8:	415a      	adcs	r2, r3
 80067aa:	602a      	str	r2, [r5, #0]
 80067ac:	e7ee      	b.n	800678c <__swhatbuf_r+0x1c>
 80067ae:	2340      	movs	r3, #64	; 0x40
 80067b0:	2000      	movs	r0, #0
 80067b2:	6023      	str	r3, [r4, #0]
 80067b4:	b016      	add	sp, #88	; 0x58
 80067b6:	bd70      	pop	{r4, r5, r6, pc}

080067b8 <__smakebuf_r>:
 80067b8:	898b      	ldrh	r3, [r1, #12]
 80067ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067bc:	079d      	lsls	r5, r3, #30
 80067be:	4606      	mov	r6, r0
 80067c0:	460c      	mov	r4, r1
 80067c2:	d507      	bpl.n	80067d4 <__smakebuf_r+0x1c>
 80067c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	6123      	str	r3, [r4, #16]
 80067cc:	2301      	movs	r3, #1
 80067ce:	6163      	str	r3, [r4, #20]
 80067d0:	b002      	add	sp, #8
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
 80067d4:	ab01      	add	r3, sp, #4
 80067d6:	466a      	mov	r2, sp
 80067d8:	f7ff ffca 	bl	8006770 <__swhatbuf_r>
 80067dc:	9900      	ldr	r1, [sp, #0]
 80067de:	4605      	mov	r5, r0
 80067e0:	4630      	mov	r0, r6
 80067e2:	f000 f879 	bl	80068d8 <_malloc_r>
 80067e6:	b948      	cbnz	r0, 80067fc <__smakebuf_r+0x44>
 80067e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ec:	059a      	lsls	r2, r3, #22
 80067ee:	d4ef      	bmi.n	80067d0 <__smakebuf_r+0x18>
 80067f0:	f023 0303 	bic.w	r3, r3, #3
 80067f4:	f043 0302 	orr.w	r3, r3, #2
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	e7e3      	b.n	80067c4 <__smakebuf_r+0xc>
 80067fc:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <__smakebuf_r+0x7c>)
 80067fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	6020      	str	r0, [r4, #0]
 8006804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	9b00      	ldr	r3, [sp, #0]
 800680c:	6163      	str	r3, [r4, #20]
 800680e:	9b01      	ldr	r3, [sp, #4]
 8006810:	6120      	str	r0, [r4, #16]
 8006812:	b15b      	cbz	r3, 800682c <__smakebuf_r+0x74>
 8006814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006818:	4630      	mov	r0, r6
 800681a:	f000 f93f 	bl	8006a9c <_isatty_r>
 800681e:	b128      	cbz	r0, 800682c <__smakebuf_r+0x74>
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	f023 0303 	bic.w	r3, r3, #3
 8006826:	f043 0301 	orr.w	r3, r3, #1
 800682a:	81a3      	strh	r3, [r4, #12]
 800682c:	89a0      	ldrh	r0, [r4, #12]
 800682e:	4305      	orrs	r5, r0
 8006830:	81a5      	strh	r5, [r4, #12]
 8006832:	e7cd      	b.n	80067d0 <__smakebuf_r+0x18>
 8006834:	080065c9 	.word	0x080065c9

08006838 <_free_r>:
 8006838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800683a:	2900      	cmp	r1, #0
 800683c:	d048      	beq.n	80068d0 <_free_r+0x98>
 800683e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006842:	9001      	str	r0, [sp, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f1a1 0404 	sub.w	r4, r1, #4
 800684a:	bfb8      	it	lt
 800684c:	18e4      	addlt	r4, r4, r3
 800684e:	f000 f947 	bl	8006ae0 <__malloc_lock>
 8006852:	4a20      	ldr	r2, [pc, #128]	; (80068d4 <_free_r+0x9c>)
 8006854:	9801      	ldr	r0, [sp, #4]
 8006856:	6813      	ldr	r3, [r2, #0]
 8006858:	4615      	mov	r5, r2
 800685a:	b933      	cbnz	r3, 800686a <_free_r+0x32>
 800685c:	6063      	str	r3, [r4, #4]
 800685e:	6014      	str	r4, [r2, #0]
 8006860:	b003      	add	sp, #12
 8006862:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006866:	f000 b941 	b.w	8006aec <__malloc_unlock>
 800686a:	42a3      	cmp	r3, r4
 800686c:	d90b      	bls.n	8006886 <_free_r+0x4e>
 800686e:	6821      	ldr	r1, [r4, #0]
 8006870:	1862      	adds	r2, r4, r1
 8006872:	4293      	cmp	r3, r2
 8006874:	bf04      	itt	eq
 8006876:	681a      	ldreq	r2, [r3, #0]
 8006878:	685b      	ldreq	r3, [r3, #4]
 800687a:	6063      	str	r3, [r4, #4]
 800687c:	bf04      	itt	eq
 800687e:	1852      	addeq	r2, r2, r1
 8006880:	6022      	streq	r2, [r4, #0]
 8006882:	602c      	str	r4, [r5, #0]
 8006884:	e7ec      	b.n	8006860 <_free_r+0x28>
 8006886:	461a      	mov	r2, r3
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	b10b      	cbz	r3, 8006890 <_free_r+0x58>
 800688c:	42a3      	cmp	r3, r4
 800688e:	d9fa      	bls.n	8006886 <_free_r+0x4e>
 8006890:	6811      	ldr	r1, [r2, #0]
 8006892:	1855      	adds	r5, r2, r1
 8006894:	42a5      	cmp	r5, r4
 8006896:	d10b      	bne.n	80068b0 <_free_r+0x78>
 8006898:	6824      	ldr	r4, [r4, #0]
 800689a:	4421      	add	r1, r4
 800689c:	1854      	adds	r4, r2, r1
 800689e:	42a3      	cmp	r3, r4
 80068a0:	6011      	str	r1, [r2, #0]
 80068a2:	d1dd      	bne.n	8006860 <_free_r+0x28>
 80068a4:	681c      	ldr	r4, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	6053      	str	r3, [r2, #4]
 80068aa:	4421      	add	r1, r4
 80068ac:	6011      	str	r1, [r2, #0]
 80068ae:	e7d7      	b.n	8006860 <_free_r+0x28>
 80068b0:	d902      	bls.n	80068b8 <_free_r+0x80>
 80068b2:	230c      	movs	r3, #12
 80068b4:	6003      	str	r3, [r0, #0]
 80068b6:	e7d3      	b.n	8006860 <_free_r+0x28>
 80068b8:	6825      	ldr	r5, [r4, #0]
 80068ba:	1961      	adds	r1, r4, r5
 80068bc:	428b      	cmp	r3, r1
 80068be:	bf04      	itt	eq
 80068c0:	6819      	ldreq	r1, [r3, #0]
 80068c2:	685b      	ldreq	r3, [r3, #4]
 80068c4:	6063      	str	r3, [r4, #4]
 80068c6:	bf04      	itt	eq
 80068c8:	1949      	addeq	r1, r1, r5
 80068ca:	6021      	streq	r1, [r4, #0]
 80068cc:	6054      	str	r4, [r2, #4]
 80068ce:	e7c7      	b.n	8006860 <_free_r+0x28>
 80068d0:	b003      	add	sp, #12
 80068d2:	bd30      	pop	{r4, r5, pc}
 80068d4:	24000094 	.word	0x24000094

080068d8 <_malloc_r>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	1ccd      	adds	r5, r1, #3
 80068dc:	f025 0503 	bic.w	r5, r5, #3
 80068e0:	3508      	adds	r5, #8
 80068e2:	2d0c      	cmp	r5, #12
 80068e4:	bf38      	it	cc
 80068e6:	250c      	movcc	r5, #12
 80068e8:	2d00      	cmp	r5, #0
 80068ea:	4606      	mov	r6, r0
 80068ec:	db01      	blt.n	80068f2 <_malloc_r+0x1a>
 80068ee:	42a9      	cmp	r1, r5
 80068f0:	d903      	bls.n	80068fa <_malloc_r+0x22>
 80068f2:	230c      	movs	r3, #12
 80068f4:	6033      	str	r3, [r6, #0]
 80068f6:	2000      	movs	r0, #0
 80068f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068fa:	f000 f8f1 	bl	8006ae0 <__malloc_lock>
 80068fe:	4921      	ldr	r1, [pc, #132]	; (8006984 <_malloc_r+0xac>)
 8006900:	680a      	ldr	r2, [r1, #0]
 8006902:	4614      	mov	r4, r2
 8006904:	b99c      	cbnz	r4, 800692e <_malloc_r+0x56>
 8006906:	4f20      	ldr	r7, [pc, #128]	; (8006988 <_malloc_r+0xb0>)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	b923      	cbnz	r3, 8006916 <_malloc_r+0x3e>
 800690c:	4621      	mov	r1, r4
 800690e:	4630      	mov	r0, r6
 8006910:	f000 f83c 	bl	800698c <_sbrk_r>
 8006914:	6038      	str	r0, [r7, #0]
 8006916:	4629      	mov	r1, r5
 8006918:	4630      	mov	r0, r6
 800691a:	f000 f837 	bl	800698c <_sbrk_r>
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	d123      	bne.n	800696a <_malloc_r+0x92>
 8006922:	230c      	movs	r3, #12
 8006924:	6033      	str	r3, [r6, #0]
 8006926:	4630      	mov	r0, r6
 8006928:	f000 f8e0 	bl	8006aec <__malloc_unlock>
 800692c:	e7e3      	b.n	80068f6 <_malloc_r+0x1e>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	1b5b      	subs	r3, r3, r5
 8006932:	d417      	bmi.n	8006964 <_malloc_r+0x8c>
 8006934:	2b0b      	cmp	r3, #11
 8006936:	d903      	bls.n	8006940 <_malloc_r+0x68>
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	441c      	add	r4, r3
 800693c:	6025      	str	r5, [r4, #0]
 800693e:	e004      	b.n	800694a <_malloc_r+0x72>
 8006940:	6863      	ldr	r3, [r4, #4]
 8006942:	42a2      	cmp	r2, r4
 8006944:	bf0c      	ite	eq
 8006946:	600b      	streq	r3, [r1, #0]
 8006948:	6053      	strne	r3, [r2, #4]
 800694a:	4630      	mov	r0, r6
 800694c:	f000 f8ce 	bl	8006aec <__malloc_unlock>
 8006950:	f104 000b 	add.w	r0, r4, #11
 8006954:	1d23      	adds	r3, r4, #4
 8006956:	f020 0007 	bic.w	r0, r0, #7
 800695a:	1ac2      	subs	r2, r0, r3
 800695c:	d0cc      	beq.n	80068f8 <_malloc_r+0x20>
 800695e:	1a1b      	subs	r3, r3, r0
 8006960:	50a3      	str	r3, [r4, r2]
 8006962:	e7c9      	b.n	80068f8 <_malloc_r+0x20>
 8006964:	4622      	mov	r2, r4
 8006966:	6864      	ldr	r4, [r4, #4]
 8006968:	e7cc      	b.n	8006904 <_malloc_r+0x2c>
 800696a:	1cc4      	adds	r4, r0, #3
 800696c:	f024 0403 	bic.w	r4, r4, #3
 8006970:	42a0      	cmp	r0, r4
 8006972:	d0e3      	beq.n	800693c <_malloc_r+0x64>
 8006974:	1a21      	subs	r1, r4, r0
 8006976:	4630      	mov	r0, r6
 8006978:	f000 f808 	bl	800698c <_sbrk_r>
 800697c:	3001      	adds	r0, #1
 800697e:	d1dd      	bne.n	800693c <_malloc_r+0x64>
 8006980:	e7cf      	b.n	8006922 <_malloc_r+0x4a>
 8006982:	bf00      	nop
 8006984:	24000094 	.word	0x24000094
 8006988:	24000098 	.word	0x24000098

0800698c <_sbrk_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d06      	ldr	r5, [pc, #24]	; (80069a8 <_sbrk_r+0x1c>)
 8006990:	2300      	movs	r3, #0
 8006992:	4604      	mov	r4, r0
 8006994:	4608      	mov	r0, r1
 8006996:	602b      	str	r3, [r5, #0]
 8006998:	f7fa fabc 	bl	8000f14 <_sbrk>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	d102      	bne.n	80069a6 <_sbrk_r+0x1a>
 80069a0:	682b      	ldr	r3, [r5, #0]
 80069a2:	b103      	cbz	r3, 80069a6 <_sbrk_r+0x1a>
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	bd38      	pop	{r3, r4, r5, pc}
 80069a8:	2400025c 	.word	0x2400025c

080069ac <__sread>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	460c      	mov	r4, r1
 80069b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b4:	f000 f8a0 	bl	8006af8 <_read_r>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	bfab      	itete	ge
 80069bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069be:	89a3      	ldrhlt	r3, [r4, #12]
 80069c0:	181b      	addge	r3, r3, r0
 80069c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069c6:	bfac      	ite	ge
 80069c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80069ca:	81a3      	strhlt	r3, [r4, #12]
 80069cc:	bd10      	pop	{r4, pc}

080069ce <__swrite>:
 80069ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d2:	461f      	mov	r7, r3
 80069d4:	898b      	ldrh	r3, [r1, #12]
 80069d6:	05db      	lsls	r3, r3, #23
 80069d8:	4605      	mov	r5, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	4616      	mov	r6, r2
 80069de:	d505      	bpl.n	80069ec <__swrite+0x1e>
 80069e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e4:	2302      	movs	r3, #2
 80069e6:	2200      	movs	r2, #0
 80069e8:	f000 f868 	bl	8006abc <_lseek_r>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	4632      	mov	r2, r6
 80069fa:	463b      	mov	r3, r7
 80069fc:	4628      	mov	r0, r5
 80069fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a02:	f000 b817 	b.w	8006a34 <_write_r>

08006a06 <__sseek>:
 8006a06:	b510      	push	{r4, lr}
 8006a08:	460c      	mov	r4, r1
 8006a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0e:	f000 f855 	bl	8006abc <_lseek_r>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	bf15      	itete	ne
 8006a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a22:	81a3      	strheq	r3, [r4, #12]
 8006a24:	bf18      	it	ne
 8006a26:	81a3      	strhne	r3, [r4, #12]
 8006a28:	bd10      	pop	{r4, pc}

08006a2a <__sclose>:
 8006a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a2e:	f000 b813 	b.w	8006a58 <_close_r>
	...

08006a34 <_write_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d07      	ldr	r5, [pc, #28]	; (8006a54 <_write_r+0x20>)
 8006a38:	4604      	mov	r4, r0
 8006a3a:	4608      	mov	r0, r1
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	2200      	movs	r2, #0
 8006a40:	602a      	str	r2, [r5, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f7fa fa15 	bl	8000e72 <_write>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_write_r+0x1e>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_write_r+0x1e>
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	2400025c 	.word	0x2400025c

08006a58 <_close_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4d06      	ldr	r5, [pc, #24]	; (8006a74 <_close_r+0x1c>)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	f7fa fa21 	bl	8000eaa <_close>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_close_r+0x1a>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_close_r+0x1a>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	2400025c 	.word	0x2400025c

08006a78 <_fstat_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d07      	ldr	r5, [pc, #28]	; (8006a98 <_fstat_r+0x20>)
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	4604      	mov	r4, r0
 8006a80:	4608      	mov	r0, r1
 8006a82:	4611      	mov	r1, r2
 8006a84:	602b      	str	r3, [r5, #0]
 8006a86:	f7fa fa1c 	bl	8000ec2 <_fstat>
 8006a8a:	1c43      	adds	r3, r0, #1
 8006a8c:	d102      	bne.n	8006a94 <_fstat_r+0x1c>
 8006a8e:	682b      	ldr	r3, [r5, #0]
 8006a90:	b103      	cbz	r3, 8006a94 <_fstat_r+0x1c>
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	bd38      	pop	{r3, r4, r5, pc}
 8006a96:	bf00      	nop
 8006a98:	2400025c 	.word	0x2400025c

08006a9c <_isatty_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4d06      	ldr	r5, [pc, #24]	; (8006ab8 <_isatty_r+0x1c>)
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	602b      	str	r3, [r5, #0]
 8006aa8:	f7fa fa1b 	bl	8000ee2 <_isatty>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_isatty_r+0x1a>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_isatty_r+0x1a>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	2400025c 	.word	0x2400025c

08006abc <_lseek_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d07      	ldr	r5, [pc, #28]	; (8006adc <_lseek_r+0x20>)
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	602a      	str	r2, [r5, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f7fa fa14 	bl	8000ef8 <_lseek>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_lseek_r+0x1e>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_lseek_r+0x1e>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	2400025c 	.word	0x2400025c

08006ae0 <__malloc_lock>:
 8006ae0:	4801      	ldr	r0, [pc, #4]	; (8006ae8 <__malloc_lock+0x8>)
 8006ae2:	f7ff be43 	b.w	800676c <__retarget_lock_acquire_recursive>
 8006ae6:	bf00      	nop
 8006ae8:	24000254 	.word	0x24000254

08006aec <__malloc_unlock>:
 8006aec:	4801      	ldr	r0, [pc, #4]	; (8006af4 <__malloc_unlock+0x8>)
 8006aee:	f7ff be3e 	b.w	800676e <__retarget_lock_release_recursive>
 8006af2:	bf00      	nop
 8006af4:	24000254 	.word	0x24000254

08006af8 <_read_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4d07      	ldr	r5, [pc, #28]	; (8006b18 <_read_r+0x20>)
 8006afc:	4604      	mov	r4, r0
 8006afe:	4608      	mov	r0, r1
 8006b00:	4611      	mov	r1, r2
 8006b02:	2200      	movs	r2, #0
 8006b04:	602a      	str	r2, [r5, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f7fa f996 	bl	8000e38 <_read>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d102      	bne.n	8006b16 <_read_r+0x1e>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	b103      	cbz	r3, 8006b16 <_read_r+0x1e>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	2400025c 	.word	0x2400025c

08006b1c <_init>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	bf00      	nop
 8006b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b22:	bc08      	pop	{r3}
 8006b24:	469e      	mov	lr, r3
 8006b26:	4770      	bx	lr

08006b28 <_fini>:
 8006b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2a:	bf00      	nop
 8006b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2e:	bc08      	pop	{r3}
 8006b30:	469e      	mov	lr, r3
 8006b32:	4770      	bx	lr
