
L152LB_W5500_DHCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a44  08002a44  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002a44  08002a44  00012a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a4c  08002a4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000010  08002a64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002a64  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007860  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001584  00000000  00000000  00027899  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000850  00000000  00000000  00028e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000798  00000000  00000000  00029670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012b2b  00000000  00000000  00029e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000068f7  00000000  00000000  0003c933  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073e6d  00000000  00000000  0004322a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7097  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000219c  00000000  00000000  000b7114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08002a08 	.word	0x08002a08

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08002a08 	.word	0x08002a08

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <main>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);

int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	HAL_Init();
 8000484:	f000 fa85 	bl	8000992 <HAL_Init>

	SystemClock_Config();
 8000488:	f000 f842 	bl	8000510 <SystemClock_Config>

	MX_GPIO_Init();
 800048c:	f000 f8e6 	bl	800065c <MX_GPIO_Init>
	MX_SPI1_Init();
 8000490:	f000 f884 	bl	800059c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000494:	f000 f8b8 	bl	8000608 <MX_USART1_UART_Init>

	while (1)
	{
		spi_enable;
 8000498:	2200      	movs	r2, #0
 800049a:	2104      	movs	r1, #4
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <main+0x54>)
 800049e:	f000 fdd5 	bl	800104c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, &send_data, 1);
 80004a2:	2201      	movs	r2, #1
 80004a4:	490c      	ldr	r1, [pc, #48]	; (80004d8 <main+0x58>)
 80004a6:	480d      	ldr	r0, [pc, #52]	; (80004dc <main+0x5c>)
 80004a8:	f001 fc16 	bl	8001cd8 <HAL_SPI_Transmit_IT>
		spi_disable;
 80004ac:	2201      	movs	r2, #1
 80004ae:	2104      	movs	r1, #4
 80004b0:	4808      	ldr	r0, [pc, #32]	; (80004d4 <main+0x54>)
 80004b2:	f000 fdcb 	bl	800104c <HAL_GPIO_WritePin>
		send_data++;
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <main+0x58>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	3301      	adds	r3, #1
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <main+0x58>)
 80004c0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80004c2:	2180      	movs	r1, #128	; 0x80
 80004c4:	4806      	ldr	r0, [pc, #24]	; (80004e0 <main+0x60>)
 80004c6:	f000 fdd9 	bl	800107c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80004ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ce:	f000 facf 	bl	8000a70 <HAL_Delay>
		spi_enable;
 80004d2:	e7e1      	b.n	8000498 <main+0x18>
 80004d4:	40020c00 	.word	0x40020c00
 80004d8:	20000000 	.word	0x20000000
 80004dc:	2000006c 	.word	0x2000006c
 80004e0:	40020400 	.word	0x40020400

080004e4 <HAL_SPI_TxCpltCallback>:
	}
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi1.Instance)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <HAL_SPI_TxCpltCallback+0x24>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d103      	bne.n	8000500 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <HAL_SPI_TxCpltCallback+0x28>)
 80004fc:	f000 fdbe 	bl	800107c <HAL_GPIO_TogglePin>
	}
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000006c 	.word	0x2000006c
 800050c:	40020400 	.word	0x40020400

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b092      	sub	sp, #72	; 0x48
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2234      	movs	r2, #52	; 0x34
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fa6a 	bl	80029f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <SystemClock_Config+0x88>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800053a:	4a17      	ldr	r2, [pc, #92]	; (8000598 <SystemClock_Config+0x88>)
 800053c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000540:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000542:	2302      	movs	r3, #2
 8000544:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	2301      	movs	r3, #1
 8000548:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054a:	2310      	movs	r3, #16
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054e:	2300      	movs	r3, #0
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fdaa 	bl	80010b0 <HAL_RCC_OscConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000562:	f000 f8db 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	230f      	movs	r3, #15
 8000568:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800056a:	2301      	movs	r3, #1
 800056c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f001 f8c6 	bl	8001710 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800058a:	f000 f8c7 	bl	800071c <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3748      	adds	r7, #72	; 0x48
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40007000 	.word	0x40007000

0800059c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_SPI1_Init+0x64>)
 80005a2:	4a18      	ldr	r2, [pc, #96]	; (8000604 <MX_SPI1_Init+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <MX_SPI1_Init+0x64>)
 80005a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_SPI1_Init+0x64>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_SPI1_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_SPI1_Init+0x64>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_SPI1_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_SPI1_Init+0x64>)
 80005c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_SPI1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_SPI1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_SPI1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <MX_SPI1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_SPI1_Init+0x64>)
 80005e8:	220a      	movs	r2, #10
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_SPI1_Init+0x64>)
 80005ee:	f001 faf7 	bl	8001be0 <HAL_SPI_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005f8:	f000 f890 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000006c 	.word	0x2000006c
 8000604:	40013000 	.word	0x40013000

08000608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_USART1_UART_Init+0x50>)
 8000610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000640:	f001 fe4a 	bl	80022d8 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800064a:	f000 f867 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000002c 	.word	0x2000002c
 8000658:	40013800 	.word	0x40013800

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b27      	ldr	r3, [pc, #156]	; (8000710 <MX_GPIO_Init+0xb4>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	4a26      	ldr	r2, [pc, #152]	; (8000710 <MX_GPIO_Init+0xb4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	4b24      	ldr	r3, [pc, #144]	; (8000710 <MX_GPIO_Init+0xb4>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_GPIO_Init+0xb4>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a20      	ldr	r2, [pc, #128]	; (8000710 <MX_GPIO_Init+0xb4>)
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_GPIO_Init+0xb4>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 0308 	and.w	r3, r3, #8
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_GPIO_Init+0xb4>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <MX_GPIO_Init+0xb4>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_GPIO_Init+0xb4>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2104      	movs	r1, #4
 80006be:	4815      	ldr	r0, [pc, #84]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006c0:	f000 fcc4 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	21c0      	movs	r1, #192	; 0xc0
 80006c8:	4813      	ldr	r0, [pc, #76]	; (8000718 <MX_GPIO_Init+0xbc>)
 80006ca:	f000 fcbf 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ce:	2304      	movs	r3, #4
 80006d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006da:	2303      	movs	r3, #3
 80006dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	4619      	mov	r1, r3
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006e6:	f000 fb33 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ea:	23c0      	movs	r3, #192	; 0xc0
 80006ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_GPIO_Init+0xbc>)
 8000702:	f000 fb25 	bl	8000d50 <HAL_GPIO_Init>

}
 8000706:	bf00      	nop
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40020c00 	.word	0x40020c00
 8000718:	40020400 	.word	0x40020400

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_MspInit+0x58>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <HAL_MspInit+0x58>)
 8000734:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000738:	6253      	str	r3, [r2, #36]	; 0x24
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_MspInit+0x58>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_MspInit+0x58>)
 8000748:	6a1b      	ldr	r3, [r3, #32]
 800074a:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <HAL_MspInit+0x58>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6213      	str	r3, [r2, #32]
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_MspInit+0x58>)
 8000754:	6a1b      	ldr	r3, [r3, #32]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_MspInit+0x58>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a07      	ldr	r2, [pc, #28]	; (8000780 <HAL_MspInit+0x58>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_MspInit+0x58>)
 800076c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	40023800 	.word	0x40023800

08000784 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <HAL_SPI_MspInit+0x8c>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d12f      	bne.n	8000806 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007a6:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <HAL_SPI_MspInit+0x90>)
 80007a8:	6a1b      	ldr	r3, [r3, #32]
 80007aa:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <HAL_SPI_MspInit+0x90>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b0:	6213      	str	r3, [r2, #32]
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_SPI_MspInit+0x90>)
 80007b4:	6a1b      	ldr	r3, [r3, #32]
 80007b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_SPI_MspInit+0x90>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <HAL_SPI_MspInit+0x90>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	61d3      	str	r3, [r2, #28]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_SPI_MspInit+0x90>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80007d6:	2338      	movs	r3, #56	; 0x38
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007e6:	2305      	movs	r3, #5
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_SPI_MspInit+0x94>)
 80007f2:	f000 faad 	bl	8000d50 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2023      	movs	r0, #35	; 0x23
 80007fc:	f000 fa31 	bl	8000c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000800:	2023      	movs	r0, #35	; 0x23
 8000802:	f000 fa4a 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40013000 	.word	0x40013000
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <HAL_UART_MspInit+0x8c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d130      	bne.n	80008a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <HAL_UART_MspInit+0x90>)
 8000840:	6a1b      	ldr	r3, [r3, #32]
 8000842:	4a1a      	ldr	r2, [pc, #104]	; (80008ac <HAL_UART_MspInit+0x90>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6213      	str	r3, [r2, #32]
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_UART_MspInit+0x90>)
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_UART_MspInit+0x90>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <HAL_UART_MspInit+0x90>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_UART_MspInit+0x90>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800086e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000880:	2307      	movs	r3, #7
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <HAL_UART_MspInit+0x94>)
 800088c:	f000 fa60 	bl	8000d50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	2025      	movs	r0, #37	; 0x25
 8000896:	f000 f9e4 	bl	8000c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800089a:	2025      	movs	r0, #37	; 0x25
 800089c:	f000 f9fd 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40013800 	.word	0x40013800
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <HardFault_Handler+0x4>

080008c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <BusFault_Handler+0x4>

080008d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <UsageFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000900:	f000 f89a 	bl	8000a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <SPI1_IRQHandler+0x10>)
 800090e:	f001 fa6d 	bl	8001dec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000006c 	.word	0x2000006c

0800091c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <USART1_IRQHandler+0x10>)
 8000922:	f001 fd27 	bl	8002374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000002c 	.word	0x2000002c

08000930 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <SystemInit+0x14>)
 8000936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093a:	609a      	str	r2, [r3, #8]
#endif
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000948:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800094a:	e003      	b.n	8000954 <LoopCopyDataInit>

0800094c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800094e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000950:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000952:	3104      	adds	r1, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000958:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800095a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800095c:	d3f6      	bcc.n	800094c <CopyDataInit>
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000960:	e002      	b.n	8000968 <LoopFillZerobss>

08000962 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000964:	f842 3b04 	str.w	r3, [r2], #4

08000968 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800096a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800096c:	d3f9      	bcc.n	8000962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096e:	f7ff ffdf 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000972:	f002 f81d 	bl	80029b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff fd83 	bl	8000480 <main>
  bx lr
 800097a:	4770      	bx	lr
  ldr r3, =_sidata
 800097c:	08002a54 	.word	0x08002a54
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000984:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000988:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800098c:	200000c8 	.word	0x200000c8

08000990 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_IRQHandler>

08000992 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f955 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 f80e 	bl	80009c4 <HAL_InitTick>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	e001      	b.n	80009b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b4:	f7ff feb8 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <HAL_InitTick+0x68>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d022      	beq.n	8000a1e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_InitTick+0x6c>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_InitTick+0x68>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f962 	bl	8000cb6 <HAL_SYSTICK_Config>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d10f      	bne.n	8000a18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b0f      	cmp	r3, #15
 80009fc:	d809      	bhi.n	8000a12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fe:	2200      	movs	r2, #0
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	f04f 30ff 	mov.w	r0, #4294967295
 8000a06:	f000 f92c 	bl	8000c62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_InitTick+0x70>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	e007      	b.n	8000a22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
 8000a16:	e004      	b.n	8000a22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73fb      	strb	r3, [r7, #15]
 8000a1c:	e001      	b.n	8000a22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000000c 	.word	0x2000000c
 8000a30:	20000004 	.word	0x20000004
 8000a34:	20000008 	.word	0x20000008

08000a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x1c>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_IncTick+0x20>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <HAL_IncTick+0x1c>)
 8000a48:	6013      	str	r3, [r2, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	200000c4 	.word	0x200000c4
 8000a58:	2000000c 	.word	0x2000000c

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b02      	ldr	r3, [pc, #8]	; (8000a6c <HAL_GetTick+0x10>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	200000c4 	.word	0x200000c4

08000a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff fff0 	bl	8000a5c <HAL_GetTick>
 8000a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a88:	d004      	beq.n	8000a94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_Delay+0x40>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4413      	add	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a94:	bf00      	nop
 8000a96:	f7ff ffe1 	bl	8000a5c <HAL_GetTick>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d8f7      	bhi.n	8000a96 <HAL_Delay+0x26>
  {
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000000c 	.word	0x2000000c

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db0b      	blt.n	8000b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 021f 	and.w	r2, r3, #31
 8000b30:	4906      	ldr	r1, [pc, #24]	; (8000b4c <__NVIC_EnableIRQ+0x34>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	; (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	; 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c18:	d301      	bcc.n	8000c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00f      	b.n	8000c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <SysTick_Config+0x40>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c26:	210f      	movs	r1, #15
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f7ff ff90 	bl	8000b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_Config+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x40>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff2d 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c74:	f7ff ff42 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff90 	bl	8000ba4 <NVIC_EncodePriority>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5f 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff35 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffa2 	bl	8000c08 <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d005      	beq.n	8000cf2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2204      	movs	r2, #4
 8000cea:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e029      	b.n	8000d46 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 020e 	bic.w	r2, r2, #14
 8000d00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 0201 	bic.w	r2, r2, #1
 8000d10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 021c 	and.w	r2, r3, #28
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fa01 f202 	lsl.w	r2, r1, r2
 8000d24:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	4798      	blx	r3
    }
  }
  return status;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b087      	sub	sp, #28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d66:	e154      	b.n	8001012 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8146 	beq.w	800100c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d00b      	beq.n	8000da0 <HAL_GPIO_Init+0x50>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d007      	beq.n	8000da0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d94:	2b11      	cmp	r3, #17
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b12      	cmp	r3, #18
 8000d9e:	d130      	bne.n	8000e02 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	f003 0201 	and.w	r2, r3, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0xf2>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d123      	bne.n	8000e8a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	08da      	lsrs	r2, r3, #3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3208      	adds	r2, #8
 8000e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	691a      	ldr	r2, [r3, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	6939      	ldr	r1, [r7, #16]
 8000e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0203 	and.w	r2, r3, #3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80a0 	beq.w	800100c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ecc:	4b57      	ldr	r3, [pc, #348]	; (800102c <HAL_GPIO_Init+0x2dc>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a56      	ldr	r2, [pc, #344]	; (800102c <HAL_GPIO_Init+0x2dc>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6213      	str	r3, [r2, #32]
 8000ed8:	4b54      	ldr	r3, [pc, #336]	; (800102c <HAL_GPIO_Init+0x2dc>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ee4:	4a52      	ldr	r2, [pc, #328]	; (8001030 <HAL_GPIO_Init+0x2e0>)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a4a      	ldr	r2, [pc, #296]	; (8001034 <HAL_GPIO_Init+0x2e4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d019      	beq.n	8000f44 <HAL_GPIO_Init+0x1f4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a49      	ldr	r2, [pc, #292]	; (8001038 <HAL_GPIO_Init+0x2e8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d013      	beq.n	8000f40 <HAL_GPIO_Init+0x1f0>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a48      	ldr	r2, [pc, #288]	; (800103c <HAL_GPIO_Init+0x2ec>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d00d      	beq.n	8000f3c <HAL_GPIO_Init+0x1ec>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a47      	ldr	r2, [pc, #284]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d007      	beq.n	8000f38 <HAL_GPIO_Init+0x1e8>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a46      	ldr	r2, [pc, #280]	; (8001044 <HAL_GPIO_Init+0x2f4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d101      	bne.n	8000f34 <HAL_GPIO_Init+0x1e4>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e008      	b.n	8000f46 <HAL_GPIO_Init+0x1f6>
 8000f34:	2305      	movs	r3, #5
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_Init+0x1f6>
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e004      	b.n	8000f46 <HAL_GPIO_Init+0x1f6>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_Init+0x1f6>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <HAL_GPIO_Init+0x1f6>
 8000f44:	2300      	movs	r3, #0
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	f002 0203 	and.w	r2, r2, #3
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	4093      	lsls	r3, r2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f56:	4936      	ldr	r1, [pc, #216]	; (8001030 <HAL_GPIO_Init+0x2e0>)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f64:	4b38      	ldr	r3, [pc, #224]	; (8001048 <HAL_GPIO_Init+0x2f8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f88:	4a2f      	ldr	r2, [pc, #188]	; (8001048 <HAL_GPIO_Init+0x2f8>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <HAL_GPIO_Init+0x2f8>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fb2:	4a25      	ldr	r2, [pc, #148]	; (8001048 <HAL_GPIO_Init+0x2f8>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <HAL_GPIO_Init+0x2f8>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fdc:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <HAL_GPIO_Init+0x2f8>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_GPIO_Init+0x2f8>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_GPIO_Init+0x2f8>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa22 f303 	lsr.w	r3, r2, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	f47f aea3 	bne.w	8000d68 <HAL_GPIO_Init+0x18>
  }
}
 8001022:	bf00      	nop
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800
 8001030:	40010000 	.word	0x40010000
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40010400 	.word	0x40010400

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	041a      	lsls	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4013      	ands	r3, r2
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43d9      	mvns	r1, r3
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	400b      	ands	r3, r1
 800109e:	431a      	orrs	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e31d      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010c2:	4b94      	ldr	r3, [pc, #592]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010cc:	4b91      	ldr	r3, [pc, #580]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d07b      	beq.n	80011da <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d006      	beq.n	80010f6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	d10f      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d10b      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f6:	4b87      	ldr	r3, [pc, #540]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d06a      	beq.n	80011d8 <HAL_RCC_OscConfig+0x128>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d166      	bne.n	80011d8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e2f7      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d106      	bne.n	8001124 <HAL_RCC_OscConfig+0x74>
 8001116:	4b7f      	ldr	r3, [pc, #508]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a7e      	ldr	r2, [pc, #504]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e02d      	b.n	8001180 <HAL_RCC_OscConfig+0xd0>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10c      	bne.n	8001146 <HAL_RCC_OscConfig+0x96>
 800112c:	4b79      	ldr	r3, [pc, #484]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a78      	ldr	r2, [pc, #480]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 8001132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b76      	ldr	r3, [pc, #472]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a75      	ldr	r2, [pc, #468]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	e01c      	b.n	8001180 <HAL_RCC_OscConfig+0xd0>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0xb8>
 800114e:	4b71      	ldr	r3, [pc, #452]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a70      	ldr	r2, [pc, #448]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b6e      	ldr	r3, [pc, #440]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a6d      	ldr	r2, [pc, #436]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e00b      	b.n	8001180 <HAL_RCC_OscConfig+0xd0>
 8001168:	4b6a      	ldr	r3, [pc, #424]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a69      	ldr	r2, [pc, #420]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 800116e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b67      	ldr	r3, [pc, #412]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a66      	ldr	r2, [pc, #408]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d013      	beq.n	80011b0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc68 	bl	8000a5c <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fc64 	bl	8000a5c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e2ad      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011a2:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0xe0>
 80011ae:	e014      	b.n	80011da <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc54 	bl	8000a5c <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fc50 	bl	8000a5c <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e299      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ca:	4b52      	ldr	r3, [pc, #328]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x108>
 80011d6:	e000      	b.n	80011da <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d05a      	beq.n	800129c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d005      	beq.n	80011f8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2b0c      	cmp	r3, #12
 80011f0:	d119      	bne.n	8001226 <HAL_RCC_OscConfig+0x176>
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d116      	bne.n	8001226 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f8:	4b46      	ldr	r3, [pc, #280]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_RCC_OscConfig+0x160>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d001      	beq.n	8001210 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e276      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001210:	4b40      	ldr	r3, [pc, #256]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	493d      	ldr	r1, [pc, #244]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001224:	e03a      	b.n	800129c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d020      	beq.n	8001270 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <HAL_RCC_OscConfig+0x268>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fc12 	bl	8000a5c <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fc0e 	bl	8000a5c <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e257      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800124e:	4b31      	ldr	r3, [pc, #196]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	492a      	ldr	r1, [pc, #168]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 800126a:	4313      	orrs	r3, r2
 800126c:	604b      	str	r3, [r1, #4]
 800126e:	e015      	b.n	800129c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <HAL_RCC_OscConfig+0x268>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fbf1 	bl	8000a5c <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fbed 	bl	8000a5c <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e236      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80b8 	beq.w	800141a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d170      	bne.n	8001392 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_OscConfig+0x218>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e21a      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1a      	ldr	r2, [r3, #32]
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d921      	bls.n	800131c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fc1f 	bl	8001b20 <RCC_SetFlashLatencyFromMSIRange>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e208      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4906      	ldr	r1, [pc, #24]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	061b      	lsls	r3, r3, #24
 800130c:	4901      	ldr	r1, [pc, #4]	; (8001314 <HAL_RCC_OscConfig+0x264>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
 8001312:	e020      	b.n	8001356 <HAL_RCC_OscConfig+0x2a6>
 8001314:	40023800 	.word	0x40023800
 8001318:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131c:	4ba4      	ldr	r3, [pc, #656]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	49a1      	ldr	r1, [pc, #644]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132e:	4ba0      	ldr	r3, [pc, #640]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	061b      	lsls	r3, r3, #24
 800133c:	499c      	ldr	r1, [pc, #624]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fbea 	bl	8001b20 <RCC_SetFlashLatencyFromMSIRange>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1d3      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	0b5b      	lsrs	r3, r3, #13
 800135c:	3301      	adds	r3, #1
 800135e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001366:	4a92      	ldr	r2, [pc, #584]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001368:	6892      	ldr	r2, [r2, #8]
 800136a:	0912      	lsrs	r2, r2, #4
 800136c:	f002 020f 	and.w	r2, r2, #15
 8001370:	4990      	ldr	r1, [pc, #576]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001372:	5c8a      	ldrb	r2, [r1, r2]
 8001374:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001376:	4a90      	ldr	r2, [pc, #576]	; (80015b8 <HAL_RCC_OscConfig+0x508>)
 8001378:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800137a:	4b90      	ldr	r3, [pc, #576]	; (80015bc <HAL_RCC_OscConfig+0x50c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fb20 	bl	80009c4 <HAL_InitTick>
 8001384:	4603      	mov	r3, r0
 8001386:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d045      	beq.n	800141a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	e1b5      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d029      	beq.n	80013ee <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800139a:	4b89      	ldr	r3, [pc, #548]	; (80015c0 <HAL_RCC_OscConfig+0x510>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fb5c 	bl	8000a5c <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a8:	f7ff fb58 	bl	8000a5c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1a1      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ba:	4b7d      	ldr	r3, [pc, #500]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c6:	4b7a      	ldr	r3, [pc, #488]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4977      	ldr	r1, [pc, #476]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d8:	4b75      	ldr	r3, [pc, #468]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	061b      	lsls	r3, r3, #24
 80013e6:	4972      	ldr	r1, [pc, #456]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ee:	4b74      	ldr	r3, [pc, #464]	; (80015c0 <HAL_RCC_OscConfig+0x510>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fb32 	bl	8000a5c <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013fc:	f7ff fb2e 	bl	8000a5c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e177      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800140e:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d030      	beq.n	8001488 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d016      	beq.n	800145c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b65      	ldr	r3, [pc, #404]	; (80015c4 <HAL_RCC_OscConfig+0x514>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff fb12 	bl	8000a5c <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fb0e 	bl	8000a5c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e157      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800144e:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x38c>
 800145a:	e015      	b.n	8001488 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_RCC_OscConfig+0x514>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff fafb 	bl	8000a5c <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146a:	f7ff faf7 	bl	8000a5c <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e140      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800147c:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800147e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80b5 	beq.w	8001600 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	4a41      	ldr	r2, [pc, #260]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6253      	str	r3, [r2, #36]	; 0x24
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014be:	2301      	movs	r3, #1
 80014c0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c2:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <HAL_RCC_OscConfig+0x518>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d118      	bne.n	8001500 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ce:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <HAL_RCC_OscConfig+0x518>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a3d      	ldr	r2, [pc, #244]	; (80015c8 <HAL_RCC_OscConfig+0x518>)
 80014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014da:	f7ff fabf 	bl	8000a5c <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e2:	f7ff fabb 	bl	8000a5c <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	; 0x64
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e104      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HAL_RCC_OscConfig+0x518>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x466>
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150c:	4a28      	ldr	r2, [pc, #160]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001512:	6353      	str	r3, [r2, #52]	; 0x34
 8001514:	e02d      	b.n	8001572 <HAL_RCC_OscConfig+0x4c2>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x488>
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001522:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001528:	6353      	str	r3, [r2, #52]	; 0x34
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800152c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152e:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001534:	6353      	str	r3, [r2, #52]	; 0x34
 8001536:	e01c      	b.n	8001572 <HAL_RCC_OscConfig+0x4c2>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d10c      	bne.n	800155a <HAL_RCC_OscConfig+0x4aa>
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154a:	6353      	str	r3, [r2, #52]	; 0x34
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800154e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001550:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001556:	6353      	str	r3, [r2, #52]	; 0x34
 8001558:	e00b      	b.n	8001572 <HAL_RCC_OscConfig+0x4c2>
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800155c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155e:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001564:	6353      	str	r3, [r2, #52]	; 0x34
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156a:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800156c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001570:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d015      	beq.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157a:	f7ff fa6f 	bl	8000a5c <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7ff fa6b 	bl	8000a5c <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e0b2      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 800159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ee      	beq.n	8001582 <HAL_RCC_OscConfig+0x4d2>
 80015a4:	e023      	b.n	80015ee <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fa59 	bl	8000a5c <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015ac:	e019      	b.n	80015e2 <HAL_RCC_OscConfig+0x532>
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	08002a2c 	.word	0x08002a2c
 80015b8:	20000004 	.word	0x20000004
 80015bc:	20000008 	.word	0x20000008
 80015c0:	42470020 	.word	0x42470020
 80015c4:	42470680 	.word	0x42470680
 80015c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f7ff fa46 	bl	8000a5c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e08d      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <HAL_RCC_OscConfig+0x658>)
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1ee      	bne.n	80015cc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ee:	7ffb      	ldrb	r3, [r7, #31]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d105      	bne.n	8001600 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f4:	4b44      	ldr	r3, [pc, #272]	; (8001708 <HAL_RCC_OscConfig+0x658>)
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	4a43      	ldr	r2, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x658>)
 80015fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fe:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	2b00      	cmp	r3, #0
 8001606:	d079      	beq.n	80016fc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b0c      	cmp	r3, #12
 800160c:	d056      	beq.n	80016bc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	2b02      	cmp	r3, #2
 8001614:	d13b      	bne.n	800168e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <HAL_RCC_OscConfig+0x65c>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fa1e 	bl	8000a5c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff fa1a 	bl	8000a5c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e063      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001636:	4b34      	ldr	r3, [pc, #208]	; (8001708 <HAL_RCC_OscConfig+0x658>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_RCC_OscConfig+0x658>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	4319      	orrs	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	430b      	orrs	r3, r1
 800165a:	492b      	ldr	r1, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x658>)
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_RCC_OscConfig+0x65c>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff f9f9 	bl	8000a5c <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166e:	f7ff f9f5 	bl	8000a5c <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e03e      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_OscConfig+0x658>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x5be>
 800168c:	e036      	b.n	80016fc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <HAL_RCC_OscConfig+0x65c>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff f9e2 	bl	8000a5c <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff f9de 	bl	8000a5c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e027      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_RCC_OscConfig+0x658>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x5ec>
 80016ba:	e01f      	b.n	80016fc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e01a      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_RCC_OscConfig+0x658>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	429a      	cmp	r2, r3
 80016da:	d10d      	bne.n	80016f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	42470060 	.word	0x42470060

08001710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e11a      	b.n	800195a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b8f      	ldr	r3, [pc, #572]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d919      	bls.n	8001766 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_RCC_ClockConfig+0x34>
 8001738:	4b8a      	ldr	r3, [pc, #552]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a89      	ldr	r2, [pc, #548]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b87      	ldr	r3, [pc, #540]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 0201 	bic.w	r2, r3, #1
 800174c:	4985      	ldr	r1, [pc, #532]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001754:	4b83      	ldr	r3, [pc, #524]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d001      	beq.n	8001766 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0f9      	b.n	800195a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001772:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	497a      	ldr	r1, [pc, #488]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 8001780:	4313      	orrs	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 808e 	beq.w	80018ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800179a:	4b73      	ldr	r3, [pc, #460]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d121      	bne.n	80017ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0d7      	b.n	800195a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017b2:	4b6d      	ldr	r3, [pc, #436]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d115      	bne.n	80017ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e0cb      	b.n	800195a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ca:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0bf      	b.n	800195a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017da:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0b7      	b.n	800195a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ea:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f023 0203 	bic.w	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	495c      	ldr	r1, [pc, #368]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017fc:	f7ff f92e 	bl	8000a5c <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d112      	bne.n	8001830 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff f926 	bl	8000a5c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e09b      	b.n	800195a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001822:	4b51      	ldr	r3, [pc, #324]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b08      	cmp	r3, #8
 800182c:	d1ee      	bne.n	800180c <HAL_RCC_ClockConfig+0xfc>
 800182e:	e03e      	b.n	80018ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d112      	bne.n	800185e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183a:	f7ff f90f 	bl	8000a5c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e084      	b.n	800195a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001850:	4b45      	ldr	r3, [pc, #276]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b0c      	cmp	r3, #12
 800185a:	d1ee      	bne.n	800183a <HAL_RCC_ClockConfig+0x12a>
 800185c:	e027      	b.n	80018ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d11d      	bne.n	80018a2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001866:	e00a      	b.n	800187e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001868:	f7ff f8f8 	bl	8000a5c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e06d      	b.n	800195a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800187e:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b04      	cmp	r3, #4
 8001888:	d1ee      	bne.n	8001868 <HAL_RCC_ClockConfig+0x158>
 800188a:	e010      	b.n	80018ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7ff f8e6 	bl	8000a5c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e05b      	b.n	800195a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018a2:	4b31      	ldr	r3, [pc, #196]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1ee      	bne.n	800188c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d219      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_ClockConfig+0x1be>
 80018c2:	4b28      	ldr	r3, [pc, #160]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a27      	ldr	r2, [pc, #156]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 0201 	bic.w	r2, r3, #1
 80018d6:	4923      	ldr	r1, [pc, #140]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <HAL_RCC_ClockConfig+0x254>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e034      	b.n	800195a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4917      	ldr	r1, [pc, #92]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	490f      	ldr	r1, [pc, #60]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800192e:	f000 f823 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001932:	4601      	mov	r1, r0
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_RCC_ClockConfig+0x258>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	4a0b      	ldr	r2, [pc, #44]	; (800196c <HAL_RCC_ClockConfig+0x25c>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	fa21 f303 	lsr.w	r3, r1, r3
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_RCC_ClockConfig+0x260>)
 8001948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x264>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f838 	bl	80009c4 <HAL_InitTick>
 8001954:	4603      	mov	r3, r0
 8001956:	72fb      	strb	r3, [r7, #11]

  return status;
 8001958:	7afb      	ldrb	r3, [r7, #11]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00
 8001968:	40023800 	.word	0x40023800
 800196c:	08002a2c 	.word	0x08002a2c
 8001970:	20000004 	.word	0x20000004
 8001974:	20000008 	.word	0x20000008

08001978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800197e:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <HAL_RCC_GetSysClockFreq+0x134>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b08      	cmp	r3, #8
 800198c:	d006      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x24>
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d007      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x2a>
 8001992:	2b04      	cmp	r3, #4
 8001994:	d176      	bne.n	8001a84 <HAL_RCC_GetSysClockFreq+0x10c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001996:	4b46      	ldr	r3, [pc, #280]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001998:	613b      	str	r3, [r7, #16]
      break;
 800199a:	e081      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800199c:	4b45      	ldr	r3, [pc, #276]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800199e:	613b      	str	r3, [r7, #16]
      break;
 80019a0:	e07e      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	0c9b      	lsrs	r3, r3, #18
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	4a43      	ldr	r2, [pc, #268]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x140>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	0d9b      	lsrs	r3, r3, #22
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	3301      	adds	r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <HAL_RCC_GetSysClockFreq+0x134>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d019      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f04f 0400 	mov.w	r4, #0
 80019ce:	4a39      	ldr	r2, [pc, #228]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80019d0:	fb02 f104 	mul.w	r1, r2, r4
 80019d4:	2200      	movs	r2, #0
 80019d6:	fb02 f203 	mul.w	r2, r2, r3
 80019da:	440a      	add	r2, r1
 80019dc:	4935      	ldr	r1, [pc, #212]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80019de:	fba3 0101 	umull	r0, r1, r3, r1
 80019e2:	1853      	adds	r3, r2, r1
 80019e4:	4619      	mov	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f04f 0400 	mov.w	r4, #0
 80019ec:	461a      	mov	r2, r3
 80019ee:	4623      	mov	r3, r4
 80019f0:	f7fe fbc4 	bl	800017c <__aeabi_uldivmod>
 80019f4:	4603      	mov	r3, r0
 80019f6:	460c      	mov	r4, r1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e040      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x106>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	461d      	mov	r5, r3
 8001a00:	f04f 0600 	mov.w	r6, #0
 8001a04:	4629      	mov	r1, r5
 8001a06:	4632      	mov	r2, r6
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	f04f 0400 	mov.w	r4, #0
 8001a10:	0154      	lsls	r4, r2, #5
 8001a12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a16:	014b      	lsls	r3, r1, #5
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	1b49      	subs	r1, r1, r5
 8001a1e:	eb62 0206 	sbc.w	r2, r2, r6
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	f04f 0400 	mov.w	r4, #0
 8001a2a:	0194      	lsls	r4, r2, #6
 8001a2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a30:	018b      	lsls	r3, r1, #6
 8001a32:	1a5b      	subs	r3, r3, r1
 8001a34:	eb64 0402 	sbc.w	r4, r4, r2
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	00e2      	lsls	r2, r4, #3
 8001a42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a46:	00d9      	lsls	r1, r3, #3
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4614      	mov	r4, r2
 8001a4c:	195b      	adds	r3, r3, r5
 8001a4e:	eb44 0406 	adc.w	r4, r4, r6
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	02a2      	lsls	r2, r4, #10
 8001a5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a60:	0299      	lsls	r1, r3, #10
 8001a62:	460b      	mov	r3, r1
 8001a64:	4614      	mov	r4, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	4621      	mov	r1, r4
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f04f 0400 	mov.w	r4, #0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4623      	mov	r3, r4
 8001a74:	f7fe fb82 	bl	800017c <__aeabi_uldivmod>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	613b      	str	r3, [r7, #16]
      break;
 8001a82:	e00d      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_GetSysClockFreq+0x134>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	0b5b      	lsrs	r3, r3, #13
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	613b      	str	r3, [r7, #16]
      break;
 8001a9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa0:	693b      	ldr	r3, [r7, #16]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	00f42400 	.word	0x00f42400
 8001ab4:	016e3600 	.word	0x016e3600
 8001ab8:	08002a20 	.word	0x08002a20

08001abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac0:	4b02      	ldr	r3, [pc, #8]	; (8001acc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad4:	f7ff fff2 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8001ad8:	4601      	mov	r1, r0
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	08002a3c 	.word	0x08002a3c

08001af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001afc:	f7ff ffde 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8001b00:	4601      	mov	r1, r0
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	0adb      	lsrs	r3, r3, #11
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	08002a3c 	.word	0x08002a3c

08001b20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d12c      	bne.n	8001b92 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e016      	b.n	8001b7e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6253      	str	r3, [r2, #36]	; 0x24
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b70:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001b84:	d105      	bne.n	8001b92 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b8c:	d101      	bne.n	8001b92 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 0201 	bic.w	r2, r3, #1
 8001bac:	490b      	ldr	r1, [pc, #44]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d001      	beq.n	8001bc6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06e      	b.n	8001cd0 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d108      	bne.n	8001c0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c02:	d009      	beq.n	8001c18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
 8001c0a:	e005      	b.n	8001c18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe fda6 	bl	8000784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	0c1a      	lsrs	r2, r3, #16
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f002 0204 	and.w	r2, r2, #4
 8001cbe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_SPI_Transmit_IT+0x20>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e06f      	b.n	8001dd8 <HAL_SPI_Transmit_IT+0x100>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_SPI_Transmit_IT+0x34>
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d10:	e05d      	b.n	8001dce <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d002      	beq.n	8001d24 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d22:	e054      	b.n	8001dce <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2203      	movs	r2, #3
 8001d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	88fa      	ldrh	r2, [r7, #6]
 8001d3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	88fa      	ldrh	r2, [r7, #6]
 8001d42:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_SPI_Transmit_IT+0x10c>)
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
 8001d6a:	e002      	b.n	8001d72 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_SPI_Transmit_IT+0x110>)
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d7a:	d10f      	bne.n	8001d9c <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8001daa:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b40      	cmp	r3, #64	; 0x40
 8001db8:	d008      	beq.n	8001dcc <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e000      	b.n	8001dce <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8001dcc:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	0800203d 	.word	0x0800203d
 8001de8:	08001ff7 	.word	0x08001ff7

08001dec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10f      	bne.n	8001e30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
    return;
 8001e2e:	e0bf      	b.n	8001fb0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00a      	beq.n	8001e52 <HAL_SPI_IRQHandler+0x66>
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	09db      	lsrs	r3, r3, #7
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
    return;
 8001e50:	e0ae      	b.n	8001fb0 <HAL_SPI_IRQHandler+0x1c4>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_SPI_IRQHandler+0x80>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	099b      	lsrs	r3, r3, #6
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 80a2 	beq.w	8001fb0 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 809b 	beq.w	8001fb0 <HAL_SPI_IRQHandler+0x1c4>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	099b      	lsrs	r3, r3, #6
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d023      	beq.n	8001ece <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d011      	beq.n	8001eb6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	f043 0204 	orr.w	r2, r3, #4
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	e00b      	b.n	8001ece <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	693b      	ldr	r3, [r7, #16]
        return;
 8001ecc:	e070      	b.n	8001fb0 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d014      	beq.n	8001f04 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d050      	beq.n	8001fae <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f1a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d104      	bne.n	8001f38 <HAL_SPI_IRQHandler+0x14c>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d034      	beq.n	8001fa2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0203 	bic.w	r2, r2, #3
 8001f46:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d011      	beq.n	8001f74 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_SPI_IRQHandler+0x1cc>)
 8001f56:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe feb6 	bl	8000cce <HAL_DMA_Abort_IT>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d016      	beq.n	8001faa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <HAL_SPI_IRQHandler+0x1cc>)
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fea0 	bl	8000cce <HAL_DMA_Abort_IT>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001fa0:	e003      	b.n	8001faa <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f80a 	bl	8001fbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001fa8:	e000      	b.n	8001fac <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8001faa:	bf00      	nop
    return;
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
  }
}
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	08001fcf 	.word	0x08001fcf

08001fbc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff ffe7 	bl	8001fbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	330c      	adds	r3, #12
 8002008:	7812      	ldrb	r2, [r2, #0]
 800200a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f8f0 	bl	8002214 <SPI_CloseTx_ISR>
  }
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	881a      	ldrh	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	1c9a      	adds	r2, r3, #2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8ce 	bl	8002214 <SPI_CloseTx_ISR>
  }
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002090:	f7fe fce4 	bl	8000a5c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020a0:	f7fe fcdc 	bl	8000a5c <HAL_GetTick>
 80020a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	015b      	lsls	r3, r3, #5
 80020ac:	0d1b      	lsrs	r3, r3, #20
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020b6:	e054      	b.n	8002162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020be:	d050      	beq.n	8002162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020c0:	f7fe fccc 	bl	8000a5c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d902      	bls.n	80020d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d13d      	bne.n	8002152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ee:	d111      	bne.n	8002114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020f8:	d004      	beq.n	8002104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002102:	d107      	bne.n	8002114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800211c:	d10f      	bne.n	800213e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800213c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e017      	b.n	8002182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3b01      	subs	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4013      	ands	r3, r2
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	429a      	cmp	r2, r3
 8002170:	bf0c      	ite	eq
 8002172:	2301      	moveq	r3, #1
 8002174:	2300      	movne	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	429a      	cmp	r2, r3
 800217e:	d19b      	bne.n	80020b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000004 	.word	0x20000004

08002190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <SPI_EndRxTxTransaction+0x7c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <SPI_EndRxTxTransaction+0x80>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0d5b      	lsrs	r3, r3, #21
 80021a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021ac:	fb02 f303 	mul.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ba:	d112      	bne.n	80021e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2200      	movs	r2, #0
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f7ff ff5a 	bl	8002080 <SPI_WaitFlagStateUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d016      	beq.n	8002200 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f043 0220 	orr.w	r2, r3, #32
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e00f      	b.n	8002202 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d0f2      	beq.n	80021e2 <SPI_EndRxTxTransaction+0x52>
 80021fc:	e000      	b.n	8002200 <SPI_EndRxTxTransaction+0x70>
        break;
 80021fe:	bf00      	nop
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000004 	.word	0x20000004
 8002210:	165e9f81 	.word	0x165e9f81

08002214 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <SPI_CloseTx_ISR+0xbc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2c      	ldr	r2, [pc, #176]	; (80022d4 <SPI_CloseTx_ISR+0xc0>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0a5b      	lsrs	r3, r3, #9
 8002228:	2264      	movs	r2, #100	; 0x64
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002230:	f7fe fc14 	bl	8000a5c <HAL_GetTick>
 8002234:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002240:	f043 0220 	orr.w	r2, r3, #32
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002248:	e009      	b.n	800225e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	3b01      	subs	r3, #1
 800224e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0eb      	beq.n	8002236 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800226c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	2164      	movs	r1, #100	; 0x64
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ff8c 	bl	8002190 <SPI_EndRxTxTransaction>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff fe7f 	bl	8001fbc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80022be:	e002      	b.n	80022c6 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7fe f90f 	bl	80004e4 <HAL_SPI_TxCpltCallback>
}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000004 	.word	0x20000004
 80022d4:	057619f1 	.word	0x057619f1

080022d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e03f      	b.n	800236a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe fa8c 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800231a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fa63 	bl	80027e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10d      	bne.n	80023c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_UART_IRQHandler+0x52>
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f991 	bl	80026e6 <UART_Receive_IT>
      return;
 80023c4:	e0d1      	b.n	800256a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80b0 	beq.w	800252e <HAL_UART_IRQHandler+0x1ba>
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <HAL_UART_IRQHandler+0x70>
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80a5 	beq.w	800252e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_UART_IRQHandler+0x90>
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_UART_IRQHandler+0xb0>
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	f043 0202 	orr.w	r2, r3, #2
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_UART_IRQHandler+0xd0>
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243c:	f043 0204 	orr.w	r2, r3, #4
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00f      	beq.n	800246e <HAL_UART_IRQHandler+0xfa>
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d104      	bne.n	8002462 <HAL_UART_IRQHandler+0xee>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	f043 0208 	orr.w	r2, r3, #8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d078      	beq.n	8002568 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_UART_IRQHandler+0x11c>
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f92b 	bl	80026e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b40      	cmp	r3, #64	; 0x40
 800249c:	bf0c      	ite	eq
 800249e:	2301      	moveq	r3, #1
 80024a0:	2300      	movne	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <HAL_UART_IRQHandler+0x144>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d031      	beq.n	800251c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f876 	bl	80025aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d123      	bne.n	8002514 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	4a21      	ldr	r2, [pc, #132]	; (8002570 <HAL_UART_IRQHandler+0x1fc>)
 80024ea:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fbec 	bl	8000cce <HAL_DMA_Abort_IT>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d016      	beq.n	800252a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002506:	4610      	mov	r0, r2
 8002508:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800250a:	e00e      	b.n	800252a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f843 	bl	8002598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002512:	e00a      	b.n	800252a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f83f 	bl	8002598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800251a:	e006      	b.n	800252a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f83b 	bl	8002598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002528:	e01e      	b.n	8002568 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800252a:	bf00      	nop
    return;
 800252c:	e01c      	b.n	8002568 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_UART_IRQHandler+0x1d6>
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f862 	bl	800260c <UART_Transmit_IT>
    return;
 8002548:	e00f      	b.n	800256a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_UART_IRQHandler+0x1f6>
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f8a9 	bl	80026b6 <UART_EndTransmit_IT>
    return;
 8002564:	bf00      	nop
 8002566:	e000      	b.n	800256a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002568:	bf00      	nop
  }
}
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	080025e5 	.word	0x080025e5

08002574 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025c0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695a      	ldr	r2, [r3, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f7ff ffca 	bl	8002598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b21      	cmp	r3, #33	; 0x21
 800261e:	d144      	bne.n	80026aa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002628:	d11a      	bne.n	8002660 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800263e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	1c9a      	adds	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	621a      	str	r2, [r3, #32]
 8002652:	e00e      	b.n	8002672 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	621a      	str	r2, [r3, #32]
 800265e:	e008      	b.n	8002672 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	1c59      	adds	r1, r3, #1
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6211      	str	r1, [r2, #32]
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29b      	uxth	r3, r3
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	4619      	mov	r1, r3
 8002680:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002694:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
  }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ff4c 	bl	8002574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b22      	cmp	r3, #34	; 0x22
 80026f8:	d171      	bne.n	80027de <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002702:	d123      	bne.n	800274c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10e      	bne.n	8002730 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	b29b      	uxth	r3, r3
 800271a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	1c9a      	adds	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	629a      	str	r2, [r3, #40]	; 0x28
 800272e:	e029      	b.n	8002784 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	b29b      	uxth	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
 800274a:	e01b      	b.n	8002784 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6858      	ldr	r0, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275e:	1c59      	adds	r1, r3, #1
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6291      	str	r1, [r2, #40]	; 0x28
 8002764:	b2c2      	uxtb	r2, r0
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	e00c      	b.n	8002784 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	1c58      	adds	r0, r3, #1
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	6288      	str	r0, [r1, #40]	; 0x28
 800277c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29b      	uxth	r3, r3
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4619      	mov	r1, r3
 8002792:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002794:	2b00      	cmp	r3, #0
 8002796:	d120      	bne.n	80027da <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0220 	bic.w	r2, r2, #32
 80027a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fed8 	bl	8002586 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e002      	b.n	80027e0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	4313      	orrs	r3, r2
 800281c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002828:	f023 030c 	bic.w	r3, r3, #12
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	430b      	orrs	r3, r1
 8002834:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a55      	ldr	r2, [pc, #340]	; (80029a8 <UART_SetConfig+0x1c0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d103      	bne.n	800285e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002856:	f7ff f94f 	bl	8001af8 <HAL_RCC_GetPCLK2Freq>
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	e002      	b.n	8002864 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800285e:	f7ff f937 	bl	8001ad0 <HAL_RCC_GetPCLK1Freq>
 8002862:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286c:	d14c      	bne.n	8002908 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	009a      	lsls	r2, r3, #2
 8002878:	441a      	add	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	4a49      	ldr	r2, [pc, #292]	; (80029ac <UART_SetConfig+0x1c4>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	0119      	lsls	r1, r3, #4
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009a      	lsls	r2, r3, #2
 8002898:	441a      	add	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a4:	4b41      	ldr	r3, [pc, #260]	; (80029ac <UART_SetConfig+0x1c4>)
 80028a6:	fba3 0302 	umull	r0, r3, r3, r2
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2064      	movs	r0, #100	; 0x64
 80028ae:	fb00 f303 	mul.w	r3, r0, r3
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	3332      	adds	r3, #50	; 0x32
 80028b8:	4a3c      	ldr	r2, [pc, #240]	; (80029ac <UART_SetConfig+0x1c4>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028c6:	4419      	add	r1, r3
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	009a      	lsls	r2, r3, #2
 80028d2:	441a      	add	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fbb2 f2f3 	udiv	r2, r2, r3
 80028de:	4b33      	ldr	r3, [pc, #204]	; (80029ac <UART_SetConfig+0x1c4>)
 80028e0:	fba3 0302 	umull	r0, r3, r3, r2
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	2064      	movs	r0, #100	; 0x64
 80028e8:	fb00 f303 	mul.w	r3, r0, r3
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	3332      	adds	r3, #50	; 0x32
 80028f2:	4a2e      	ldr	r2, [pc, #184]	; (80029ac <UART_SetConfig+0x1c4>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	f003 0207 	and.w	r2, r3, #7
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	440a      	add	r2, r1
 8002904:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002906:	e04a      	b.n	800299e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	009a      	lsls	r2, r3, #2
 8002912:	441a      	add	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	4a23      	ldr	r2, [pc, #140]	; (80029ac <UART_SetConfig+0x1c4>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	0119      	lsls	r1, r3, #4
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009a      	lsls	r2, r3, #2
 8002932:	441a      	add	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	fbb2 f2f3 	udiv	r2, r2, r3
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <UART_SetConfig+0x1c4>)
 8002940:	fba3 0302 	umull	r0, r3, r3, r2
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	2064      	movs	r0, #100	; 0x64
 8002948:	fb00 f303 	mul.w	r3, r0, r3
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	3332      	adds	r3, #50	; 0x32
 8002952:	4a16      	ldr	r2, [pc, #88]	; (80029ac <UART_SetConfig+0x1c4>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800295e:	4419      	add	r1, r3
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	009a      	lsls	r2, r3, #2
 800296a:	441a      	add	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	fbb2 f2f3 	udiv	r2, r2, r3
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <UART_SetConfig+0x1c4>)
 8002978:	fba3 0302 	umull	r0, r3, r3, r2
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	2064      	movs	r0, #100	; 0x64
 8002980:	fb00 f303 	mul.w	r3, r0, r3
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	3332      	adds	r3, #50	; 0x32
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <UART_SetConfig+0x1c4>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	f003 020f 	and.w	r2, r3, #15
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	440a      	add	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40013800 	.word	0x40013800
 80029ac:	51eb851f 	.word	0x51eb851f

080029b0 <__libc_init_array>:
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	2500      	movs	r5, #0
 80029b4:	4e0c      	ldr	r6, [pc, #48]	; (80029e8 <__libc_init_array+0x38>)
 80029b6:	4c0d      	ldr	r4, [pc, #52]	; (80029ec <__libc_init_array+0x3c>)
 80029b8:	1ba4      	subs	r4, r4, r6
 80029ba:	10a4      	asrs	r4, r4, #2
 80029bc:	42a5      	cmp	r5, r4
 80029be:	d109      	bne.n	80029d4 <__libc_init_array+0x24>
 80029c0:	f000 f822 	bl	8002a08 <_init>
 80029c4:	2500      	movs	r5, #0
 80029c6:	4e0a      	ldr	r6, [pc, #40]	; (80029f0 <__libc_init_array+0x40>)
 80029c8:	4c0a      	ldr	r4, [pc, #40]	; (80029f4 <__libc_init_array+0x44>)
 80029ca:	1ba4      	subs	r4, r4, r6
 80029cc:	10a4      	asrs	r4, r4, #2
 80029ce:	42a5      	cmp	r5, r4
 80029d0:	d105      	bne.n	80029de <__libc_init_array+0x2e>
 80029d2:	bd70      	pop	{r4, r5, r6, pc}
 80029d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029d8:	4798      	blx	r3
 80029da:	3501      	adds	r5, #1
 80029dc:	e7ee      	b.n	80029bc <__libc_init_array+0xc>
 80029de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029e2:	4798      	blx	r3
 80029e4:	3501      	adds	r5, #1
 80029e6:	e7f2      	b.n	80029ce <__libc_init_array+0x1e>
 80029e8:	08002a4c 	.word	0x08002a4c
 80029ec:	08002a4c 	.word	0x08002a4c
 80029f0:	08002a4c 	.word	0x08002a4c
 80029f4:	08002a50 	.word	0x08002a50

080029f8 <memset>:
 80029f8:	4603      	mov	r3, r0
 80029fa:	4402      	add	r2, r0
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d100      	bne.n	8002a02 <memset+0xa>
 8002a00:	4770      	bx	lr
 8002a02:	f803 1b01 	strb.w	r1, [r3], #1
 8002a06:	e7f9      	b.n	80029fc <memset+0x4>

08002a08 <_init>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	bf00      	nop
 8002a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0e:	bc08      	pop	{r3}
 8002a10:	469e      	mov	lr, r3
 8002a12:	4770      	bx	lr

08002a14 <_fini>:
 8002a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a16:	bf00      	nop
 8002a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1a:	bc08      	pop	{r3}
 8002a1c:	469e      	mov	lr, r3
 8002a1e:	4770      	bx	lr
