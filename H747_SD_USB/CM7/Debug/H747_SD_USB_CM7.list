
H747_SD_USB_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abb4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800ae54  0800ae54  0001ae54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b1f0  0800b1f0  0001b1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b1f8  0800b1f8  0001b1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b1fc  0800b1fc  0001b1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800b200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a44  20000074  0800b274  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000ab8  0800b274  00020ab8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002371e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003d6d  00000000  00000000  000437c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001348  00000000  00000000  00047530  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011c0  00000000  00000000  00048878  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00041def  00000000  00000000  00049a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00013813  00000000  00000000  0008b827  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0019be33  00000000  00000000  0009f03a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0023ae6d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000056a0  00000000  00000000  0023aee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ae3c 	.word	0x0800ae3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	0800ae3c 	.word	0x0800ae3c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <SystemInit+0x104>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a3e      	ldr	r2, [pc, #248]	; (8000794 <SystemInit+0x104>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <SystemInit+0x104>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <SystemInit+0x104>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b0:	4b39      	ldr	r3, [pc, #228]	; (8000798 <SystemInit+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <SystemInit+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a34      	ldr	r2, [pc, #208]	; (8000798 <SystemInit+0x108>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <SystemInit+0x10c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <SystemInit+0x10c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <SystemInit+0x10c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <SystemInit+0x10c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	492e      	ldr	r1, [pc, #184]	; (800079c <SystemInit+0x10c>)
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SystemInit+0x110>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemInit+0x108>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d907      	bls.n	8000706 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemInit+0x108>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemInit+0x108>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemInit+0x10c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemInit+0x10c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemInit+0x10c>)
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <SystemInit+0x114>)
 800071c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemInit+0x10c>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemInit+0x118>)
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemInit+0x10c>)
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x11c>)
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <SystemInit+0x10c>)
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <SystemInit+0x11c>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <SystemInit+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <SystemInit+0x10c>)
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SystemInit+0x11c>)
 8000740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <SystemInit+0x10c>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <SystemInit+0x10c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <SystemInit+0x10c>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x10c>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <SystemInit+0x120>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <SystemInit+0x120>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <SystemInit+0x124>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x128>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000772:	d202      	bcs.n	800077a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x12c>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x130>)
 800077c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000780:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SystemInit+0x104>)
 8000784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000788:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	52002000 	.word	0x52002000
 800079c:	58024400 	.word	0x58024400
 80007a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a4:	02020200 	.word	0x02020200
 80007a8:	01ff0000 	.word	0x01ff0000
 80007ac:	01010280 	.word	0x01010280
 80007b0:	580000c0 	.word	0x580000c0
 80007b4:	5c001000 	.word	0x5c001000
 80007b8:	ffff0000 	.word	0xffff0000
 80007bc:	51008108 	.word	0x51008108
 80007c0:	52004000 	.word	0x52004000

080007c4 <Send_Uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Send_Uart (char *string)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart8, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fd87 	bl	80002e0 <strlen>
 80007d2:	4603      	mov	r3, r0
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <Send_Uart+0x28>)
 80007de:	f004 fdc3 	bl	8005368 <HAL_UART_Transmit>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000150 	.word	0x20000150

080007f0 <__io_putchar>:

int __io_putchar (int ch) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, 1000);
 80007fe:	f107 010f 	add.w	r1, r7, #15
 8000802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000806:	2201      	movs	r2, #1
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <__io_putchar+0x28>)
 800080a:	f004 fdad 	bl	8005368 <HAL_UART_Transmit>
	return ch;
 800080e:	687b      	ldr	r3, [r7, #4]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000150 	.word	0x20000150

0800081c <ls_dir>:
	}
}

// List ra cây thư muc có trong thẻ nhớ
void ls_dir(char* path)
{
 800081c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000820:	b0a5      	sub	sp, #148	; 0x94
 8000822:	af0a      	add	r7, sp, #40	; 0x28
 8000824:	60f8      	str	r0, [r7, #12]
	FILINFO _Finfo;
	BYTE res;
	long p1, p2;
	UINT s1, s2;
	//while (*ptr == ' ') ptr++;
	res = f_opendir(&Dir, path);
 8000826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082a:	68f9      	ldr	r1, [r7, #12]
 800082c:	4618      	mov	r0, r3
 800082e:	f009 fa58 	bl	8009ce2 <f_opendir>
 8000832:	4603      	mov	r3, r0
 8000834:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	if (res)
 8000838:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800083c:	2b00      	cmp	r3, #0
 800083e:	f040 808d 	bne.w	800095c <ls_dir+0x140>
	{
		//put_rc(res);
		return;
	}
	p1 = s1 = s2 = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000848:	663b      	str	r3, [r7, #96]	; 0x60
 800084a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800084c:	667b      	str	r3, [r7, #100]	; 0x64

	for(;;) {
		res = f_readdir(&Dir, &_Finfo);
 800084e:	f107 0210 	add.w	r2, r7, #16
 8000852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f009 fadb 	bl	8009e14 <f_readdir>
 800085e:	4603      	mov	r3, r0
 8000860:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		if ((res != FR_OK) || !_Finfo.fname[0]) break;
 8000864:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000868:	2b00      	cmp	r3, #0
 800086a:	d171      	bne.n	8000950 <ls_dir+0x134>
 800086c:	7e7b      	ldrb	r3, [r7, #25]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d06e      	beq.n	8000950 <ls_dir+0x134>
		if (_Finfo.fattrib & AM_DIR) {
 8000872:	7e3b      	ldrb	r3, [r7, #24]
 8000874:	f003 0310 	and.w	r3, r3, #16
 8000878:	2b00      	cmp	r3, #0
 800087a:	d003      	beq.n	8000884 <ls_dir+0x68>
			s2++;
 800087c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800087e:	3301      	adds	r3, #1
 8000880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000882:	e006      	b.n	8000892 <ls_dir+0x76>
		} else {
			s1++; p1 += _Finfo.fsize;
 8000884:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000886:	3301      	adds	r3, #1
 8000888:	663b      	str	r3, [r7, #96]	; 0x60
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800088e:	4413      	add	r3, r2
 8000890:	667b      	str	r3, [r7, #100]	; 0x64
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
					(_Finfo.fattrib & AM_DIR) ? 'D' : '-',
 8000892:	7e3b      	ldrb	r3, [r7, #24]
 8000894:	f003 0310 	and.w	r3, r3, #16
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000898:	2b00      	cmp	r3, #0
 800089a:	d002      	beq.n	80008a2 <ls_dir+0x86>
 800089c:	f04f 0e44 	mov.w	lr, #68	; 0x44
 80008a0:	e001      	b.n	80008a6 <ls_dir+0x8a>
 80008a2:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
					(_Finfo.fattrib & AM_RDO) ? 'R' : '-',
 80008a6:	7e3b      	ldrb	r3, [r7, #24]
 80008a8:	f003 0301 	and.w	r3, r3, #1
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <ls_dir+0x9a>
 80008b0:	f04f 0852 	mov.w	r8, #82	; 0x52
 80008b4:	e001      	b.n	80008ba <ls_dir+0x9e>
 80008b6:	f04f 082d 	mov.w	r8, #45	; 0x2d
					(_Finfo.fattrib & AM_HID) ? 'H' : '-',
 80008ba:	7e3b      	ldrb	r3, [r7, #24]
 80008bc:	f003 0302 	and.w	r3, r3, #2
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d002      	beq.n	80008ca <ls_dir+0xae>
 80008c4:	f04f 0948 	mov.w	r9, #72	; 0x48
 80008c8:	e001      	b.n	80008ce <ls_dir+0xb2>
 80008ca:	f04f 092d 	mov.w	r9, #45	; 0x2d
					(_Finfo.fattrib & AM_SYS) ? 'S' : '-',
 80008ce:	7e3b      	ldrb	r3, [r7, #24]
 80008d0:	f003 0304 	and.w	r3, r3, #4
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <ls_dir+0xc0>
 80008d8:	2353      	movs	r3, #83	; 0x53
 80008da:	e000      	b.n	80008de <ls_dir+0xc2>
 80008dc:	232d      	movs	r3, #45	; 0x2d
					(_Finfo.fattrib & AM_ARC) ? 'A' : '-',
 80008de:	7e3a      	ldrb	r2, [r7, #24]
 80008e0:	f002 0220 	and.w	r2, r2, #32
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	d001      	beq.n	80008ec <ls_dir+0xd0>
 80008e8:	2241      	movs	r2, #65	; 0x41
 80008ea:	e000      	b.n	80008ee <ls_dir+0xd2>
 80008ec:	222d      	movs	r2, #45	; 0x2d
					(_Finfo.fdate >> 9) + 1980, (_Finfo.fdate >> 5) & 15, _Finfo.fdate & 31,
 80008ee:	8ab9      	ldrh	r1, [r7, #20]
 80008f0:	0a49      	lsrs	r1, r1, #9
 80008f2:	b289      	uxth	r1, r1
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 80008f4:	f201 71bc 	addw	r1, r1, #1980	; 0x7bc
 80008f8:	60b9      	str	r1, [r7, #8]
					(_Finfo.fdate >> 9) + 1980, (_Finfo.fdate >> 5) & 15, _Finfo.fdate & 31,
 80008fa:	8ab8      	ldrh	r0, [r7, #20]
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 80008fc:	0940      	lsrs	r0, r0, #5
 80008fe:	b280      	uxth	r0, r0
 8000900:	f000 000f 	and.w	r0, r0, #15
					(_Finfo.fdate >> 9) + 1980, (_Finfo.fdate >> 5) & 15, _Finfo.fdate & 31,
 8000904:	8abc      	ldrh	r4, [r7, #20]
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000906:	f004 041f 	and.w	r4, r4, #31
					(_Finfo.ftime >> 11), (_Finfo.ftime >> 5) & 63,
 800090a:	8afd      	ldrh	r5, [r7, #22]
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 800090c:	0aed      	lsrs	r5, r5, #11
 800090e:	b2ad      	uxth	r5, r5
 8000910:	607d      	str	r5, [r7, #4]
					(_Finfo.ftime >> 11), (_Finfo.ftime >> 5) & 63,
 8000912:	8afd      	ldrh	r5, [r7, #22]
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000914:	096d      	lsrs	r5, r5, #5
 8000916:	b2ad      	uxth	r5, r5
 8000918:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800091c:	693e      	ldr	r6, [r7, #16]
 800091e:	f107 0c10 	add.w	ip, r7, #16
 8000922:	f10c 0109 	add.w	r1, ip, #9
 8000926:	9108      	str	r1, [sp, #32]
 8000928:	9607      	str	r6, [sp, #28]
 800092a:	9506      	str	r5, [sp, #24]
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	9105      	str	r1, [sp, #20]
 8000930:	9404      	str	r4, [sp, #16]
 8000932:	9003      	str	r0, [sp, #12]
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	9102      	str	r1, [sp, #8]
 8000938:	9201      	str	r2, [sp, #4]
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	464b      	mov	r3, r9
 800093e:	4642      	mov	r2, r8
 8000940:	4671      	mov	r1, lr
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <ls_dir+0x14c>)
 8000944:	f009 fb32 	bl	8009fac <iprintf>
					_Finfo.fsize, &(_Finfo.fname[0]));
		printf("\r\n");
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <ls_dir+0x150>)
 800094a:	f009 fba3 	bl	800a094 <puts>
		res = f_readdir(&Dir, &_Finfo);
 800094e:	e77e      	b.n	800084e <ls_dir+0x32>
	}
	f_closedir(&Dir);
 8000950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000954:	4618      	mov	r0, r3
 8000956:	f009 fa37 	bl	8009dc8 <f_closedir>
 800095a:	e000      	b.n	800095e <ls_dir+0x142>
		return;
 800095c:	bf00      	nop
}
 800095e:	376c      	adds	r7, #108	; 0x6c
 8000960:	46bd      	mov	sp, r7
 8000962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000966:	bf00      	nop
 8000968:	0800ae90 	.word	0x0800ae90
 800096c:	0800aebc 	.word	0x0800aebc

08000970 <fatfs_head_file>:

// Đọc dữ liệu trong 1 file bất kì
void fatfs_head_file(const char * fn)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
 8000976:	af00      	add	r7, sp, #0
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	6018      	str	r0, [r3, #0]
	FRESULT f_err_code;
	FIL fil_obj;
	//trying to open and read file..
	f_chdir("/");
 800097c:	483b      	ldr	r0, [pc, #236]	; (8000a6c <fatfs_head_file+0xfc>)
 800097e:	f009 f966 	bl	8009c4e <f_chdir>
	f_err_code = f_open(&fil_obj, fn,FA_READ);	//Open *fn - <index.htm> for reading
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000988:	2201      	movs	r2, #1
 800098a:	6819      	ldr	r1, [r3, #0]
 800098c:	f008 fdba 	bl	8009504 <f_open>
 8000990:	4603      	mov	r3, r0
 8000992:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
	if(f_err_code==0)
 8000996:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 800099a:	2b00      	cmp	r3, #0
 800099c:	d15b      	bne.n	8000a56 <fatfs_head_file+0xe6>
	{
		DWORD file_len = fil_obj.fptr;
 800099e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
		UINT br;
		uint8_t _buf[128] = {0, };
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4618      	mov	r0, r3
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	461a      	mov	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f009 faf2 	bl	8009f9c <memset>
		printf("++Content <%s> = %lu bytes found on SDCARD\r\n", fn, file_len);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80009be:	6819      	ldr	r1, [r3, #0]
 80009c0:	482b      	ldr	r0, [pc, #172]	; (8000a70 <fatfs_head_file+0x100>)
 80009c2:	f009 faf3 	bl	8009fac <iprintf>
		printf("++Trying to read head file..\r\n");
 80009c6:	482b      	ldr	r0, [pc, #172]	; (8000a74 <fatfs_head_file+0x104>)
 80009c8:	f009 fb64 	bl	800a094 <puts>
		f_err_code = f_read(&fil_obj,&_buf[0], 128, &br);
 80009cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009d0:	f107 010c 	add.w	r1, r7, #12
 80009d4:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	f008 ff51 	bl	8009880 <f_read>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
		if(f_err_code == 0)
 80009e4:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d122      	bne.n	8000a32 <fatfs_head_file+0xc2>
		{
			if(br < 128)
 80009ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b7f      	cmp	r3, #127	; 0x7f
 80009f4:	d807      	bhi.n	8000a06 <fatfs_head_file+0x96>
				_buf[br] = 0x0;
 80009f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f107 020c 	add.w	r2, r7, #12
 8000a00:	2100      	movs	r1, #0
 8000a02:	54d1      	strb	r1, [r2, r3]
 8000a04:	e004      	b.n	8000a10 <fatfs_head_file+0xa0>
			else
				_buf[127] = 0x0;
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			printf ("OK\r\n");
 8000a10:	4819      	ldr	r0, [pc, #100]	; (8000a78 <fatfs_head_file+0x108>)
 8000a12:	f009 fb3f 	bl	800a094 <puts>
			printf("text contents reading %u bytes:\r\n", br);
 8000a16:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4817      	ldr	r0, [pc, #92]	; (8000a7c <fatfs_head_file+0x10c>)
 8000a20:	f009 fac4 	bl	8009fac <iprintf>
			printf("%s", _buf);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4815      	ldr	r0, [pc, #84]	; (8000a80 <fatfs_head_file+0x110>)
 8000a2c:	f009 fabe 	bl	8009fac <iprintf>
 8000a30:	e00b      	b.n	8000a4a <fatfs_head_file+0xda>
		}
		else
		{
			printf ("ERROR ");
 8000a32:	4814      	ldr	r0, [pc, #80]	; (8000a84 <fatfs_head_file+0x114>)
 8000a34:	f009 faba 	bl	8009fac <iprintf>
			//put_rc(f_err_code);
			printf("But anyway text contents:\r\n");
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <fatfs_head_file+0x118>)
 8000a3a:	f009 fb2b 	bl	800a094 <puts>
			printf("%s", _buf);
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	480e      	ldr	r0, [pc, #56]	; (8000a80 <fatfs_head_file+0x110>)
 8000a46:	f009 fab1 	bl	8009fac <iprintf>
		}
		f_close(&fil_obj);
 8000a4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f009 f8d3 	bl	8009bfa <f_close>
	else
	{
		printf ("ERROR opening file <%s> ", fn);
		//put_rc(f_err_code);
	}
}
 8000a54:	e004      	b.n	8000a60 <fatfs_head_file+0xf0>
		printf ("ERROR opening file <%s> ", fn);
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	6819      	ldr	r1, [r3, #0]
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <fatfs_head_file+0x11c>)
 8000a5c:	f009 faa6 	bl	8009fac <iprintf>
}
 8000a60:	bf00      	nop
 8000a62:	f507 7732 	add.w	r7, r7, #712	; 0x2c8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	0800aec0 	.word	0x0800aec0
 8000a70:	0800aec4 	.word	0x0800aec4
 8000a74:	0800aef4 	.word	0x0800aef4
 8000a78:	0800af14 	.word	0x0800af14
 8000a7c:	0800af18 	.word	0x0800af18
 8000a80:	0800ae8c 	.word	0x0800ae8c
 8000a84:	0800af3c 	.word	0x0800af3c
 8000a88:	0800af44 	.word	0x0800af44
 8000a8c:	0800af60 	.word	0x0800af60

08000a90 <fatfs_init>:

void fatfs_init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	printf(">>FS MOUNT ");
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <fatfs_init+0x3c>)
 8000a96:	f009 fa89 	bl	8009fac <iprintf>
	f_mount(&fatfs, (const TCHAR *)"", 1);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <fatfs_init+0x40>)
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <fatfs_init+0x44>)
 8000aa0:	f008 fcea 	bl	8009478 <f_mount>
	printf(">>GO ROOT DIRECTORY ");
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <fatfs_init+0x48>)
 8000aa6:	f009 fa81 	bl	8009fac <iprintf>
	f_chdir((const TCHAR *)"/");
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <fatfs_init+0x4c>)
 8000aac:	f009 f8cf 	bl	8009c4e <f_chdir>
	printf ("\r\n\r\nSD-Card root file list:\r\n");
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <fatfs_init+0x50>)
 8000ab2:	f009 faef 	bl	800a094 <puts>
	printf ("===============================================\r\n");
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <fatfs_init+0x54>)
 8000ab8:	f009 faec 	bl	800a094 <puts>
	ls_dir("/");
 8000abc:	4807      	ldr	r0, [pc, #28]	; (8000adc <fatfs_init+0x4c>)
 8000abe:	f7ff fead 	bl	800081c <ls_dir>
	printf ("===============================================\r\n\r\n");
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <fatfs_init+0x58>)
 8000ac4:	f009 fae6 	bl	800a094 <puts>

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	0800af7c 	.word	0x0800af7c
 8000ad0:	0800ae80 	.word	0x0800ae80
 8000ad4:	200001e0 	.word	0x200001e0
 8000ad8:	0800af88 	.word	0x0800af88
 8000adc:	0800aec0 	.word	0x0800aec0
 8000ae0:	0800afa0 	.word	0x0800afa0
 8000ae4:	0800afc0 	.word	0x0800afc0
 8000ae8:	0800aff4 	.word	0x0800aff4

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000af6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000af8:	bf00      	nop
 8000afa:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <main+0xdc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d004      	beq.n	8000b10 <main+0x24>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	1e5a      	subs	r2, r3, #1
 8000b0a:	607a      	str	r2, [r7, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dcf4      	bgt.n	8000afa <main+0xe>
  if ( timeout < 0 )
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da01      	bge.n	8000b1a <main+0x2e>
  {
  Error_Handler();
 8000b16:	f000 f9b3 	bl	8000e80 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1a:	f000 fb93 	bl	8001244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1e:	f000 f85b 	bl	8000bd8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <main+0xdc>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	4a27      	ldr	r2, [pc, #156]	; (8000bc8 <main+0xdc>)
 8000b2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b32:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <main+0xdc>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f001 f977 	bl	8001e34 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f001 f98d 	bl	8001e68 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b52:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b54:	bf00      	nop
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <main+0xdc>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d104      	bne.n	8000b6c <main+0x80>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	1e5a      	subs	r2, r3, #1
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dcf4      	bgt.n	8000b56 <main+0x6a>
if ( timeout < 0 )
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da01      	bge.n	8000b76 <main+0x8a>
{
Error_Handler();
 8000b72:	f000 f985 	bl	8000e80 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 f91f 	bl	8000db8 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000b7a:	f000 f8ab 	bl	8000cd4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000b7e:	f006 fcb3 	bl	80074e8 <MX_FATFS_Init>
  MX_UART8_Init();
 8000b82:	f000 f8cd 	bl	8000d20 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  //Sd_Card_Manager();

  fatfs_init();
 8000b86:	f7ff ff83 	bl	8000a90 <fatfs_init>
  fatfs_head_file("stm.txt");
 8000b8a:	4810      	ldr	r0, [pc, #64]	; (8000bcc <main+0xe0>)
 8000b8c:	f7ff fef0 	bl	8000970 <fatfs_head_file>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Send_Uart("USB mounted successfully...\n\r");
 8000b90:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <main+0xe4>)
 8000b92:	f7ff fe17 	bl	80007c4 <Send_Uart>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 8000b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9a:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <main+0xe8>)
 8000b9c:	f001 f92f 	bl	8001dfe <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 8000ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba4:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <main+0xe8>)
 8000ba6:	f001 f92a 	bl	8001dfe <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8000baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <main+0xe8>)
 8000bb0:	f001 f925 	bl	8001dfe <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
 8000bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <main+0xe8>)
 8000bba:	f001 f920 	bl	8001dfe <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc2:	f000 fbd1 	bl	8001368 <HAL_Delay>
	  Send_Uart("USB mounted successfully...\n\r");
 8000bc6:	e7e3      	b.n	8000b90 <main+0xa4>
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	0800ae84 	.word	0x0800ae84
 8000bd0:	0800b028 	.word	0x0800b028
 8000bd4:	58022000 	.word	0x58022000

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b09e      	sub	sp, #120	; 0x78
 8000bdc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000be4:	2004      	movs	r0, #4
 8000be6:	f001 f953 	bl	8001e90 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <SystemClock_Config+0xf4>)
 8000bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf2:	4a36      	ldr	r2, [pc, #216]	; (8000ccc <SystemClock_Config+0xf4>)
 8000bf4:	f023 0301 	bic.w	r3, r3, #1
 8000bf8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bfa:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <SystemClock_Config+0xf4>)
 8000bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <SystemClock_Config+0xf8>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a31      	ldr	r2, [pc, #196]	; (8000cd0 <SystemClock_Config+0xf8>)
 8000c0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <SystemClock_Config+0xf8>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c1c:	bf00      	nop
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <SystemClock_Config+0xf8>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c2a:	d1f8      	bne.n	8000c1e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c34:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c42:	2302      	movs	r3, #2
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c46:	2305      	movs	r3, #5
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c4a:	23a0      	movs	r3, #160	; 0xa0
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c62:	2308      	movs	r3, #8
 8000c64:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 f96a 	bl	8001f44 <HAL_RCC_OscConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000c76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c7e:	f000 f8ff 	bl	8000e80 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000c82:	233f      	movs	r3, #63	; 0x3f
 8000c84:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2303      	movs	r3, #3
 8000c88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c92:	2340      	movs	r3, #64	; 0x40
 8000c94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c96:	2340      	movs	r3, #64	; 0x40
 8000c98:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ca0:	2340      	movs	r3, #64	; 0x40
 8000ca2:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000ca4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ca8:	2104      	movs	r1, #4
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fd5a 	bl	8002764 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000cb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000cbe:	f000 f8df 	bl	8000e80 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 8000cc2:	bf00      	nop
 8000cc4:	3778      	adds	r7, #120	; 0x78
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	58000400 	.word	0x58000400
 8000cd0:	58024800 	.word	0x58024800

08000cd4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_SDMMC1_SD_Init+0x44>)
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <MX_SDMMC1_SD_Init+0x48>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_SDMMC1_SD_Init+0x44>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_SDMMC1_SD_Init+0x44>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_SDMMC1_SD_Init+0x44>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_SDMMC1_SD_Init+0x44>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_SDMMC1_SD_Init+0x44>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_SDMMC1_SD_Init+0x44>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_SDMMC1_SD_Init+0x44>)
 8000d04:	f002 ff24 	bl	8003b50 <HAL_SD_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000d0e:	f000 f8b7 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000d0 	.word	0x200000d0
 8000d1c:	52007000 	.word	0x52007000

08000d20 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <MX_UART8_Init+0x94>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d6a:	f004 faad 	bl	80052c8 <HAL_UART_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000d74:	f000 f884 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d7c:	f005 fce3 	bl	8006746 <HAL_UARTEx_SetTxFifoThreshold>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000d86:	f000 f87b 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d8e:	f005 fd18 	bl	80067c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000d98:	f000 f872 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_UART8_Init+0x90>)
 8000d9e:	f005 fc99 	bl	80066d4 <HAL_UARTEx_DisableFifoMode>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000da8:	f000 f86a 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000150 	.word	0x20000150
 8000db4:	40007c00 	.word	0x40007c00

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	4a28      	ldr	r2, [pc, #160]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df2:	4a21      	ldr	r2, [pc, #132]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	4a19      	ldr	r2, [pc, #100]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <MX_GPIO_Init+0xc4>)
 8000e4e:	f000 ffbd 	bl	8001dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e52:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_GPIO_Init+0xc4>)
 8000e6c:	f000 fdfe 	bl	8001a6c <HAL_GPIO_Init>

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	58022000 	.word	0x58022000

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_MspInit+0x30>)
 8000e98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e9c:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_MspInit+0x30>)
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_MspInit+0x30>)
 8000ea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	58024400 	.word	0x58024400

08000ec4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	; (8000f8c <HAL_SD_MspInit+0xc8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d14d      	bne.n	8000f82 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_SD_MspInit+0xcc>)
 8000ee8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000eec:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <HAL_SD_MspInit+0xcc>)
 8000eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <HAL_SD_MspInit+0xcc>)
 8000ef8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <HAL_SD_MspInit+0xcc>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <HAL_SD_MspInit+0xcc>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <HAL_SD_MspInit+0xcc>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_SD_MspInit+0xcc>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_SD_MspInit+0xcc>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_SD_MspInit+0xcc>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000f40:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f52:	230c      	movs	r3, #12
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <HAL_SD_MspInit+0xd0>)
 8000f5e:	f000 fd85 	bl	8001a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f62:	2304      	movs	r3, #4
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f72:	230c      	movs	r3, #12
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <HAL_SD_MspInit+0xd4>)
 8000f7e:	f000 fd75 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	52007000 	.word	0x52007000
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58020800 	.word	0x58020800
 8000f98:	58020c00 	.word	0x58020c00

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d136      	bne.n	800102c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <HAL_UART_MspInit+0x9c>)
 8000fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc4:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <HAL_UART_MspInit+0x9c>)
 8000fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <HAL_UART_MspInit+0x9c>)
 8000fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_UART_MspInit+0x9c>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a15      	ldr	r2, [pc, #84]	; (8001038 <HAL_UART_MspInit+0x9c>)
 8000fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_UART_MspInit+0x9c>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000ffa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800100c:	2308      	movs	r3, #8
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <HAL_UART_MspInit+0xa0>)
 8001018:	f000 fd28 	bl	8001a6c <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2053      	movs	r0, #83	; 0x53
 8001022:	f000 faaa 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001026:	2053      	movs	r0, #83	; 0x53
 8001028:	f000 fac1 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40007c00 	.word	0x40007c00
 8001038:	58024400 	.word	0x58024400
 800103c:	58022400 	.word	0x58022400

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <NMI_Handler+0x4>

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108c:	f000 f94c 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <UART8_IRQHandler+0x10>)
 800109a:	f004 f9fb 	bl	8005494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000150 	.word	0x20000150

080010a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e00a      	b.n	80010d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ba:	f3af 8000 	nop.w
 80010be:	4601      	mov	r1, r0
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf0      	blt.n	80010ba <_read+0x12>
	}

return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	e009      	b.n	8001108 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	60ba      	str	r2, [r7, #8]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fb77 	bl	80007f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbf1      	blt.n	80010f4 <_write+0x12>
	}
	return len;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_close>:

int _close(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
	return -1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001142:	605a      	str	r2, [r3, #4]
	return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_isatty>:

int _isatty(int file)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
	return 1;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
	return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <_sbrk+0x5c>)
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <_sbrk+0x60>)
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <_sbrk+0x64>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <_sbrk+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d207      	bcs.n	80011c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b4:	f008 fec8 	bl	8009f48 <__errno>
 80011b8:	4602      	mov	r2, r0
 80011ba:	230c      	movs	r3, #12
 80011bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e009      	b.n	80011d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <_sbrk+0x64>)
 80011d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20020000 	.word	0x20020000
 80011e4:	00000400 	.word	0x00000400
 80011e8:	20000090 	.word	0x20000090
 80011ec:	20000ab8 	.word	0x20000ab8

080011f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001228 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011f4:	f7ff fa4c 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011fa:	e003      	b.n	8001204 <LoopCopyDataInit>

080011fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80011fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001200:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001202:	3104      	adds	r1, #4

08001204 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001204:	480a      	ldr	r0, [pc, #40]	; (8001230 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001208:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800120a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800120c:	d3f6      	bcc.n	80011fc <CopyDataInit>
  ldr  r2, =_sbss
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001210:	e002      	b.n	8001218 <LoopFillZerobss>

08001212 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001212:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001214:	f842 3b04 	str.w	r3, [r2], #4

08001218 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800121a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800121c:	d3f9      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121e:	f008 fe99 	bl	8009f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001222:	f7ff fc63 	bl	8000aec <main>
  bx  lr    
 8001226:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001228:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800122c:	0800b200 	.word	0x0800b200
  ldr  r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001234:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001238:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800123c:	20000ab8 	.word	0x20000ab8

08001240 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC3_IRQHandler>
	...

08001244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124a:	2003      	movs	r0, #3
 800124c:	f000 f98a 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001250:	f001 fc3e 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8001254:	4601      	mov	r1, r0
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_Init+0x68>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	f003 030f 	and.w	r3, r3, #15
 8001260:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <HAL_Init+0x6c>)
 8001262:	5cd3      	ldrb	r3, [r2, r3]
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	fa21 f303 	lsr.w	r3, r1, r3
 800126c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_Init+0x68>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_Init+0x6c>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	f003 031f 	and.w	r3, r3, #31
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <HAL_Init+0x70>)
 8001286:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001288:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <HAL_Init+0x74>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f814 	bl	80012bc <HAL_InitTick>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e002      	b.n	80012a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800129e:	f7ff fdf7 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	58024400 	.word	0x58024400
 80012b0:	0800b09c 	.word	0x0800b09c
 80012b4:	20000004 	.word	0x20000004
 80012b8:	20000000 	.word	0x20000000

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_InitTick+0x60>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e021      	b.n	8001314 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <HAL_InitTick+0x64>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_InitTick+0x60>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f96f 	bl	80015ca <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 f939 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x68>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000000c 	.word	0x2000000c
 8001320:	20000000 	.word	0x20000000
 8001324:	20000008 	.word	0x20000008

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	2000000c 	.word	0x2000000c
 800134c:	20000644 	.word	0x20000644

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000644 	.word	0x20000644

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_Delay+0x40>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffde 	bl	8001350 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000000c 	.word	0x2000000c

080013ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetREVID+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	0c1b      	lsrs	r3, r3, #16
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	5c001000 	.word	0x5c001000

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <__NVIC_SetPriorityGrouping+0x40>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x40>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	05fa0000 	.word	0x05fa0000

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4907      	ldr	r1, [pc, #28]	; (8001460 <__NVIC_EnableIRQ+0x38>)
 8001442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff29 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff40 	bl	800140c <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff90 	bl	80014b8 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5f 	bl	8001464 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff33 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa4 	bl	8001520 <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e205      	b.n	8001a02 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d004      	beq.n	800160c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e1fa      	b.n	8001a02 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a8c      	ldr	r2, [pc, #560]	; (8001844 <HAL_DMA_Abort_IT+0x260>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d04a      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a8b      	ldr	r2, [pc, #556]	; (8001848 <HAL_DMA_Abort_IT+0x264>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d045      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a89      	ldr	r2, [pc, #548]	; (800184c <HAL_DMA_Abort_IT+0x268>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d040      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a88      	ldr	r2, [pc, #544]	; (8001850 <HAL_DMA_Abort_IT+0x26c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d03b      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a86      	ldr	r2, [pc, #536]	; (8001854 <HAL_DMA_Abort_IT+0x270>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d036      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a85      	ldr	r2, [pc, #532]	; (8001858 <HAL_DMA_Abort_IT+0x274>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d031      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a83      	ldr	r2, [pc, #524]	; (800185c <HAL_DMA_Abort_IT+0x278>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d02c      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a82      	ldr	r2, [pc, #520]	; (8001860 <HAL_DMA_Abort_IT+0x27c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d027      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a80      	ldr	r2, [pc, #512]	; (8001864 <HAL_DMA_Abort_IT+0x280>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d022      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a7f      	ldr	r2, [pc, #508]	; (8001868 <HAL_DMA_Abort_IT+0x284>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d01d      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a7d      	ldr	r2, [pc, #500]	; (800186c <HAL_DMA_Abort_IT+0x288>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d018      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7c      	ldr	r2, [pc, #496]	; (8001870 <HAL_DMA_Abort_IT+0x28c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d013      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a7a      	ldr	r2, [pc, #488]	; (8001874 <HAL_DMA_Abort_IT+0x290>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00e      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a79      	ldr	r2, [pc, #484]	; (8001878 <HAL_DMA_Abort_IT+0x294>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d009      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a77      	ldr	r2, [pc, #476]	; (800187c <HAL_DMA_Abort_IT+0x298>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d004      	beq.n	80016ac <HAL_DMA_Abort_IT+0xc8>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a76      	ldr	r2, [pc, #472]	; (8001880 <HAL_DMA_Abort_IT+0x29c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_DMA_Abort_IT+0xcc>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_DMA_Abort_IT+0xce>
 80016b0:	2300      	movs	r3, #0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d065      	beq.n	8001782 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2204      	movs	r2, #4
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a60      	ldr	r2, [pc, #384]	; (8001844 <HAL_DMA_Abort_IT+0x260>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d04a      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a5e      	ldr	r2, [pc, #376]	; (8001848 <HAL_DMA_Abort_IT+0x264>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d045      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a5d      	ldr	r2, [pc, #372]	; (800184c <HAL_DMA_Abort_IT+0x268>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d040      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a5b      	ldr	r2, [pc, #364]	; (8001850 <HAL_DMA_Abort_IT+0x26c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d03b      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a5a      	ldr	r2, [pc, #360]	; (8001854 <HAL_DMA_Abort_IT+0x270>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d036      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a58      	ldr	r2, [pc, #352]	; (8001858 <HAL_DMA_Abort_IT+0x274>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d031      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a57      	ldr	r2, [pc, #348]	; (800185c <HAL_DMA_Abort_IT+0x278>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d02c      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a55      	ldr	r2, [pc, #340]	; (8001860 <HAL_DMA_Abort_IT+0x27c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d027      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a54      	ldr	r2, [pc, #336]	; (8001864 <HAL_DMA_Abort_IT+0x280>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d022      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <HAL_DMA_Abort_IT+0x284>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d01d      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a51      	ldr	r2, [pc, #324]	; (800186c <HAL_DMA_Abort_IT+0x288>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d018      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <HAL_DMA_Abort_IT+0x28c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_DMA_Abort_IT+0x290>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d00e      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_DMA_Abort_IT+0x294>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d009      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_DMA_Abort_IT+0x298>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d004      	beq.n	800175e <HAL_DMA_Abort_IT+0x17a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a49      	ldr	r2, [pc, #292]	; (8001880 <HAL_DMA_Abort_IT+0x29c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d108      	bne.n	8001770 <HAL_DMA_Abort_IT+0x18c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e147      	b.n	8001a00 <HAL_DMA_Abort_IT+0x41c>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e13e      	b.n	8001a00 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 020e 	bic.w	r2, r2, #14
 8001790:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2b      	ldr	r2, [pc, #172]	; (8001844 <HAL_DMA_Abort_IT+0x260>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d04a      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a29      	ldr	r2, [pc, #164]	; (8001848 <HAL_DMA_Abort_IT+0x264>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d045      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a28      	ldr	r2, [pc, #160]	; (800184c <HAL_DMA_Abort_IT+0x268>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d040      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a26      	ldr	r2, [pc, #152]	; (8001850 <HAL_DMA_Abort_IT+0x26c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d03b      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a25      	ldr	r2, [pc, #148]	; (8001854 <HAL_DMA_Abort_IT+0x270>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d036      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_DMA_Abort_IT+0x274>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d031      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a22      	ldr	r2, [pc, #136]	; (800185c <HAL_DMA_Abort_IT+0x278>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d02c      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a20      	ldr	r2, [pc, #128]	; (8001860 <HAL_DMA_Abort_IT+0x27c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d027      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <HAL_DMA_Abort_IT+0x280>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d022      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_DMA_Abort_IT+0x284>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01d      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <HAL_DMA_Abort_IT+0x288>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d018      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_DMA_Abort_IT+0x28c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_DMA_Abort_IT+0x290>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00e      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_DMA_Abort_IT+0x294>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d009      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a16      	ldr	r2, [pc, #88]	; (800187c <HAL_DMA_Abort_IT+0x298>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d004      	beq.n	8001832 <HAL_DMA_Abort_IT+0x24e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <HAL_DMA_Abort_IT+0x29c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d128      	bne.n	8001884 <HAL_DMA_Abort_IT+0x2a0>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e027      	b.n	8001894 <HAL_DMA_Abort_IT+0x2b0>
 8001844:	40020010 	.word	0x40020010
 8001848:	40020028 	.word	0x40020028
 800184c:	40020040 	.word	0x40020040
 8001850:	40020058 	.word	0x40020058
 8001854:	40020070 	.word	0x40020070
 8001858:	40020088 	.word	0x40020088
 800185c:	400200a0 	.word	0x400200a0
 8001860:	400200b8 	.word	0x400200b8
 8001864:	40020410 	.word	0x40020410
 8001868:	40020428 	.word	0x40020428
 800186c:	40020440 	.word	0x40020440
 8001870:	40020458 	.word	0x40020458
 8001874:	40020470 	.word	0x40020470
 8001878:	40020488 	.word	0x40020488
 800187c:	400204a0 	.word	0x400204a0
 8001880:	400204b8 	.word	0x400204b8
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_DMA_Abort_IT+0x428>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d072      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a5b      	ldr	r2, [pc, #364]	; (8001a10 <HAL_DMA_Abort_IT+0x42c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d06d      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a59      	ldr	r2, [pc, #356]	; (8001a14 <HAL_DMA_Abort_IT+0x430>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d068      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_DMA_Abort_IT+0x434>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d063      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a56      	ldr	r2, [pc, #344]	; (8001a1c <HAL_DMA_Abort_IT+0x438>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d05e      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a55      	ldr	r2, [pc, #340]	; (8001a20 <HAL_DMA_Abort_IT+0x43c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d059      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a53      	ldr	r2, [pc, #332]	; (8001a24 <HAL_DMA_Abort_IT+0x440>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d054      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_DMA_Abort_IT+0x444>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d04f      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a50      	ldr	r2, [pc, #320]	; (8001a2c <HAL_DMA_Abort_IT+0x448>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d04a      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <HAL_DMA_Abort_IT+0x44c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d045      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_DMA_Abort_IT+0x450>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d040      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a4c      	ldr	r2, [pc, #304]	; (8001a38 <HAL_DMA_Abort_IT+0x454>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d03b      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a4a      	ldr	r2, [pc, #296]	; (8001a3c <HAL_DMA_Abort_IT+0x458>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d036      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a49      	ldr	r2, [pc, #292]	; (8001a40 <HAL_DMA_Abort_IT+0x45c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d031      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_DMA_Abort_IT+0x460>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d02c      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a46      	ldr	r2, [pc, #280]	; (8001a48 <HAL_DMA_Abort_IT+0x464>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d027      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <HAL_DMA_Abort_IT+0x468>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d022      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a43      	ldr	r2, [pc, #268]	; (8001a50 <HAL_DMA_Abort_IT+0x46c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d01d      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a41      	ldr	r2, [pc, #260]	; (8001a54 <HAL_DMA_Abort_IT+0x470>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d018      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a40      	ldr	r2, [pc, #256]	; (8001a58 <HAL_DMA_Abort_IT+0x474>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a3e      	ldr	r2, [pc, #248]	; (8001a5c <HAL_DMA_Abort_IT+0x478>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00e      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a3d      	ldr	r2, [pc, #244]	; (8001a60 <HAL_DMA_Abort_IT+0x47c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d009      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <HAL_DMA_Abort_IT+0x480>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d004      	beq.n	8001984 <HAL_DMA_Abort_IT+0x3a0>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <HAL_DMA_Abort_IT+0x484>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_DMA_Abort_IT+0x3a4>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_DMA_Abort_IT+0x3a6>
 8001988:	2300      	movs	r3, #0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d028      	beq.n	80019e0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800199c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2201      	movs	r2, #1
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80019bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40020010 	.word	0x40020010
 8001a10:	40020028 	.word	0x40020028
 8001a14:	40020040 	.word	0x40020040
 8001a18:	40020058 	.word	0x40020058
 8001a1c:	40020070 	.word	0x40020070
 8001a20:	40020088 	.word	0x40020088
 8001a24:	400200a0 	.word	0x400200a0
 8001a28:	400200b8 	.word	0x400200b8
 8001a2c:	40020410 	.word	0x40020410
 8001a30:	40020428 	.word	0x40020428
 8001a34:	40020440 	.word	0x40020440
 8001a38:	40020458 	.word	0x40020458
 8001a3c:	40020470 	.word	0x40020470
 8001a40:	40020488 	.word	0x40020488
 8001a44:	400204a0 	.word	0x400204a0
 8001a48:	400204b8 	.word	0x400204b8
 8001a4c:	58025408 	.word	0x58025408
 8001a50:	5802541c 	.word	0x5802541c
 8001a54:	58025430 	.word	0x58025430
 8001a58:	58025444 	.word	0x58025444
 8001a5c:	58025458 	.word	0x58025458
 8001a60:	5802546c 	.word	0x5802546c
 8001a64:	58025480 	.word	0x58025480
 8001a68:	58025494 	.word	0x58025494

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a7a:	4b89      	ldr	r3, [pc, #548]	; (8001ca0 <HAL_GPIO_Init+0x234>)
 8001a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a7e:	e194      	b.n	8001daa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8186 	beq.w	8001da4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d00b      	beq.n	8001ab8 <HAL_GPIO_Init+0x4c>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d007      	beq.n	8001ab8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aac:	2b11      	cmp	r3, #17
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b12      	cmp	r3, #18
 8001ab6:	d130      	bne.n	8001b1a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aee:	2201      	movs	r2, #1
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 0201 	and.w	r2, r3, #1
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0xee>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b12      	cmp	r3, #18
 8001b58:	d123      	bne.n	8001ba2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	08da      	lsrs	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3208      	adds	r2, #8
 8001b9c:	69b9      	ldr	r1, [r7, #24]
 8001b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0203 	and.w	r2, r3, #3
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80e0 	beq.w	8001da4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be4:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <HAL_GPIO_Init+0x238>)
 8001be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bea:	4a2e      	ldr	r2, [pc, #184]	; (8001ca4 <HAL_GPIO_Init+0x238>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <HAL_GPIO_Init+0x238>)
 8001bf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c02:	4a29      	ldr	r2, [pc, #164]	; (8001ca8 <HAL_GPIO_Init+0x23c>)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a20      	ldr	r2, [pc, #128]	; (8001cac <HAL_GPIO_Init+0x240>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d052      	beq.n	8001cd4 <HAL_GPIO_Init+0x268>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_GPIO_Init+0x244>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d031      	beq.n	8001c9a <HAL_GPIO_Init+0x22e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <HAL_GPIO_Init+0x248>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02b      	beq.n	8001c96 <HAL_GPIO_Init+0x22a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1d      	ldr	r2, [pc, #116]	; (8001cb8 <HAL_GPIO_Init+0x24c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d025      	beq.n	8001c92 <HAL_GPIO_Init+0x226>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_GPIO_Init+0x250>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01f      	beq.n	8001c8e <HAL_GPIO_Init+0x222>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <HAL_GPIO_Init+0x254>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x21e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <HAL_GPIO_Init+0x258>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x21a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <HAL_GPIO_Init+0x25c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x216>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <HAL_GPIO_Init+0x260>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x212>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <HAL_GPIO_Init+0x264>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x20e>
 8001c76:	2309      	movs	r3, #9
 8001c78:	e02d      	b.n	8001cd6 <HAL_GPIO_Init+0x26a>
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	e02b      	b.n	8001cd6 <HAL_GPIO_Init+0x26a>
 8001c7e:	2308      	movs	r3, #8
 8001c80:	e029      	b.n	8001cd6 <HAL_GPIO_Init+0x26a>
 8001c82:	2307      	movs	r3, #7
 8001c84:	e027      	b.n	8001cd6 <HAL_GPIO_Init+0x26a>
 8001c86:	2306      	movs	r3, #6
 8001c88:	e025      	b.n	8001cd6 <HAL_GPIO_Init+0x26a>
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	e023      	b.n	8001cd6 <HAL_GPIO_Init+0x26a>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e021      	b.n	8001cd6 <HAL_GPIO_Init+0x26a>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e01f      	b.n	8001cd6 <HAL_GPIO_Init+0x26a>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e01d      	b.n	8001cd6 <HAL_GPIO_Init+0x26a>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e01b      	b.n	8001cd6 <HAL_GPIO_Init+0x26a>
 8001c9e:	bf00      	nop
 8001ca0:	58000080 	.word	0x58000080
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	58000400 	.word	0x58000400
 8001cac:	58020000 	.word	0x58020000
 8001cb0:	58020400 	.word	0x58020400
 8001cb4:	58020800 	.word	0x58020800
 8001cb8:	58020c00 	.word	0x58020c00
 8001cbc:	58021000 	.word	0x58021000
 8001cc0:	58021400 	.word	0x58021400
 8001cc4:	58021800 	.word	0x58021800
 8001cc8:	58021c00 	.word	0x58021c00
 8001ccc:	58022000 	.word	0x58022000
 8001cd0:	58022400 	.word	0x58022400
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	f002 0203 	and.w	r2, r2, #3
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce6:	4938      	ldr	r1, [pc, #224]	; (8001dc8 <HAL_GPIO_Init+0x35c>)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	3301      	adds	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f47f ae63 	bne.w	8001a80 <HAL_GPIO_Init+0x14>
  }
}
 8001dba:	bf00      	nop
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	58000400 	.word	0x58000400

08001dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ddc:	787b      	ldrb	r3, [r7, #1]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001de8:	e003      	b.n	8001df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	041a      	lsls	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	619a      	str	r2, [r3, #24]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	401a      	ands	r2, r3
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d104      	bne.n	8001e22 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	041a      	lsls	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	619a      	str	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e3c:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_HSEM_FastTake+0x2c>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3320      	adds	r3, #32
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_HSEM_FastTake+0x30>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e000      	b.n	8001e52 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	58026400 	.word	0x58026400
 8001e64:	80000300 	.word	0x80000300

08001e68 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001e72:	4906      	ldr	r1, [pc, #24]	; (8001e8c <HAL_HSEM_Release+0x24>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	58026400 	.word	0x58026400

08001e90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	2b06      	cmp	r3, #6
 8001ea2:	d00a      	beq.n	8001eba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e040      	b.n	8001f38 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e03e      	b.n	8001f38 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001ec2:	491f      	ldr	r1, [pc, #124]	; (8001f40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001eca:	f7ff fa41 	bl	8001350 <HAL_GetTick>
 8001ece:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ed0:	e009      	b.n	8001ee6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ed2:	f7ff fa3d 	bl	8001350 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ee0:	d901      	bls.n	8001ee6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e028      	b.n	8001f38 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef2:	d1ee      	bne.n	8001ed2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b1e      	cmp	r3, #30
 8001ef8:	d008      	beq.n	8001f0c <HAL_PWREx_ConfigSupply+0x7c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b2e      	cmp	r3, #46	; 0x2e
 8001efe:	d005      	beq.n	8001f0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b1d      	cmp	r3, #29
 8001f04:	d002      	beq.n	8001f0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b2d      	cmp	r3, #45	; 0x2d
 8001f0a:	d114      	bne.n	8001f36 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001f0c:	f7ff fa20 	bl	8001350 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f12:	e009      	b.n	8001f28 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f14:	f7ff fa1c 	bl	8001350 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f22:	d901      	bls.n	8001f28 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e007      	b.n	8001f38 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d1ee      	bne.n	8001f14 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	58024800 	.word	0x58024800

08001f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	; 0x30
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e3ff      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8087 	beq.w	8002072 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f64:	4b99      	ldr	r3, [pc, #612]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f6e:	4b97      	ldr	r3, [pc, #604]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d007      	beq.n	8001f8a <HAL_RCC_OscConfig+0x46>
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	2b18      	cmp	r3, #24
 8001f7e:	d110      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x5e>
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d10b      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8a:	4b90      	ldr	r3, [pc, #576]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d06c      	beq.n	8002070 <HAL_RCC_OscConfig+0x12c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d168      	bne.n	8002070 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e3d9      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x76>
 8001fac:	4b87      	ldr	r3, [pc, #540]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a86      	ldr	r2, [pc, #536]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	e02e      	b.n	8002018 <HAL_RCC_OscConfig+0xd4>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x98>
 8001fc2:	4b82      	ldr	r3, [pc, #520]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a81      	ldr	r2, [pc, #516]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b7f      	ldr	r3, [pc, #508]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a7e      	ldr	r2, [pc, #504]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e01d      	b.n	8002018 <HAL_RCC_OscConfig+0xd4>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0xbc>
 8001fe6:	4b79      	ldr	r3, [pc, #484]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a78      	ldr	r2, [pc, #480]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b76      	ldr	r3, [pc, #472]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a75      	ldr	r2, [pc, #468]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0xd4>
 8002000:	4b72      	ldr	r3, [pc, #456]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a71      	ldr	r2, [pc, #452]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8002006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b6f      	ldr	r3, [pc, #444]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6e      	ldr	r2, [pc, #440]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8002012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d013      	beq.n	8002048 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff f996 	bl	8001350 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002028:	f7ff f992 	bl	8001350 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e38d      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800203a:	4b64      	ldr	r3, [pc, #400]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0xe4>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7ff f982 	bl	8001350 <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff f97e 	bl	8001350 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e379      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002062:	4b5a      	ldr	r3, [pc, #360]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x10c>
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80ae 	beq.w	80021dc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002088:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800208a:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_RCC_OscConfig+0x162>
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	2b18      	cmp	r3, #24
 800209a:	d13a      	bne.n	8002112 <HAL_RCC_OscConfig+0x1ce>
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d135      	bne.n	8002112 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x17a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e34b      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	f7ff f975 	bl	80013ac <HAL_GetREVID>
 80020c2:	4602      	mov	r2, r0
 80020c4:	f241 0303 	movw	r3, #4099	; 0x1003
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d817      	bhi.n	80020fc <HAL_RCC_OscConfig+0x1b8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b40      	cmp	r3, #64	; 0x40
 80020d2:	d108      	bne.n	80020e6 <HAL_RCC_OscConfig+0x1a2>
 80020d4:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80020dc:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 80020de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e4:	e07a      	b.n	80021dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	031b      	lsls	r3, r3, #12
 80020f4:	4935      	ldr	r1, [pc, #212]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020fa:	e06f      	b.n	80021dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b33      	ldr	r3, [pc, #204]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	4930      	ldr	r1, [pc, #192]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002110:	e064      	b.n	80021dc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d045      	beq.n	80021a6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0219 	bic.w	r2, r3, #25
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	4929      	ldr	r1, [pc, #164]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff f910 	bl	8001350 <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002134:	f7ff f90c 	bl	8001350 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e307      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	f7ff f92b 	bl	80013ac <HAL_GetREVID>
 8002156:	4602      	mov	r2, r0
 8002158:	f241 0303 	movw	r3, #4099	; 0x1003
 800215c:	429a      	cmp	r2, r3
 800215e:	d817      	bhi.n	8002190 <HAL_RCC_OscConfig+0x24c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d108      	bne.n	800217a <HAL_RCC_OscConfig+0x236>
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002170:	4a16      	ldr	r2, [pc, #88]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8002172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002176:	6053      	str	r3, [r2, #4]
 8002178:	e030      	b.n	80021dc <HAL_RCC_OscConfig+0x298>
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	031b      	lsls	r3, r3, #12
 8002188:	4910      	ldr	r1, [pc, #64]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
 800218e:	e025      	b.n	80021dc <HAL_RCC_OscConfig+0x298>
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	490b      	ldr	r1, [pc, #44]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	e01a      	b.n	80021dc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a08      	ldr	r2, [pc, #32]	; (80021cc <HAL_RCC_OscConfig+0x288>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff f8cd 	bl	8001350 <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ba:	f7ff f8c9 	bl	8001350 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d903      	bls.n	80021d0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e2c4      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
 80021cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021d0:	4ba4      	ldr	r3, [pc, #656]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ee      	bne.n	80021ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80a9 	beq.w	800233c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ea:	4b9e      	ldr	r3, [pc, #632]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021f4:	4b9b      	ldr	r3, [pc, #620]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d007      	beq.n	8002210 <HAL_RCC_OscConfig+0x2cc>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b18      	cmp	r3, #24
 8002204:	d13a      	bne.n	800227c <HAL_RCC_OscConfig+0x338>
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d135      	bne.n	800227c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002210:	4b94      	ldr	r3, [pc, #592]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_OscConfig+0x2e4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e296      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002228:	f7ff f8c0 	bl	80013ac <HAL_GetREVID>
 800222c:	4602      	mov	r2, r0
 800222e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002232:	429a      	cmp	r2, r3
 8002234:	d817      	bhi.n	8002266 <HAL_RCC_OscConfig+0x322>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	2b20      	cmp	r3, #32
 800223c:	d108      	bne.n	8002250 <HAL_RCC_OscConfig+0x30c>
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002246:	4a87      	ldr	r2, [pc, #540]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800224c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800224e:	e075      	b.n	800233c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002250:	4b84      	ldr	r3, [pc, #528]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	069b      	lsls	r3, r3, #26
 800225e:	4981      	ldr	r1, [pc, #516]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002264:	e06a      	b.n	800233c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002266:	4b7f      	ldr	r3, [pc, #508]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	061b      	lsls	r3, r3, #24
 8002274:	497b      	ldr	r1, [pc, #492]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002276:	4313      	orrs	r3, r2
 8002278:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800227a:	e05f      	b.n	800233c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d042      	beq.n	800230a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002284:	4b77      	ldr	r3, [pc, #476]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a76      	ldr	r2, [pc, #472]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 800228a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff f85e 	bl	8001350 <HAL_GetTick>
 8002294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002298:	f7ff f85a 	bl	8001350 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e255      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022aa:	4b6e      	ldr	r3, [pc, #440]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022b6:	f7ff f879 	bl	80013ac <HAL_GetREVID>
 80022ba:	4602      	mov	r2, r0
 80022bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d817      	bhi.n	80022f4 <HAL_RCC_OscConfig+0x3b0>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d108      	bne.n	80022de <HAL_RCC_OscConfig+0x39a>
 80022cc:	4b65      	ldr	r3, [pc, #404]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80022d4:	4a63      	ldr	r2, [pc, #396]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80022d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022da:	6053      	str	r3, [r2, #4]
 80022dc:	e02e      	b.n	800233c <HAL_RCC_OscConfig+0x3f8>
 80022de:	4b61      	ldr	r3, [pc, #388]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	069b      	lsls	r3, r3, #26
 80022ec:	495d      	ldr	r1, [pc, #372]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
 80022f2:	e023      	b.n	800233c <HAL_RCC_OscConfig+0x3f8>
 80022f4:	4b5b      	ldr	r3, [pc, #364]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	4958      	ldr	r1, [pc, #352]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002304:	4313      	orrs	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
 8002308:	e018      	b.n	800233c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800230a:	4b56      	ldr	r3, [pc, #344]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a55      	ldr	r2, [pc, #340]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7ff f81b 	bl	8001350 <HAL_GetTick>
 800231a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800231e:	f7ff f817 	bl	8001350 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e212      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002330:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d036      	beq.n	80023b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d019      	beq.n	8002384 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002350:	4b44      	ldr	r3, [pc, #272]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002354:	4a43      	ldr	r2, [pc, #268]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7fe fff8 	bl	8001350 <HAL_GetTick>
 8002360:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002364:	f7fe fff4 	bl	8001350 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1ef      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x420>
 8002382:	e018      	b.n	80023b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002384:	4b37      	ldr	r3, [pc, #220]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002388:	4a36      	ldr	r2, [pc, #216]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7fe ffde 	bl	8001350 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002398:	f7fe ffda 	bl	8001350 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1d5      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80023ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d036      	beq.n	8002430 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d019      	beq.n	80023fe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a25      	ldr	r2, [pc, #148]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80023d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023d6:	f7fe ffbb 	bl	8001350 <HAL_GetTick>
 80023da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023de:	f7fe ffb7 	bl	8001350 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e1b2      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x49a>
 80023fc:	e018      	b.n	8002430 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a18      	ldr	r2, [pc, #96]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002408:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800240a:	f7fe ffa1 	bl	8001350 <HAL_GetTick>
 800240e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002412:	f7fe ff9d 	bl	8001350 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e198      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_RCC_OscConfig+0x520>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8085 	beq.w	8002548 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_RCC_OscConfig+0x524>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_RCC_OscConfig+0x524>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002448:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800244a:	f7fe ff81 	bl	8001350 <HAL_GetTick>
 800244e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002450:	e00c      	b.n	800246c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002452:	f7fe ff7d 	bl	8001350 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d905      	bls.n	800246c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e178      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
 8002464:	58024400 	.word	0x58024400
 8002468:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800246c:	4b96      	ldr	r3, [pc, #600]	; (80026c8 <HAL_RCC_OscConfig+0x784>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0ec      	beq.n	8002452 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x54a>
 8002480:	4b92      	ldr	r3, [pc, #584]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	4a91      	ldr	r2, [pc, #580]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6713      	str	r3, [r2, #112]	; 0x70
 800248c:	e02d      	b.n	80024ea <HAL_RCC_OscConfig+0x5a6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x56c>
 8002496:	4b8d      	ldr	r3, [pc, #564]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a8c      	ldr	r2, [pc, #560]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
 80024a2:	4b8a      	ldr	r3, [pc, #552]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	4a89      	ldr	r2, [pc, #548]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6713      	str	r3, [r2, #112]	; 0x70
 80024ae:	e01c      	b.n	80024ea <HAL_RCC_OscConfig+0x5a6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_OscConfig+0x58e>
 80024b8:	4b84      	ldr	r3, [pc, #528]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a83      	ldr	r2, [pc, #524]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
 80024c4:	4b81      	ldr	r3, [pc, #516]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	4a80      	ldr	r2, [pc, #512]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6713      	str	r3, [r2, #112]	; 0x70
 80024d0:	e00b      	b.n	80024ea <HAL_RCC_OscConfig+0x5a6>
 80024d2:	4b7e      	ldr	r3, [pc, #504]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a7d      	ldr	r2, [pc, #500]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
 80024de:	4b7b      	ldr	r3, [pc, #492]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	4a7a      	ldr	r2, [pc, #488]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d015      	beq.n	800251e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f2:	f7fe ff2d 	bl	8001350 <HAL_GetTick>
 80024f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fe ff29 	bl	8001350 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e122      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002510:	4b6e      	ldr	r3, [pc, #440]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ee      	beq.n	80024fa <HAL_RCC_OscConfig+0x5b6>
 800251c:	e014      	b.n	8002548 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7fe ff17 	bl	8001350 <HAL_GetTick>
 8002522:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe ff13 	bl	8001350 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e10c      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800253c:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ee      	bne.n	8002526 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8101 	beq.w	8002754 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002552:	4b5e      	ldr	r3, [pc, #376]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800255a:	2b18      	cmp	r3, #24
 800255c:	f000 80bc 	beq.w	80026d8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2b02      	cmp	r3, #2
 8002566:	f040 8095 	bne.w	8002694 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b58      	ldr	r3, [pc, #352]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a57      	ldr	r2, [pc, #348]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe feeb 	bl	8001350 <HAL_GetTick>
 800257a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257e:	f7fe fee7 	bl	8001350 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0e2      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002590:	4b4e      	ldr	r3, [pc, #312]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f0      	bne.n	800257e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259c:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800259e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_RCC_OscConfig+0x78c>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	430a      	orrs	r2, r1
 80025b0:	4946      	ldr	r1, [pc, #280]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	628b      	str	r3, [r1, #40]	; 0x28
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	3b01      	subs	r3, #1
 80025c6:	025b      	lsls	r3, r3, #9
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	3b01      	subs	r3, #1
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	3b01      	subs	r3, #1
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80025e6:	4939      	ldr	r1, [pc, #228]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80025ec:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	4a36      	ldr	r2, [pc, #216]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025f8:	4b34      	ldr	r3, [pc, #208]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80025fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_RCC_OscConfig+0x790>)
 80025fe:	4013      	ands	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002604:	00d2      	lsls	r2, r2, #3
 8002606:	4931      	ldr	r1, [pc, #196]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002608:	4313      	orrs	r3, r2
 800260a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800260c:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	f023 020c 	bic.w	r2, r3, #12
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	492c      	ldr	r1, [pc, #176]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800261a:	4313      	orrs	r3, r2
 800261c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800261e:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	f023 0202 	bic.w	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	4928      	ldr	r1, [pc, #160]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800262c:	4313      	orrs	r3, r2
 800262e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002630:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	4a25      	ldr	r2, [pc, #148]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800263c:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	4a22      	ldr	r2, [pc, #136]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800264e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fe70 	bl	8001350 <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002674:	f7fe fe6c 	bl	8001350 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e067      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x730>
 8002692:	e05f      	b.n	8002754 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002694:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 800269a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800269e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fe56 	bl	8001350 <HAL_GetTick>
 80026a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe fe52 	bl	8001350 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e04d      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <HAL_RCC_OscConfig+0x788>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x764>
 80026c6:	e045      	b.n	8002754 <HAL_RCC_OscConfig+0x810>
 80026c8:	58024800 	.word	0x58024800
 80026cc:	58024400 	.word	0x58024400
 80026d0:	fffffc0c 	.word	0xfffffc0c
 80026d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80026d8:	4b21      	ldr	r3, [pc, #132]	; (8002760 <HAL_RCC_OscConfig+0x81c>)
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCC_OscConfig+0x81c>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d031      	beq.n	8002750 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f003 0203 	and.w	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d12a      	bne.n	8002750 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d122      	bne.n	8002750 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d11a      	bne.n	8002750 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	0a5b      	lsrs	r3, r3, #9
 800271e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d111      	bne.n	8002750 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	0c1b      	lsrs	r3, r3, #16
 8002730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d108      	bne.n	8002750 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	0e1b      	lsrs	r3, r3, #24
 8002742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3730      	adds	r7, #48	; 0x30
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	58024400 	.word	0x58024400

08002764 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e19c      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002778:	4b8a      	ldr	r3, [pc, #552]	; (80029a4 <HAL_RCC_ClockConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d910      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b87      	ldr	r3, [pc, #540]	; (80029a4 <HAL_RCC_ClockConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 020f 	bic.w	r2, r3, #15
 800278e:	4985      	ldr	r1, [pc, #532]	; (80029a4 <HAL_RCC_ClockConfig+0x240>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b83      	ldr	r3, [pc, #524]	; (80029a4 <HAL_RCC_ClockConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e184      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d010      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	4b7b      	ldr	r3, [pc, #492]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d908      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027c4:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4975      	ldr	r1, [pc, #468]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d010      	beq.n	8002804 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	4b70      	ldr	r3, [pc, #448]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d908      	bls.n	8002804 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027f2:	4b6d      	ldr	r3, [pc, #436]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	496a      	ldr	r1, [pc, #424]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002800:	4313      	orrs	r3, r2
 8002802:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d010      	beq.n	8002832 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800281c:	429a      	cmp	r2, r3
 800281e:	d908      	bls.n	8002832 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002820:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	495e      	ldr	r1, [pc, #376]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 800282e:	4313      	orrs	r3, r2
 8002830:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d010      	beq.n	8002860 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800284a:	429a      	cmp	r2, r3
 800284c:	d908      	bls.n	8002860 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800284e:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4953      	ldr	r1, [pc, #332]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 800285c:	4313      	orrs	r3, r2
 800285e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d010      	beq.n	800288e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	4b4d      	ldr	r3, [pc, #308]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	429a      	cmp	r2, r3
 800287a:	d908      	bls.n	800288e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800287c:	4b4a      	ldr	r3, [pc, #296]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f023 020f 	bic.w	r2, r3, #15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4947      	ldr	r1, [pc, #284]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 800288a:	4313      	orrs	r3, r2
 800288c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d055      	beq.n	8002946 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800289a:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	4940      	ldr	r1, [pc, #256]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028b4:	4b3c      	ldr	r3, [pc, #240]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d121      	bne.n	8002904 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0f6      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028cc:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d115      	bne.n	8002904 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0ea      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028e4:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0de      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f4:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0d6      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002904:	4b28      	ldr	r3, [pc, #160]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f023 0207 	bic.w	r2, r3, #7
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4925      	ldr	r1, [pc, #148]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002912:	4313      	orrs	r3, r2
 8002914:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002916:	f7fe fd1b 	bl	8001350 <HAL_GetTick>
 800291a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291c:	e00a      	b.n	8002934 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291e:	f7fe fd17 	bl	8001350 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0be      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002934:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	429a      	cmp	r2, r3
 8002944:	d1eb      	bne.n	800291e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d010      	beq.n	8002974 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	429a      	cmp	r2, r3
 8002960:	d208      	bcs.n	8002974 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f023 020f 	bic.w	r2, r3, #15
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	490e      	ldr	r1, [pc, #56]	; (80029a8 <HAL_RCC_ClockConfig+0x244>)
 8002970:	4313      	orrs	r3, r2
 8002972:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_ClockConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d214      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_RCC_ClockConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 020f 	bic.w	r2, r3, #15
 800298a:	4906      	ldr	r1, [pc, #24]	; (80029a4 <HAL_RCC_ClockConfig+0x240>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <HAL_RCC_ClockConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e086      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x34e>
 80029a4:	52002000 	.word	0x52002000
 80029a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d010      	beq.n	80029da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d208      	bcs.n	80029da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029c8:	4b3c      	ldr	r3, [pc, #240]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	4939      	ldr	r1, [pc, #228]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d010      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d208      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029f6:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	492e      	ldr	r1, [pc, #184]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d010      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	4b28      	ldr	r3, [pc, #160]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d208      	bcs.n	8002a36 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	4922      	ldr	r1, [pc, #136]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d010      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d208      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4917      	ldr	r1, [pc, #92]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a64:	f000 f834 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a68:	4601      	mov	r1, r0
 8002a6a:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <HAL_RCC_ClockConfig+0x35c>)
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	fa21 f303 	lsr.w	r3, r1, r3
 8002a80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_RCC_ClockConfig+0x358>)
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <HAL_RCC_ClockConfig+0x35c>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
 8002a98:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <HAL_RCC_ClockConfig+0x360>)
 8002a9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_RCC_ClockConfig+0x364>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x368>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fc08 	bl	80012bc <HAL_InitTick>
 8002aac:	4603      	mov	r3, r0
 8002aae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	58024400 	.word	0x58024400
 8002ac0:	0800b09c 	.word	0x0800b09c
 8002ac4:	20000004 	.word	0x20000004
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20000008 	.word	0x20000008

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad6:	4baf      	ldr	r3, [pc, #700]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ade:	2b18      	cmp	r3, #24
 8002ae0:	f200 814e 	bhi.w	8002d80 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002ae4:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002b51 	.word	0x08002b51
 8002af0:	08002d81 	.word	0x08002d81
 8002af4:	08002d81 	.word	0x08002d81
 8002af8:	08002d81 	.word	0x08002d81
 8002afc:	08002d81 	.word	0x08002d81
 8002b00:	08002d81 	.word	0x08002d81
 8002b04:	08002d81 	.word	0x08002d81
 8002b08:	08002d81 	.word	0x08002d81
 8002b0c:	08002b77 	.word	0x08002b77
 8002b10:	08002d81 	.word	0x08002d81
 8002b14:	08002d81 	.word	0x08002d81
 8002b18:	08002d81 	.word	0x08002d81
 8002b1c:	08002d81 	.word	0x08002d81
 8002b20:	08002d81 	.word	0x08002d81
 8002b24:	08002d81 	.word	0x08002d81
 8002b28:	08002d81 	.word	0x08002d81
 8002b2c:	08002b7d 	.word	0x08002b7d
 8002b30:	08002d81 	.word	0x08002d81
 8002b34:	08002d81 	.word	0x08002d81
 8002b38:	08002d81 	.word	0x08002d81
 8002b3c:	08002d81 	.word	0x08002d81
 8002b40:	08002d81 	.word	0x08002d81
 8002b44:	08002d81 	.word	0x08002d81
 8002b48:	08002d81 	.word	0x08002d81
 8002b4c:	08002b83 	.word	0x08002b83
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b50:	4b90      	ldr	r3, [pc, #576]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b5c:	4b8d      	ldr	r3, [pc, #564]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	08db      	lsrs	r3, r3, #3
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	4a8c      	ldr	r2, [pc, #560]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002b6e:	e10a      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b70:	4b89      	ldr	r3, [pc, #548]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002b72:	61bb      	str	r3, [r7, #24]
    break;
 8002b74:	e107      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b76:	4b89      	ldr	r3, [pc, #548]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002b78:	61bb      	str	r3, [r7, #24]
    break;
 8002b7a:	e104      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002b7c:	4b88      	ldr	r3, [pc, #544]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002b7e:	61bb      	str	r3, [r7, #24]
    break;
 8002b80:	e101      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b82:	4b84      	ldr	r3, [pc, #528]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b8c:	4b81      	ldr	r3, [pc, #516]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b96:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b98:	4b7e      	ldr	r3, [pc, #504]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ba2:	4b7c      	ldr	r3, [pc, #496]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba6:	08db      	lsrs	r3, r3, #3
 8002ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80da 	beq.w	8002d7a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d05a      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x1b2>
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d302      	bcc.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x106>
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d078      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002bd4:	e099      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bd6:	4b6f      	ldr	r3, [pc, #444]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d02d      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002be2:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	08db      	lsrs	r3, r3, #3
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	4a6a      	ldr	r2, [pc, #424]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c0c:	4b61      	ldr	r3, [pc, #388]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c20:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002da4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c38:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002c3c:	e087      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c48:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002da8 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c50:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c60:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c64:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002da4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c80:	e065      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002dac <HAL_RCC_GetSysClockFreq+0x2dc>
 8002c90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c94:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ca4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ca8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002da4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002cac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cc4:	e043      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	ee07 3a90 	vmov	s15, r3
 8002ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002db0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002cd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cd8:	4b2e      	ldr	r3, [pc, #184]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce0:	ee07 3a90 	vmov	s15, r3
 8002ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ce8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cec:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002da4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d08:	e021      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d14:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002dac <HAL_RCC_GetSysClockFreq+0x2dc>
 8002d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d30:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002da4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d4c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	0a5b      	lsrs	r3, r3, #9
 8002d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d58:	3301      	adds	r3, #1
 8002d5a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d72:	ee17 3a90 	vmov	r3, s15
 8002d76:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002d78:	e005      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
    break;
 8002d7e:	e002      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002d82:	61bb      	str	r3, [r7, #24]
    break;
 8002d84:	bf00      	nop
  }

  return sysclockfreq;
 8002d86:	69bb      	ldr	r3, [r7, #24]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3724      	adds	r7, #36	; 0x24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	58024400 	.word	0x58024400
 8002d98:	03d09000 	.word	0x03d09000
 8002d9c:	003d0900 	.word	0x003d0900
 8002da0:	017d7840 	.word	0x017d7840
 8002da4:	46000000 	.word	0x46000000
 8002da8:	4c742400 	.word	0x4c742400
 8002dac:	4a742400 	.word	0x4a742400
 8002db0:	4bbebc20 	.word	0x4bbebc20

08002db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002dba:	f7ff fe89 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x50>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x54>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	fa21 f303 	lsr.w	r3, r1, r3
 8002dd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x50>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x54>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x58>)
 8002df0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002df2:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x58>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	58024400 	.word	0x58024400
 8002e08:	0800b09c 	.word	0x0800b09c
 8002e0c:	20000004 	.word	0x20000004
 8002e10:	20000000 	.word	0x20000000

08002e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002e18:	f7ff ffcc 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4601      	mov	r1, r0
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e2a:	5cd3      	ldrb	r3, [r2, r3]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	0800b09c 	.word	0x0800b09c

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002e44:	f7ff ffb6 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002e48:	4601      	mov	r1, r0
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	58024400 	.word	0x58024400
 8002e68:	0800b09c 	.word	0x0800b09c

08002e6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b090      	sub	sp, #64	; 0x40
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7a:	d150      	bne.n	8002f1e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8002e7c:	4ba1      	ldr	r3, [pc, #644]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d844      	bhi.n	8002f16 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8002e8c:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08002ea9 	.word	0x08002ea9
 8002e98:	08002eb9 	.word	0x08002eb9
 8002e9c:	08002ec9 	.word	0x08002ec9
 8002ea0:	08002f11 	.word	0x08002f11
 8002ea4:	08002ed9 	.word	0x08002ed9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fd03 	bl	80038b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002eb6:	e241      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002eb8:	f107 0318 	add.w	r3, r7, #24
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fa63 	bl	8003388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ec6:	e239      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fba7 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ed6:	e231      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002ed8:	4b8a      	ldr	r3, [pc, #552]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002ee8:	4b87      	ldr	r3, [pc, #540]	; (8003108 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002eec:	e226      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ef4:	d102      	bne.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8002ef6:	4b85      	ldr	r3, [pc, #532]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002efa:	e21f      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f02:	d102      	bne.n	8002f0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8002f04:	4b82      	ldr	r3, [pc, #520]	; (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f08:	e218      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f0e:	e215      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002f10:	4b80      	ldr	r3, [pc, #512]	; (8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f14:	e212      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f1a:	bf00      	nop
 8002f1c:	e20e      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f24:	d14f      	bne.n	8002fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8002f26:	4b77      	ldr	r3, [pc, #476]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	2b80      	cmp	r3, #128	; 0x80
 8002f34:	d01c      	beq.n	8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d804      	bhi.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	d00e      	beq.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002f42:	e03c      	b.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8002f44:	2bc0      	cmp	r3, #192	; 0xc0
 8002f46:	d037      	beq.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8002f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4c:	d018      	beq.n	8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8002f4e:	e036      	b.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fcaf 	bl	80038b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f5e:	e1ed      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f60:	f107 0318 	add.w	r3, r7, #24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fa0f 	bl	8003388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f6e:	e1e5      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fb53 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f7e:	e1dd      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f80:	4b60      	ldr	r3, [pc, #384]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002f90:	4b5d      	ldr	r3, [pc, #372]	; (8003108 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002f94:	e1d2      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8002f9e:	4b5b      	ldr	r3, [pc, #364]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fa2:	e1cb      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002faa:	d102      	bne.n	8002fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8002fac:	4b58      	ldr	r3, [pc, #352]	; (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002fae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fb0:	e1c4      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fb6:	e1c1      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002fb8:	4b56      	ldr	r3, [pc, #344]	; (8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8002fba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fbc:	e1be      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fc2:	bf00      	nop
 8002fc4:	e1ba      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	d153      	bne.n	8003076 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8002fce:	4b4d      	ldr	r3, [pc, #308]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fde:	d01f      	beq.n	8003020 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8002fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe4:	d805      	bhi.n	8002ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8002fea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fee:	d00f      	beq.n	8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002ff0:	e03d      	b.n	800306e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8002ff2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ff6:	d037      	beq.n	8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8002ff8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ffc:	d018      	beq.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8002ffe:	e036      	b.n	800306e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fc57 	bl	80038b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800300e:	e195      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003010:	f107 0318 	add.w	r3, r7, #24
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f9b7 	bl	8003388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800301e:	e18d      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fafb 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800302e:	e185      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003030:	4b34      	ldr	r3, [pc, #208]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003034:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003038:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003040:	4b31      	ldr	r3, [pc, #196]	; (8003108 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003042:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003044:	e17a      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800304c:	d102      	bne.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800304e:	4b2f      	ldr	r3, [pc, #188]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003052:	e173      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800305a:	d102      	bne.n	8003062 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800305c:	4b2c      	ldr	r3, [pc, #176]	; (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800305e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003060:	e16c      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003066:	e169      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003068:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800306c:	e166      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003072:	bf00      	nop
 8003074:	e162      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307c:	d15d      	bne.n	800313a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800307e:	4b21      	ldr	r3, [pc, #132]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003086:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800308e:	d01f      	beq.n	80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8003090:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003094:	d805      	bhi.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800309a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800309e:	d00f      	beq.n	80030c0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80030a0:	e047      	b.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80030a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030a6:	d041      	beq.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80030a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ac:	d018      	beq.n	80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80030ae:	e040      	b.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80030b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fbff 	bl	80038b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030be:	e13d      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80030c0:	f107 0318 	add.w	r3, r7, #24
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f95f 	bl	8003388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030ce:	e135      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80030d0:	f107 030c 	add.w	r3, r7, #12
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 faa3 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030de:	e12d      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80030e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030e8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80030ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80030f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80030f4:	e122      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80030f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80030fe:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003102:	e11b      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8003104:	58024400 	.word	0x58024400
 8003108:	03d09000 	.word	0x03d09000
 800310c:	003d0900 	.word	0x003d0900
 8003110:	017d7840 	.word	0x017d7840
 8003114:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800311e:	d102      	bne.n	8003126 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8003120:	4b89      	ldr	r3, [pc, #548]	; (8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003124:	e10a      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800312a:	e107      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800312c:	4b87      	ldr	r3, [pc, #540]	; (800334c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003130:	e104      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003136:	bf00      	nop
 8003138:	e100      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003140:	d153      	bne.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003142:	4b83      	ldr	r3, [pc, #524]	; (8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8003144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003146:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800314a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003152:	d01f      	beq.n	8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8003154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003158:	d805      	bhi.n	8003166 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800315e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003162:	d00f      	beq.n	8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8003164:	e03d      	b.n	80031e2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8003166:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800316a:	d037      	beq.n	80031dc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800316c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003170:	d018      	beq.n	80031a4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8003172:	e036      	b.n	80031e2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fb9d 	bl	80038b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003182:	e0db      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003184:	f107 0318 	add.w	r3, r7, #24
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f8fd 	bl	8003388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003192:	e0d3      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003194:	f107 030c 	add.w	r3, r7, #12
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fa41 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031a2:	e0cb      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80031a4:	4b6a      	ldr	r3, [pc, #424]	; (8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80031ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80031b4:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80031b8:	e0c0      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80031ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031c0:	d102      	bne.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80031c2:	4b65      	ldr	r3, [pc, #404]	; (8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80031c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031c6:	e0b9      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80031c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ce:	d102      	bne.n	80031d6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80031d0:	4b5d      	ldr	r3, [pc, #372]	; (8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031d4:	e0b2      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031da:	e0af      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80031dc:	4b5b      	ldr	r3, [pc, #364]	; (800334c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031e0:	e0ac      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031e6:	bf00      	nop
 80031e8:	e0a8      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031f0:	d13d      	bne.n	800326e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80031f2:	4b57      	ldr	r3, [pc, #348]	; (8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80031fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003202:	d00c      	beq.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003208:	d011      	beq.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d12b      	bne.n	8003266 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800320e:	f107 0318 	add.w	r3, r7, #24
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f8b8 	bl	8003388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800321c:	e08e      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f9fc 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800322c:	e086      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800322e:	4b48      	ldr	r3, [pc, #288]	; (8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8003230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003232:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003236:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800323e:	4b45      	ldr	r3, [pc, #276]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003240:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003242:	e07b      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800324a:	d102      	bne.n	8003252 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800324c:	4b42      	ldr	r3, [pc, #264]	; (8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003250:	e074      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003258:	d102      	bne.n	8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800325c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800325e:	e06d      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003264:	e06a      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800326a:	bf00      	nop
 800326c:	e066      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003274:	d11f      	bne.n	80032b6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328a:	d008      	beq.n	800329e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800328c:	e00f      	b.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800328e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fb10 	bl	80038b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800329c:	e04e      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800329e:	f107 0318 	add.w	r3, r7, #24
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f870 	bl	8003388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80032ac:	e046      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80032b2:	bf00      	nop
 80032b4:	e042      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032bc:	d13c      	bne.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80032c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ce:	d01e      	beq.n	800330e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80032d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d4:	d805      	bhi.n	80032e2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00d      	beq.n	80032f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80032da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032de:	d00e      	beq.n	80032fe <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80032e0:	e026      	b.n	8003330 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80032e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e6:	d01d      	beq.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80032e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ec:	d01d      	beq.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80032ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032f2:	d014      	beq.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80032f4:	e01c      	b.n	8003330 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80032f6:	f000 f831 	bl	800335c <HAL_RCCEx_GetD3PCLK1Freq>
 80032fa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80032fc:	e01e      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80032fe:	f107 0318 	add.w	r3, r7, #24
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f840 	bl	8003388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800330c:	e016      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f984 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800331c:	e00e      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003322:	e00b      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003328:	e008      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800332c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800332e:	e005      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003334:	bf00      	nop
 8003336:	e001      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800333c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800333e:	4618      	mov	r0, r3
 8003340:	3740      	adds	r7, #64	; 0x40
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	017d7840 	.word	0x017d7840
 800334c:	00bb8000 	.word	0x00bb8000
 8003350:	58024400 	.word	0x58024400
 8003354:	03d09000 	.word	0x03d09000
 8003358:	003d0900 	.word	0x003d0900

0800335c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003360:	f7ff fd28 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8003364:	4601      	mov	r1, r0
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4a04      	ldr	r2, [pc, #16]	; (8003384 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	58024400 	.word	0x58024400
 8003384:	0800b09c 	.word	0x0800b09c

08003388 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003390:	4b9d      	ldr	r3, [pc, #628]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800339a:	4b9b      	ldr	r3, [pc, #620]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	0b1b      	lsrs	r3, r3, #12
 80033a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80033a6:	4b98      	ldr	r3, [pc, #608]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80033b2:	4b95      	ldr	r3, [pc, #596]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	08db      	lsrs	r3, r3, #3
 80033b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 810a 	beq.w	80035ea <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d05a      	beq.n	8003492 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d302      	bcc.n	80033e6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d078      	beq.n	80034d6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80033e4:	e099      	b.n	800351a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033e6:	4b88      	ldr	r3, [pc, #544]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d02d      	beq.n	800344e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033f2:	4b85      	ldr	r3, [pc, #532]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	08db      	lsrs	r3, r3, #3
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	4a83      	ldr	r2, [pc, #524]	; (800360c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80033fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003402:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341c:	4b7a      	ldr	r3, [pc, #488]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003424:	ee07 3a90 	vmov	s15, r3
 8003428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003430:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800343c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003448:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800344c:	e087      	b.n	800355e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	ee07 3a90 	vmov	s15, r3
 8003454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003458:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800345c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003460:	4b69      	ldr	r3, [pc, #420]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003470:	ed97 6a03 	vldr	s12, [r7, #12]
 8003474:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800347c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003490:	e065      	b.n	800355e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80034a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034a4:	4b58      	ldr	r3, [pc, #352]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80034b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80034bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034d4:	e043      	b.n	800355e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	ee07 3a90 	vmov	s15, r3
 80034dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800361c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80034e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e8:	4b47      	ldr	r3, [pc, #284]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80034fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003508:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800350c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003514:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003518:	e021      	b.n	800355e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	ee07 3a90 	vmov	s15, r3
 8003520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003524:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800352c:	4b36      	ldr	r3, [pc, #216]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800353c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003540:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800354c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003558:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800355c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800355e:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	0a5b      	lsrs	r3, r3, #9
 8003564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003578:	edd7 6a07 	vldr	s13, [r7, #28]
 800357c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003584:	ee17 2a90 	vmov	r2, s15
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800358c:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80035aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035b2:	ee17 2a90 	vmov	r2, s15
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	0e1b      	lsrs	r3, r3, #24
 80035c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80035d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e0:	ee17 2a90 	vmov	r2, s15
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80035e8:	e008      	b.n	80035fc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
}
 80035fc:	bf00      	nop
 80035fe:	3724      	adds	r7, #36	; 0x24
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	58024400 	.word	0x58024400
 800360c:	03d09000 	.word	0x03d09000
 8003610:	46000000 	.word	0x46000000
 8003614:	4c742400 	.word	0x4c742400
 8003618:	4a742400 	.word	0x4a742400
 800361c:	4bbebc20 	.word	0x4bbebc20

08003620 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003628:	4b9d      	ldr	r3, [pc, #628]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003632:	4b9b      	ldr	r3, [pc, #620]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	0d1b      	lsrs	r3, r3, #20
 8003638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800363e:	4b98      	ldr	r3, [pc, #608]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800364a:	4b95      	ldr	r3, [pc, #596]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	08db      	lsrs	r3, r3, #3
 8003650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003662:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 810a 	beq.w	8003882 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d05a      	beq.n	800372a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003674:	2b01      	cmp	r3, #1
 8003676:	d302      	bcc.n	800367e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003678:	2b02      	cmp	r3, #2
 800367a:	d078      	beq.n	800376e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800367c:	e099      	b.n	80037b2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800367e:	4b88      	ldr	r3, [pc, #544]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d02d      	beq.n	80036e6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800368a:	4b85      	ldr	r3, [pc, #532]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	08db      	lsrs	r3, r3, #3
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	4a83      	ldr	r2, [pc, #524]	; (80038a4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b4:	4b7a      	ldr	r3, [pc, #488]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036bc:	ee07 3a90 	vmov	s15, r3
 80036c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80036c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80036cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80036e4:	e087      	b.n	80037f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80036f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f8:	4b69      	ldr	r3, [pc, #420]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003708:	ed97 6a03 	vldr	s12, [r7, #12]
 800370c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800371c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003724:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003728:	e065      	b.n	80037f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	ee07 3a90 	vmov	s15, r3
 8003730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003734:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800373c:	4b58      	ldr	r3, [pc, #352]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800374c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003750:	eddf 5a55 	vldr	s11, [pc, #340]	; 80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800375c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003768:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800376c:	e043      	b.n	80037f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003778:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800377c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003780:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003790:	ed97 6a03 	vldr	s12, [r7, #12]
 8003794:	eddf 5a44 	vldr	s11, [pc, #272]	; 80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800379c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037b0:	e021      	b.n	80037f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	ee07 3a90 	vmov	s15, r3
 80037b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037bc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80037c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037c4:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037cc:	ee07 3a90 	vmov	s15, r3
 80037d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80037d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80037dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037f4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80037f6:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	0a5b      	lsrs	r3, r3, #9
 80037fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800380c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003810:	edd7 6a07 	vldr	s13, [r7, #28]
 8003814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800381c:	ee17 2a90 	vmov	r2, s15
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003824:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800383a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800383e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800384a:	ee17 2a90 	vmov	r2, s15
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	0e1b      	lsrs	r3, r3, #24
 8003858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800386c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003878:	ee17 2a90 	vmov	r2, s15
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003880:	e008      	b.n	8003894 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	bf00      	nop
 8003896:	3724      	adds	r7, #36	; 0x24
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	58024400 	.word	0x58024400
 80038a4:	03d09000 	.word	0x03d09000
 80038a8:	46000000 	.word	0x46000000
 80038ac:	4c742400 	.word	0x4c742400
 80038b0:	4a742400 	.word	0x4a742400
 80038b4:	4bbebc20 	.word	0x4bbebc20

080038b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	; 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038c0:	4b9d      	ldr	r3, [pc, #628]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80038ca:	4b9b      	ldr	r3, [pc, #620]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80038d6:	4b98      	ldr	r3, [pc, #608]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80038e0:	4b95      	ldr	r3, [pc, #596]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	08db      	lsrs	r3, r3, #3
 80038e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 810a 	beq.w	8003b18 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d05a      	beq.n	80039c0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800390a:	2b01      	cmp	r3, #1
 800390c:	d302      	bcc.n	8003914 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800390e:	2b02      	cmp	r3, #2
 8003910:	d078      	beq.n	8003a04 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8003912:	e099      	b.n	8003a48 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003914:	4b88      	ldr	r3, [pc, #544]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d02d      	beq.n	800397c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003920:	4b85      	ldr	r3, [pc, #532]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	08db      	lsrs	r3, r3, #3
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	4a84      	ldr	r2, [pc, #528]	; (8003b3c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
 8003930:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	ee07 3a90 	vmov	s15, r3
 8003938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394a:	4b7b      	ldr	r3, [pc, #492]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395a:	ed97 6a03 	vldr	s12, [r7, #12]
 800395e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b40 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800396e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003976:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800397a:	e087      	b.n	8003a8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800398a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398e:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399e:	ed97 6a03 	vldr	s12, [r7, #12]
 80039a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b40 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80039a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039be:	e065      	b.n	8003a8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80039ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d2:	4b59      	ldr	r3, [pc, #356]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b40 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80039ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a02:	e043      	b.n	8003a8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a16:	4b48      	ldr	r3, [pc, #288]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b40 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a46:	e021      	b.n	8003a8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8003a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a5a:	4b37      	ldr	r3, [pc, #220]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b40 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a8a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003a8c:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	0a5b      	lsrs	r3, r3, #9
 8003a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ab2:	ee17 2a90 	vmov	r2, s15
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8003aba:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac4:	ee07 3a90 	vmov	s15, r3
 8003ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ad0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ad4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae0:	ee17 2a90 	vmov	r2, s15
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	0e1b      	lsrs	r3, r3, #24
 8003aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003afe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b02:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b0e:	ee17 2a90 	vmov	r2, s15
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003b16:	e008      	b.n	8003b2a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
}
 8003b2a:	bf00      	nop
 8003b2c:	3724      	adds	r7, #36	; 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	03d09000 	.word	0x03d09000
 8003b40:	46000000 	.word	0x46000000
 8003b44:	4c742400 	.word	0x4c742400
 8003b48:	4a742400 	.word	0x4a742400
 8003b4c:	4bbebc20 	.word	0x4bbebc20

08003b50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e07c      	b.n	8003c5c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10c      	bne.n	8003b88 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd f99e 	bl	8000ec4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f867 	bl	8003c64 <HAL_SD_InitCard>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e05d      	b.n	8003c5c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8003ba0:	f107 0308 	add.w	r3, r7, #8
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fdbe 	bl	8004728 <HAL_SD_GetCardStatus>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e052      	b.n	8003c5c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8003bb6:	7e3b      	ldrb	r3, [r7, #24]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8003bbc:	7e7b      	ldrb	r3, [r7, #25]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d10a      	bne.n	8003be0 <HAL_SD_Init+0x90>
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <HAL_SD_Init+0x86>
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d004      	beq.n	8003be0 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bde:	e00b      	b.n	8003bf8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d104      	bne.n	8003bf2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bee:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bf0:	e002      	b.n	8003bf8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fe74 	bl	80048ec <HAL_SD_ConfigWideBusOperation>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e026      	b.n	8003c5c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8003c0e:	f7fd fb9f 	bl	8001350 <HAL_GetTick>
 8003c12:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8003c14:	e011      	b.n	8003c3a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8003c16:	f7fd fb9b 	bl	8001350 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d109      	bne.n	8003c3a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e010      	b.n	8003c5c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 ff00 	bl	8004a40 <HAL_SD_GetCardState>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d1e7      	bne.n	8003c16 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3728      	adds	r7, #40	; 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c64:	b5b0      	push	{r4, r5, r7, lr}
 8003c66:	b08e      	sub	sp, #56	; 0x38
 8003c68:	af04      	add	r7, sp, #16
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8003c7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003c80:	f7ff f8f4 	bl	8002e6c <HAL_RCCEx_GetPeriphCLKFreq>
 8003c84:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	4a40      	ldr	r2, [pc, #256]	; (8003d8c <HAL_SD_InitCard+0x128>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d107      	bne.n	8003cac <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0210 	orr.w	r2, r2, #16
 8003caa:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681d      	ldr	r5, [r3, #0]
 8003cb0:	466c      	mov	r4, sp
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cbe:	f107 0308 	add.w	r3, r7, #8
 8003cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f002 fe23 	bl	8006910 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 fe66 	bl	80069a0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003ce6:	4a2a      	ldr	r2, [pc, #168]	; (8003d90 <HAL_SD_InitCard+0x12c>)
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fd fb39 	bl	8001368 <HAL_Delay>
 8003cf6:	e002      	b.n	8003cfe <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8003cf8:	2002      	movs	r0, #2
 8003cfa:	f7fd fb35 	bl	8001368 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 ff7c 	bl	8004bfc <SD_PowerON>
 8003d04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e02e      	b.n	8003d82 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 feab 	bl	8004a80 <SD_InitCard>
 8003d2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e01b      	b.n	8003d82 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d52:	4618      	mov	r0, r3
 8003d54:	f002 feba 	bl	8006acc <SDMMC_CmdBlockLength>
 8003d58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00f      	beq.n	8003d80 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0b      	ldr	r2, [pc, #44]	; (8003d94 <HAL_SD_InitCard+0x130>)
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3728      	adds	r7, #40	; 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bdb0      	pop	{r4, r5, r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	014f8b59 	.word	0x014f8b59
 8003d90:	00012110 	.word	0x00012110
 8003d94:	1fe00fff 	.word	0x1fe00fff

08003d98 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b092      	sub	sp, #72	; 0x48
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003da6:	f7fd fad3 	bl	8001350 <HAL_GetTick>
 8003daa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d107      	bne.n	8003dca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e167      	b.n	800409a <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	f040 815a 	bne.w	800408c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	441a      	add	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d907      	bls.n	8003dfc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e14e      	b.n	800409a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2203      	movs	r2, #3
 8003e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d002      	beq.n	8003e1a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	025b      	lsls	r3, r3, #9
 8003e18:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	025b      	lsls	r3, r3, #9
 8003e24:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003e26:	2390      	movs	r3, #144	; 0x90
 8003e28:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f107 0214 	add.w	r2, r7, #20
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f002 fe17 	bl	8006a74 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e54:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d90a      	bls.n	8003e72 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f002 fe75 	bl	8006b58 <SDMMC_CmdReadMultiBlock>
 8003e6e:	6478      	str	r0, [r7, #68]	; 0x44
 8003e70:	e009      	b.n	8003e86 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f002 fe47 	bl	8006b12 <SDMMC_CmdReadSingleBlock>
 8003e84:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d012      	beq.n	8003eb2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a84      	ldr	r2, [pc, #528]	; (80040a4 <HAL_SD_ReadBlocks+0x30c>)
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e0f3      	b.n	800409a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003eb6:	e058      	b.n	8003f6a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d033      	beq.n	8003f2e <HAL_SD_ReadBlocks+0x196>
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec8:	2b1f      	cmp	r3, #31
 8003eca:	d930      	bls.n	8003f2e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	643b      	str	r3, [r7, #64]	; 0x40
 8003ed0:	e027      	b.n	8003f22 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f002 fd44 	bl	8006964 <SDMMC_ReadFIFO>
 8003edc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee8:	3301      	adds	r3, #1
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef8:	3301      	adds	r3, #1
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	0c1b      	lsrs	r3, r3, #16
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f04:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	3301      	adds	r3, #1
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0e:	0e1b      	lsrs	r3, r3, #24
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f18:	3301      	adds	r3, #1
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1e:	3301      	adds	r3, #1
 8003f20:	643b      	str	r3, [r7, #64]	; 0x40
 8003f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f24:	2b07      	cmp	r3, #7
 8003f26:	d9d4      	bls.n	8003ed2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8003f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2a:	3b20      	subs	r3, #32
 8003f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003f2e:	f7fd fa0f 	bl	8001350 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d902      	bls.n	8003f44 <HAL_SD_ReadBlocks+0x1ac>
 8003f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d112      	bne.n	8003f6a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a56      	ldr	r2, [pc, #344]	; (80040a4 <HAL_SD_ReadBlocks+0x30c>)
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e097      	b.n	800409a <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f70:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d09f      	beq.n	8003eb8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f86:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d022      	beq.n	8003fdc <HAL_SD_ReadBlocks+0x244>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d91f      	bls.n	8003fdc <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d01b      	beq.n	8003fdc <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f002 fe3f 	bl	8006c2c <SDMMC_CmdStopTransfer>
 8003fae:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d012      	beq.n	8003fdc <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a3a      	ldr	r2, [pc, #232]	; (80040a4 <HAL_SD_ReadBlocks+0x30c>)
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e05e      	b.n	800409a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a2d      	ldr	r2, [pc, #180]	; (80040a4 <HAL_SD_ReadBlocks+0x30c>)
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	f043 0208 	orr.w	r2, r3, #8
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e044      	b.n	800409a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d012      	beq.n	8004044 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <HAL_SD_ReadBlocks+0x30c>)
 8004024:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	f043 0202 	orr.w	r2, r3, #2
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e02a      	b.n	800409a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d012      	beq.n	8004078 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <HAL_SD_ReadBlocks+0x30c>)
 8004058:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e010      	b.n	800409a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <HAL_SD_ReadBlocks+0x310>)
 800407e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e006      	b.n	800409a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
  }
}
 800409a:	4618      	mov	r0, r3
 800409c:	3748      	adds	r7, #72	; 0x48
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	1fe00fff 	.word	0x1fe00fff
 80040a8:	18000f3a 	.word	0x18000f3a

080040ac <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b092      	sub	sp, #72	; 0x48
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80040ba:	f7fd f949 	bl	8001350 <HAL_GetTick>
 80040be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e16b      	b.n	80043b6 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	f040 815e 	bne.w	80043a8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80040f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	441a      	add	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d907      	bls.n	8004110 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e152      	b.n	80043b6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2203      	movs	r2, #3
 8004114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2200      	movs	r2, #0
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d002      	beq.n	800412e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412a:	025b      	lsls	r3, r3, #9
 800412c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	025b      	lsls	r3, r3, #9
 8004138:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800413a:	2390      	movs	r3, #144	; 0x90
 800413c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800413e:	2300      	movs	r3, #0
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004142:	2300      	movs	r3, #0
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004146:	2300      	movs	r3, #0
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f107 0218 	add.w	r2, r7, #24
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f002 fc8d 	bl	8006a74 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004168:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d90a      	bls.n	8004186 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800417c:	4618      	mov	r0, r3
 800417e:	f002 fd31 	bl	8006be4 <SDMMC_CmdWriteMultiBlock>
 8004182:	6478      	str	r0, [r7, #68]	; 0x44
 8004184:	e009      	b.n	800419a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2210      	movs	r2, #16
 800418a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004192:	4618      	mov	r0, r3
 8004194:	f002 fd03 	bl	8006b9e <SDMMC_CmdWriteSingleBlock>
 8004198:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800419a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419c:	2b00      	cmp	r3, #0
 800419e:	d012      	beq.n	80041c6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a86      	ldr	r2, [pc, #536]	; (80043c0 <HAL_SD_WriteBlocks+0x314>)
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ae:	431a      	orrs	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e0f7      	b.n	80043b6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80041ca:	e05c      	b.n	8004286 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d037      	beq.n	800424a <HAL_SD_WriteBlocks+0x19e>
 80041da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041dc:	2b1f      	cmp	r3, #31
 80041de:	d934      	bls.n	800424a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80041e0:	2300      	movs	r3, #0
 80041e2:	643b      	str	r3, [r7, #64]	; 0x40
 80041e4:	e02b      	b.n	800423e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ee:	3301      	adds	r3, #1
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80041f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	021a      	lsls	r2, r3, #8
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004200:	3301      	adds	r3, #1
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	041a      	lsls	r2, r3, #16
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004212:	3301      	adds	r3, #1
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	061a      	lsls	r2, r3, #24
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004224:	3301      	adds	r3, #1
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f107 0214 	add.w	r2, r7, #20
 8004230:	4611      	mov	r1, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f002 fba3 	bl	800697e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423a:	3301      	adds	r3, #1
 800423c:	643b      	str	r3, [r7, #64]	; 0x40
 800423e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004240:	2b07      	cmp	r3, #7
 8004242:	d9d0      	bls.n	80041e6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8004244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004246:	3b20      	subs	r3, #32
 8004248:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800424a:	f7fd f881 	bl	8001350 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004256:	429a      	cmp	r2, r3
 8004258:	d902      	bls.n	8004260 <HAL_SD_WriteBlocks+0x1b4>
 800425a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425c:	2b00      	cmp	r3, #0
 800425e:	d112      	bne.n	8004286 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a56      	ldr	r2, [pc, #344]	; (80043c0 <HAL_SD_WriteBlocks+0x314>)
 8004266:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800426e:	431a      	orrs	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e097      	b.n	80043b6 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8004290:	2b00      	cmp	r3, #0
 8004292:	d09b      	beq.n	80041cc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d022      	beq.n	80042f8 <HAL_SD_WriteBlocks+0x24c>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d91f      	bls.n	80042f8 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d01b      	beq.n	80042f8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f002 fcb1 	bl	8006c2c <SDMMC_CmdStopTransfer>
 80042ca:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80042cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d012      	beq.n	80042f8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a3a      	ldr	r2, [pc, #232]	; (80043c0 <HAL_SD_WriteBlocks+0x314>)
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e05e      	b.n	80043b6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d012      	beq.n	800432c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2d      	ldr	r2, [pc, #180]	; (80043c0 <HAL_SD_WriteBlocks+0x314>)
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	f043 0208 	orr.w	r2, r3, #8
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e044      	b.n	80043b6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d012      	beq.n	8004360 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a20      	ldr	r2, [pc, #128]	; (80043c0 <HAL_SD_WriteBlocks+0x314>)
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	f043 0202 	orr.w	r2, r3, #2
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e02a      	b.n	80043b6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b00      	cmp	r3, #0
 800436c:	d012      	beq.n	8004394 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <HAL_SD_WriteBlocks+0x314>)
 8004374:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	f043 0210 	orr.w	r2, r3, #16
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e010      	b.n	80043b6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <HAL_SD_WriteBlocks+0x318>)
 800439a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	e006      	b.n	80043b6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
  }
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3748      	adds	r7, #72	; 0x48
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	1fe00fff 	.word	0x1fe00fff
 80043c4:	18000f3a 	.word	0x18000f3a

080043c8 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ee:	0f9b      	lsrs	r3, r3, #30
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	0e9b      	lsrs	r3, r3, #26
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	b2da      	uxtb	r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440c:	0e1b      	lsrs	r3, r3, #24
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	b2da      	uxtb	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	b2da      	uxtb	r2, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	b2da      	uxtb	r2, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004436:	b2da      	uxtb	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004440:	0d1b      	lsrs	r3, r3, #20
 8004442:	b29a      	uxth	r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	b2da      	uxtb	r2, r3
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800445e:	0bdb      	lsrs	r3, r3, #15
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	b2da      	uxtb	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004470:	0b9b      	lsrs	r3, r3, #14
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	b2da      	uxtb	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004482:	0b5b      	lsrs	r3, r3, #13
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	b2da      	uxtb	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004494:	0b1b      	lsrs	r3, r3, #12
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2200      	movs	r2, #0
 80044a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d163      	bne.n	8004578 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b4:	009a      	lsls	r2, r3, #2
 80044b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044ba:	4013      	ands	r3, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044c0:	0f92      	lsrs	r2, r2, #30
 80044c2:	431a      	orrs	r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044cc:	0edb      	lsrs	r3, r3, #27
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044de:	0e1b      	lsrs	r3, r3, #24
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f0:	0d5b      	lsrs	r3, r3, #21
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004502:	0c9b      	lsrs	r3, r3, #18
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	b2da      	uxtb	r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004514:	0bdb      	lsrs	r3, r3, #15
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	b2da      	uxtb	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	7e1b      	ldrb	r3, [r3, #24]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	3302      	adds	r3, #2
 8004538:	2201      	movs	r2, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004542:	fb02 f203 	mul.w	r2, r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	7a1b      	ldrb	r3, [r3, #8]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	2201      	movs	r2, #1
 8004556:	409a      	lsls	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004564:	0a52      	lsrs	r2, r2, #9
 8004566:	fb02 f203 	mul.w	r2, r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004574:	659a      	str	r2, [r3, #88]	; 0x58
 8004576:	e031      	b.n	80045dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d11d      	bne.n	80045bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	3301      	adds	r3, #1
 800459c:	029a      	lsls	r2, r3, #10
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	659a      	str	r2, [r3, #88]	; 0x58
 80045ba:	e00f      	b.n	80045dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_SD_GetCardCSD+0x344>)
 80045c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e09d      	b.n	8004718 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e0:	0b9b      	lsrs	r3, r3, #14
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045f2:	09db      	lsrs	r3, r3, #7
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800460a:	b2da      	uxtb	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004614:	0fdb      	lsrs	r3, r3, #31
 8004616:	b2da      	uxtb	r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004620:	0f5b      	lsrs	r3, r3, #29
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	b2da      	uxtb	r2, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004632:	0e9b      	lsrs	r3, r3, #26
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	b2da      	uxtb	r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004644:	0d9b      	lsrs	r3, r3, #22
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	b2da      	uxtb	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004656:	0d5b      	lsrs	r3, r3, #21
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004672:	0c1b      	lsrs	r3, r3, #16
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	b2da      	uxtb	r2, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004686:	0bdb      	lsrs	r3, r3, #15
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	b2da      	uxtb	r2, r3
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469a:	0b9b      	lsrs	r3, r3, #14
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ae:	0b5b      	lsrs	r3, r3, #13
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c2:	0b1b      	lsrs	r3, r3, #12
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d6:	0a9b      	lsrs	r3, r3, #10
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004706:	b2da      	uxtb	r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	1fe00fff 	.word	0x1fe00fff

08004728 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b094      	sub	sp, #80	; 0x50
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8004738:	f107 0308 	add.w	r3, r7, #8
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fb64 	bl	8004e0c <SD_SendSDStatus>
 8004744:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8004746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004748:	2b00      	cmp	r3, #0
 800474a:	d011      	beq.n	8004770 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a4f      	ldr	r2, [pc, #316]	; (8004890 <HAL_SD_GetCardStatus+0x168>)
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800476e:	e070      	b.n	8004852 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	099b      	lsrs	r3, r3, #6
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	b2da      	uxtb	r2, r3
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	b2da      	uxtb	r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	b29b      	uxth	r3, r3
 8004796:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800479a:	b29a      	uxth	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	0e1b      	lsrs	r3, r3, #24
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	061a      	lsls	r2, r3, #24
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047b6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80047c0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	0e1b      	lsrs	r3, r3, #24
 80047c6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	0d1b      	lsrs	r3, r3, #20
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	b29b      	uxth	r3, r3
 8004802:	4313      	orrs	r3, r2
 8004804:	b29a      	uxth	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	0a9b      	lsrs	r3, r3, #10
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004814:	b2da      	uxtb	r2, r3
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	0a1b      	lsrs	r3, r3, #8
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	b2da      	uxtb	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	b2da      	uxtb	r2, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	b2da      	uxtb	r2, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	0e1b      	lsrs	r3, r3, #24
 800484c:	b2da      	uxtb	r2, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800485a:	4618      	mov	r0, r3
 800485c:	f002 f936 	bl	8006acc <SDMMC_CmdBlockLength>
 8004860:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8004862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00d      	beq.n	8004884 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a08      	ldr	r2, [pc, #32]	; (8004890 <HAL_SD_GetCardStatus+0x168>)
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8004884:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004888:	4618      	mov	r0, r3
 800488a:	3750      	adds	r7, #80	; 0x50
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	1fe00fff 	.word	0x1fe00fff

08004894 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80048ec:	b5b0      	push	{r4, r5, r7, lr}
 80048ee:	b08e      	sub	sp, #56	; 0x38
 80048f0:	af04      	add	r7, sp, #16
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2203      	movs	r2, #3
 8004900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004908:	2b03      	cmp	r3, #3
 800490a:	d02e      	beq.n	800496a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004912:	d106      	bne.n	8004922 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
 8004920:	e029      	b.n	8004976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004928:	d10a      	bne.n	8004940 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fb66 	bl	8004ffc <SD_WideBus_Enable>
 8004930:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	639a      	str	r2, [r3, #56]	; 0x38
 800493e:	e01a      	b.n	8004976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fba3 	bl	8005092 <SD_WideBus_Disable>
 800494c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
 800495a:	e00c      	b.n	8004976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38
 8004968:	e005      	b.n	8004976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a2e      	ldr	r2, [pc, #184]	; (8004a3c <HAL_SD_ConfigWideBusOperation+0x150>)
 8004984:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800498c:	e034      	b.n	80049f8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d903      	bls.n	80049b4 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	e012      	b.n	80049da <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049bc:	d103      	bne.n	80049c6 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	e009      	b.n	80049da <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ce:	d102      	bne.n	80049d6 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80049d0:	2302      	movs	r3, #2
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	e001      	b.n	80049da <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80049d6:	2304      	movs	r3, #4
 80049d8:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681d      	ldr	r5, [r3, #0]
 80049de:	466c      	mov	r4, sp
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049ec:	f107 0308 	add.w	r3, r7, #8
 80049f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049f2:	4628      	mov	r0, r5
 80049f4:	f001 ff8c 	bl	8006910 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a00:	4618      	mov	r0, r3
 8004a02:	f002 f863 	bl	8006acc <SDMMC_CmdBlockLength>
 8004a06:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00c      	beq.n	8004a28 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <HAL_SD_ConfigWideBusOperation+0x150>)
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3728      	adds	r7, #40	; 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3c:	1fe00fff 	.word	0x1fe00fff

08004a40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004a4c:	f107 030c 	add.w	r3, r7, #12
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 faaa 	bl	8004fac <SD_SendStatus>
 8004a58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	0a5b      	lsrs	r3, r3, #9
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004a76:	693b      	ldr	r3, [r7, #16]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b091      	sub	sp, #68	; 0x44
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 ff96 	bl	80069c2 <SDMMC_GetPowerState>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d102      	bne.n	8004aa2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004aa0:	e0a8      	b.n	8004bf4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d02e      	beq.n	8004b08 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f002 f9e2 	bl	8006e78 <SDMMC_CmdSendCID>
 8004ab4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <SD_InitCard+0x40>
    {
      return errorstate;
 8004abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abe:	e099      	b.n	8004bf4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 ffc1 	bl	8006a4e <SDMMC_GetResponse>
 8004acc:	4602      	mov	r2, r0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2104      	movs	r1, #4
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 ffb8 	bl	8006a4e <SDMMC_GetResponse>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2108      	movs	r1, #8
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 ffaf 	bl	8006a4e <SDMMC_GetResponse>
 8004af0:	4602      	mov	r2, r0
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	210c      	movs	r1, #12
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 ffa6 	bl	8006a4e <SDMMC_GetResponse>
 8004b02:	4602      	mov	r2, r0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d00d      	beq.n	8004b2c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f107 020e 	add.w	r2, r7, #14
 8004b18:	4611      	mov	r1, r2
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f002 f9eb 	bl	8006ef6 <SDMMC_CmdSetRelAdd>
 8004b20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <SD_InitCard+0xac>
    {
      return errorstate;
 8004b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2a:	e063      	b.n	8004bf4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d036      	beq.n	8004ba2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004b34:	89fb      	ldrh	r3, [r7, #14]
 8004b36:	461a      	mov	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f002 f9b4 	bl	8006eb6 <SDMMC_CmdSendCSD>
 8004b4e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <SD_InitCard+0xda>
    {
      return errorstate;
 8004b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b58:	e04c      	b.n	8004bf4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 ff74 	bl	8006a4e <SDMMC_GetResponse>
 8004b66:	4602      	mov	r2, r0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2104      	movs	r1, #4
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 ff6b 	bl	8006a4e <SDMMC_GetResponse>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2108      	movs	r1, #8
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 ff62 	bl	8006a4e <SDMMC_GetResponse>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	210c      	movs	r1, #12
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 ff59 	bl	8006a4e <SDMMC_GetResponse>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2104      	movs	r1, #4
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 ff50 	bl	8006a4e <SDMMC_GetResponse>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	0d1a      	lsrs	r2, r3, #20
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004bb6:	f107 0310 	add.w	r3, r7, #16
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fc0f 	bl	80043e0 <HAL_SD_GetCardCSD>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004bc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004bcc:	e012      	b.n	8004bf4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6819      	ldr	r1, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	f04f 0400 	mov.w	r4, #0
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4623      	mov	r3, r4
 8004be0:	4608      	mov	r0, r1
 8004be2:	f002 f85f 	bl	8006ca4 <SDMMC_CmdSelDesel>
 8004be6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <SD_InitCard+0x172>
  {
    return errorstate;
 8004bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf0:	e000      	b.n	8004bf4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3744      	adds	r7, #68	; 0x44
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd90      	pop	{r4, r7, pc}

08004bfc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8004c10:	f7fc fb9e 	bl	8001350 <HAL_GetTick>
 8004c14:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f002 f866 	bl	8006cec <SDMMC_CmdGoIdleState>
 8004c20:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <SD_PowerON+0x30>
  {
    return errorstate;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	e0e9      	b.n	8004e00 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f002 f879 	bl	8006d28 <SDMMC_CmdOperCond>
 8004c36:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00d      	beq.n	8004c5a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f002 f84f 	bl	8006cec <SDMMC_CmdGoIdleState>
 8004c4e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <SD_PowerON+0x64>
    {
      return errorstate;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	e0d2      	b.n	8004e00 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d137      	bne.n	8004cd8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f002 f87a 	bl	8006d68 <SDMMC_CmdAppCommand>
 8004c74:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02d      	beq.n	8004cd8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004c80:	e0be      	b.n	8004e00 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f002 f86d 	bl	8006d68 <SDMMC_CmdAppCommand>
 8004c8e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <SD_PowerON+0x9e>
    {
      return errorstate;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	e0b2      	b.n	8004e00 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	495a      	ldr	r1, [pc, #360]	; (8004e08 <SD_PowerON+0x20c>)
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f002 f884 	bl	8006dae <SDMMC_CmdAppOperCommand>
 8004ca6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004cb2:	e0a5      	b.n	8004e00 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 fec7 	bl	8006a4e <SDMMC_GetResponse>
 8004cc0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	0fdb      	lsrs	r3, r3, #31
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <SD_PowerON+0xd2>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <SD_PowerON+0xd4>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61bb      	str	r3, [r7, #24]

    count++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d802      	bhi.n	8004ce8 <SD_PowerON+0xec>
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0cc      	beq.n	8004c82 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d902      	bls.n	8004cf8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004cf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cf6:	e083      	b.n	8004e00 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d07d      	beq.n	8004dfe <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d176      	bne.n	8004dfe <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d071      	beq.n	8004dfe <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d20:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0208 	orr.w	r2, r2, #8
 8004d30:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f002 f944 	bl	8006fc4 <SDMMC_CmdVoltageSwitch>
 8004d3c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <SD_PowerON+0x162>
        {
          return errorstate;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	e05b      	b.n	8004e00 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004d48:	f7fc fb02 	bl	8001350 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d56:	d102      	bne.n	8004d5e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8004d58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d5c:	e050      	b.n	8004e00 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d6c:	d1ec      	bne.n	8004d48 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004d76:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d86:	d002      	beq.n	8004d8e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8004d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d8c:	e038      	b.n	8004e00 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8004d8e:	2001      	movs	r0, #1
 8004d90:	f7ff fb1a 	bl	80043c8 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0204 	orr.w	r2, r2, #4
 8004da2:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8004da4:	e00a      	b.n	8004dbc <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004da6:	f7fc fad3 	bl	8001350 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d102      	bne.n	8004dbc <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8004db6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dba:	e021      	b.n	8004e00 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dca:	d1ec      	bne.n	8004da6 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de4:	d102      	bne.n	8004dec <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dea:	e009      	b.n	8004e00 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2213      	movs	r2, #19
 8004df2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	c1100000 	.word	0xc1100000

08004e0c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08c      	sub	sp, #48	; 0x30
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004e16:	f7fc fa9b 	bl	8001350 <HAL_GetTick>
 8004e1a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f001 fe11 	bl	8006a4e <SDMMC_GetResponse>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e36:	d102      	bne.n	8004e3e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004e38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e3c:	e0b0      	b.n	8004fa0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2140      	movs	r1, #64	; 0x40
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 fe41 	bl	8006acc <SDMMC_CmdBlockLength>
 8004e4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	e0a0      	b.n	8004fa0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f001 ff7c 	bl	8006d68 <SDMMC_CmdAppCommand>
 8004e70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	e08d      	b.n	8004fa0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
 8004e88:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8004e8a:	2340      	movs	r3, #64	; 0x40
 8004e8c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8004e8e:	2360      	movs	r3, #96	; 0x60
 8004e90:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004e92:	2302      	movs	r3, #2
 8004e94:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f107 0208 	add.w	r2, r7, #8
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f001 fde3 	bl	8006a74 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f002 f864 	bl	8006f80 <SDMMC_CmdStatusRegister>
 8004eb8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d02b      	beq.n	8004f18 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	e069      	b.n	8004fa0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d013      	beq.n	8004f02 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ede:	e00d      	b.n	8004efc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f001 fd3d 	bl	8006964 <SDMMC_ReadFIFO>
 8004eea:	4602      	mov	r2, r0
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	601a      	str	r2, [r3, #0]
        pData++;
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	3301      	adds	r3, #1
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	2b07      	cmp	r3, #7
 8004f00:	d9ee      	bls.n	8004ee0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004f02:	f7fc fa25 	bl	8001350 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d102      	bne.n	8004f18 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004f12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f16:	e043      	b.n	8004fa0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0d2      	beq.n	8004ecc <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004f34:	2308      	movs	r3, #8
 8004f36:	e033      	b.n	8004fa0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004f46:	2302      	movs	r3, #2
 8004f48:	e02a      	b.n	8004fa0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d017      	beq.n	8004f88 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8004f58:	2320      	movs	r3, #32
 8004f5a:	e021      	b.n	8004fa0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f001 fcff 	bl	8006964 <SDMMC_ReadFIFO>
 8004f66:	4602      	mov	r2, r0
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	601a      	str	r2, [r3, #0]
    pData++;
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	3304      	adds	r3, #4
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004f72:	f7fc f9ed 	bl	8001350 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f80:	d102      	bne.n	8004f88 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004f82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f86:	e00b      	b.n	8004fa0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e2      	bne.n	8004f5c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a03      	ldr	r2, [pc, #12]	; (8004fa8 <SD_SendSDStatus+0x19c>)
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3730      	adds	r7, #48	; 0x30
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	18000f3a 	.word	0x18000f3a

08004fac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004fbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fc0:	e018      	b.n	8004ff4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f001 ffb3 	bl	8006f3a <SDMMC_CmdSendStatus>
 8004fd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	e009      	b.n	8004ff4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f001 fd31 	bl	8006a4e <SDMMC_GetResponse>
 8004fec:	4602      	mov	r2, r0
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2100      	movs	r1, #0
 8005012:	4618      	mov	r0, r3
 8005014:	f001 fd1b 	bl	8006a4e <SDMMC_GetResponse>
 8005018:	4603      	mov	r3, r0
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005022:	d102      	bne.n	800502a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005028:	e02f      	b.n	800508a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800502a:	f107 030c 	add.w	r3, r7, #12
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f879 	bl	8005128 <SD_FindSCR>
 8005036:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	e023      	b.n	800508a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01c      	beq.n	8005086 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f001 fe85 	bl	8006d68 <SDMMC_CmdAppCommand>
 800505e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	e00f      	b.n	800508a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2102      	movs	r1, #2
 8005070:	4618      	mov	r0, r3
 8005072:	f001 febc 	bl	8006dee <SDMMC_CmdBusWidth>
 8005076:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	e003      	b.n	800508a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005082:	2300      	movs	r3, #0
 8005084:	e001      	b.n	800508a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005086:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b086      	sub	sp, #24
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2100      	movs	r1, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 fcd0 	bl	8006a4e <SDMMC_GetResponse>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050b8:	d102      	bne.n	80050c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050be:	e02f      	b.n	8005120 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80050c0:	f107 030c 	add.w	r3, r7, #12
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f82e 	bl	8005128 <SD_FindSCR>
 80050cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	e023      	b.n	8005120 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01c      	beq.n	800511c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f001 fe3a 	bl	8006d68 <SDMMC_CmdAppCommand>
 80050f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	e00f      	b.n	8005120 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f001 fe71 	bl	8006dee <SDMMC_CmdBusWidth>
 800510c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	e003      	b.n	8005120 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005118:	2300      	movs	r3, #0
 800511a:	e001      	b.n	8005120 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800511c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08e      	sub	sp, #56	; 0x38
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005132:	f7fc f90d 	bl	8001350 <HAL_GetTick>
 8005136:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2108      	movs	r1, #8
 800514e:	4618      	mov	r0, r3
 8005150:	f001 fcbc 	bl	8006acc <SDMMC_CmdBlockLength>
 8005154:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <SD_FindSCR+0x38>
  {
    return errorstate;
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	e0ad      	b.n	80052bc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f001 fdfb 	bl	8006d68 <SDMMC_CmdAppCommand>
 8005172:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <SD_FindSCR+0x56>
  {
    return errorstate;
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	e09e      	b.n	80052bc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005184:	2308      	movs	r3, #8
 8005186:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005188:	2330      	movs	r3, #48	; 0x30
 800518a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800518c:	2302      	movs	r3, #2
 800518e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005190:	2300      	movs	r3, #0
 8005192:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005194:	2301      	movs	r3, #1
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f107 0210 	add.w	r2, r7, #16
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f001 fc66 	bl	8006a74 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f001 fe41 	bl	8006e34 <SDMMC_CmdSendSCR>
 80051b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d027      	beq.n	800520a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	e07e      	b.n	80052bc <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d113      	bne.n	80051f4 <SD_FindSCR+0xcc>
 80051cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d110      	bne.n	80051f4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 fbc4 	bl	8006964 <SDMMC_ReadFIFO>
 80051dc:	4603      	mov	r3, r0
 80051de:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f001 fbbd 	bl	8006964 <SDMMC_ReadFIFO>
 80051ea:	4603      	mov	r3, r0
 80051ec:	60fb      	str	r3, [r7, #12]
      index++;
 80051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f0:	3301      	adds	r3, #1
 80051f2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80051f4:	f7fc f8ac 	bl	8001350 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d102      	bne.n	800520a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005208:	e058      	b.n	80052bc <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005210:	f240 532a 	movw	r3, #1322	; 0x52a
 8005214:	4013      	ands	r3, r2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0d1      	beq.n	80051be <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2208      	movs	r2, #8
 800522e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005230:	2308      	movs	r3, #8
 8005232:	e043      	b.n	80052bc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2202      	movs	r2, #2
 8005248:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800524a:	2302      	movs	r3, #2
 800524c:	e036      	b.n	80052bc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2220      	movs	r2, #32
 8005262:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005264:	2320      	movs	r3, #32
 8005266:	e029      	b.n	80052bc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <SD_FindSCR+0x19c>)
 800526e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	061a      	lsls	r2, r3, #24
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800527c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	0a1b      	lsrs	r3, r3, #8
 8005282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005286:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	0e1b      	lsrs	r3, r3, #24
 800528c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	601a      	str	r2, [r3, #0]
    scr++;
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	3304      	adds	r3, #4
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	061a      	lsls	r2, r3, #24
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80052ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	0e1b      	lsrs	r3, r3, #24
 80052b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3738      	adds	r7, #56	; 0x38
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	18000f3a 	.word	0x18000f3a

080052c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e042      	b.n	8005360 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fb fe55 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2224      	movs	r2, #36	; 0x24
 80052f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa56 	bl	80057bc <UART_SetConfig>
 8005310:	4603      	mov	r3, r0
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e022      	b.n	8005360 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fffa 	bl	800631c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f001 f881 	bl	8006460 <UART_CheckIdleState>
 800535e:	4603      	mov	r3, r0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537e:	2b20      	cmp	r3, #32
 8005380:	f040 8083 	bne.w	800548a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_UART_Transmit+0x28>
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e07b      	b.n	800548c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Transmit+0x3a>
 800539e:	2302      	movs	r3, #2
 80053a0:	e074      	b.n	800548c <HAL_UART_Transmit+0x124>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2221      	movs	r2, #33	; 0x21
 80053b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80053ba:	f7fb ffc9 	bl	8001350 <HAL_GetTick>
 80053be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	88fa      	ldrh	r2, [r7, #6]
 80053c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d8:	d108      	bne.n	80053ec <HAL_UART_Transmit+0x84>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	e003      	b.n	80053f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80053fc:	e02c      	b.n	8005458 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	2180      	movs	r1, #128	; 0x80
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f001 f871 	bl	80064f0 <UART_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e039      	b.n	800548c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800542c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	3302      	adds	r3, #2
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	e007      	b.n	8005446 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	781a      	ldrb	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	3301      	adds	r3, #1
 8005444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1cc      	bne.n	80053fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2200      	movs	r2, #0
 800546c:	2140      	movs	r1, #64	; 0x40
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f001 f83e 	bl	80064f0 <UART_WaitOnFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e006      	b.n	800548c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	e000      	b.n	800548c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800548a:	2302      	movs	r3, #2
  }
}
 800548c:	4618      	mov	r0, r3
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80054ba:	4013      	ands	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d118      	bne.n	80054f6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d013      	beq.n	80054f6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d104      	bne.n	80054e2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8145 	beq.w	8005776 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
      }
      return;
 80054f4:	e13f      	b.n	8005776 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80e8 	beq.w	80056ce <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4ba1      	ldr	r3, [pc, #644]	; (8005788 <HAL_UART_IRQHandler+0x2f4>)
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4ba0      	ldr	r3, [pc, #640]	; (800578c <HAL_UART_IRQHandler+0x2f8>)
 800550c:	4013      	ands	r3, r2
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 80dd 	beq.w	80056ce <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <HAL_UART_IRQHandler+0xac>
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00b      	beq.n	8005540 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2201      	movs	r2, #1
 800552e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	f043 0201 	orr.w	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d010      	beq.n	800556c <HAL_UART_IRQHandler+0xd8>
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2202      	movs	r2, #2
 800555a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f043 0204 	orr.w	r2, r3, #4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d010      	beq.n	8005598 <HAL_UART_IRQHandler+0x104>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00b      	beq.n	8005598 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2204      	movs	r2, #4
 8005586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	f043 0202 	orr.w	r2, r3, #2
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d015      	beq.n	80055ce <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d104      	bne.n	80055b6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4b76      	ldr	r3, [pc, #472]	; (8005788 <HAL_UART_IRQHandler+0x2f4>)
 80055b0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00b      	beq.n	80055ce <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2208      	movs	r2, #8
 80055bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	f043 0208 	orr.w	r2, r3, #8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d011      	beq.n	80055fc <HAL_UART_IRQHandler+0x168>
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00c      	beq.n	80055fc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f2:	f043 0220 	orr.w	r2, r3, #32
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80b9 	beq.w	800577a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d011      	beq.n	8005636 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d004      	beq.n	8005656 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005652:	2b00      	cmp	r3, #0
 8005654:	d031      	beq.n	80056ba <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 ffca 	bl	80065f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005666:	2b40      	cmp	r3, #64	; 0x40
 8005668:	d123      	bne.n	80056b2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005678:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800567e:	2b00      	cmp	r3, #0
 8005680:	d013      	beq.n	80056aa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005686:	4a42      	ldr	r2, [pc, #264]	; (8005790 <HAL_UART_IRQHandler+0x2fc>)
 8005688:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800568e:	4618      	mov	r0, r3
 8005690:	f7fb ffa8 	bl	80015e4 <HAL_DMA_Abort_IT>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d017      	beq.n	80056ca <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800569e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80056a4:	4610      	mov	r0, r2
 80056a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	e00f      	b.n	80056ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f87c 	bl	80057a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b0:	e00b      	b.n	80056ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f878 	bl	80057a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b8:	e007      	b.n	80056ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f874 	bl	80057a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80056c8:	e057      	b.n	800577a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ca:	bf00      	nop
    return;
 80056cc:	e055      	b.n	800577a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00d      	beq.n	80056f4 <HAL_UART_IRQHandler+0x260>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 ffd3 	bl	8006698 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056f2:	e045      	b.n	8005780 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d012      	beq.n	8005724 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005704:	2b00      	cmp	r3, #0
 8005706:	d104      	bne.n	8005712 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d008      	beq.n	8005724 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	2b00      	cmp	r3, #0
 8005718:	d031      	beq.n	800577e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	4798      	blx	r3
    }
    return;
 8005722:	e02c      	b.n	800577e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <HAL_UART_IRQHandler+0x2ac>
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 ff93 	bl	8006664 <UART_EndTransmit_IT>
    return;
 800573e:	e01f      	b.n	8005780 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <HAL_UART_IRQHandler+0x2c8>
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 ffb3 	bl	80066c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800575a:	e011      	b.n	8005780 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00c      	beq.n	8005780 <HAL_UART_IRQHandler+0x2ec>
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	da09      	bge.n	8005780 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 ff9d 	bl	80066ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005772:	bf00      	nop
 8005774:	e004      	b.n	8005780 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005776:	bf00      	nop
 8005778:	e002      	b.n	8005780 <HAL_UART_IRQHandler+0x2ec>
    return;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <HAL_UART_IRQHandler+0x2ec>
    return;
 800577e:	bf00      	nop
  }
}
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	10000001 	.word	0x10000001
 800578c:	04000120 	.word	0x04000120
 8005790:	08006639 	.word	0x08006639

08005794 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80057c0:	b08e      	sub	sp, #56	; 0x38
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057ea:	4313      	orrs	r3, r2
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4bc1      	ldr	r3, [pc, #772]	; (8005afc <UART_SetConfig+0x340>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6812      	ldr	r2, [r2, #0]
 80057fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057fe:	430b      	orrs	r3, r1
 8005800:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4ab7      	ldr	r2, [pc, #732]	; (8005b00 <UART_SetConfig+0x344>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d004      	beq.n	8005832 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800582e:	4313      	orrs	r3, r2
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	4bb2      	ldr	r3, [pc, #712]	; (8005b04 <UART_SetConfig+0x348>)
 800583a:	4013      	ands	r3, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005842:	430b      	orrs	r3, r1
 8005844:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	f023 010f 	bic.w	r1, r3, #15
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4aa9      	ldr	r2, [pc, #676]	; (8005b08 <UART_SetConfig+0x34c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d177      	bne.n	8005956 <UART_SetConfig+0x19a>
 8005866:	4ba9      	ldr	r3, [pc, #676]	; (8005b0c <UART_SetConfig+0x350>)
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800586e:	2b28      	cmp	r3, #40	; 0x28
 8005870:	d86c      	bhi.n	800594c <UART_SetConfig+0x190>
 8005872:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <UART_SetConfig+0xbc>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	0800591d 	.word	0x0800591d
 800587c:	0800594d 	.word	0x0800594d
 8005880:	0800594d 	.word	0x0800594d
 8005884:	0800594d 	.word	0x0800594d
 8005888:	0800594d 	.word	0x0800594d
 800588c:	0800594d 	.word	0x0800594d
 8005890:	0800594d 	.word	0x0800594d
 8005894:	0800594d 	.word	0x0800594d
 8005898:	08005925 	.word	0x08005925
 800589c:	0800594d 	.word	0x0800594d
 80058a0:	0800594d 	.word	0x0800594d
 80058a4:	0800594d 	.word	0x0800594d
 80058a8:	0800594d 	.word	0x0800594d
 80058ac:	0800594d 	.word	0x0800594d
 80058b0:	0800594d 	.word	0x0800594d
 80058b4:	0800594d 	.word	0x0800594d
 80058b8:	0800592d 	.word	0x0800592d
 80058bc:	0800594d 	.word	0x0800594d
 80058c0:	0800594d 	.word	0x0800594d
 80058c4:	0800594d 	.word	0x0800594d
 80058c8:	0800594d 	.word	0x0800594d
 80058cc:	0800594d 	.word	0x0800594d
 80058d0:	0800594d 	.word	0x0800594d
 80058d4:	0800594d 	.word	0x0800594d
 80058d8:	08005935 	.word	0x08005935
 80058dc:	0800594d 	.word	0x0800594d
 80058e0:	0800594d 	.word	0x0800594d
 80058e4:	0800594d 	.word	0x0800594d
 80058e8:	0800594d 	.word	0x0800594d
 80058ec:	0800594d 	.word	0x0800594d
 80058f0:	0800594d 	.word	0x0800594d
 80058f4:	0800594d 	.word	0x0800594d
 80058f8:	0800593d 	.word	0x0800593d
 80058fc:	0800594d 	.word	0x0800594d
 8005900:	0800594d 	.word	0x0800594d
 8005904:	0800594d 	.word	0x0800594d
 8005908:	0800594d 	.word	0x0800594d
 800590c:	0800594d 	.word	0x0800594d
 8005910:	0800594d 	.word	0x0800594d
 8005914:	0800594d 	.word	0x0800594d
 8005918:	08005945 	.word	0x08005945
 800591c:	2301      	movs	r3, #1
 800591e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005922:	e233      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005924:	2304      	movs	r3, #4
 8005926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800592a:	e22f      	b.n	8005d8c <UART_SetConfig+0x5d0>
 800592c:	2308      	movs	r3, #8
 800592e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005932:	e22b      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005934:	2310      	movs	r3, #16
 8005936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593a:	e227      	b.n	8005d8c <UART_SetConfig+0x5d0>
 800593c:	2320      	movs	r3, #32
 800593e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005942:	e223      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005944:	2340      	movs	r3, #64	; 0x40
 8005946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800594a:	e21f      	b.n	8005d8c <UART_SetConfig+0x5d0>
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005952:	bf00      	nop
 8005954:	e21a      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a6d      	ldr	r2, [pc, #436]	; (8005b10 <UART_SetConfig+0x354>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d132      	bne.n	80059c6 <UART_SetConfig+0x20a>
 8005960:	4b6a      	ldr	r3, [pc, #424]	; (8005b0c <UART_SetConfig+0x350>)
 8005962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	2b05      	cmp	r3, #5
 800596a:	d827      	bhi.n	80059bc <UART_SetConfig+0x200>
 800596c:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <UART_SetConfig+0x1b8>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	0800598d 	.word	0x0800598d
 8005978:	08005995 	.word	0x08005995
 800597c:	0800599d 	.word	0x0800599d
 8005980:	080059a5 	.word	0x080059a5
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059b5 	.word	0x080059b5
 800598c:	2300      	movs	r3, #0
 800598e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005992:	e1fb      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005994:	2304      	movs	r3, #4
 8005996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800599a:	e1f7      	b.n	8005d8c <UART_SetConfig+0x5d0>
 800599c:	2308      	movs	r3, #8
 800599e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059a2:	e1f3      	b.n	8005d8c <UART_SetConfig+0x5d0>
 80059a4:	2310      	movs	r3, #16
 80059a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059aa:	e1ef      	b.n	8005d8c <UART_SetConfig+0x5d0>
 80059ac:	2320      	movs	r3, #32
 80059ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059b2:	e1eb      	b.n	8005d8c <UART_SetConfig+0x5d0>
 80059b4:	2340      	movs	r3, #64	; 0x40
 80059b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ba:	e1e7      	b.n	8005d8c <UART_SetConfig+0x5d0>
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059c2:	bf00      	nop
 80059c4:	e1e2      	b.n	8005d8c <UART_SetConfig+0x5d0>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a52      	ldr	r2, [pc, #328]	; (8005b14 <UART_SetConfig+0x358>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d132      	bne.n	8005a36 <UART_SetConfig+0x27a>
 80059d0:	4b4e      	ldr	r3, [pc, #312]	; (8005b0c <UART_SetConfig+0x350>)
 80059d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	2b05      	cmp	r3, #5
 80059da:	d827      	bhi.n	8005a2c <UART_SetConfig+0x270>
 80059dc:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <UART_SetConfig+0x228>)
 80059de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e2:	bf00      	nop
 80059e4:	080059fd 	.word	0x080059fd
 80059e8:	08005a05 	.word	0x08005a05
 80059ec:	08005a0d 	.word	0x08005a0d
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a1d 	.word	0x08005a1d
 80059f8:	08005a25 	.word	0x08005a25
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a02:	e1c3      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a04:	2304      	movs	r3, #4
 8005a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a0a:	e1bf      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a12:	e1bb      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a1a:	e1b7      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a22:	e1b3      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a24:	2340      	movs	r3, #64	; 0x40
 8005a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a2a:	e1af      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a2c:	2380      	movs	r3, #128	; 0x80
 8005a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a32:	bf00      	nop
 8005a34:	e1aa      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a37      	ldr	r2, [pc, #220]	; (8005b18 <UART_SetConfig+0x35c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d132      	bne.n	8005aa6 <UART_SetConfig+0x2ea>
 8005a40:	4b32      	ldr	r3, [pc, #200]	; (8005b0c <UART_SetConfig+0x350>)
 8005a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	d827      	bhi.n	8005a9c <UART_SetConfig+0x2e0>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0x298>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005a6d 	.word	0x08005a6d
 8005a58:	08005a75 	.word	0x08005a75
 8005a5c:	08005a7d 	.word	0x08005a7d
 8005a60:	08005a85 	.word	0x08005a85
 8005a64:	08005a8d 	.word	0x08005a8d
 8005a68:	08005a95 	.word	0x08005a95
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a72:	e18b      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a74:	2304      	movs	r3, #4
 8005a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7a:	e187      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a82:	e183      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a84:	2310      	movs	r3, #16
 8005a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8a:	e17f      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a92:	e17b      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a94:	2340      	movs	r3, #64	; 0x40
 8005a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a9a:	e177      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005a9c:	2380      	movs	r3, #128	; 0x80
 8005a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aa2:	bf00      	nop
 8005aa4:	e172      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1c      	ldr	r2, [pc, #112]	; (8005b1c <UART_SetConfig+0x360>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d144      	bne.n	8005b3a <UART_SetConfig+0x37e>
 8005ab0:	4b16      	ldr	r3, [pc, #88]	; (8005b0c <UART_SetConfig+0x350>)
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	2b05      	cmp	r3, #5
 8005aba:	d839      	bhi.n	8005b30 <UART_SetConfig+0x374>
 8005abc:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <UART_SetConfig+0x308>)
 8005abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac2:	bf00      	nop
 8005ac4:	08005add 	.word	0x08005add
 8005ac8:	08005ae5 	.word	0x08005ae5
 8005acc:	08005aed 	.word	0x08005aed
 8005ad0:	08005af5 	.word	0x08005af5
 8005ad4:	08005b21 	.word	0x08005b21
 8005ad8:	08005b29 	.word	0x08005b29
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae2:	e153      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aea:	e14f      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005aec:	2308      	movs	r3, #8
 8005aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af2:	e14b      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005af4:	2310      	movs	r3, #16
 8005af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005afa:	e147      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005afc:	cfff69f3 	.word	0xcfff69f3
 8005b00:	58000c00 	.word	0x58000c00
 8005b04:	11fff4ff 	.word	0x11fff4ff
 8005b08:	40011000 	.word	0x40011000
 8005b0c:	58024400 	.word	0x58024400
 8005b10:	40004400 	.word	0x40004400
 8005b14:	40004800 	.word	0x40004800
 8005b18:	40004c00 	.word	0x40004c00
 8005b1c:	40005000 	.word	0x40005000
 8005b20:	2320      	movs	r3, #32
 8005b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b26:	e131      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005b28:	2340      	movs	r3, #64	; 0x40
 8005b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b2e:	e12d      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005b30:	2380      	movs	r3, #128	; 0x80
 8005b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b36:	bf00      	nop
 8005b38:	e128      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4ab6      	ldr	r2, [pc, #728]	; (8005e18 <UART_SetConfig+0x65c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d178      	bne.n	8005c36 <UART_SetConfig+0x47a>
 8005b44:	4bb5      	ldr	r3, [pc, #724]	; (8005e1c <UART_SetConfig+0x660>)
 8005b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b4c:	2b28      	cmp	r3, #40	; 0x28
 8005b4e:	d86d      	bhi.n	8005c2c <UART_SetConfig+0x470>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <UART_SetConfig+0x39c>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005bfd 	.word	0x08005bfd
 8005b5c:	08005c2d 	.word	0x08005c2d
 8005b60:	08005c2d 	.word	0x08005c2d
 8005b64:	08005c2d 	.word	0x08005c2d
 8005b68:	08005c2d 	.word	0x08005c2d
 8005b6c:	08005c2d 	.word	0x08005c2d
 8005b70:	08005c2d 	.word	0x08005c2d
 8005b74:	08005c2d 	.word	0x08005c2d
 8005b78:	08005c05 	.word	0x08005c05
 8005b7c:	08005c2d 	.word	0x08005c2d
 8005b80:	08005c2d 	.word	0x08005c2d
 8005b84:	08005c2d 	.word	0x08005c2d
 8005b88:	08005c2d 	.word	0x08005c2d
 8005b8c:	08005c2d 	.word	0x08005c2d
 8005b90:	08005c2d 	.word	0x08005c2d
 8005b94:	08005c2d 	.word	0x08005c2d
 8005b98:	08005c0d 	.word	0x08005c0d
 8005b9c:	08005c2d 	.word	0x08005c2d
 8005ba0:	08005c2d 	.word	0x08005c2d
 8005ba4:	08005c2d 	.word	0x08005c2d
 8005ba8:	08005c2d 	.word	0x08005c2d
 8005bac:	08005c2d 	.word	0x08005c2d
 8005bb0:	08005c2d 	.word	0x08005c2d
 8005bb4:	08005c2d 	.word	0x08005c2d
 8005bb8:	08005c15 	.word	0x08005c15
 8005bbc:	08005c2d 	.word	0x08005c2d
 8005bc0:	08005c2d 	.word	0x08005c2d
 8005bc4:	08005c2d 	.word	0x08005c2d
 8005bc8:	08005c2d 	.word	0x08005c2d
 8005bcc:	08005c2d 	.word	0x08005c2d
 8005bd0:	08005c2d 	.word	0x08005c2d
 8005bd4:	08005c2d 	.word	0x08005c2d
 8005bd8:	08005c1d 	.word	0x08005c1d
 8005bdc:	08005c2d 	.word	0x08005c2d
 8005be0:	08005c2d 	.word	0x08005c2d
 8005be4:	08005c2d 	.word	0x08005c2d
 8005be8:	08005c2d 	.word	0x08005c2d
 8005bec:	08005c2d 	.word	0x08005c2d
 8005bf0:	08005c2d 	.word	0x08005c2d
 8005bf4:	08005c2d 	.word	0x08005c2d
 8005bf8:	08005c25 	.word	0x08005c25
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c02:	e0c3      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c04:	2304      	movs	r3, #4
 8005c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0a:	e0bf      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c12:	e0bb      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c14:	2310      	movs	r3, #16
 8005c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1a:	e0b7      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c1c:	2320      	movs	r3, #32
 8005c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c22:	e0b3      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c24:	2340      	movs	r3, #64	; 0x40
 8005c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2a:	e0af      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c2c:	2380      	movs	r3, #128	; 0x80
 8005c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c32:	bf00      	nop
 8005c34:	e0aa      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a79      	ldr	r2, [pc, #484]	; (8005e20 <UART_SetConfig+0x664>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d132      	bne.n	8005ca6 <UART_SetConfig+0x4ea>
 8005c40:	4b76      	ldr	r3, [pc, #472]	; (8005e1c <UART_SetConfig+0x660>)
 8005c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	2b05      	cmp	r3, #5
 8005c4a:	d827      	bhi.n	8005c9c <UART_SetConfig+0x4e0>
 8005c4c:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <UART_SetConfig+0x498>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005c6d 	.word	0x08005c6d
 8005c58:	08005c75 	.word	0x08005c75
 8005c5c:	08005c7d 	.word	0x08005c7d
 8005c60:	08005c85 	.word	0x08005c85
 8005c64:	08005c8d 	.word	0x08005c8d
 8005c68:	08005c95 	.word	0x08005c95
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c72:	e08b      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c74:	2304      	movs	r3, #4
 8005c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c7a:	e087      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c7c:	2308      	movs	r3, #8
 8005c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c82:	e083      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c84:	2310      	movs	r3, #16
 8005c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c8a:	e07f      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c92:	e07b      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c94:	2340      	movs	r3, #64	; 0x40
 8005c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9a:	e077      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ca2:	bf00      	nop
 8005ca4:	e072      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a5e      	ldr	r2, [pc, #376]	; (8005e24 <UART_SetConfig+0x668>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d132      	bne.n	8005d16 <UART_SetConfig+0x55a>
 8005cb0:	4b5a      	ldr	r3, [pc, #360]	; (8005e1c <UART_SetConfig+0x660>)
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	2b05      	cmp	r3, #5
 8005cba:	d827      	bhi.n	8005d0c <UART_SetConfig+0x550>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <UART_SetConfig+0x508>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cdd 	.word	0x08005cdd
 8005cc8:	08005ce5 	.word	0x08005ce5
 8005ccc:	08005ced 	.word	0x08005ced
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce2:	e053      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cea:	e04f      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cf2:	e04b      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfa:	e047      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d02:	e043      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005d04:	2340      	movs	r3, #64	; 0x40
 8005d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0a:	e03f      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005d0c:	2380      	movs	r3, #128	; 0x80
 8005d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d12:	bf00      	nop
 8005d14:	e03a      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a43      	ldr	r2, [pc, #268]	; (8005e28 <UART_SetConfig+0x66c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d132      	bne.n	8005d86 <UART_SetConfig+0x5ca>
 8005d20:	4b3e      	ldr	r3, [pc, #248]	; (8005e1c <UART_SetConfig+0x660>)
 8005d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	2b05      	cmp	r3, #5
 8005d2a:	d827      	bhi.n	8005d7c <UART_SetConfig+0x5c0>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <UART_SetConfig+0x578>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d4d 	.word	0x08005d4d
 8005d38:	08005d55 	.word	0x08005d55
 8005d3c:	08005d5d 	.word	0x08005d5d
 8005d40:	08005d65 	.word	0x08005d65
 8005d44:	08005d6d 	.word	0x08005d6d
 8005d48:	08005d75 	.word	0x08005d75
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e01b      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005d54:	2304      	movs	r3, #4
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5a:	e017      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d62:	e013      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005d64:	2310      	movs	r3, #16
 8005d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6a:	e00f      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d72:	e00b      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7a:	e007      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005d7c:	2380      	movs	r3, #128	; 0x80
 8005d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d82:	bf00      	nop
 8005d84:	e002      	b.n	8005d8c <UART_SetConfig+0x5d0>
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a25      	ldr	r2, [pc, #148]	; (8005e28 <UART_SetConfig+0x66c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	f040 80b8 	bne.w	8005f08 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d019      	beq.n	8005dd4 <UART_SetConfig+0x618>
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	dc04      	bgt.n	8005dae <UART_SetConfig+0x5f2>
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d009      	beq.n	8005dbc <UART_SetConfig+0x600>
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d00b      	beq.n	8005dc4 <UART_SetConfig+0x608>
 8005dac:	e042      	b.n	8005e34 <UART_SetConfig+0x678>
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d02b      	beq.n	8005e0a <UART_SetConfig+0x64e>
 8005db2:	2b40      	cmp	r3, #64	; 0x40
 8005db4:	d02c      	beq.n	8005e10 <UART_SetConfig+0x654>
 8005db6:	2b10      	cmp	r3, #16
 8005db8:	d014      	beq.n	8005de4 <UART_SetConfig+0x628>
 8005dba:	e03b      	b.n	8005e34 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005dbc:	f7fd face 	bl	800335c <HAL_RCCEx_GetD3PCLK1Freq>
 8005dc0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005dc2:	e03d      	b.n	8005e40 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dc4:	f107 0314 	add.w	r3, r7, #20
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fd fadd 	bl	8003388 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dd2:	e035      	b.n	8005e40 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dd4:	f107 0308 	add.w	r3, r7, #8
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fd fc21 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005de2:	e02d      	b.n	8005e40 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005de4:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <UART_SetConfig+0x660>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d009      	beq.n	8005e04 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005df0:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <UART_SetConfig+0x660>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	08db      	lsrs	r3, r3, #3
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	4a0c      	ldr	r2, [pc, #48]	; (8005e2c <UART_SetConfig+0x670>)
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e02:	e01d      	b.n	8005e40 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005e04:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <UART_SetConfig+0x670>)
 8005e06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e08:	e01a      	b.n	8005e40 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e0a:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <UART_SetConfig+0x674>)
 8005e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e0e:	e017      	b.n	8005e40 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e16:	e013      	b.n	8005e40 <UART_SetConfig+0x684>
 8005e18:	40011400 	.word	0x40011400
 8005e1c:	58024400 	.word	0x58024400
 8005e20:	40007800 	.word	0x40007800
 8005e24:	40007c00 	.word	0x40007c00
 8005e28:	58000c00 	.word	0x58000c00
 8005e2c:	03d09000 	.word	0x03d09000
 8005e30:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005e3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 824d 	beq.w	80062e2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	4aad      	ldr	r2, [pc, #692]	; (8006104 <UART_SetConfig+0x948>)
 8005e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e52:	461a      	mov	r2, r3
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e5a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	4613      	mov	r3, r2
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	4413      	add	r3, r2
 8005e66:	6a3a      	ldr	r2, [r7, #32]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d305      	bcc.n	8005e78 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e72:	6a3a      	ldr	r2, [r7, #32]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d903      	bls.n	8005e80 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005e7e:	e230      	b.n	80062e2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	4618      	mov	r0, r3
 8005e84:	f04f 0100 	mov.w	r1, #0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	4a9d      	ldr	r2, [pc, #628]	; (8006104 <UART_SetConfig+0x948>)
 8005e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f04f 0400 	mov.w	r4, #0
 8005e98:	461a      	mov	r2, r3
 8005e9a:	4623      	mov	r3, r4
 8005e9c:	f7fa fa78 	bl	8000390 <__aeabi_uldivmod>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	f04f 0400 	mov.w	r4, #0
 8005eb0:	0214      	lsls	r4, r2, #8
 8005eb2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005eb6:	020b      	lsls	r3, r1, #8
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6852      	ldr	r2, [r2, #4]
 8005ebc:	0852      	lsrs	r2, r2, #1
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	eb13 0b01 	adds.w	fp, r3, r1
 8005ec8:	eb44 0c02 	adc.w	ip, r4, r2
 8005ecc:	4658      	mov	r0, fp
 8005ece:	4661      	mov	r1, ip
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f04f 0400 	mov.w	r4, #0
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4623      	mov	r3, r4
 8005edc:	f7fa fa58 	bl	8000390 <__aeabi_uldivmod>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eec:	d308      	bcc.n	8005f00 <UART_SetConfig+0x744>
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef4:	d204      	bcs.n	8005f00 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005efc:	60da      	str	r2, [r3, #12]
 8005efe:	e1f0      	b.n	80062e2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005f06:	e1ec      	b.n	80062e2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f10:	f040 8100 	bne.w	8006114 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005f14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	f200 80b7 	bhi.w	800608c <UART_SetConfig+0x8d0>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x768>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08006029 	.word	0x08006029
 8005f28:	08006031 	.word	0x08006031
 8005f2c:	0800608d 	.word	0x0800608d
 8005f30:	0800608d 	.word	0x0800608d
 8005f34:	08006039 	.word	0x08006039
 8005f38:	0800608d 	.word	0x0800608d
 8005f3c:	0800608d 	.word	0x0800608d
 8005f40:	0800608d 	.word	0x0800608d
 8005f44:	08006049 	.word	0x08006049
 8005f48:	0800608d 	.word	0x0800608d
 8005f4c:	0800608d 	.word	0x0800608d
 8005f50:	0800608d 	.word	0x0800608d
 8005f54:	0800608d 	.word	0x0800608d
 8005f58:	0800608d 	.word	0x0800608d
 8005f5c:	0800608d 	.word	0x0800608d
 8005f60:	0800608d 	.word	0x0800608d
 8005f64:	08006059 	.word	0x08006059
 8005f68:	0800608d 	.word	0x0800608d
 8005f6c:	0800608d 	.word	0x0800608d
 8005f70:	0800608d 	.word	0x0800608d
 8005f74:	0800608d 	.word	0x0800608d
 8005f78:	0800608d 	.word	0x0800608d
 8005f7c:	0800608d 	.word	0x0800608d
 8005f80:	0800608d 	.word	0x0800608d
 8005f84:	0800608d 	.word	0x0800608d
 8005f88:	0800608d 	.word	0x0800608d
 8005f8c:	0800608d 	.word	0x0800608d
 8005f90:	0800608d 	.word	0x0800608d
 8005f94:	0800608d 	.word	0x0800608d
 8005f98:	0800608d 	.word	0x0800608d
 8005f9c:	0800608d 	.word	0x0800608d
 8005fa0:	0800608d 	.word	0x0800608d
 8005fa4:	0800607f 	.word	0x0800607f
 8005fa8:	0800608d 	.word	0x0800608d
 8005fac:	0800608d 	.word	0x0800608d
 8005fb0:	0800608d 	.word	0x0800608d
 8005fb4:	0800608d 	.word	0x0800608d
 8005fb8:	0800608d 	.word	0x0800608d
 8005fbc:	0800608d 	.word	0x0800608d
 8005fc0:	0800608d 	.word	0x0800608d
 8005fc4:	0800608d 	.word	0x0800608d
 8005fc8:	0800608d 	.word	0x0800608d
 8005fcc:	0800608d 	.word	0x0800608d
 8005fd0:	0800608d 	.word	0x0800608d
 8005fd4:	0800608d 	.word	0x0800608d
 8005fd8:	0800608d 	.word	0x0800608d
 8005fdc:	0800608d 	.word	0x0800608d
 8005fe0:	0800608d 	.word	0x0800608d
 8005fe4:	0800608d 	.word	0x0800608d
 8005fe8:	0800608d 	.word	0x0800608d
 8005fec:	0800608d 	.word	0x0800608d
 8005ff0:	0800608d 	.word	0x0800608d
 8005ff4:	0800608d 	.word	0x0800608d
 8005ff8:	0800608d 	.word	0x0800608d
 8005ffc:	0800608d 	.word	0x0800608d
 8006000:	0800608d 	.word	0x0800608d
 8006004:	0800608d 	.word	0x0800608d
 8006008:	0800608d 	.word	0x0800608d
 800600c:	0800608d 	.word	0x0800608d
 8006010:	0800608d 	.word	0x0800608d
 8006014:	0800608d 	.word	0x0800608d
 8006018:	0800608d 	.word	0x0800608d
 800601c:	0800608d 	.word	0x0800608d
 8006020:	0800608d 	.word	0x0800608d
 8006024:	08006085 	.word	0x08006085
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006028:	f7fc fef4 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 800602c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800602e:	e033      	b.n	8006098 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006030:	f7fc ff06 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 8006034:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006036:	e02f      	b.n	8006098 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	4618      	mov	r0, r3
 800603e:	f7fd f9a3 	bl	8003388 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006046:	e027      	b.n	8006098 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006048:	f107 0308 	add.w	r3, r7, #8
 800604c:	4618      	mov	r0, r3
 800604e:	f7fd fae7 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006056:	e01f      	b.n	8006098 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006058:	4b2b      	ldr	r3, [pc, #172]	; (8006108 <UART_SetConfig+0x94c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b00      	cmp	r3, #0
 8006062:	d009      	beq.n	8006078 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006064:	4b28      	ldr	r3, [pc, #160]	; (8006108 <UART_SetConfig+0x94c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	08db      	lsrs	r3, r3, #3
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	4a27      	ldr	r2, [pc, #156]	; (800610c <UART_SetConfig+0x950>)
 8006070:	fa22 f303 	lsr.w	r3, r2, r3
 8006074:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006076:	e00f      	b.n	8006098 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006078:	4b24      	ldr	r3, [pc, #144]	; (800610c <UART_SetConfig+0x950>)
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800607c:	e00c      	b.n	8006098 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800607e:	4b24      	ldr	r3, [pc, #144]	; (8006110 <UART_SetConfig+0x954>)
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006082:	e009      	b.n	8006098 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800608a:	e005      	b.n	8006098 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006096:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8121 	beq.w	80062e2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	4a17      	ldr	r2, [pc, #92]	; (8006104 <UART_SetConfig+0x948>)
 80060a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060aa:	461a      	mov	r2, r3
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80060b2:	005a      	lsls	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	441a      	add	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	2b0f      	cmp	r3, #15
 80060cc:	d916      	bls.n	80060fc <UART_SetConfig+0x940>
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d4:	d212      	bcs.n	80060fc <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f023 030f 	bic.w	r3, r3, #15
 80060de:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060ee:	4313      	orrs	r3, r2
 80060f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060f8:	60da      	str	r2, [r3, #12]
 80060fa:	e0f2      	b.n	80062e2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006102:	e0ee      	b.n	80062e2 <UART_SetConfig+0xb26>
 8006104:	0800b0ac 	.word	0x0800b0ac
 8006108:	58024400 	.word	0x58024400
 800610c:	03d09000 	.word	0x03d09000
 8006110:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006114:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	f200 80b7 	bhi.w	800628c <UART_SetConfig+0xad0>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <UART_SetConfig+0x968>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	08006229 	.word	0x08006229
 8006128:	08006231 	.word	0x08006231
 800612c:	0800628d 	.word	0x0800628d
 8006130:	0800628d 	.word	0x0800628d
 8006134:	08006239 	.word	0x08006239
 8006138:	0800628d 	.word	0x0800628d
 800613c:	0800628d 	.word	0x0800628d
 8006140:	0800628d 	.word	0x0800628d
 8006144:	08006249 	.word	0x08006249
 8006148:	0800628d 	.word	0x0800628d
 800614c:	0800628d 	.word	0x0800628d
 8006150:	0800628d 	.word	0x0800628d
 8006154:	0800628d 	.word	0x0800628d
 8006158:	0800628d 	.word	0x0800628d
 800615c:	0800628d 	.word	0x0800628d
 8006160:	0800628d 	.word	0x0800628d
 8006164:	08006259 	.word	0x08006259
 8006168:	0800628d 	.word	0x0800628d
 800616c:	0800628d 	.word	0x0800628d
 8006170:	0800628d 	.word	0x0800628d
 8006174:	0800628d 	.word	0x0800628d
 8006178:	0800628d 	.word	0x0800628d
 800617c:	0800628d 	.word	0x0800628d
 8006180:	0800628d 	.word	0x0800628d
 8006184:	0800628d 	.word	0x0800628d
 8006188:	0800628d 	.word	0x0800628d
 800618c:	0800628d 	.word	0x0800628d
 8006190:	0800628d 	.word	0x0800628d
 8006194:	0800628d 	.word	0x0800628d
 8006198:	0800628d 	.word	0x0800628d
 800619c:	0800628d 	.word	0x0800628d
 80061a0:	0800628d 	.word	0x0800628d
 80061a4:	0800627f 	.word	0x0800627f
 80061a8:	0800628d 	.word	0x0800628d
 80061ac:	0800628d 	.word	0x0800628d
 80061b0:	0800628d 	.word	0x0800628d
 80061b4:	0800628d 	.word	0x0800628d
 80061b8:	0800628d 	.word	0x0800628d
 80061bc:	0800628d 	.word	0x0800628d
 80061c0:	0800628d 	.word	0x0800628d
 80061c4:	0800628d 	.word	0x0800628d
 80061c8:	0800628d 	.word	0x0800628d
 80061cc:	0800628d 	.word	0x0800628d
 80061d0:	0800628d 	.word	0x0800628d
 80061d4:	0800628d 	.word	0x0800628d
 80061d8:	0800628d 	.word	0x0800628d
 80061dc:	0800628d 	.word	0x0800628d
 80061e0:	0800628d 	.word	0x0800628d
 80061e4:	0800628d 	.word	0x0800628d
 80061e8:	0800628d 	.word	0x0800628d
 80061ec:	0800628d 	.word	0x0800628d
 80061f0:	0800628d 	.word	0x0800628d
 80061f4:	0800628d 	.word	0x0800628d
 80061f8:	0800628d 	.word	0x0800628d
 80061fc:	0800628d 	.word	0x0800628d
 8006200:	0800628d 	.word	0x0800628d
 8006204:	0800628d 	.word	0x0800628d
 8006208:	0800628d 	.word	0x0800628d
 800620c:	0800628d 	.word	0x0800628d
 8006210:	0800628d 	.word	0x0800628d
 8006214:	0800628d 	.word	0x0800628d
 8006218:	0800628d 	.word	0x0800628d
 800621c:	0800628d 	.word	0x0800628d
 8006220:	0800628d 	.word	0x0800628d
 8006224:	08006285 	.word	0x08006285
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006228:	f7fc fdf4 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 800622c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800622e:	e033      	b.n	8006298 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006230:	f7fc fe06 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 8006234:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006236:	e02f      	b.n	8006298 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006238:	f107 0314 	add.w	r3, r7, #20
 800623c:	4618      	mov	r0, r3
 800623e:	f7fd f8a3 	bl	8003388 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006246:	e027      	b.n	8006298 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006248:	f107 0308 	add.w	r3, r7, #8
 800624c:	4618      	mov	r0, r3
 800624e:	f7fd f9e7 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006256:	e01f      	b.n	8006298 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006258:	4b2c      	ldr	r3, [pc, #176]	; (800630c <UART_SetConfig+0xb50>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006264:	4b29      	ldr	r3, [pc, #164]	; (800630c <UART_SetConfig+0xb50>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	08db      	lsrs	r3, r3, #3
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	4a28      	ldr	r2, [pc, #160]	; (8006310 <UART_SetConfig+0xb54>)
 8006270:	fa22 f303 	lsr.w	r3, r2, r3
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006276:	e00f      	b.n	8006298 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8006278:	4b25      	ldr	r3, [pc, #148]	; (8006310 <UART_SetConfig+0xb54>)
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800627c:	e00c      	b.n	8006298 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800627e:	4b25      	ldr	r3, [pc, #148]	; (8006314 <UART_SetConfig+0xb58>)
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006282:	e009      	b.n	8006298 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800628a:	e005      	b.n	8006298 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006296:	bf00      	nop
    }

    if (pclk != 0U)
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d021      	beq.n	80062e2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <UART_SetConfig+0xb5c>)
 80062a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062a8:	461a      	mov	r2, r3
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	085b      	lsrs	r3, r3, #1
 80062b6:	441a      	add	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	2b0f      	cmp	r3, #15
 80062c8:	d908      	bls.n	80062dc <UART_SetConfig+0xb20>
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d0:	d204      	bcs.n	80062dc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	e002      	b.n	80062e2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80062fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006302:	4618      	mov	r0, r3
 8006304:	3738      	adds	r7, #56	; 0x38
 8006306:	46bd      	mov	sp, r7
 8006308:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800630c:	58024400 	.word	0x58024400
 8006310:	03d09000 	.word	0x03d09000
 8006314:	003d0900 	.word	0x003d0900
 8006318:	0800b0ac 	.word	0x0800b0ac

0800631c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01a      	beq.n	8006432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800641a:	d10a      	bne.n	8006432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	605a      	str	r2, [r3, #4]
  }
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af02      	add	r7, sp, #8
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006470:	f7fa ff6e 	bl	8001350 <HAL_GetTick>
 8006474:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b08      	cmp	r3, #8
 8006482:	d10e      	bne.n	80064a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f82c 	bl	80064f0 <UART_WaitOnFlagUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e022      	b.n	80064e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d10e      	bne.n	80064ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f816 	bl	80064f0 <UART_WaitOnFlagUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e00c      	b.n	80064e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006500:	e062      	b.n	80065c8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006508:	d05e      	beq.n	80065c8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800650a:	f7fa ff21 	bl	8001350 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	429a      	cmp	r2, r3
 8006518:	d302      	bcc.n	8006520 <UART_WaitOnFlagUntilTimeout+0x30>
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d11d      	bne.n	800655c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800652e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0201 	bic.w	r2, r2, #1
 800653e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2220      	movs	r2, #32
 800654c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e045      	b.n	80065e8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d02e      	beq.n	80065c8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006578:	d126      	bne.n	80065c8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006582:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006592:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e00f      	b.n	80065e8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69da      	ldr	r2, [r3, #28]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4013      	ands	r3, r2
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	bf0c      	ite	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2300      	movne	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d08d      	beq.n	8006502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006606:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6899      	ldr	r1, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b08      	ldr	r3, [pc, #32]	; (8006634 <UART_EndRxTransfer+0x44>)
 8006614:	400b      	ands	r3, r1
 8006616:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	effffffe 	.word	0xeffffffe

08006638 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff f8a6 	bl	80057a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800665c:	bf00      	nop
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800667a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff f882 	bl	8005794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <HAL_UARTEx_DisableFifoMode+0x16>
 80066e6:	2302      	movs	r3, #2
 80066e8:	e027      	b.n	800673a <HAL_UARTEx_DisableFifoMode+0x66>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2224      	movs	r2, #36	; 0x24
 80066f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0201 	bic.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006718:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800675a:	2302      	movs	r3, #2
 800675c:	e02d      	b.n	80067ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2224      	movs	r2, #36	; 0x24
 800676a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f850 	bl	8006840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067d6:	2302      	movs	r3, #2
 80067d8:	e02d      	b.n	8006836 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2224      	movs	r2, #36	; 0x24
 80067e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0201 	bic.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f812 	bl	8006840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b089      	sub	sp, #36	; 0x24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006848:	4a2f      	ldr	r2, [pc, #188]	; (8006908 <UARTEx_SetNbDataToProcess+0xc8>)
 800684a:	f107 0314 	add.w	r3, r7, #20
 800684e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006852:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006856:	4a2d      	ldr	r2, [pc, #180]	; (800690c <UARTEx_SetNbDataToProcess+0xcc>)
 8006858:	f107 030c 	add.w	r3, r7, #12
 800685c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006860:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006868:	2b00      	cmp	r3, #0
 800686a:	d108      	bne.n	800687e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800687c:	e03d      	b.n	80068fa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800687e:	2310      	movs	r3, #16
 8006880:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006882:	2310      	movs	r3, #16
 8006884:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	0e5b      	lsrs	r3, r3, #25
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	0f5b      	lsrs	r3, r3, #29
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80068a6:	7fbb      	ldrb	r3, [r7, #30]
 80068a8:	7f3a      	ldrb	r2, [r7, #28]
 80068aa:	f107 0120 	add.w	r1, r7, #32
 80068ae:	440a      	add	r2, r1
 80068b0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80068b4:	fb02 f303 	mul.w	r3, r2, r3
 80068b8:	7f3a      	ldrb	r2, [r7, #28]
 80068ba:	f107 0120 	add.w	r1, r7, #32
 80068be:	440a      	add	r2, r1
 80068c0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80068c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80068d0:	7ffb      	ldrb	r3, [r7, #31]
 80068d2:	7f7a      	ldrb	r2, [r7, #29]
 80068d4:	f107 0120 	add.w	r1, r7, #32
 80068d8:	440a      	add	r2, r1
 80068da:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80068de:	fb02 f303 	mul.w	r3, r2, r3
 80068e2:	7f7a      	ldrb	r2, [r7, #29]
 80068e4:	f107 0120 	add.w	r1, r7, #32
 80068e8:	440a      	add	r2, r1
 80068ea:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80068ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80068fa:	bf00      	nop
 80068fc:	3724      	adds	r7, #36	; 0x24
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	0800b048 	.word	0x0800b048
 800690c:	0800b050 	.word	0x0800b050

08006910 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006910:	b084      	sub	sp, #16
 8006912:	b480      	push	{r7}
 8006914:	b085      	sub	sp, #20
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	f107 001c 	add.w	r0, r7, #28
 800691e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006926:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8006928:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800692a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800692e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8006932:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8006936:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	4b07      	ldr	r3, [pc, #28]	; (8006960 <SDMMC_Init+0x50>)
 8006944:	4013      	ands	r3, r2
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	b004      	add	sp, #16
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	ffc02c00 	.word	0xffc02c00

08006964 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f043 0203 	orr.w	r2, r3, #3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0303 	and.w	r3, r3, #3
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
	...

080069e0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069fe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006a04:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006a0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <SDMMC_SendCommand+0x50>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	fffee0c0 	.word	0xfffee0c0

08006a34 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	b2db      	uxtb	r3, r3
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3314      	adds	r3, #20
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	4413      	add	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a9a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006aa0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006aa6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0

}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006ada:	2310      	movs	r3, #16
 8006adc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006aee:	f107 0308 	add.w	r3, r7, #8
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff ff73 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afe:	2110      	movs	r1, #16
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 faaf 	bl	8007064 <SDMMC_GetCmdResp1>
 8006b06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b08:	69fb      	ldr	r3, [r7, #28]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3720      	adds	r7, #32
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b088      	sub	sp, #32
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006b20:	2311      	movs	r3, #17
 8006b22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b34:	f107 0308 	add.w	r3, r7, #8
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff ff50 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b44:	2111      	movs	r1, #17
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa8c 	bl	8007064 <SDMMC_GetCmdResp1>
 8006b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b4e:	69fb      	ldr	r3, [r7, #28]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3720      	adds	r7, #32
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006b66:	2312      	movs	r3, #18
 8006b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b70:	2300      	movs	r3, #0
 8006b72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b7a:	f107 0308 	add.w	r3, r7, #8
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff ff2d 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8a:	2112      	movs	r1, #18
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fa69 	bl	8007064 <SDMMC_GetCmdResp1>
 8006b92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b94:	69fb      	ldr	r3, [r7, #28]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3720      	adds	r7, #32
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b088      	sub	sp, #32
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006bac:	2318      	movs	r3, #24
 8006bae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006bc0:	f107 0308 	add.w	r3, r7, #8
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff ff0a 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd0:	2118      	movs	r1, #24
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa46 	bl	8007064 <SDMMC_GetCmdResp1>
 8006bd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bda:	69fb      	ldr	r3, [r7, #28]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006bf2:	2319      	movs	r3, #25
 8006bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c06:	f107 0308 	add.w	r3, r7, #8
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff fee7 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c16:	2119      	movs	r1, #25
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fa23 	bl	8007064 <SDMMC_GetCmdResp1>
 8006c1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c20:	69fb      	ldr	r3, [r7, #28]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3720      	adds	r7, #32
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006c38:	230c      	movs	r3, #12
 8006c3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c4a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c64:	f107 0308 	add.w	r3, r7, #8
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff feb8 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006c70:	4a0b      	ldr	r2, [pc, #44]	; (8006ca0 <SDMMC_CmdStopTransfer+0x74>)
 8006c72:	210c      	movs	r1, #12
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f9f5 	bl	8007064 <SDMMC_GetCmdResp1>
 8006c7a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c8e:	d101      	bne.n	8006c94 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8006c94:	69fb      	ldr	r3, [r7, #28]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	05f5e100 	.word	0x05f5e100

08006ca4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08a      	sub	sp, #40	; 0x28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006cb4:	2307      	movs	r3, #7
 8006cb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cbc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cc6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cc8:	f107 0310 	add.w	r3, r7, #16
 8006ccc:	4619      	mov	r1, r3
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fe86 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd8:	2107      	movs	r1, #7
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 f9c2 	bl	8007064 <SDMMC_GetCmdResp1>
 8006ce0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3728      	adds	r7, #40	; 0x28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d00:	2300      	movs	r3, #0
 8006d02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d0a:	f107 0308 	add.w	r3, r7, #8
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff fe65 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f976 	bl	8007008 <SDMMC_GetCmdError>
 8006d1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006d30:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006d34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006d36:	2308      	movs	r3, #8
 8006d38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d4a:	f107 0308 	add.w	r3, r7, #8
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff fe45 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fb78 	bl	800744c <SDMMC_GetCmdResp7>
 8006d5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d5e:	69fb      	ldr	r3, [r7, #28]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3720      	adds	r7, #32
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006d76:	2337      	movs	r3, #55	; 0x37
 8006d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d8a:	f107 0308 	add.w	r3, r7, #8
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fe25 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9a:	2137      	movs	r1, #55	; 0x37
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f961 	bl	8007064 <SDMMC_GetCmdResp1>
 8006da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006da4:	69fb      	ldr	r3, [r7, #28]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b088      	sub	sp, #32
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006dbc:	2329      	movs	r3, #41	; 0x29
 8006dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006dd0:	f107 0308 	add.w	r3, r7, #8
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff fe02 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fa7d 	bl	80072dc <SDMMC_GetCmdResp3>
 8006de2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006de4:	69fb      	ldr	r3, [r7, #28]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3720      	adds	r7, #32
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b088      	sub	sp, #32
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006dfc:	2306      	movs	r3, #6
 8006dfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e06:	2300      	movs	r3, #0
 8006e08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e10:	f107 0308 	add.w	r3, r7, #8
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff fde2 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e20:	2106      	movs	r1, #6
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f91e 	bl	8007064 <SDMMC_GetCmdResp1>
 8006e28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e2a:	69fb      	ldr	r3, [r7, #28]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3720      	adds	r7, #32
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b088      	sub	sp, #32
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006e40:	2333      	movs	r3, #51	; 0x33
 8006e42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e54:	f107 0308 	add.w	r3, r7, #8
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff fdc0 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e64:	2133      	movs	r1, #51	; 0x33
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f8fc 	bl	8007064 <SDMMC_GetCmdResp1>
 8006e6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e6e:	69fb      	ldr	r3, [r7, #28]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3720      	adds	r7, #32
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006e84:	2302      	movs	r3, #2
 8006e86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006e88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e98:	f107 0308 	add.w	r3, r7, #8
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff fd9e 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f9cf 	bl	8007248 <SDMMC_GetCmdResp2>
 8006eaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006eac:	69fb      	ldr	r3, [r7, #28]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b088      	sub	sp, #32
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006ec4:	2309      	movs	r3, #9
 8006ec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006ec8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ed6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ed8:	f107 0308 	add.w	r3, r7, #8
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff fd7e 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f9af 	bl	8007248 <SDMMC_GetCmdResp2>
 8006eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006eec:	69fb      	ldr	r3, [r7, #28]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b088      	sub	sp, #32
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006f04:	2303      	movs	r3, #3
 8006f06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f18:	f107 0308 	add.w	r3, r7, #8
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff fd5e 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	2103      	movs	r1, #3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fa17 	bl	800735c <SDMMC_GetCmdResp6>
 8006f2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f30:	69fb      	ldr	r3, [r7, #28]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3720      	adds	r7, #32
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b088      	sub	sp, #32
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006f48:	230d      	movs	r3, #13
 8006f4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f5c:	f107 0308 	add.w	r3, r7, #8
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fd3c 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6c:	210d      	movs	r1, #13
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f878 	bl	8007064 <SDMMC_GetCmdResp1>
 8006f74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f76:	69fb      	ldr	r3, [r7, #28]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3720      	adds	r7, #32
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8006f8c:	230d      	movs	r3, #13
 8006f8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f96:	2300      	movs	r3, #0
 8006f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006fa0:	f107 0308 	add.w	r3, r7, #8
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff fd1a 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb0:	210d      	movs	r1, #13
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f856 	bl	8007064 <SDMMC_GetCmdResp1>
 8006fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fba:	69fb      	ldr	r3, [r7, #28]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8006fd0:	230b      	movs	r3, #11
 8006fd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fe2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006fe4:	f107 0308 	add.w	r3, r7, #8
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7ff fcf8 	bl	80069e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8006ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff4:	210b      	movs	r1, #11
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f834 	bl	8007064 <SDMMC_GetCmdResp1>
 8006ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3720      	adds	r7, #32
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007010:	4b11      	ldr	r3, [pc, #68]	; (8007058 <SDMMC_GetCmdError+0x50>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a11      	ldr	r2, [pc, #68]	; (800705c <SDMMC_GetCmdError+0x54>)
 8007016:	fba2 2303 	umull	r2, r3, r2, r3
 800701a:	0a5b      	lsrs	r3, r3, #9
 800701c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007020:	fb02 f303 	mul.w	r3, r2, r3
 8007024:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	60fa      	str	r2, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d102      	bne.n	8007036 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007030:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007034:	e009      	b.n	800704a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0f1      	beq.n	8007026 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a06      	ldr	r2, [pc, #24]	; (8007060 <SDMMC_GetCmdError+0x58>)
 8007046:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000000 	.word	0x20000000
 800705c:	10624dd3 	.word	0x10624dd3
 8007060:	002000c5 	.word	0x002000c5

08007064 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	460b      	mov	r3, r1
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007072:	4b70      	ldr	r3, [pc, #448]	; (8007234 <SDMMC_GetCmdResp1+0x1d0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a70      	ldr	r2, [pc, #448]	; (8007238 <SDMMC_GetCmdResp1+0x1d4>)
 8007078:	fba2 2303 	umull	r2, r3, r2, r3
 800707c:	0a5a      	lsrs	r2, r3, #9
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	fb02 f303 	mul.w	r3, r2, r3
 8007084:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	1e5a      	subs	r2, r3, #1
 800708a:	61fa      	str	r2, [r7, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007090:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007094:	e0c9      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	4b67      	ldr	r3, [pc, #412]	; (800723c <SDMMC_GetCmdResp1+0x1d8>)
 80070a0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0ef      	beq.n	8007086 <SDMMC_GetCmdResp1+0x22>
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1ea      	bne.n	8007086 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d004      	beq.n	80070c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2204      	movs	r2, #4
 80070c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070c2:	2304      	movs	r3, #4
 80070c4:	e0b1      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070d8:	2301      	movs	r3, #1
 80070da:	e0a6      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a58      	ldr	r2, [pc, #352]	; (8007240 <SDMMC_GetCmdResp1+0x1dc>)
 80070e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff fca6 	bl	8006a34 <SDMMC_GetCommandResponse>
 80070e8:	4603      	mov	r3, r0
 80070ea:	461a      	mov	r2, r3
 80070ec:	7afb      	ldrb	r3, [r7, #11]
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d001      	beq.n	80070f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e099      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80070f6:	2100      	movs	r1, #0
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7ff fca8 	bl	8006a4e <SDMMC_GetResponse>
 80070fe:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	4b50      	ldr	r3, [pc, #320]	; (8007244 <SDMMC_GetCmdResp1+0x1e0>)
 8007104:	4013      	ands	r3, r2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800710a:	2300      	movs	r3, #0
 800710c:	e08d      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	da02      	bge.n	800711a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007118:	e087      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007124:	2340      	movs	r3, #64	; 0x40
 8007126:	e080      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007132:	2380      	movs	r3, #128	; 0x80
 8007134:	e079      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007144:	e071      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007154:	e069      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007164:	e061      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007170:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007174:	e059      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007184:	e051      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007194:	e049      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80071a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071a4:	e041      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80071b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071b4:	e039      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80071c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071c4:	e031      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80071d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80071d4:	e029      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80071e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071e4:	e021      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80071f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80071f4:	e019      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007200:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007204:	e011      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007210:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007214:	e009      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007220:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007224:	e001      	b.n	800722a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800722a:	4618      	mov	r0, r3
 800722c:	3720      	adds	r7, #32
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000000 	.word	0x20000000
 8007238:	10624dd3 	.word	0x10624dd3
 800723c:	00200045 	.word	0x00200045
 8007240:	002000c5 	.word	0x002000c5
 8007244:	fdffe008 	.word	0xfdffe008

08007248 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007250:	4b1f      	ldr	r3, [pc, #124]	; (80072d0 <SDMMC_GetCmdResp2+0x88>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1f      	ldr	r2, [pc, #124]	; (80072d4 <SDMMC_GetCmdResp2+0x8c>)
 8007256:	fba2 2303 	umull	r2, r3, r2, r3
 800725a:	0a5b      	lsrs	r3, r3, #9
 800725c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007260:	fb02 f303 	mul.w	r3, r2, r3
 8007264:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	1e5a      	subs	r2, r3, #1
 800726a:	60fa      	str	r2, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007270:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007274:	e026      	b.n	80072c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0ef      	beq.n	8007266 <SDMMC_GetCmdResp2+0x1e>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1ea      	bne.n	8007266 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2204      	movs	r2, #4
 80072a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072a2:	2304      	movs	r3, #4
 80072a4:	e00e      	b.n	80072c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d004      	beq.n	80072bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e003      	b.n	80072c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a06      	ldr	r2, [pc, #24]	; (80072d8 <SDMMC_GetCmdResp2+0x90>)
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	20000000 	.word	0x20000000
 80072d4:	10624dd3 	.word	0x10624dd3
 80072d8:	002000c5 	.word	0x002000c5

080072dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072e4:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <SDMMC_GetCmdResp3+0x74>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a1a      	ldr	r2, [pc, #104]	; (8007354 <SDMMC_GetCmdResp3+0x78>)
 80072ea:	fba2 2303 	umull	r2, r3, r2, r3
 80072ee:	0a5b      	lsrs	r3, r3, #9
 80072f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f4:	fb02 f303 	mul.w	r3, r2, r3
 80072f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	1e5a      	subs	r2, r3, #1
 80072fe:	60fa      	str	r2, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d102      	bne.n	800730a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007304:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007308:	e01b      	b.n	8007342 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0ef      	beq.n	80072fa <SDMMC_GetCmdResp3+0x1e>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1ea      	bne.n	80072fa <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2204      	movs	r2, #4
 8007334:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007336:	2304      	movs	r3, #4
 8007338:	e003      	b.n	8007342 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a06      	ldr	r2, [pc, #24]	; (8007358 <SDMMC_GetCmdResp3+0x7c>)
 800733e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	20000000 	.word	0x20000000
 8007354:	10624dd3 	.word	0x10624dd3
 8007358:	002000c5 	.word	0x002000c5

0800735c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	460b      	mov	r3, r1
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800736a:	4b35      	ldr	r3, [pc, #212]	; (8007440 <SDMMC_GetCmdResp6+0xe4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a35      	ldr	r2, [pc, #212]	; (8007444 <SDMMC_GetCmdResp6+0xe8>)
 8007370:	fba2 2303 	umull	r2, r3, r2, r3
 8007374:	0a5b      	lsrs	r3, r3, #9
 8007376:	f241 3288 	movw	r2, #5000	; 0x1388
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	1e5a      	subs	r2, r3, #1
 8007384:	61fa      	str	r2, [r7, #28]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d102      	bne.n	8007390 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800738a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800738e:	e052      	b.n	8007436 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007394:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0ef      	beq.n	8007380 <SDMMC_GetCmdResp6+0x24>
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1ea      	bne.n	8007380 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d004      	beq.n	80073c0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2204      	movs	r2, #4
 80073ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073bc:	2304      	movs	r3, #4
 80073be:	e03a      	b.n	8007436 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2201      	movs	r2, #1
 80073d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e02f      	b.n	8007436 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff fb2c 	bl	8006a34 <SDMMC_GetCommandResponse>
 80073dc:	4603      	mov	r3, r0
 80073de:	461a      	mov	r2, r3
 80073e0:	7afb      	ldrb	r3, [r7, #11]
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d001      	beq.n	80073ea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e025      	b.n	8007436 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4a16      	ldr	r2, [pc, #88]	; (8007448 <SDMMC_GetCmdResp6+0xec>)
 80073ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80073f0:	2100      	movs	r1, #0
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7ff fb2b 	bl	8006a4e <SDMMC_GetResponse>
 80073f8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d106      	bne.n	8007412 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	0c1b      	lsrs	r3, r3, #16
 8007408:	b29a      	uxth	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800740e:	2300      	movs	r3, #0
 8007410:	e011      	b.n	8007436 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800741c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007420:	e009      	b.n	8007436 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800742c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007430:	e001      	b.n	8007436 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007436:	4618      	mov	r0, r3
 8007438:	3720      	adds	r7, #32
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000000 	.word	0x20000000
 8007444:	10624dd3 	.word	0x10624dd3
 8007448:	002000c5 	.word	0x002000c5

0800744c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007454:	4b22      	ldr	r3, [pc, #136]	; (80074e0 <SDMMC_GetCmdResp7+0x94>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a22      	ldr	r2, [pc, #136]	; (80074e4 <SDMMC_GetCmdResp7+0x98>)
 800745a:	fba2 2303 	umull	r2, r3, r2, r3
 800745e:	0a5b      	lsrs	r3, r3, #9
 8007460:	f241 3288 	movw	r2, #5000	; 0x1388
 8007464:	fb02 f303 	mul.w	r3, r2, r3
 8007468:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	1e5a      	subs	r2, r3, #1
 800746e:	60fa      	str	r2, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007478:	e02c      	b.n	80074d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0ef      	beq.n	800746a <SDMMC_GetCmdResp7+0x1e>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1ea      	bne.n	800746a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	d004      	beq.n	80074aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2204      	movs	r2, #4
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074a6:	2304      	movs	r3, #4
 80074a8:	e014      	b.n	80074d4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d004      	beq.n	80074c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074bc:	2301      	movs	r3, #1
 80074be:	e009      	b.n	80074d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2240      	movs	r2, #64	; 0x40
 80074d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80074d2:	2300      	movs	r3, #0

}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	20000000 	.word	0x20000000
 80074e4:	10624dd3 	.word	0x10624dd3

080074e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80074ec:	4904      	ldr	r1, [pc, #16]	; (8007500 <MX_FATFS_Init+0x18>)
 80074ee:	4805      	ldr	r0, [pc, #20]	; (8007504 <MX_FATFS_Init+0x1c>)
 80074f0:	f002 fd1a 	bl	8009f28 <FATFS_LinkDriver>
 80074f4:	4603      	mov	r3, r0
 80074f6:	461a      	mov	r2, r3
 80074f8:	4b03      	ldr	r3, [pc, #12]	; (8007508 <MX_FATFS_Init+0x20>)
 80074fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80074fc:	bf00      	nop
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	2000064c 	.word	0x2000064c
 8007504:	0800b0c4 	.word	0x0800b0c4
 8007508:	20000648 	.word	0x20000648

0800750c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007510:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007512:	4618      	mov	r0, r3
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007526:	f000 f86b 	bl	8007600 <BSP_SD_IsDetected>
 800752a:	4603      	mov	r3, r0
 800752c:	2b01      	cmp	r3, #1
 800752e:	d001      	beq.n	8007534 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007530:	2302      	movs	r3, #2
 8007532:	e005      	b.n	8007540 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007534:	4804      	ldr	r0, [pc, #16]	; (8007548 <BSP_SD_Init+0x2c>)
 8007536:	f7fc fb0b 	bl	8003b50 <HAL_SD_Init>
 800753a:	4603      	mov	r3, r0
 800753c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800753e:	79fb      	ldrb	r3, [r7, #7]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	200000d0 	.word	0x200000d0

0800754c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af02      	add	r7, sp, #8
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	4806      	ldr	r0, [pc, #24]	; (8007584 <BSP_SD_ReadBlocks+0x38>)
 800756a:	f7fc fc15 	bl	8003d98 <HAL_SD_ReadBlocks>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	200000d0 	.word	0x200000d0

08007588 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af02      	add	r7, sp, #8
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	68f9      	ldr	r1, [r7, #12]
 80075a4:	4806      	ldr	r0, [pc, #24]	; (80075c0 <BSP_SD_WriteBlocks+0x38>)
 80075a6:	f7fc fd81 	bl	80040ac <HAL_SD_WriteBlocks>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	200000d0 	.word	0x200000d0

080075c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80075c8:	4805      	ldr	r0, [pc, #20]	; (80075e0 <BSP_SD_GetCardState+0x1c>)
 80075ca:	f7fd fa39 	bl	8004a40 <HAL_SD_GetCardState>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	bf14      	ite	ne
 80075d4:	2301      	movne	r3, #1
 80075d6:	2300      	moveq	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
}
 80075da:	4618      	mov	r0, r3
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	200000d0 	.word	0x200000d0

080075e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4803      	ldr	r0, [pc, #12]	; (80075fc <BSP_SD_GetCardInfo+0x18>)
 80075f0:	f7fd f950 	bl	8004894 <HAL_SD_GetCardInfo>
}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	200000d0 	.word	0x200000d0

08007600 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007606:	2301      	movs	r3, #1
 8007608:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	b2db      	uxtb	r3, r3
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007626:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <SD_CheckStatus+0x38>)
 8007628:	2201      	movs	r2, #1
 800762a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800762c:	f7ff ffca 	bl	80075c4 <BSP_SD_GetCardState>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d107      	bne.n	8007646 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007636:	4b07      	ldr	r3, [pc, #28]	; (8007654 <SD_CheckStatus+0x38>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	b2da      	uxtb	r2, r3
 8007642:	4b04      	ldr	r3, [pc, #16]	; (8007654 <SD_CheckStatus+0x38>)
 8007644:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007646:	4b03      	ldr	r3, [pc, #12]	; (8007654 <SD_CheckStatus+0x38>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	b2db      	uxtb	r3, r3
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	2000000d 	.word	0x2000000d

08007658 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007662:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <SD_initialize+0x38>)
 8007664:	2201      	movs	r2, #1
 8007666:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007668:	f7ff ff58 	bl	800751c <BSP_SD_Init>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d107      	bne.n	8007682 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff ffd1 	bl	800761c <SD_CheckStatus>
 800767a:	4603      	mov	r3, r0
 800767c:	461a      	mov	r2, r3
 800767e:	4b04      	ldr	r3, [pc, #16]	; (8007690 <SD_initialize+0x38>)
 8007680:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007682:	4b03      	ldr	r3, [pc, #12]	; (8007690 <SD_initialize+0x38>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	b2db      	uxtb	r3, r3
}
 8007688:	4618      	mov	r0, r3
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	2000000d 	.word	0x2000000d

08007694 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	4603      	mov	r3, r0
 800769c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff ffbb 	bl	800761c <SD_CheckStatus>
 80076a6:	4603      	mov	r3, r0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80076c4:	f04f 33ff 	mov.w	r3, #4294967295
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	68b8      	ldr	r0, [r7, #8]
 80076ce:	f7ff ff3d 	bl	800754c <BSP_SD_ReadBlocks>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d107      	bne.n	80076e8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80076d8:	bf00      	nop
 80076da:	f7ff ff73 	bl	80075c4 <BSP_SD_GetCardState>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1fa      	bne.n	80076da <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b086      	sub	sp, #24
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]
 80076fe:	4603      	mov	r3, r0
 8007700:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007706:	f04f 33ff 	mov.w	r3, #4294967295
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	68b8      	ldr	r0, [r7, #8]
 8007710:	f7ff ff3a 	bl	8007588 <BSP_SD_WriteBlocks>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d107      	bne.n	800772a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800771a:	bf00      	nop
 800771c:	f7ff ff52 	bl	80075c4 <BSP_SD_GetCardState>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1fa      	bne.n	800771c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08c      	sub	sp, #48	; 0x30
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	603a      	str	r2, [r7, #0]
 800773e:	71fb      	strb	r3, [r7, #7]
 8007740:	460b      	mov	r3, r1
 8007742:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800774a:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <SD_ioctl+0xac>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <SD_ioctl+0x28>
 8007758:	2303      	movs	r3, #3
 800775a:	e03c      	b.n	80077d6 <SD_ioctl+0xa2>

  switch (cmd)
 800775c:	79bb      	ldrb	r3, [r7, #6]
 800775e:	2b03      	cmp	r3, #3
 8007760:	d834      	bhi.n	80077cc <SD_ioctl+0x98>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <SD_ioctl+0x34>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	08007779 	.word	0x08007779
 800776c:	08007781 	.word	0x08007781
 8007770:	08007799 	.word	0x08007799
 8007774:	080077b3 	.word	0x080077b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800777e:	e028      	b.n	80077d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007780:	f107 0308 	add.w	r3, r7, #8
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff ff2d 	bl	80075e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800778a:	6a3a      	ldr	r2, [r7, #32]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007796:	e01c      	b.n	80077d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007798:	f107 0308 	add.w	r3, r7, #8
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff ff21 	bl	80075e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80077b0:	e00f      	b.n	80077d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80077b2:	f107 0308 	add.w	r3, r7, #8
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff ff14 	bl	80075e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	0a5a      	lsrs	r2, r3, #9
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80077ca:	e002      	b.n	80077d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80077cc:	2304      	movs	r3, #4
 80077ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80077d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3730      	adds	r7, #48	; 0x30
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	2000000d 	.word	0x2000000d

080077e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	4a08      	ldr	r2, [pc, #32]	; (8007814 <disk_status+0x30>)
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	79fa      	ldrb	r2, [r7, #7]
 80077fc:	4905      	ldr	r1, [pc, #20]	; (8007814 <disk_status+0x30>)
 80077fe:	440a      	add	r2, r1
 8007800:	7a12      	ldrb	r2, [r2, #8]
 8007802:	4610      	mov	r0, r2
 8007804:	4798      	blx	r3
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
  return stat;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	200000bc 	.word	0x200000bc

08007818 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	4a0d      	ldr	r2, [pc, #52]	; (8007860 <disk_initialize+0x48>)
 800782a:	5cd3      	ldrb	r3, [r2, r3]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d111      	bne.n	8007854 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007830:	79fb      	ldrb	r3, [r7, #7]
 8007832:	4a0b      	ldr	r2, [pc, #44]	; (8007860 <disk_initialize+0x48>)
 8007834:	2101      	movs	r1, #1
 8007836:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007838:	79fb      	ldrb	r3, [r7, #7]
 800783a:	4a09      	ldr	r2, [pc, #36]	; (8007860 <disk_initialize+0x48>)
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	79fa      	ldrb	r2, [r7, #7]
 8007846:	4906      	ldr	r1, [pc, #24]	; (8007860 <disk_initialize+0x48>)
 8007848:	440a      	add	r2, r1
 800784a:	7a12      	ldrb	r2, [r2, #8]
 800784c:	4610      	mov	r0, r2
 800784e:	4798      	blx	r3
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	200000bc 	.word	0x200000bc

08007864 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007864:	b590      	push	{r4, r7, lr}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	4a0a      	ldr	r2, [pc, #40]	; (80078a0 <disk_read+0x3c>)
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	689c      	ldr	r4, [r3, #8]
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	4a07      	ldr	r2, [pc, #28]	; (80078a0 <disk_read+0x3c>)
 8007884:	4413      	add	r3, r2
 8007886:	7a18      	ldrb	r0, [r3, #8]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	68b9      	ldr	r1, [r7, #8]
 800788e:	47a0      	blx	r4
 8007890:	4603      	mov	r3, r0
 8007892:	75fb      	strb	r3, [r7, #23]
  return res;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
}
 8007896:	4618      	mov	r0, r3
 8007898:	371c      	adds	r7, #28
 800789a:	46bd      	mov	sp, r7
 800789c:	bd90      	pop	{r4, r7, pc}
 800789e:	bf00      	nop
 80078a0:	200000bc 	.word	0x200000bc

080078a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80078a4:	b590      	push	{r4, r7, lr}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	4a0a      	ldr	r2, [pc, #40]	; (80078e0 <disk_write+0x3c>)
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	68dc      	ldr	r4, [r3, #12]
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	4a07      	ldr	r2, [pc, #28]	; (80078e0 <disk_write+0x3c>)
 80078c4:	4413      	add	r3, r2
 80078c6:	7a18      	ldrb	r0, [r3, #8]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	47a0      	blx	r4
 80078d0:	4603      	mov	r3, r0
 80078d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd90      	pop	{r4, r7, pc}
 80078de:	bf00      	nop
 80078e0:	200000bc 	.word	0x200000bc

080078e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	603a      	str	r2, [r7, #0]
 80078ee:	71fb      	strb	r3, [r7, #7]
 80078f0:	460b      	mov	r3, r1
 80078f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	4a09      	ldr	r2, [pc, #36]	; (800791c <disk_ioctl+0x38>)
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	79fa      	ldrb	r2, [r7, #7]
 8007902:	4906      	ldr	r1, [pc, #24]	; (800791c <disk_ioctl+0x38>)
 8007904:	440a      	add	r2, r1
 8007906:	7a10      	ldrb	r0, [r2, #8]
 8007908:	79b9      	ldrb	r1, [r7, #6]
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	4798      	blx	r3
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]
  return res;
 8007912:	7bfb      	ldrb	r3, [r7, #15]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	200000bc 	.word	0x200000bc

08007920 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3301      	adds	r3, #1
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007930:	89fb      	ldrh	r3, [r7, #14]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	b21a      	sxth	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	b21b      	sxth	r3, r3
 800793c:	4313      	orrs	r3, r2
 800793e:	b21b      	sxth	r3, r3
 8007940:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007942:	89fb      	ldrh	r3, [r7, #14]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3303      	adds	r3, #3
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	021b      	lsls	r3, r3, #8
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	3202      	adds	r2, #2
 8007968:	7812      	ldrb	r2, [r2, #0]
 800796a:	4313      	orrs	r3, r2
 800796c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	3201      	adds	r2, #1
 8007976:	7812      	ldrb	r2, [r2, #0]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	021b      	lsls	r3, r3, #8
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	7812      	ldrb	r2, [r2, #0]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
	return rv;
 8007988:	68fb      	ldr	r3, [r7, #12]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	887a      	ldrh	r2, [r7, #2]
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	887b      	ldrh	r3, [r7, #2]
 80079b0:	0a1b      	lsrs	r3, r3, #8
 80079b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	607a      	str	r2, [r7, #4]
 80079ba:	887a      	ldrh	r2, [r7, #2]
 80079bc:	b2d2      	uxtb	r2, r2
 80079be:	701a      	strb	r2, [r3, #0]
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	b2d2      	uxtb	r2, r2
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	0a1b      	lsrs	r3, r3, #8
 80079e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	607a      	str	r2, [r7, #4]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	b2d2      	uxtb	r2, r2
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	0a1b      	lsrs	r3, r3, #8
 80079f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	0a1b      	lsrs	r3, r3, #8
 8007a0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	607a      	str	r2, [r7, #4]
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	b2d2      	uxtb	r2, r2
 8007a16:	701a      	strb	r2, [r3, #0]
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00d      	beq.n	8007a5a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	1c53      	adds	r3, r2, #1
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	1c59      	adds	r1, r3, #1
 8007a48:	6179      	str	r1, [r7, #20]
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	607b      	str	r3, [r7, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1f1      	bne.n	8007a3e <mem_cpy+0x1a>
	}
}
 8007a5a:	bf00      	nop
 8007a5c:	371c      	adds	r7, #28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007a66:	b480      	push	{r7}
 8007a68:	b087      	sub	sp, #28
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	617a      	str	r2, [r7, #20]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	607b      	str	r3, [r7, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f3      	bne.n	8007a76 <mem_set+0x10>
}
 8007a8e:	bf00      	nop
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007a9a:	b480      	push	{r7}
 8007a9c:	b089      	sub	sp, #36	; 0x24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	1c5a      	adds	r2, r3, #1
 8007ab6:	61fa      	str	r2, [r7, #28]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	61ba      	str	r2, [r7, #24]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	1acb      	subs	r3, r1, r3
 8007ac6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	607b      	str	r3, [r7, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <mem_cmp+0x40>
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0eb      	beq.n	8007ab2 <mem_cmp+0x18>

	return r;
 8007ada:	697b      	ldr	r3, [r7, #20]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3724      	adds	r7, #36	; 0x24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007af2:	e002      	b.n	8007afa <chk_chr+0x12>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3301      	adds	r3, #1
 8007af8:	607b      	str	r3, [r7, #4]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <chk_chr+0x26>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d1f2      	bne.n	8007af4 <chk_chr+0xc>
	return *str;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	781b      	ldrb	r3, [r3, #0]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
	...

08007b20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60bb      	str	r3, [r7, #8]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	e029      	b.n	8007b88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007b34:	4a27      	ldr	r2, [pc, #156]	; (8007bd4 <chk_lock+0xb4>)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	4413      	add	r3, r2
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d01d      	beq.n	8007b7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b42:	4a24      	ldr	r2, [pc, #144]	; (8007bd4 <chk_lock+0xb4>)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	4413      	add	r3, r2
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d116      	bne.n	8007b82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007b54:	4a1f      	ldr	r2, [pc, #124]	; (8007bd4 <chk_lock+0xb4>)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	4413      	add	r3, r2
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d10c      	bne.n	8007b82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b68:	4a1a      	ldr	r2, [pc, #104]	; (8007bd4 <chk_lock+0xb4>)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	4413      	add	r3, r2
 8007b70:	3308      	adds	r3, #8
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d102      	bne.n	8007b82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b7c:	e007      	b.n	8007b8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3301      	adds	r3, #1
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d9d2      	bls.n	8007b34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d109      	bne.n	8007ba8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d102      	bne.n	8007ba0 <chk_lock+0x80>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d101      	bne.n	8007ba4 <chk_lock+0x84>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e010      	b.n	8007bc6 <chk_lock+0xa6>
 8007ba4:	2312      	movs	r3, #18
 8007ba6:	e00e      	b.n	8007bc6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d108      	bne.n	8007bc0 <chk_lock+0xa0>
 8007bae:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <chk_lock+0xb4>)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	011b      	lsls	r3, r3, #4
 8007bb4:	4413      	add	r3, r2
 8007bb6:	330c      	adds	r3, #12
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bbe:	d101      	bne.n	8007bc4 <chk_lock+0xa4>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	e000      	b.n	8007bc6 <chk_lock+0xa6>
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	2000009c 	.word	0x2000009c

08007bd8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007bde:	2300      	movs	r3, #0
 8007be0:	607b      	str	r3, [r7, #4]
 8007be2:	e002      	b.n	8007bea <enq_lock+0x12>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3301      	adds	r3, #1
 8007be8:	607b      	str	r3, [r7, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d806      	bhi.n	8007bfe <enq_lock+0x26>
 8007bf0:	4a09      	ldr	r2, [pc, #36]	; (8007c18 <enq_lock+0x40>)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	4413      	add	r3, r2
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f2      	bne.n	8007be4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	bf14      	ite	ne
 8007c04:	2301      	movne	r3, #1
 8007c06:	2300      	moveq	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	2000009c 	.word	0x2000009c

08007c1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]
 8007c2a:	e01f      	b.n	8007c6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007c2c:	4a41      	ldr	r2, [pc, #260]	; (8007d34 <inc_lock+0x118>)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	4413      	add	r3, r2
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d113      	bne.n	8007c66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007c3e:	4a3d      	ldr	r2, [pc, #244]	; (8007d34 <inc_lock+0x118>)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	4413      	add	r3, r2
 8007c46:	3304      	adds	r3, #4
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d109      	bne.n	8007c66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007c52:	4a38      	ldr	r2, [pc, #224]	; (8007d34 <inc_lock+0x118>)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	4413      	add	r3, r2
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d006      	beq.n	8007c74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d9dc      	bls.n	8007c2c <inc_lock+0x10>
 8007c72:	e000      	b.n	8007c76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007c74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d132      	bne.n	8007ce2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	e002      	b.n	8007c88 <inc_lock+0x6c>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3301      	adds	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d806      	bhi.n	8007c9c <inc_lock+0x80>
 8007c8e:	4a29      	ldr	r2, [pc, #164]	; (8007d34 <inc_lock+0x118>)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	4413      	add	r3, r2
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1f2      	bne.n	8007c82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d101      	bne.n	8007ca6 <inc_lock+0x8a>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e040      	b.n	8007d28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4922      	ldr	r1, [pc, #136]	; (8007d34 <inc_lock+0x118>)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	440b      	add	r3, r1
 8007cb2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	491e      	ldr	r1, [pc, #120]	; (8007d34 <inc_lock+0x118>)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	440b      	add	r3, r1
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	695a      	ldr	r2, [r3, #20]
 8007cc8:	491a      	ldr	r1, [pc, #104]	; (8007d34 <inc_lock+0x118>)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	440b      	add	r3, r1
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007cd4:	4a17      	ldr	r2, [pc, #92]	; (8007d34 <inc_lock+0x118>)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	4413      	add	r3, r2
 8007cdc:	330c      	adds	r3, #12
 8007cde:	2200      	movs	r2, #0
 8007ce0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d009      	beq.n	8007cfc <inc_lock+0xe0>
 8007ce8:	4a12      	ldr	r2, [pc, #72]	; (8007d34 <inc_lock+0x118>)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	4413      	add	r3, r2
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <inc_lock+0xe0>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e015      	b.n	8007d28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d108      	bne.n	8007d14 <inc_lock+0xf8>
 8007d02:	4a0c      	ldr	r2, [pc, #48]	; (8007d34 <inc_lock+0x118>)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	4413      	add	r3, r2
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	e001      	b.n	8007d18 <inc_lock+0xfc>
 8007d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d18:	4906      	ldr	r1, [pc, #24]	; (8007d34 <inc_lock+0x118>)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	011b      	lsls	r3, r3, #4
 8007d1e:	440b      	add	r3, r1
 8007d20:	330c      	adds	r3, #12
 8007d22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3301      	adds	r3, #1
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	2000009c 	.word	0x2000009c

08007d38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	607b      	str	r3, [r7, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d825      	bhi.n	8007d98 <dec_lock+0x60>
		n = Files[i].ctr;
 8007d4c:	4a17      	ldr	r2, [pc, #92]	; (8007dac <dec_lock+0x74>)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	011b      	lsls	r3, r3, #4
 8007d52:	4413      	add	r3, r2
 8007d54:	330c      	adds	r3, #12
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007d5a:	89fb      	ldrh	r3, [r7, #14]
 8007d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d60:	d101      	bne.n	8007d66 <dec_lock+0x2e>
 8007d62:	2300      	movs	r3, #0
 8007d64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007d66:	89fb      	ldrh	r3, [r7, #14]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <dec_lock+0x3a>
 8007d6c:	89fb      	ldrh	r3, [r7, #14]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007d72:	4a0e      	ldr	r2, [pc, #56]	; (8007dac <dec_lock+0x74>)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	4413      	add	r3, r2
 8007d7a:	330c      	adds	r3, #12
 8007d7c:	89fa      	ldrh	r2, [r7, #14]
 8007d7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007d80:	89fb      	ldrh	r3, [r7, #14]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d105      	bne.n	8007d92 <dec_lock+0x5a>
 8007d86:	4a09      	ldr	r2, [pc, #36]	; (8007dac <dec_lock+0x74>)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	4413      	add	r3, r2
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	737b      	strb	r3, [r7, #13]
 8007d96:	e001      	b.n	8007d9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007d98:	2302      	movs	r3, #2
 8007d9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007d9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	2000009c 	.word	0x2000009c

08007db0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e010      	b.n	8007de0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007dbe:	4a0d      	ldr	r2, [pc, #52]	; (8007df4 <clear_lock+0x44>)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	4413      	add	r3, r2
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d105      	bne.n	8007dda <clear_lock+0x2a>
 8007dce:	4a09      	ldr	r2, [pc, #36]	; (8007df4 <clear_lock+0x44>)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	4413      	add	r3, r2
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d9eb      	bls.n	8007dbe <clear_lock+0xe>
	}
}
 8007de6:	bf00      	nop
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	2000009c 	.word	0x2000009c

08007df8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	78db      	ldrb	r3, [r3, #3]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d034      	beq.n	8007e76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	7858      	ldrb	r0, [r3, #1]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	f7ff fd40 	bl	80078a4 <disk_write>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
 8007e2e:	e022      	b.n	8007e76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	1ad2      	subs	r2, r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d217      	bcs.n	8007e76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	789b      	ldrb	r3, [r3, #2]
 8007e4a:	613b      	str	r3, [r7, #16]
 8007e4c:	e010      	b.n	8007e70 <sync_window+0x78>
					wsect += fs->fsize;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4413      	add	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	7858      	ldrb	r0, [r3, #1]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007e62:	2301      	movs	r3, #1
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	f7ff fd1d 	bl	80078a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d8eb      	bhi.n	8007e4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d01b      	beq.n	8007ed0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff ffad 	bl	8007df8 <sync_window>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d113      	bne.n	8007ed0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	7858      	ldrb	r0, [r3, #1]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	f7ff fcd5 	bl	8007864 <disk_read>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d004      	beq.n	8007eca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff ff87 	bl	8007df8 <sync_window>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d158      	bne.n	8007fa6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b03      	cmp	r3, #3
 8007efa:	d148      	bne.n	8007f8e <sync_fs+0xb2>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	791b      	ldrb	r3, [r3, #4]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d144      	bne.n	8007f8e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3334      	adds	r3, #52	; 0x34
 8007f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff fda9 	bl	8007a66 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3334      	adds	r3, #52	; 0x34
 8007f18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f1c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7ff fd38 	bl	8007996 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3334      	adds	r3, #52	; 0x34
 8007f2a:	4921      	ldr	r1, [pc, #132]	; (8007fb0 <sync_fs+0xd4>)
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff fd4d 	bl	80079cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3334      	adds	r3, #52	; 0x34
 8007f36:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007f3a:	491e      	ldr	r1, [pc, #120]	; (8007fb4 <sync_fs+0xd8>)
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff fd45 	bl	80079cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3334      	adds	r3, #52	; 0x34
 8007f46:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4610      	mov	r0, r2
 8007f52:	f7ff fd3b 	bl	80079cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3334      	adds	r3, #52	; 0x34
 8007f5a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f7ff fd31 	bl	80079cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	7858      	ldrb	r0, [r3, #1]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f82:	2301      	movs	r3, #1
 8007f84:	f7ff fc8e 	bl	80078a4 <disk_write>
			fs->fsi_flag = 0;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	785b      	ldrb	r3, [r3, #1]
 8007f92:	2200      	movs	r2, #0
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fca4 	bl	80078e4 <disk_ioctl>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <sync_fs+0xca>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	41615252 	.word	0x41615252
 8007fb4:	61417272 	.word	0x61417272

08007fb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	3b02      	subs	r3, #2
 8007fc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	3b02      	subs	r3, #2
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d301      	bcc.n	8007fd8 <clust2sect+0x20>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e008      	b.n	8007fea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	895b      	ldrh	r3, [r3, #10]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	fb03 f202 	mul.w	r2, r3, r2
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	4413      	add	r3, r2
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b086      	sub	sp, #24
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d904      	bls.n	8008016 <get_fat+0x20>
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d302      	bcc.n	800801c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008016:	2301      	movs	r3, #1
 8008018:	617b      	str	r3, [r7, #20]
 800801a:	e08c      	b.n	8008136 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800801c:	f04f 33ff 	mov.w	r3, #4294967295
 8008020:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2b02      	cmp	r3, #2
 8008028:	d045      	beq.n	80080b6 <get_fat+0xc0>
 800802a:	2b03      	cmp	r3, #3
 800802c:	d05d      	beq.n	80080ea <get_fat+0xf4>
 800802e:	2b01      	cmp	r3, #1
 8008030:	d177      	bne.n	8008122 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	4413      	add	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	0a5b      	lsrs	r3, r3, #9
 8008048:	4413      	add	r3, r2
 800804a:	4619      	mov	r1, r3
 800804c:	6938      	ldr	r0, [r7, #16]
 800804e:	f7ff ff17 	bl	8007e80 <move_window>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d167      	bne.n	8008128 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	60fa      	str	r2, [r7, #12]
 800805e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	4413      	add	r3, r2
 8008066:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800806a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	0a5b      	lsrs	r3, r3, #9
 8008074:	4413      	add	r3, r2
 8008076:	4619      	mov	r1, r3
 8008078:	6938      	ldr	r0, [r7, #16]
 800807a:	f7ff ff01 	bl	8007e80 <move_window>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d153      	bne.n	800812c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	4413      	add	r3, r2
 800808e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	461a      	mov	r2, r3
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	4313      	orrs	r3, r2
 800809a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <get_fat+0xb6>
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	091b      	lsrs	r3, r3, #4
 80080aa:	e002      	b.n	80080b2 <get_fat+0xbc>
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080b2:	617b      	str	r3, [r7, #20]
			break;
 80080b4:	e03f      	b.n	8008136 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	0a1b      	lsrs	r3, r3, #8
 80080be:	4413      	add	r3, r2
 80080c0:	4619      	mov	r1, r3
 80080c2:	6938      	ldr	r0, [r7, #16]
 80080c4:	f7ff fedc 	bl	8007e80 <move_window>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d130      	bne.n	8008130 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80080dc:	4413      	add	r3, r2
 80080de:	4618      	mov	r0, r3
 80080e0:	f7ff fc1e 	bl	8007920 <ld_word>
 80080e4:	4603      	mov	r3, r0
 80080e6:	617b      	str	r3, [r7, #20]
			break;
 80080e8:	e025      	b.n	8008136 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	09db      	lsrs	r3, r3, #7
 80080f2:	4413      	add	r3, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	6938      	ldr	r0, [r7, #16]
 80080f8:	f7ff fec2 	bl	8007e80 <move_window>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d118      	bne.n	8008134 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008110:	4413      	add	r3, r2
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff fc1c 	bl	8007950 <ld_dword>
 8008118:	4603      	mov	r3, r0
 800811a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800811e:	617b      	str	r3, [r7, #20]
			break;
 8008120:	e009      	b.n	8008136 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008122:	2301      	movs	r3, #1
 8008124:	617b      	str	r3, [r7, #20]
 8008126:	e006      	b.n	8008136 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008128:	bf00      	nop
 800812a:	e004      	b.n	8008136 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800812c:	bf00      	nop
 800812e:	e002      	b.n	8008136 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008130:	bf00      	nop
 8008132:	e000      	b.n	8008136 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008134:	bf00      	nop
		}
	}

	return val;
 8008136:	697b      	ldr	r3, [r7, #20]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008140:	b590      	push	{r4, r7, lr}
 8008142:	b089      	sub	sp, #36	; 0x24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800814c:	2302      	movs	r3, #2
 800814e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b01      	cmp	r3, #1
 8008154:	f240 80d6 	bls.w	8008304 <put_fat+0x1c4>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	429a      	cmp	r2, r3
 8008160:	f080 80d0 	bcs.w	8008304 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b02      	cmp	r3, #2
 800816a:	d073      	beq.n	8008254 <put_fat+0x114>
 800816c:	2b03      	cmp	r3, #3
 800816e:	f000 8091 	beq.w	8008294 <put_fat+0x154>
 8008172:	2b01      	cmp	r3, #1
 8008174:	f040 80c6 	bne.w	8008304 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	61bb      	str	r3, [r7, #24]
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	085b      	lsrs	r3, r3, #1
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	4413      	add	r3, r2
 8008184:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	0a5b      	lsrs	r3, r3, #9
 800818e:	4413      	add	r3, r2
 8008190:	4619      	mov	r1, r3
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f7ff fe74 	bl	8007e80 <move_window>
 8008198:	4603      	mov	r3, r0
 800819a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800819c:	7ffb      	ldrb	r3, [r7, #31]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f040 80a9 	bne.w	80082f6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	1c59      	adds	r1, r3, #1
 80081ae:	61b9      	str	r1, [r7, #24]
 80081b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b4:	4413      	add	r3, r2
 80081b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00d      	beq.n	80081de <put_fat+0x9e>
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	b25b      	sxtb	r3, r3
 80081c8:	f003 030f 	and.w	r3, r3, #15
 80081cc:	b25a      	sxtb	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	b25b      	sxtb	r3, r3
 80081d6:	4313      	orrs	r3, r2
 80081d8:	b25b      	sxtb	r3, r3
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	e001      	b.n	80081e2 <put_fat+0xa2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	0a5b      	lsrs	r3, r3, #9
 80081f4:	4413      	add	r3, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7ff fe41 	bl	8007e80 <move_window>
 80081fe:	4603      	mov	r3, r0
 8008200:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008202:	7ffb      	ldrb	r3, [r7, #31]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d178      	bne.n	80082fa <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008214:	4413      	add	r3, r2
 8008216:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <put_fat+0xea>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	091b      	lsrs	r3, r3, #4
 8008226:	b2db      	uxtb	r3, r3
 8008228:	e00e      	b.n	8008248 <put_fat+0x108>
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b25b      	sxtb	r3, r3
 8008230:	f023 030f 	bic.w	r3, r3, #15
 8008234:	b25a      	sxtb	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	0a1b      	lsrs	r3, r3, #8
 800823a:	b25b      	sxtb	r3, r3
 800823c:	f003 030f 	and.w	r3, r3, #15
 8008240:	b25b      	sxtb	r3, r3
 8008242:	4313      	orrs	r3, r2
 8008244:	b25b      	sxtb	r3, r3
 8008246:	b2db      	uxtb	r3, r3
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2201      	movs	r2, #1
 8008250:	70da      	strb	r2, [r3, #3]
			break;
 8008252:	e057      	b.n	8008304 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	0a1b      	lsrs	r3, r3, #8
 800825c:	4413      	add	r3, r2
 800825e:	4619      	mov	r1, r3
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f7ff fe0d 	bl	8007e80 <move_window>
 8008266:	4603      	mov	r3, r0
 8008268:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800826a:	7ffb      	ldrb	r3, [r7, #31]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d146      	bne.n	80082fe <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800827e:	4413      	add	r3, r2
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	b292      	uxth	r2, r2
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff fb85 	bl	8007996 <st_word>
			fs->wflag = 1;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2201      	movs	r2, #1
 8008290:	70da      	strb	r2, [r3, #3]
			break;
 8008292:	e037      	b.n	8008304 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	09db      	lsrs	r3, r3, #7
 800829c:	4413      	add	r3, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7ff fded 	bl	8007e80 <move_window>
 80082a6:	4603      	mov	r3, r0
 80082a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082aa:	7ffb      	ldrb	r3, [r7, #31]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d128      	bne.n	8008302 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80082c4:	4413      	add	r3, r2
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff fb42 	bl	8007950 <ld_dword>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80082d2:	4323      	orrs	r3, r4
 80082d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80082e4:	4413      	add	r3, r2
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7ff fb6f 	bl	80079cc <st_dword>
			fs->wflag = 1;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2201      	movs	r2, #1
 80082f2:	70da      	strb	r2, [r3, #3]
			break;
 80082f4:	e006      	b.n	8008304 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80082f6:	bf00      	nop
 80082f8:	e004      	b.n	8008304 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80082fa:	bf00      	nop
 80082fc:	e002      	b.n	8008304 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80082fe:	bf00      	nop
 8008300:	e000      	b.n	8008304 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8008302:	bf00      	nop
		}
	}
	return res;
 8008304:	7ffb      	ldrb	r3, [r7, #31]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3724      	adds	r7, #36	; 0x24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd90      	pop	{r4, r7, pc}

0800830e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b088      	sub	sp, #32
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d904      	bls.n	8008334 <remove_chain+0x26>
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	429a      	cmp	r2, r3
 8008332:	d301      	bcc.n	8008338 <remove_chain+0x2a>
 8008334:	2302      	movs	r3, #2
 8008336:	e04b      	b.n	80083d0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00c      	beq.n	8008358 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800833e:	f04f 32ff 	mov.w	r2, #4294967295
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	69b8      	ldr	r0, [r7, #24]
 8008346:	f7ff fefb 	bl	8008140 <put_fat>
 800834a:	4603      	mov	r3, r0
 800834c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800834e:	7ffb      	ldrb	r3, [r7, #31]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <remove_chain+0x4a>
 8008354:	7ffb      	ldrb	r3, [r7, #31]
 8008356:	e03b      	b.n	80083d0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008358:	68b9      	ldr	r1, [r7, #8]
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff fe4b 	bl	8007ff6 <get_fat>
 8008360:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d031      	beq.n	80083cc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <remove_chain+0x64>
 800836e:	2302      	movs	r3, #2
 8008370:	e02e      	b.n	80083d0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d101      	bne.n	800837e <remove_chain+0x70>
 800837a:	2301      	movs	r3, #1
 800837c:	e028      	b.n	80083d0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800837e:	2200      	movs	r2, #0
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	69b8      	ldr	r0, [r7, #24]
 8008384:	f7ff fedc 	bl	8008140 <put_fat>
 8008388:	4603      	mov	r3, r0
 800838a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800838c:	7ffb      	ldrb	r3, [r7, #31]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <remove_chain+0x88>
 8008392:	7ffb      	ldrb	r3, [r7, #31]
 8008394:	e01c      	b.n	80083d0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	3b02      	subs	r3, #2
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d20b      	bcs.n	80083bc <remove_chain+0xae>
			fs->free_clst++;
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	791b      	ldrb	r3, [r3, #4]
 80083b2:	f043 0301 	orr.w	r3, r3, #1
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d3c6      	bcc.n	8008358 <remove_chain+0x4a>
 80083ca:	e000      	b.n	80083ce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80083cc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3720      	adds	r7, #32
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10d      	bne.n	800840a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d004      	beq.n	8008404 <create_chain+0x2c>
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	429a      	cmp	r2, r3
 8008402:	d31b      	bcc.n	800843c <create_chain+0x64>
 8008404:	2301      	movs	r3, #1
 8008406:	61bb      	str	r3, [r7, #24]
 8008408:	e018      	b.n	800843c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff fdf2 	bl	8007ff6 <get_fat>
 8008412:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d801      	bhi.n	800841e <create_chain+0x46>
 800841a:	2301      	movs	r3, #1
 800841c:	e070      	b.n	8008500 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008424:	d101      	bne.n	800842a <create_chain+0x52>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	e06a      	b.n	8008500 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	429a      	cmp	r2, r3
 8008432:	d201      	bcs.n	8008438 <create_chain+0x60>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	e063      	b.n	8008500 <create_chain+0x128>
		scl = clst;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	3301      	adds	r3, #1
 8008444:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	429a      	cmp	r2, r3
 800844e:	d307      	bcc.n	8008460 <create_chain+0x88>
				ncl = 2;
 8008450:	2302      	movs	r3, #2
 8008452:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	429a      	cmp	r2, r3
 800845a:	d901      	bls.n	8008460 <create_chain+0x88>
 800845c:	2300      	movs	r3, #0
 800845e:	e04f      	b.n	8008500 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008460:	69f9      	ldr	r1, [r7, #28]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff fdc7 	bl	8007ff6 <get_fat>
 8008468:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00e      	beq.n	800848e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d003      	beq.n	800847e <create_chain+0xa6>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847c:	d101      	bne.n	8008482 <create_chain+0xaa>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	e03e      	b.n	8008500 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	429a      	cmp	r2, r3
 8008488:	d1da      	bne.n	8008440 <create_chain+0x68>
 800848a:	2300      	movs	r3, #0
 800848c:	e038      	b.n	8008500 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800848e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008490:	f04f 32ff 	mov.w	r2, #4294967295
 8008494:	69f9      	ldr	r1, [r7, #28]
 8008496:	6938      	ldr	r0, [r7, #16]
 8008498:	f7ff fe52 	bl	8008140 <put_fat>
 800849c:	4603      	mov	r3, r0
 800849e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d109      	bne.n	80084ba <create_chain+0xe2>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d006      	beq.n	80084ba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6938      	ldr	r0, [r7, #16]
 80084b2:	f7ff fe45 	bl	8008140 <put_fat>
 80084b6:	4603      	mov	r3, r0
 80084b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d116      	bne.n	80084ee <create_chain+0x116>
		fs->last_clst = ncl;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	691a      	ldr	r2, [r3, #16]
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	3b02      	subs	r3, #2
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d804      	bhi.n	80084de <create_chain+0x106>
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	1e5a      	subs	r2, r3, #1
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	791b      	ldrb	r3, [r3, #4]
 80084e2:	f043 0301 	orr.w	r3, r3, #1
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	711a      	strb	r2, [r3, #4]
 80084ec:	e007      	b.n	80084fe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80084ee:	7dfb      	ldrb	r3, [r7, #23]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d102      	bne.n	80084fa <create_chain+0x122>
 80084f4:	f04f 33ff 	mov.w	r3, #4294967295
 80084f8:	e000      	b.n	80084fc <create_chain+0x124>
 80084fa:	2301      	movs	r3, #1
 80084fc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80084fe:	69fb      	ldr	r3, [r7, #28]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3720      	adds	r7, #32
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	3304      	adds	r3, #4
 800851e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	0a5b      	lsrs	r3, r3, #9
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	8952      	ldrh	r2, [r2, #10]
 8008528:	fbb3 f3f2 	udiv	r3, r3, r2
 800852c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	1d1a      	adds	r2, r3, #4
 8008532:	613a      	str	r2, [r7, #16]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <clmt_clust+0x3a>
 800853e:	2300      	movs	r3, #0
 8008540:	e010      	b.n	8008564 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	429a      	cmp	r2, r3
 8008548:	d307      	bcc.n	800855a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	3304      	adds	r3, #4
 8008556:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008558:	e7e9      	b.n	800852e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800855a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	4413      	add	r3, r2
}
 8008564:	4618      	mov	r0, r3
 8008566:	371c      	adds	r7, #28
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008586:	d204      	bcs.n	8008592 <dir_sdi+0x22>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f003 031f 	and.w	r3, r3, #31
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008592:	2302      	movs	r3, #2
 8008594:	e063      	b.n	800865e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d106      	bne.n	80085b6 <dir_sdi+0x46>
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d902      	bls.n	80085b6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10c      	bne.n	80085d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	8912      	ldrh	r2, [r2, #8]
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d301      	bcc.n	80085cc <dir_sdi+0x5c>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e048      	b.n	800865e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	61da      	str	r2, [r3, #28]
 80085d4:	e029      	b.n	800862a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	895b      	ldrh	r3, [r3, #10]
 80085da:	025b      	lsls	r3, r3, #9
 80085dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80085de:	e019      	b.n	8008614 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6979      	ldr	r1, [r7, #20]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7ff fd06 	bl	8007ff6 <get_fat>
 80085ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f2:	d101      	bne.n	80085f8 <dir_sdi+0x88>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e032      	b.n	800865e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d904      	bls.n	8008608 <dir_sdi+0x98>
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	429a      	cmp	r2, r3
 8008606:	d301      	bcc.n	800860c <dir_sdi+0x9c>
 8008608:	2302      	movs	r3, #2
 800860a:	e028      	b.n	800865e <dir_sdi+0xee>
			ofs -= csz;
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	429a      	cmp	r2, r3
 800861a:	d2e1      	bcs.n	80085e0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800861c:	6979      	ldr	r1, [r7, #20]
 800861e:	6938      	ldr	r0, [r7, #16]
 8008620:	f7ff fcca 	bl	8007fb8 <clust2sect>
 8008624:	4602      	mov	r2, r0
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <dir_sdi+0xcc>
 8008638:	2302      	movs	r3, #2
 800863a:	e010      	b.n	800865e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	69da      	ldr	r2, [r3, #28]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	0a5b      	lsrs	r3, r3, #9
 8008644:	441a      	add	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008656:	441a      	add	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b086      	sub	sp, #24
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	3320      	adds	r3, #32
 800867c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <dir_next+0x28>
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800868c:	d301      	bcc.n	8008692 <dir_next+0x2c>
 800868e:	2304      	movs	r3, #4
 8008690:	e0aa      	b.n	80087e8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008698:	2b00      	cmp	r3, #0
 800869a:	f040 8098 	bne.w	80087ce <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10b      	bne.n	80086c8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	8912      	ldrh	r2, [r2, #8]
 80086b8:	4293      	cmp	r3, r2
 80086ba:	f0c0 8088 	bcc.w	80087ce <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	61da      	str	r2, [r3, #28]
 80086c4:	2304      	movs	r3, #4
 80086c6:	e08f      	b.n	80087e8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	0a5b      	lsrs	r3, r3, #9
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	8952      	ldrh	r2, [r2, #10]
 80086d0:	3a01      	subs	r2, #1
 80086d2:	4013      	ands	r3, r2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d17a      	bne.n	80087ce <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	4619      	mov	r1, r3
 80086e0:	4610      	mov	r0, r2
 80086e2:	f7ff fc88 	bl	8007ff6 <get_fat>
 80086e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d801      	bhi.n	80086f2 <dir_next+0x8c>
 80086ee:	2302      	movs	r3, #2
 80086f0:	e07a      	b.n	80087e8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f8:	d101      	bne.n	80086fe <dir_next+0x98>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e074      	b.n	80087e8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	429a      	cmp	r2, r3
 8008706:	d358      	bcc.n	80087ba <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	61da      	str	r2, [r3, #28]
 8008714:	2304      	movs	r3, #4
 8008716:	e067      	b.n	80087e8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	4619      	mov	r1, r3
 8008720:	4610      	mov	r0, r2
 8008722:	f7ff fe59 	bl	80083d8 <create_chain>
 8008726:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <dir_next+0xcc>
 800872e:	2307      	movs	r3, #7
 8008730:	e05a      	b.n	80087e8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <dir_next+0xd6>
 8008738:	2302      	movs	r3, #2
 800873a:	e055      	b.n	80087e8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008742:	d101      	bne.n	8008748 <dir_next+0xe2>
 8008744:	2301      	movs	r3, #1
 8008746:	e04f      	b.n	80087e8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f7ff fb55 	bl	8007df8 <sync_window>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <dir_next+0xf2>
 8008754:	2301      	movs	r3, #1
 8008756:	e047      	b.n	80087e8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	3334      	adds	r3, #52	; 0x34
 800875c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008760:	2100      	movs	r1, #0
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff f97f 	bl	8007a66 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008768:	2300      	movs	r3, #0
 800876a:	613b      	str	r3, [r7, #16]
 800876c:	6979      	ldr	r1, [r7, #20]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff fc22 	bl	8007fb8 <clust2sect>
 8008774:	4602      	mov	r2, r0
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	631a      	str	r2, [r3, #48]	; 0x30
 800877a:	e012      	b.n	80087a2 <dir_next+0x13c>
						fs->wflag = 1;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f7ff fb38 	bl	8007df8 <sync_window>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <dir_next+0x12c>
 800878e:	2301      	movs	r3, #1
 8008790:	e02a      	b.n	80087e8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	3301      	adds	r3, #1
 8008796:	613b      	str	r3, [r7, #16]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879c:	1c5a      	adds	r2, r3, #1
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	631a      	str	r2, [r3, #48]	; 0x30
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	895b      	ldrh	r3, [r3, #10]
 80087a6:	461a      	mov	r2, r3
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d3e6      	bcc.n	800877c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	1ad2      	subs	r2, r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80087c0:	6979      	ldr	r1, [r7, #20]
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7ff fbf8 	bl	8007fb8 <clust2sect>
 80087c8:	4602      	mov	r2, r0
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e0:	441a      	add	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008800:	2100      	movs	r1, #0
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff feb4 	bl	8008570 <dir_sdi>
 8008808:	4603      	mov	r3, r0
 800880a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d12b      	bne.n	800886a <dir_alloc+0x7a>
		n = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	4619      	mov	r1, r3
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7ff fb2f 	bl	8007e80 <move_window>
 8008822:	4603      	mov	r3, r0
 8008824:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d11d      	bne.n	8008868 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	2be5      	cmp	r3, #229	; 0xe5
 8008834:	d004      	beq.n	8008840 <dir_alloc+0x50>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d107      	bne.n	8008850 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	3301      	adds	r3, #1
 8008844:	613b      	str	r3, [r7, #16]
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	429a      	cmp	r2, r3
 800884c:	d102      	bne.n	8008854 <dir_alloc+0x64>
 800884e:	e00c      	b.n	800886a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008850:	2300      	movs	r3, #0
 8008852:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008854:	2101      	movs	r1, #1
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff ff05 	bl	8008666 <dir_next>
 800885c:	4603      	mov	r3, r0
 800885e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0d7      	beq.n	8008816 <dir_alloc+0x26>
 8008866:	e000      	b.n	800886a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008868:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	2b04      	cmp	r3, #4
 800886e:	d101      	bne.n	8008874 <dir_alloc+0x84>
 8008870:	2307      	movs	r3, #7
 8008872:	75fb      	strb	r3, [r7, #23]
	return res;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	331a      	adds	r3, #26
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff f847 	bl	8007920 <ld_word>
 8008892:	4603      	mov	r3, r0
 8008894:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b03      	cmp	r3, #3
 800889c:	d109      	bne.n	80088b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	3314      	adds	r3, #20
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff f83c 	bl	8007920 <ld_word>
 80088a8:	4603      	mov	r3, r0
 80088aa:	041b      	lsls	r3, r3, #16
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80088b2:	68fb      	ldr	r3, [r7, #12]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	331a      	adds	r3, #26
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	b292      	uxth	r2, r2
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff f85f 	bl	8007996 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d109      	bne.n	80088f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f103 0214 	add.w	r2, r3, #20
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	0c1b      	lsrs	r3, r3, #16
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	4619      	mov	r1, r3
 80088ee:	4610      	mov	r0, r2
 80088f0:	f7ff f851 	bl	8007996 <st_word>
	}
}
 80088f4:	bf00      	nop
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008906:	2304      	movs	r3, #4
 8008908:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8008910:	e03c      	b.n	800898c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	4619      	mov	r1, r3
 8008918:	6938      	ldr	r0, [r7, #16]
 800891a:	f7ff fab1 	bl	8007e80 <move_window>
 800891e:	4603      	mov	r3, r0
 8008920:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d136      	bne.n	8008996 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d102      	bne.n	800893c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008936:	2304      	movs	r3, #4
 8008938:	75fb      	strb	r3, [r7, #23]
 800893a:	e031      	b.n	80089a0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a1b      	ldr	r3, [r3, #32]
 8008940:	330b      	adds	r3, #11
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008948:	73bb      	strb	r3, [r7, #14]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	7bba      	ldrb	r2, [r7, #14]
 800894e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	2be5      	cmp	r3, #229	; 0xe5
 8008954:	d011      	beq.n	800897a <dir_read+0x7e>
 8008956:	7bfb      	ldrb	r3, [r7, #15]
 8008958:	2b2e      	cmp	r3, #46	; 0x2e
 800895a:	d00e      	beq.n	800897a <dir_read+0x7e>
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b0f      	cmp	r3, #15
 8008960:	d00b      	beq.n	800897a <dir_read+0x7e>
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	f023 0320 	bic.w	r3, r3, #32
 8008968:	2b08      	cmp	r3, #8
 800896a:	bf0c      	ite	eq
 800896c:	2301      	moveq	r3, #1
 800896e:	2300      	movne	r3, #0
 8008970:	b2db      	uxtb	r3, r3
 8008972:	461a      	mov	r2, r3
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	4293      	cmp	r3, r2
 8008978:	d00f      	beq.n	800899a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800897a:	2100      	movs	r1, #0
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff fe72 	bl	8008666 <dir_next>
 8008982:	4603      	mov	r3, r0
 8008984:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008986:	7dfb      	ldrb	r3, [r7, #23]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d108      	bne.n	800899e <dir_read+0xa2>
	while (dp->sect) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1be      	bne.n	8008912 <dir_read+0x16>
 8008994:	e004      	b.n	80089a0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8008996:	bf00      	nop
 8008998:	e002      	b.n	80089a0 <dir_read+0xa4>
				break;
 800899a:	bf00      	nop
 800899c:	e000      	b.n	80089a0 <dir_read+0xa4>
		if (res != FR_OK) break;
 800899e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <dir_read+0xb0>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	61da      	str	r2, [r3, #28]
	return res;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b086      	sub	sp, #24
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80089c4:	2100      	movs	r1, #0
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff fdd2 	bl	8008570 <dir_sdi>
 80089cc:	4603      	mov	r3, r0
 80089ce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <dir_find+0x24>
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	e03e      	b.n	8008a58 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	4619      	mov	r1, r3
 80089e0:	6938      	ldr	r0, [r7, #16]
 80089e2:	f7ff fa4d 	bl	8007e80 <move_window>
 80089e6:	4603      	mov	r3, r0
 80089e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d12f      	bne.n	8008a50 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d102      	bne.n	8008a04 <dir_find+0x4e>
 80089fe:	2304      	movs	r3, #4
 8008a00:	75fb      	strb	r3, [r7, #23]
 8008a02:	e028      	b.n	8008a56 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	330b      	adds	r3, #11
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	330b      	adds	r3, #11
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	f003 0308 	and.w	r3, r3, #8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <dir_find+0x86>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a18      	ldr	r0, [r3, #32]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3324      	adds	r3, #36	; 0x24
 8008a2e:	220b      	movs	r2, #11
 8008a30:	4619      	mov	r1, r3
 8008a32:	f7ff f832 	bl	8007a9a <mem_cmp>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00b      	beq.n	8008a54 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff fe11 	bl	8008666 <dir_next>
 8008a44:	4603      	mov	r3, r0
 8008a46:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d0c5      	beq.n	80089da <dir_find+0x24>
 8008a4e:	e002      	b.n	8008a56 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008a50:	bf00      	nop
 8008a52:	e000      	b.n	8008a56 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a54:	bf00      	nop

	return res;
 8008a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008a6e:	2101      	movs	r1, #1
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7ff febd 	bl	80087f0 <dir_alloc>
 8008a76:	4603      	mov	r3, r0
 8008a78:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d11c      	bne.n	8008aba <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	4619      	mov	r1, r3
 8008a86:	68b8      	ldr	r0, [r7, #8]
 8008a88:	f7ff f9fa 	bl	8007e80 <move_window>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d111      	bne.n	8008aba <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe ffe1 	bl	8007a66 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a18      	ldr	r0, [r3, #32]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3324      	adds	r3, #36	; 0x24
 8008aac:	220b      	movs	r2, #11
 8008aae:	4619      	mov	r1, r3
 8008ab0:	f7fe ffb8 	bl	8007a24 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d04e      	beq.n	8008b7a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	613b      	str	r3, [r7, #16]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8008ae4:	e021      	b.n	8008b2a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1a      	ldr	r2, [r3, #32]
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	1c59      	adds	r1, r3, #1
 8008aee:	6179      	str	r1, [r7, #20]
 8008af0:	4413      	add	r3, r2
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	2b20      	cmp	r3, #32
 8008afa:	d100      	bne.n	8008afe <get_fileinfo+0x3a>
 8008afc:	e015      	b.n	8008b2a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	2b05      	cmp	r3, #5
 8008b02:	d101      	bne.n	8008b08 <get_fileinfo+0x44>
 8008b04:	23e5      	movs	r3, #229	; 0xe5
 8008b06:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	2b09      	cmp	r3, #9
 8008b0c:	d106      	bne.n	8008b1c <get_fileinfo+0x58>
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	613a      	str	r2, [r7, #16]
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	4413      	add	r3, r2
 8008b18:	222e      	movs	r2, #46	; 0x2e
 8008b1a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	613a      	str	r2, [r7, #16]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	7bfa      	ldrb	r2, [r7, #15]
 8008b28:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b0a      	cmp	r3, #10
 8008b2e:	d9da      	bls.n	8008ae6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	4413      	add	r3, r2
 8008b36:	3309      	adds	r3, #9
 8008b38:	2200      	movs	r2, #0
 8008b3a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	7ada      	ldrb	r2, [r3, #11]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	331c      	adds	r3, #28
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe feff 	bl	8007950 <ld_dword>
 8008b52:	4602      	mov	r2, r0
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	3316      	adds	r3, #22
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fef6 	bl	8007950 <ld_dword>
 8008b64:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	80da      	strh	r2, [r3, #6]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	0c1b      	lsrs	r3, r3, #16
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	809a      	strh	r2, [r3, #4]
 8008b78:	e000      	b.n	8008b7c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008b7a:	bf00      	nop
}
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3324      	adds	r3, #36	; 0x24
 8008b98:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008b9a:	220b      	movs	r2, #11
 8008b9c:	2120      	movs	r1, #32
 8008b9e:	68b8      	ldr	r0, [r7, #8]
 8008ba0:	f7fe ff61 	bl	8007a66 <mem_set>
	si = i = 0; ni = 8;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	613b      	str	r3, [r7, #16]
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	617b      	str	r3, [r7, #20]
 8008bac:	2308      	movs	r3, #8
 8008bae:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8008bba:	d12f      	bne.n	8008c1c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	617a      	str	r2, [r7, #20]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8008bca:	7ffb      	ldrb	r3, [r7, #31]
 8008bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8008bce:	d10a      	bne.n	8008be6 <create_name+0x62>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d807      	bhi.n	8008be6 <create_name+0x62>
			sfn[i++] = c;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	613a      	str	r2, [r7, #16]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	4413      	add	r3, r2
 8008be0:	7ffa      	ldrb	r2, [r7, #31]
 8008be2:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8008be4:	e7ea      	b.n	8008bbc <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8008be6:	7ffb      	ldrb	r3, [r7, #31]
 8008be8:	2b2f      	cmp	r3, #47	; 0x2f
 8008bea:	d007      	beq.n	8008bfc <create_name+0x78>
 8008bec:	7ffb      	ldrb	r3, [r7, #31]
 8008bee:	2b5c      	cmp	r3, #92	; 0x5c
 8008bf0:	d004      	beq.n	8008bfc <create_name+0x78>
 8008bf2:	7ffb      	ldrb	r3, [r7, #31]
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	d901      	bls.n	8008bfc <create_name+0x78>
 8008bf8:	2306      	movs	r3, #6
 8008bfa:	e084      	b.n	8008d06 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	441a      	add	r2, r3
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8008c06:	7ffb      	ldrb	r3, [r7, #31]
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	d801      	bhi.n	8008c10 <create_name+0x8c>
 8008c0c:	2224      	movs	r2, #36	; 0x24
 8008c0e:	e000      	b.n	8008c12 <create_name+0x8e>
 8008c10:	2220      	movs	r2, #32
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	330b      	adds	r3, #11
 8008c16:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e074      	b.n	8008d06 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	617a      	str	r2, [r7, #20]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	4413      	add	r3, r2
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008c2a:	7ffb      	ldrb	r3, [r7, #31]
 8008c2c:	2b20      	cmp	r3, #32
 8008c2e:	d94e      	bls.n	8008cce <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008c30:	7ffb      	ldrb	r3, [r7, #31]
 8008c32:	2b2f      	cmp	r3, #47	; 0x2f
 8008c34:	d006      	beq.n	8008c44 <create_name+0xc0>
 8008c36:	7ffb      	ldrb	r3, [r7, #31]
 8008c38:	2b5c      	cmp	r3, #92	; 0x5c
 8008c3a:	d110      	bne.n	8008c5e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008c3c:	e002      	b.n	8008c44 <create_name+0xc0>
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	3301      	adds	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	4413      	add	r3, r2
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b2f      	cmp	r3, #47	; 0x2f
 8008c4e:	d0f6      	beq.n	8008c3e <create_name+0xba>
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	4413      	add	r3, r2
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b5c      	cmp	r3, #92	; 0x5c
 8008c5a:	d0f0      	beq.n	8008c3e <create_name+0xba>
			break;
 8008c5c:	e038      	b.n	8008cd0 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008c5e:	7ffb      	ldrb	r3, [r7, #31]
 8008c60:	2b2e      	cmp	r3, #46	; 0x2e
 8008c62:	d003      	beq.n	8008c6c <create_name+0xe8>
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d30c      	bcc.n	8008c86 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	2b0b      	cmp	r3, #11
 8008c70:	d002      	beq.n	8008c78 <create_name+0xf4>
 8008c72:	7ffb      	ldrb	r3, [r7, #31]
 8008c74:	2b2e      	cmp	r3, #46	; 0x2e
 8008c76:	d001      	beq.n	8008c7c <create_name+0xf8>
 8008c78:	2306      	movs	r3, #6
 8008c7a:	e044      	b.n	8008d06 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8008c7c:	2308      	movs	r3, #8
 8008c7e:	613b      	str	r3, [r7, #16]
 8008c80:	230b      	movs	r3, #11
 8008c82:	61bb      	str	r3, [r7, #24]
			continue;
 8008c84:	e022      	b.n	8008ccc <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008c86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	da04      	bge.n	8008c98 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008c8e:	7ffb      	ldrb	r3, [r7, #31]
 8008c90:	3b80      	subs	r3, #128	; 0x80
 8008c92:	4a1f      	ldr	r2, [pc, #124]	; (8008d10 <create_name+0x18c>)
 8008c94:	5cd3      	ldrb	r3, [r2, r3]
 8008c96:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008c98:	7ffb      	ldrb	r3, [r7, #31]
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	481d      	ldr	r0, [pc, #116]	; (8008d14 <create_name+0x190>)
 8008c9e:	f7fe ff23 	bl	8007ae8 <chk_chr>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <create_name+0x128>
 8008ca8:	2306      	movs	r3, #6
 8008caa:	e02c      	b.n	8008d06 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008cac:	7ffb      	ldrb	r3, [r7, #31]
 8008cae:	2b60      	cmp	r3, #96	; 0x60
 8008cb0:	d905      	bls.n	8008cbe <create_name+0x13a>
 8008cb2:	7ffb      	ldrb	r3, [r7, #31]
 8008cb4:	2b7a      	cmp	r3, #122	; 0x7a
 8008cb6:	d802      	bhi.n	8008cbe <create_name+0x13a>
 8008cb8:	7ffb      	ldrb	r3, [r7, #31]
 8008cba:	3b20      	subs	r3, #32
 8008cbc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	613a      	str	r2, [r7, #16]
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	7ffa      	ldrb	r2, [r7, #31]
 8008cca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008ccc:	e7a6      	b.n	8008c1c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008cce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	441a      	add	r2, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <create_name+0x160>
 8008ce0:	2306      	movs	r3, #6
 8008ce2:	e010      	b.n	8008d06 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2be5      	cmp	r3, #229	; 0xe5
 8008cea:	d102      	bne.n	8008cf2 <create_name+0x16e>
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2205      	movs	r2, #5
 8008cf0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008cf2:	7ffb      	ldrb	r3, [r7, #31]
 8008cf4:	2b20      	cmp	r3, #32
 8008cf6:	d801      	bhi.n	8008cfc <create_name+0x178>
 8008cf8:	2204      	movs	r2, #4
 8008cfa:	e000      	b.n	8008cfe <create_name+0x17a>
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	330b      	adds	r3, #11
 8008d02:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008d04:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	0800b0d8 	.word	0x0800b0d8
 8008d14:	0800b058 	.word	0x0800b058

08008d18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	2b2f      	cmp	r3, #47	; 0x2f
 8008d32:	d00b      	beq.n	8008d4c <follow_path+0x34>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	2b5c      	cmp	r3, #92	; 0x5c
 8008d3a:	d007      	beq.n	8008d4c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	695a      	ldr	r2, [r3, #20]
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	609a      	str	r2, [r3, #8]
 8008d44:	e00d      	b.n	8008d62 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	603b      	str	r3, [r7, #0]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b2f      	cmp	r3, #47	; 0x2f
 8008d52:	d0f8      	beq.n	8008d46 <follow_path+0x2e>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b5c      	cmp	r3, #92	; 0x5c
 8008d5a:	d0f4      	beq.n	8008d46 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b1f      	cmp	r3, #31
 8008d68:	d80a      	bhi.n	8008d80 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2280      	movs	r2, #128	; 0x80
 8008d6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008d72:	2100      	movs	r1, #0
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff fbfb 	bl	8008570 <dir_sdi>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	75fb      	strb	r3, [r7, #23]
 8008d7e:	e056      	b.n	8008e2e <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008d80:	463b      	mov	r3, r7
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff fefd 	bl	8008b84 <create_name>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d147      	bne.n	8008e24 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff fe0e 	bl	80089b6 <dir_find>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008da4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01b      	beq.n	8008de4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	d13a      	bne.n	8008e28 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8008db2:	7afb      	ldrb	r3, [r7, #11]
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8008dbc:	7afb      	ldrb	r3, [r7, #11]
 8008dbe:	f003 0304 	and.w	r3, r3, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d02c      	beq.n	8008e20 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2280      	movs	r2, #128	; 0x80
 8008dca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8008dd2:	e029      	b.n	8008e28 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	f003 0304 	and.w	r3, r3, #4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d124      	bne.n	8008e28 <follow_path+0x110>
 8008dde:	2305      	movs	r3, #5
 8008de0:	75fb      	strb	r3, [r7, #23]
				break;
 8008de2:	e021      	b.n	8008e28 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	f003 0304 	and.w	r3, r3, #4
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d11e      	bne.n	8008e2c <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	799b      	ldrb	r3, [r3, #6]
 8008df2:	f003 0310 	and.w	r3, r3, #16
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d102      	bne.n	8008e00 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8008dfa:	2305      	movs	r3, #5
 8008dfc:	75fb      	strb	r3, [r7, #23]
 8008dfe:	e016      	b.n	8008e2e <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0e:	4413      	add	r3, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f7ff fd33 	bl	800887e <ld_clust>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	609a      	str	r2, [r3, #8]
 8008e1e:	e7af      	b.n	8008d80 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8008e20:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e22:	e7ad      	b.n	8008d80 <follow_path+0x68>
			if (res != FR_OK) break;
 8008e24:	bf00      	nop
 8008e26:	e002      	b.n	8008e2e <follow_path+0x116>
				break;
 8008e28:	bf00      	nop
 8008e2a:	e000      	b.n	8008e2e <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e2c:	bf00      	nop
			}
		}
	}

	return res;
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3718      	adds	r7, #24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008e40:	f04f 33ff 	mov.w	r3, #4294967295
 8008e44:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d031      	beq.n	8008eb2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	e002      	b.n	8008e5c <get_ldnumber+0x24>
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	617b      	str	r3, [r7, #20]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b20      	cmp	r3, #32
 8008e62:	d903      	bls.n	8008e6c <get_ldnumber+0x34>
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b3a      	cmp	r3, #58	; 0x3a
 8008e6a:	d1f4      	bne.n	8008e56 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b3a      	cmp	r3, #58	; 0x3a
 8008e72:	d11c      	bne.n	8008eae <get_ldnumber+0x76>
			tp = *path;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	60fa      	str	r2, [r7, #12]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	3b30      	subs	r3, #48	; 0x30
 8008e84:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	2b09      	cmp	r3, #9
 8008e8a:	d80e      	bhi.n	8008eaa <get_ldnumber+0x72>
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d10a      	bne.n	8008eaa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d107      	bne.n	8008eaa <get_ldnumber+0x72>
					vol = (int)i;
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	617b      	str	r3, [r7, #20]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	e002      	b.n	8008eb4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008eae:	2300      	movs	r3, #0
 8008eb0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008eb2:	693b      	ldr	r3, [r7, #16]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	371c      	adds	r7, #28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	70da      	strb	r2, [r3, #3]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7fe ffd0 	bl	8007e80 <move_window>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <check_fs+0x2a>
 8008ee6:	2304      	movs	r3, #4
 8008ee8:	e038      	b.n	8008f5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3334      	adds	r3, #52	; 0x34
 8008eee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe fd14 	bl	8007920 <ld_word>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	461a      	mov	r2, r3
 8008efc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d001      	beq.n	8008f08 <check_fs+0x48>
 8008f04:	2303      	movs	r3, #3
 8008f06:	e029      	b.n	8008f5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f0e:	2be9      	cmp	r3, #233	; 0xe9
 8008f10:	d009      	beq.n	8008f26 <check_fs+0x66>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f18:	2beb      	cmp	r3, #235	; 0xeb
 8008f1a:	d11e      	bne.n	8008f5a <check_fs+0x9a>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008f22:	2b90      	cmp	r3, #144	; 0x90
 8008f24:	d119      	bne.n	8008f5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	3334      	adds	r3, #52	; 0x34
 8008f2a:	3336      	adds	r3, #54	; 0x36
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fe fd0f 	bl	8007950 <ld_dword>
 8008f32:	4603      	mov	r3, r0
 8008f34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f38:	4a0a      	ldr	r2, [pc, #40]	; (8008f64 <check_fs+0xa4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d101      	bne.n	8008f42 <check_fs+0x82>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e00c      	b.n	8008f5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	3334      	adds	r3, #52	; 0x34
 8008f46:	3352      	adds	r3, #82	; 0x52
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe fd01 	bl	8007950 <ld_dword>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <check_fs+0xa8>)
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d101      	bne.n	8008f5a <check_fs+0x9a>
 8008f56:	2300      	movs	r3, #0
 8008f58:	e000      	b.n	8008f5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008f5a:	2302      	movs	r3, #2
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	00544146 	.word	0x00544146
 8008f68:	33544146 	.word	0x33544146

08008f6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b096      	sub	sp, #88	; 0x58
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	4613      	mov	r3, r2
 8008f78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f7ff ff59 	bl	8008e38 <get_ldnumber>
 8008f86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da01      	bge.n	8008f92 <find_volume+0x26>
 8008f8e:	230b      	movs	r3, #11
 8008f90:	e231      	b.n	80093f6 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008f92:	4aa8      	ldr	r2, [pc, #672]	; (8009234 <find_volume+0x2c8>)
 8008f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <find_volume+0x3a>
 8008fa2:	230c      	movs	r3, #12
 8008fa4:	e227      	b.n	80093f6 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008faa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	f023 0301 	bic.w	r3, r3, #1
 8008fb2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01a      	beq.n	8008ff2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	785b      	ldrb	r3, [r3, #1]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe fc0f 	bl	80077e4 <disk_status>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008fcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10c      	bne.n	8008ff2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d007      	beq.n	8008fee <find_volume+0x82>
 8008fde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008fea:	230a      	movs	r3, #10
 8008fec:	e203      	b.n	80093f6 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e201      	b.n	80093f6 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009002:	785b      	ldrb	r3, [r3, #1]
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe fc07 	bl	8007818 <disk_initialize>
 800900a:	4603      	mov	r3, r0
 800900c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009010:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800901c:	2303      	movs	r3, #3
 800901e:	e1ea      	b.n	80093f6 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d007      	beq.n	8009036 <find_volume+0xca>
 8009026:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800902a:	f003 0304 	and.w	r3, r3, #4
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009032:	230a      	movs	r3, #10
 8009034:	e1df      	b.n	80093f6 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800903a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800903c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800903e:	f7ff ff3f 	bl	8008ec0 <check_fs>
 8009042:	4603      	mov	r3, r0
 8009044:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800904c:	2b02      	cmp	r3, #2
 800904e:	d14b      	bne.n	80090e8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009050:	2300      	movs	r3, #0
 8009052:	643b      	str	r3, [r7, #64]	; 0x40
 8009054:	e01f      	b.n	8009096 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800905c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800905e:	011b      	lsls	r3, r3, #4
 8009060:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009064:	4413      	add	r3, r2
 8009066:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	3304      	adds	r3, #4
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d006      	beq.n	8009080 <find_volume+0x114>
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	3308      	adds	r3, #8
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fc6a 	bl	8007950 <ld_dword>
 800907c:	4602      	mov	r2, r0
 800907e:	e000      	b.n	8009082 <find_volume+0x116>
 8009080:	2200      	movs	r2, #0
 8009082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800908a:	440b      	add	r3, r1
 800908c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009092:	3301      	adds	r3, #1
 8009094:	643b      	str	r3, [r7, #64]	; 0x40
 8009096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009098:	2b03      	cmp	r3, #3
 800909a:	d9dc      	bls.n	8009056 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800909c:	2300      	movs	r3, #0
 800909e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80090a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <find_volume+0x140>
 80090a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090a8:	3b01      	subs	r3, #1
 80090aa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80090ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80090b4:	4413      	add	r3, r2
 80090b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80090ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80090bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d005      	beq.n	80090ce <find_volume+0x162>
 80090c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090c6:	f7ff fefb 	bl	8008ec0 <check_fs>
 80090ca:	4603      	mov	r3, r0
 80090cc:	e000      	b.n	80090d0 <find_volume+0x164>
 80090ce:	2303      	movs	r3, #3
 80090d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80090d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d905      	bls.n	80090e8 <find_volume+0x17c>
 80090dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090de:	3301      	adds	r3, #1
 80090e0:	643b      	str	r3, [r7, #64]	; 0x40
 80090e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d9e1      	bls.n	80090ac <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80090e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d101      	bne.n	80090f4 <find_volume+0x188>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e180      	b.n	80093f6 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80090f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d901      	bls.n	8009100 <find_volume+0x194>
 80090fc:	230d      	movs	r3, #13
 80090fe:	e17a      	b.n	80093f6 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009102:	3334      	adds	r3, #52	; 0x34
 8009104:	330b      	adds	r3, #11
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe fc0a 	bl	8007920 <ld_word>
 800910c:	4603      	mov	r3, r0
 800910e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009112:	d001      	beq.n	8009118 <find_volume+0x1ac>
 8009114:	230d      	movs	r3, #13
 8009116:	e16e      	b.n	80093f6 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	3334      	adds	r3, #52	; 0x34
 800911c:	3316      	adds	r3, #22
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe fbfe 	bl	8007920 <ld_word>
 8009124:	4603      	mov	r3, r0
 8009126:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d106      	bne.n	800913c <find_volume+0x1d0>
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	3334      	adds	r3, #52	; 0x34
 8009132:	3324      	adds	r3, #36	; 0x24
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe fc0b 	bl	8007950 <ld_dword>
 800913a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800913c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009140:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800914c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914e:	789b      	ldrb	r3, [r3, #2]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d005      	beq.n	8009160 <find_volume+0x1f4>
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	789b      	ldrb	r3, [r3, #2]
 8009158:	2b02      	cmp	r3, #2
 800915a:	d001      	beq.n	8009160 <find_volume+0x1f4>
 800915c:	230d      	movs	r3, #13
 800915e:	e14a      	b.n	80093f6 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	789b      	ldrb	r3, [r3, #2]
 8009164:	461a      	mov	r2, r3
 8009166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009168:	fb02 f303 	mul.w	r3, r2, r3
 800916c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009174:	b29a      	uxth	r2, r3
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	895b      	ldrh	r3, [r3, #10]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d008      	beq.n	8009194 <find_volume+0x228>
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	895b      	ldrh	r3, [r3, #10]
 8009186:	461a      	mov	r2, r3
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	895b      	ldrh	r3, [r3, #10]
 800918c:	3b01      	subs	r3, #1
 800918e:	4013      	ands	r3, r2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <find_volume+0x22c>
 8009194:	230d      	movs	r3, #13
 8009196:	e12e      	b.n	80093f6 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	3334      	adds	r3, #52	; 0x34
 800919c:	3311      	adds	r3, #17
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fbbe 	bl	8007920 <ld_word>
 80091a4:	4603      	mov	r3, r0
 80091a6:	461a      	mov	r2, r3
 80091a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	891b      	ldrh	r3, [r3, #8]
 80091b0:	f003 030f 	and.w	r3, r3, #15
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <find_volume+0x252>
 80091ba:	230d      	movs	r3, #13
 80091bc:	e11b      	b.n	80093f6 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	3334      	adds	r3, #52	; 0x34
 80091c2:	3313      	adds	r3, #19
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fe fbab 	bl	8007920 <ld_word>
 80091ca:	4603      	mov	r3, r0
 80091cc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80091ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d106      	bne.n	80091e2 <find_volume+0x276>
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	3334      	adds	r3, #52	; 0x34
 80091d8:	3320      	adds	r3, #32
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fbb8 	bl	8007950 <ld_dword>
 80091e0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e4:	3334      	adds	r3, #52	; 0x34
 80091e6:	330e      	adds	r3, #14
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fe fb99 	bl	8007920 <ld_word>
 80091ee:	4603      	mov	r3, r0
 80091f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80091f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <find_volume+0x290>
 80091f8:	230d      	movs	r3, #13
 80091fa:	e0fc      	b.n	80093f6 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80091fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80091fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009200:	4413      	add	r3, r2
 8009202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009204:	8912      	ldrh	r2, [r2, #8]
 8009206:	0912      	lsrs	r2, r2, #4
 8009208:	b292      	uxth	r2, r2
 800920a:	4413      	add	r3, r2
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800920e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	429a      	cmp	r2, r3
 8009214:	d201      	bcs.n	800921a <find_volume+0x2ae>
 8009216:	230d      	movs	r3, #13
 8009218:	e0ed      	b.n	80093f6 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800921a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009222:	8952      	ldrh	r2, [r2, #10]
 8009224:	fbb3 f3f2 	udiv	r3, r3, r2
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	d103      	bne.n	8009238 <find_volume+0x2cc>
 8009230:	230d      	movs	r3, #13
 8009232:	e0e0      	b.n	80093f6 <find_volume+0x48a>
 8009234:	20000094 	.word	0x20000094
		fmt = FS_FAT32;
 8009238:	2303      	movs	r3, #3
 800923a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009244:	4293      	cmp	r3, r2
 8009246:	d802      	bhi.n	800924e <find_volume+0x2e2>
 8009248:	2302      	movs	r3, #2
 800924a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009254:	4293      	cmp	r3, r2
 8009256:	d802      	bhi.n	800925e <find_volume+0x2f2>
 8009258:	2301      	movs	r3, #1
 800925a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	1c9a      	adds	r2, r3, #2
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800926a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800926c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800926e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009270:	441a      	add	r2, r3
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009276:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927a:	441a      	add	r2, r3
 800927c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009284:	2b03      	cmp	r3, #3
 8009286:	d11e      	bne.n	80092c6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	3334      	adds	r3, #52	; 0x34
 800928c:	332a      	adds	r3, #42	; 0x2a
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fb46 	bl	8007920 <ld_word>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <find_volume+0x332>
 800929a:	230d      	movs	r3, #13
 800929c:	e0ab      	b.n	80093f6 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a0:	891b      	ldrh	r3, [r3, #8]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <find_volume+0x33e>
 80092a6:	230d      	movs	r3, #13
 80092a8:	e0a5      	b.n	80093f6 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	3334      	adds	r3, #52	; 0x34
 80092ae:	332c      	adds	r3, #44	; 0x2c
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fe fb4d 	bl	8007950 <ld_dword>
 80092b6:	4602      	mov	r2, r0
 80092b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ba:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80092bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	647b      	str	r3, [r7, #68]	; 0x44
 80092c4:	e01f      	b.n	8009306 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80092c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c8:	891b      	ldrh	r3, [r3, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <find_volume+0x366>
 80092ce:	230d      	movs	r3, #13
 80092d0:	e091      	b.n	80093f6 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d8:	441a      	add	r2, r3
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80092de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d103      	bne.n	80092ee <find_volume+0x382>
 80092e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	005b      	lsls	r3, r3, #1
 80092ec:	e00a      	b.n	8009304 <find_volume+0x398>
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	699a      	ldr	r2, [r3, #24]
 80092f2:	4613      	mov	r3, r2
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	4413      	add	r3, r2
 80092f8:	085a      	lsrs	r2, r3, #1
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009304:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	69da      	ldr	r2, [r3, #28]
 800930a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800930c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009310:	0a5b      	lsrs	r3, r3, #9
 8009312:	429a      	cmp	r2, r3
 8009314:	d201      	bcs.n	800931a <find_volume+0x3ae>
 8009316:	230d      	movs	r3, #13
 8009318:	e06d      	b.n	80093f6 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	f04f 32ff 	mov.w	r2, #4294967295
 8009320:	611a      	str	r2, [r3, #16]
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	2280      	movs	r2, #128	; 0x80
 800932e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009334:	2b03      	cmp	r3, #3
 8009336:	d149      	bne.n	80093cc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	3334      	adds	r3, #52	; 0x34
 800933c:	3330      	adds	r3, #48	; 0x30
 800933e:	4618      	mov	r0, r3
 8009340:	f7fe faee 	bl	8007920 <ld_word>
 8009344:	4603      	mov	r3, r0
 8009346:	2b01      	cmp	r3, #1
 8009348:	d140      	bne.n	80093cc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800934a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800934c:	3301      	adds	r3, #1
 800934e:	4619      	mov	r1, r3
 8009350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009352:	f7fe fd95 	bl	8007e80 <move_window>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d137      	bne.n	80093cc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935e:	2200      	movs	r2, #0
 8009360:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	3334      	adds	r3, #52	; 0x34
 8009366:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe fad8 	bl	8007920 <ld_word>
 8009370:	4603      	mov	r3, r0
 8009372:	461a      	mov	r2, r3
 8009374:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009378:	429a      	cmp	r2, r3
 800937a:	d127      	bne.n	80093cc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	3334      	adds	r3, #52	; 0x34
 8009380:	4618      	mov	r0, r3
 8009382:	f7fe fae5 	bl	8007950 <ld_dword>
 8009386:	4602      	mov	r2, r0
 8009388:	4b1d      	ldr	r3, [pc, #116]	; (8009400 <find_volume+0x494>)
 800938a:	429a      	cmp	r2, r3
 800938c:	d11e      	bne.n	80093cc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	3334      	adds	r3, #52	; 0x34
 8009392:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fada 	bl	8007950 <ld_dword>
 800939c:	4602      	mov	r2, r0
 800939e:	4b19      	ldr	r3, [pc, #100]	; (8009404 <find_volume+0x498>)
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d113      	bne.n	80093cc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	3334      	adds	r3, #52	; 0x34
 80093a8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fe facf 	bl	8007950 <ld_dword>
 80093b2:	4602      	mov	r2, r0
 80093b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80093b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ba:	3334      	adds	r3, #52	; 0x34
 80093bc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fe fac5 	bl	8007950 <ld_dword>
 80093c6:	4602      	mov	r2, r0
 80093c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ca:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80093d2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80093d4:	4b0c      	ldr	r3, [pc, #48]	; (8009408 <find_volume+0x49c>)
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	b29a      	uxth	r2, r3
 80093dc:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <find_volume+0x49c>)
 80093de:	801a      	strh	r2, [r3, #0]
 80093e0:	4b09      	ldr	r3, [pc, #36]	; (8009408 <find_volume+0x49c>)
 80093e2:	881a      	ldrh	r2, [r3, #0]
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80093e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ea:	2200      	movs	r2, #0
 80093ec:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80093ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093f0:	f7fe fcde 	bl	8007db0 <clear_lock>
#endif
	return FR_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3758      	adds	r7, #88	; 0x58
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	41615252 	.word	0x41615252
 8009404:	61417272 	.word	0x61417272
 8009408:	20000098 	.word	0x20000098

0800940c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009416:	2309      	movs	r3, #9
 8009418:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01c      	beq.n	800945a <validate+0x4e>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d018      	beq.n	800945a <validate+0x4e>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d013      	beq.n	800945a <validate+0x4e>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	889a      	ldrh	r2, [r3, #4]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	88db      	ldrh	r3, [r3, #6]
 800943c:	429a      	cmp	r2, r3
 800943e:	d10c      	bne.n	800945a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	785b      	ldrb	r3, [r3, #1]
 8009446:	4618      	mov	r0, r3
 8009448:	f7fe f9cc 	bl	80077e4 <disk_status>
 800944c:	4603      	mov	r3, r0
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <validate+0x4e>
			res = FR_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d102      	bne.n	8009466 <validate+0x5a>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	e000      	b.n	8009468 <validate+0x5c>
 8009466:	2300      	movs	r3, #0
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	6013      	str	r3, [r2, #0]
	return res;
 800946c:	7bfb      	ldrb	r3, [r7, #15]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	4613      	mov	r3, r2
 8009484:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800948a:	f107 0310 	add.w	r3, r7, #16
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff fcd2 	bl	8008e38 <get_ldnumber>
 8009494:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	2b00      	cmp	r3, #0
 800949a:	da01      	bge.n	80094a0 <f_mount+0x28>
 800949c:	230b      	movs	r3, #11
 800949e:	e02b      	b.n	80094f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80094a0:	4a17      	ldr	r2, [pc, #92]	; (8009500 <f_mount+0x88>)
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d005      	beq.n	80094bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80094b0:	69b8      	ldr	r0, [r7, #24]
 80094b2:	f7fe fc7d 	bl	8007db0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2200      	movs	r2, #0
 80094ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	490d      	ldr	r1, [pc, #52]	; (8009500 <f_mount+0x88>)
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <f_mount+0x66>
 80094d8:	79fb      	ldrb	r3, [r7, #7]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d001      	beq.n	80094e2 <f_mount+0x6a>
 80094de:	2300      	movs	r3, #0
 80094e0:	e00a      	b.n	80094f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80094e2:	f107 010c 	add.w	r1, r7, #12
 80094e6:	f107 0308 	add.w	r3, r7, #8
 80094ea:	2200      	movs	r2, #0
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff fd3d 	bl	8008f6c <find_volume>
 80094f2:	4603      	mov	r3, r0
 80094f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80094f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3720      	adds	r7, #32
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20000094 	.word	0x20000094

08009504 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b098      	sub	sp, #96	; 0x60
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	4613      	mov	r3, r2
 8009510:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <f_open+0x18>
 8009518:	2309      	movs	r3, #9
 800951a:	e1ad      	b.n	8009878 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009522:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009524:	79fa      	ldrb	r2, [r7, #7]
 8009526:	f107 0110 	add.w	r1, r7, #16
 800952a:	f107 0308 	add.w	r3, r7, #8
 800952e:	4618      	mov	r0, r3
 8009530:	f7ff fd1c 	bl	8008f6c <find_volume>
 8009534:	4603      	mov	r3, r0
 8009536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800953a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800953e:	2b00      	cmp	r3, #0
 8009540:	f040 8191 	bne.w	8009866 <f_open+0x362>
		dj.obj.fs = fs;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	f107 0314 	add.w	r3, r7, #20
 800954e:	4611      	mov	r1, r2
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff fbe1 	bl	8008d18 <follow_path>
 8009556:	4603      	mov	r3, r0
 8009558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800955c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009560:	2b00      	cmp	r3, #0
 8009562:	d11a      	bne.n	800959a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009564:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009568:	b25b      	sxtb	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	da03      	bge.n	8009576 <f_open+0x72>
				res = FR_INVALID_NAME;
 800956e:	2306      	movs	r3, #6
 8009570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009574:	e011      	b.n	800959a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009576:	79fb      	ldrb	r3, [r7, #7]
 8009578:	f023 0301 	bic.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	bf14      	ite	ne
 8009580:	2301      	movne	r3, #1
 8009582:	2300      	moveq	r3, #0
 8009584:	b2db      	uxtb	r3, r3
 8009586:	461a      	mov	r2, r3
 8009588:	f107 0314 	add.w	r3, r7, #20
 800958c:	4611      	mov	r1, r2
 800958e:	4618      	mov	r0, r3
 8009590:	f7fe fac6 	bl	8007b20 <chk_lock>
 8009594:	4603      	mov	r3, r0
 8009596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800959a:	79fb      	ldrb	r3, [r7, #7]
 800959c:	f003 031c 	and.w	r3, r3, #28
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d07f      	beq.n	80096a4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80095a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d017      	beq.n	80095dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80095ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d10e      	bne.n	80095d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80095b4:	f7fe fb10 	bl	8007bd8 <enq_lock>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d006      	beq.n	80095cc <f_open+0xc8>
 80095be:	f107 0314 	add.w	r3, r7, #20
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff fa4c 	bl	8008a60 <dir_register>
 80095c8:	4603      	mov	r3, r0
 80095ca:	e000      	b.n	80095ce <f_open+0xca>
 80095cc:	2312      	movs	r3, #18
 80095ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80095d2:	79fb      	ldrb	r3, [r7, #7]
 80095d4:	f043 0308 	orr.w	r3, r3, #8
 80095d8:	71fb      	strb	r3, [r7, #7]
 80095da:	e010      	b.n	80095fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80095dc:	7ebb      	ldrb	r3, [r7, #26]
 80095de:	f003 0311 	and.w	r3, r3, #17
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d003      	beq.n	80095ee <f_open+0xea>
					res = FR_DENIED;
 80095e6:	2307      	movs	r3, #7
 80095e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80095ec:	e007      	b.n	80095fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	f003 0304 	and.w	r3, r3, #4
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <f_open+0xfa>
 80095f8:	2308      	movs	r3, #8
 80095fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80095fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009602:	2b00      	cmp	r3, #0
 8009604:	d168      	bne.n	80096d8 <f_open+0x1d4>
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	f003 0308 	and.w	r3, r3, #8
 800960c:	2b00      	cmp	r3, #0
 800960e:	d063      	beq.n	80096d8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009610:	f7fd ff7c 	bl	800750c <get_fattime>
 8009614:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009618:	330e      	adds	r3, #14
 800961a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe f9d5 	bl	80079cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009624:	3316      	adds	r3, #22
 8009626:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe f9cf 	bl	80079cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800962e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009630:	330b      	adds	r3, #11
 8009632:	2220      	movs	r2, #32
 8009634:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800963a:	4611      	mov	r1, r2
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff f91e 	bl	800887e <ld_clust>
 8009642:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009648:	2200      	movs	r2, #0
 800964a:	4618      	mov	r0, r3
 800964c:	f7ff f936 	bl	80088bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009652:	331c      	adds	r3, #28
 8009654:	2100      	movs	r1, #0
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe f9b8 	bl	80079cc <st_dword>
					fs->wflag = 1;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	2201      	movs	r2, #1
 8009660:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d037      	beq.n	80096d8 <f_open+0x1d4>
						dw = fs->winsect;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800966e:	f107 0314 	add.w	r3, r7, #20
 8009672:	2200      	movs	r2, #0
 8009674:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fe49 	bl	800830e <remove_chain>
 800967c:	4603      	mov	r3, r0
 800967e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009682:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009686:	2b00      	cmp	r3, #0
 8009688:	d126      	bne.n	80096d8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe fbf6 	bl	8007e80 <move_window>
 8009694:	4603      	mov	r3, r0
 8009696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800969e:	3a01      	subs	r2, #1
 80096a0:	60da      	str	r2, [r3, #12]
 80096a2:	e019      	b.n	80096d8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80096a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d115      	bne.n	80096d8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80096ac:	7ebb      	ldrb	r3, [r7, #26]
 80096ae:	f003 0310 	and.w	r3, r3, #16
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <f_open+0x1ba>
					res = FR_NO_FILE;
 80096b6:	2304      	movs	r3, #4
 80096b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80096bc:	e00c      	b.n	80096d8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	f003 0302 	and.w	r3, r3, #2
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d007      	beq.n	80096d8 <f_open+0x1d4>
 80096c8:	7ebb      	ldrb	r3, [r7, #26]
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <f_open+0x1d4>
						res = FR_DENIED;
 80096d2:	2307      	movs	r3, #7
 80096d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80096d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d128      	bne.n	8009732 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	f003 0308 	and.w	r3, r3, #8
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80096fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	f023 0301 	bic.w	r3, r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	bf14      	ite	ne
 800970a:	2301      	movne	r3, #1
 800970c:	2300      	moveq	r3, #0
 800970e:	b2db      	uxtb	r3, r3
 8009710:	461a      	mov	r2, r3
 8009712:	f107 0314 	add.w	r3, r7, #20
 8009716:	4611      	mov	r1, r2
 8009718:	4618      	mov	r0, r3
 800971a:	f7fe fa7f 	bl	8007c1c <inc_lock>
 800971e:	4602      	mov	r2, r0
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <f_open+0x22e>
 800972c:	2302      	movs	r3, #2
 800972e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009732:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009736:	2b00      	cmp	r3, #0
 8009738:	f040 8095 	bne.w	8009866 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009740:	4611      	mov	r1, r2
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff f89b 	bl	800887e <ld_clust>
 8009748:	4602      	mov	r2, r0
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800974e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009750:	331c      	adds	r3, #28
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe f8fc 	bl	8007950 <ld_dword>
 8009758:	4602      	mov	r2, r0
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	88da      	ldrh	r2, [r3, #6]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	79fa      	ldrb	r2, [r7, #7]
 8009776:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3330      	adds	r3, #48	; 0x30
 800978e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009792:	2100      	movs	r1, #0
 8009794:	4618      	mov	r0, r3
 8009796:	f7fe f966 	bl	8007a66 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	f003 0320 	and.w	r3, r3, #32
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d060      	beq.n	8009866 <f_open+0x362>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d05c      	beq.n	8009866 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68da      	ldr	r2, [r3, #12]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	895b      	ldrh	r3, [r3, #10]
 80097b8:	025b      	lsls	r3, r3, #9
 80097ba:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	657b      	str	r3, [r7, #84]	; 0x54
 80097c8:	e016      	b.n	80097f8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fc11 	bl	8007ff6 <get_fat>
 80097d4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80097d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d802      	bhi.n	80097e2 <f_open+0x2de>
 80097dc:	2302      	movs	r3, #2
 80097de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80097e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e8:	d102      	bne.n	80097f0 <f_open+0x2ec>
 80097ea:	2301      	movs	r3, #1
 80097ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80097f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	657b      	str	r3, [r7, #84]	; 0x54
 80097f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d103      	bne.n	8009808 <f_open+0x304>
 8009800:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009804:	429a      	cmp	r2, r3
 8009806:	d8e0      	bhi.n	80097ca <f_open+0x2c6>
				}
				fp->clust = clst;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800980c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800980e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009812:	2b00      	cmp	r3, #0
 8009814:	d127      	bne.n	8009866 <f_open+0x362>
 8009816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981c:	2b00      	cmp	r3, #0
 800981e:	d022      	beq.n	8009866 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe fbc7 	bl	8007fb8 <clust2sect>
 800982a:	6478      	str	r0, [r7, #68]	; 0x44
 800982c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800982e:	2b00      	cmp	r3, #0
 8009830:	d103      	bne.n	800983a <f_open+0x336>
						res = FR_INT_ERR;
 8009832:	2302      	movs	r3, #2
 8009834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009838:	e015      	b.n	8009866 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800983a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800983c:	0a5a      	lsrs	r2, r3, #9
 800983e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009840:	441a      	add	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	7858      	ldrb	r0, [r3, #1]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6a1a      	ldr	r2, [r3, #32]
 8009854:	2301      	movs	r3, #1
 8009856:	f7fe f805 	bl	8007864 <disk_read>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <f_open+0x362>
 8009860:	2301      	movs	r3, #1
 8009862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <f_open+0x370>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009878:	4618      	mov	r0, r3
 800987a:	3760      	adds	r7, #96	; 0x60
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08e      	sub	sp, #56	; 0x38
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f107 0214 	add.w	r2, r7, #20
 800989e:	4611      	mov	r1, r2
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7ff fdb3 	bl	800940c <validate>
 80098a6:	4603      	mov	r3, r0
 80098a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80098ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d107      	bne.n	80098c4 <f_read+0x44>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	7d5b      	ldrb	r3, [r3, #21]
 80098b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80098bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d002      	beq.n	80098ca <f_read+0x4a>
 80098c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098c8:	e115      	b.n	8009af6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	7d1b      	ldrb	r3, [r3, #20]
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <f_read+0x5a>
 80098d6:	2307      	movs	r3, #7
 80098d8:	e10d      	b.n	8009af6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	68da      	ldr	r2, [r3, #12]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	f240 80fe 	bls.w	8009aec <f_read+0x26c>
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80098f4:	e0fa      	b.n	8009aec <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f040 80c6 	bne.w	8009a90 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	0a5b      	lsrs	r3, r3, #9
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	8952      	ldrh	r2, [r2, #10]
 800990e:	3a01      	subs	r2, #1
 8009910:	4013      	ands	r3, r2
 8009912:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d12f      	bne.n	800997a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d103      	bne.n	800992a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	633b      	str	r3, [r7, #48]	; 0x30
 8009928:	e013      	b.n	8009952 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992e:	2b00      	cmp	r3, #0
 8009930:	d007      	beq.n	8009942 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	4619      	mov	r1, r3
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f7fe fde5 	bl	8008508 <clmt_clust>
 800993e:	6338      	str	r0, [r7, #48]	; 0x30
 8009940:	e007      	b.n	8009952 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	4619      	mov	r1, r3
 800994a:	4610      	mov	r0, r2
 800994c:	f7fe fb53 	bl	8007ff6 <get_fat>
 8009950:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	2b01      	cmp	r3, #1
 8009956:	d804      	bhi.n	8009962 <f_read+0xe2>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2202      	movs	r2, #2
 800995c:	755a      	strb	r2, [r3, #21]
 800995e:	2302      	movs	r3, #2
 8009960:	e0c9      	b.n	8009af6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009968:	d104      	bne.n	8009974 <f_read+0xf4>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2201      	movs	r2, #1
 800996e:	755a      	strb	r2, [r3, #21]
 8009970:	2301      	movs	r3, #1
 8009972:	e0c0      	b.n	8009af6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009978:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	69db      	ldr	r3, [r3, #28]
 8009980:	4619      	mov	r1, r3
 8009982:	4610      	mov	r0, r2
 8009984:	f7fe fb18 	bl	8007fb8 <clust2sect>
 8009988:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d104      	bne.n	800999a <f_read+0x11a>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2202      	movs	r2, #2
 8009994:	755a      	strb	r2, [r3, #21]
 8009996:	2302      	movs	r3, #2
 8009998:	e0ad      	b.n	8009af6 <f_read+0x276>
			sect += csect;
 800999a:	69ba      	ldr	r2, [r7, #24]
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	4413      	add	r3, r2
 80099a0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	0a5b      	lsrs	r3, r3, #9
 80099a6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d039      	beq.n	8009a22 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80099ae:	69fa      	ldr	r2, [r7, #28]
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	4413      	add	r3, r2
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	8952      	ldrh	r2, [r2, #10]
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d905      	bls.n	80099c8 <f_read+0x148>
					cc = fs->csize - csect;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	895b      	ldrh	r3, [r3, #10]
 80099c0:	461a      	mov	r2, r3
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	7858      	ldrb	r0, [r3, #1]
 80099cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ce:	69ba      	ldr	r2, [r7, #24]
 80099d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099d2:	f7fd ff47 	bl	8007864 <disk_read>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d004      	beq.n	80099e6 <f_read+0x166>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2201      	movs	r2, #1
 80099e0:	755a      	strb	r2, [r3, #21]
 80099e2:	2301      	movs	r3, #1
 80099e4:	e087      	b.n	8009af6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	7d1b      	ldrb	r3, [r3, #20]
 80099ea:	b25b      	sxtb	r3, r3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	da14      	bge.n	8009a1a <f_read+0x19a>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6a1a      	ldr	r2, [r3, #32]
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d90d      	bls.n	8009a1a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a1a      	ldr	r2, [r3, #32]
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	025b      	lsls	r3, r3, #9
 8009a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a0a:	18d0      	adds	r0, r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	3330      	adds	r3, #48	; 0x30
 8009a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a14:	4619      	mov	r1, r3
 8009a16:	f7fe f805 	bl	8007a24 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1c:	025b      	lsls	r3, r3, #9
 8009a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009a20:	e050      	b.n	8009ac4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	69ba      	ldr	r2, [r7, #24]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d02e      	beq.n	8009a8a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	7d1b      	ldrb	r3, [r3, #20]
 8009a30:	b25b      	sxtb	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	da18      	bge.n	8009a68 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	7858      	ldrb	r0, [r3, #1]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6a1a      	ldr	r2, [r3, #32]
 8009a44:	2301      	movs	r3, #1
 8009a46:	f7fd ff2d 	bl	80078a4 <disk_write>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d004      	beq.n	8009a5a <f_read+0x1da>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2201      	movs	r2, #1
 8009a54:	755a      	strb	r2, [r3, #21]
 8009a56:	2301      	movs	r3, #1
 8009a58:	e04d      	b.n	8009af6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	7d1b      	ldrb	r3, [r3, #20]
 8009a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	7858      	ldrb	r0, [r3, #1]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a72:	2301      	movs	r3, #1
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	f7fd fef5 	bl	8007864 <disk_read>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d004      	beq.n	8009a8a <f_read+0x20a>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2201      	movs	r2, #1
 8009a84:	755a      	strb	r2, [r3, #21]
 8009a86:	2301      	movs	r3, #1
 8009a88:	e035      	b.n	8009af6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d901      	bls.n	8009aaa <f_read+0x22a>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab8:	4413      	add	r3, r2
 8009aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009abc:	4619      	mov	r1, r3
 8009abe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ac0:	f7fd ffb0 	bl	8007a24 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	4413      	add	r3, r2
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	699a      	ldr	r2, [r3, #24]
 8009ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad2:	441a      	add	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	619a      	str	r2, [r3, #24]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ade:	441a      	add	r2, r3
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f47f af01 	bne.w	80098f6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3738      	adds	r7, #56	; 0x38
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b086      	sub	sp, #24
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f107 0208 	add.w	r2, r7, #8
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7ff fc7c 	bl	800940c <validate>
 8009b14:	4603      	mov	r3, r0
 8009b16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b18:	7dfb      	ldrb	r3, [r7, #23]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d168      	bne.n	8009bf0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	7d1b      	ldrb	r3, [r3, #20]
 8009b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d062      	beq.n	8009bf0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	7d1b      	ldrb	r3, [r3, #20]
 8009b2e:	b25b      	sxtb	r3, r3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	da15      	bge.n	8009b60 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	7858      	ldrb	r0, [r3, #1]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1a      	ldr	r2, [r3, #32]
 8009b42:	2301      	movs	r3, #1
 8009b44:	f7fd feae 	bl	80078a4 <disk_write>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <f_sync+0x54>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e04f      	b.n	8009bf2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	7d1b      	ldrb	r3, [r3, #20]
 8009b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009b60:	f7fd fcd4 	bl	800750c <get_fattime>
 8009b64:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4610      	mov	r0, r2
 8009b70:	f7fe f986 	bl	8007e80 <move_window>
 8009b74:	4603      	mov	r3, r0
 8009b76:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d138      	bne.n	8009bf0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b82:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	330b      	adds	r3, #11
 8009b88:	781a      	ldrb	r2, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	330b      	adds	r3, #11
 8009b8e:	f042 0220 	orr.w	r2, r2, #32
 8009b92:	b2d2      	uxtb	r2, r2
 8009b94:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	68f9      	ldr	r1, [r7, #12]
 8009ba2:	f7fe fe8b 	bl	80088bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f103 021c 	add.w	r2, r3, #28
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	f7fd ff0a 	bl	80079cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	3316      	adds	r3, #22
 8009bbc:	6939      	ldr	r1, [r7, #16]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fd ff04 	bl	80079cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3312      	adds	r3, #18
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fd fee3 	bl	8007996 <st_word>
					fs->wflag = 1;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe f97f 	bl	8007edc <sync_fs>
 8009bde:	4603      	mov	r3, r0
 8009be0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	7d1b      	ldrb	r3, [r3, #20]
 8009be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff ff7b 	bl	8009afe <f_sync>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d118      	bne.n	8009c44 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f107 0208 	add.w	r2, r7, #8
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff fbf6 	bl	800940c <validate>
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10c      	bne.n	8009c44 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fe f882 	bl	8007d38 <dec_lock>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d102      	bne.n	8009c44 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009c4e:	b590      	push	{r4, r7, lr}
 8009c50:	b091      	sub	sp, #68	; 0x44
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009c56:	f107 0108 	add.w	r1, r7, #8
 8009c5a:	1d3b      	adds	r3, r7, #4
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7ff f984 	bl	8008f6c <find_volume>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8009c6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d131      	bne.n	8009cd6 <f_chdir+0x88>
		dj.obj.fs = fs;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	f107 030c 	add.w	r3, r7, #12
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff f84a 	bl	8008d18 <follow_path>
 8009c84:	4603      	mov	r3, r0
 8009c86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8009c8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d11a      	bne.n	8009cc8 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009c92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c96:	b25b      	sxtb	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	da03      	bge.n	8009ca4 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	615a      	str	r2, [r3, #20]
 8009ca2:	e011      	b.n	8009cc8 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8009ca4:	7cbb      	ldrb	r3, [r7, #18]
 8009ca6:	f003 0310 	and.w	r3, r3, #16
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d009      	beq.n	8009cc2 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cb2:	68bc      	ldr	r4, [r7, #8]
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fe fde1 	bl	800887e <ld_clust>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	6163      	str	r3, [r4, #20]
 8009cc0:	e002      	b.n	8009cc8 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8009cc2:	2305      	movs	r3, #5
 8009cc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009cc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ccc:	2b04      	cmp	r3, #4
 8009cce:	d102      	bne.n	8009cd6 <f_chdir+0x88>
 8009cd0:	2305      	movs	r3, #5
 8009cd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8009cd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3744      	adds	r7, #68	; 0x44
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd90      	pop	{r4, r7, pc}

08009ce2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b086      	sub	sp, #24
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <f_opendir+0x14>
 8009cf2:	2309      	movs	r3, #9
 8009cf4:	e064      	b.n	8009dc0 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8009cfa:	f107 010c 	add.w	r1, r7, #12
 8009cfe:	463b      	mov	r3, r7
 8009d00:	2200      	movs	r2, #0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff f932 	bl	8008f6c <find_volume>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d14f      	bne.n	8009db2 <f_opendir+0xd0>
		obj->fs = fs;
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7fe fffb 	bl	8008d18 <follow_path>
 8009d22:	4603      	mov	r3, r0
 8009d24:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d13d      	bne.n	8009da8 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d32:	b25b      	sxtb	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	db12      	blt.n	8009d5e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	799b      	ldrb	r3, [r3, #6]
 8009d3c:	f003 0310 	and.w	r3, r3, #16
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00a      	beq.n	8009d5a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	f7fe fd96 	bl	800887e <ld_clust>
 8009d52:	4602      	mov	r2, r0
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	609a      	str	r2, [r3, #8]
 8009d58:	e001      	b.n	8009d5e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009d5a:	2305      	movs	r3, #5
 8009d5c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d121      	bne.n	8009da8 <f_opendir+0xc6>
				obj->id = fs->id;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	88da      	ldrh	r2, [r3, #6]
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7fe fbfe 	bl	8008570 <dir_sdi>
 8009d74:	4603      	mov	r3, r0
 8009d76:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d114      	bne.n	8009da8 <f_opendir+0xc6>
					if (obj->sclust) {
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00d      	beq.n	8009da2 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009d86:	2100      	movs	r1, #0
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7fd ff47 	bl	8007c1c <inc_lock>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d105      	bne.n	8009da8 <f_opendir+0xc6>
 8009d9c:	2312      	movs	r3, #18
 8009d9e:	75fb      	strb	r3, [r7, #23]
 8009da0:	e002      	b.n	8009da8 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	2200      	movs	r2, #0
 8009da6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	2b04      	cmp	r3, #4
 8009dac:	d101      	bne.n	8009db2 <f_opendir+0xd0>
 8009dae:	2305      	movs	r3, #5
 8009db0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <f_opendir+0xdc>
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f107 0208 	add.w	r2, r7, #8
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fb17 	bl	800940c <validate>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d110      	bne.n	8009e0a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d006      	beq.n	8009dfe <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fd ff9f 	bl	8007d38 <dec_lock>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8009e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f107 0208 	add.w	r2, r7, #8
 8009e24:	4611      	mov	r1, r2
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7ff faf0 	bl	800940c <validate>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d126      	bne.n	8009e84 <f_readdir+0x70>
		if (!fno) {
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d106      	bne.n	8009e4a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7fe fb96 	bl	8008570 <dir_sdi>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]
 8009e48:	e01c      	b.n	8009e84 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7fe fd55 	bl	80088fc <dir_read>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
 8009e58:	2b04      	cmp	r3, #4
 8009e5a:	d101      	bne.n	8009e60 <f_readdir+0x4c>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10e      	bne.n	8009e84 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7fe fe2b 	bl	8008ac4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009e6e:	2100      	movs	r1, #0
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7fe fbf8 	bl	8008666 <dir_next>
 8009e76:	4603      	mov	r3, r0
 8009e78:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d101      	bne.n	8009e84 <f_readdir+0x70>
 8009e80:	2300      	movs	r3, #0
 8009e82:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
	...

08009e90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009ea6:	4b1f      	ldr	r3, [pc, #124]	; (8009f24 <FATFS_LinkDriverEx+0x94>)
 8009ea8:	7a5b      	ldrb	r3, [r3, #9]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d131      	bne.n	8009f14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009eb0:	4b1c      	ldr	r3, [pc, #112]	; (8009f24 <FATFS_LinkDriverEx+0x94>)
 8009eb2:	7a5b      	ldrb	r3, [r3, #9]
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	4b1a      	ldr	r3, [pc, #104]	; (8009f24 <FATFS_LinkDriverEx+0x94>)
 8009eba:	2100      	movs	r1, #0
 8009ebc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009ebe:	4b19      	ldr	r3, [pc, #100]	; (8009f24 <FATFS_LinkDriverEx+0x94>)
 8009ec0:	7a5b      	ldrb	r3, [r3, #9]
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	4a17      	ldr	r2, [pc, #92]	; (8009f24 <FATFS_LinkDriverEx+0x94>)
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009ece:	4b15      	ldr	r3, [pc, #84]	; (8009f24 <FATFS_LinkDriverEx+0x94>)
 8009ed0:	7a5b      	ldrb	r3, [r3, #9]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	4b13      	ldr	r3, [pc, #76]	; (8009f24 <FATFS_LinkDriverEx+0x94>)
 8009ed8:	4413      	add	r3, r2
 8009eda:	79fa      	ldrb	r2, [r7, #7]
 8009edc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009ede:	4b11      	ldr	r3, [pc, #68]	; (8009f24 <FATFS_LinkDriverEx+0x94>)
 8009ee0:	7a5b      	ldrb	r3, [r3, #9]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	b2d1      	uxtb	r1, r2
 8009ee8:	4a0e      	ldr	r2, [pc, #56]	; (8009f24 <FATFS_LinkDriverEx+0x94>)
 8009eea:	7251      	strb	r1, [r2, #9]
 8009eec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009eee:	7dbb      	ldrb	r3, [r7, #22]
 8009ef0:	3330      	adds	r3, #48	; 0x30
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	3301      	adds	r3, #1
 8009efc:	223a      	movs	r2, #58	; 0x3a
 8009efe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	3302      	adds	r3, #2
 8009f04:	222f      	movs	r2, #47	; 0x2f
 8009f06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	3303      	adds	r3, #3
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	371c      	adds	r7, #28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	200000bc 	.word	0x200000bc

08009f28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009f32:	2200      	movs	r2, #0
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7ff ffaa 	bl	8009e90 <FATFS_LinkDriverEx>
 8009f3c:	4603      	mov	r3, r0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <__errno>:
 8009f48:	4b01      	ldr	r3, [pc, #4]	; (8009f50 <__errno+0x8>)
 8009f4a:	6818      	ldr	r0, [r3, #0]
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	20000010 	.word	0x20000010

08009f54 <__libc_init_array>:
 8009f54:	b570      	push	{r4, r5, r6, lr}
 8009f56:	4e0d      	ldr	r6, [pc, #52]	; (8009f8c <__libc_init_array+0x38>)
 8009f58:	4c0d      	ldr	r4, [pc, #52]	; (8009f90 <__libc_init_array+0x3c>)
 8009f5a:	1ba4      	subs	r4, r4, r6
 8009f5c:	10a4      	asrs	r4, r4, #2
 8009f5e:	2500      	movs	r5, #0
 8009f60:	42a5      	cmp	r5, r4
 8009f62:	d109      	bne.n	8009f78 <__libc_init_array+0x24>
 8009f64:	4e0b      	ldr	r6, [pc, #44]	; (8009f94 <__libc_init_array+0x40>)
 8009f66:	4c0c      	ldr	r4, [pc, #48]	; (8009f98 <__libc_init_array+0x44>)
 8009f68:	f000 ff68 	bl	800ae3c <_init>
 8009f6c:	1ba4      	subs	r4, r4, r6
 8009f6e:	10a4      	asrs	r4, r4, #2
 8009f70:	2500      	movs	r5, #0
 8009f72:	42a5      	cmp	r5, r4
 8009f74:	d105      	bne.n	8009f82 <__libc_init_array+0x2e>
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
 8009f78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f7c:	4798      	blx	r3
 8009f7e:	3501      	adds	r5, #1
 8009f80:	e7ee      	b.n	8009f60 <__libc_init_array+0xc>
 8009f82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f86:	4798      	blx	r3
 8009f88:	3501      	adds	r5, #1
 8009f8a:	e7f2      	b.n	8009f72 <__libc_init_array+0x1e>
 8009f8c:	0800b1f8 	.word	0x0800b1f8
 8009f90:	0800b1f8 	.word	0x0800b1f8
 8009f94:	0800b1f8 	.word	0x0800b1f8
 8009f98:	0800b1fc 	.word	0x0800b1fc

08009f9c <memset>:
 8009f9c:	4402      	add	r2, r0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d100      	bne.n	8009fa6 <memset+0xa>
 8009fa4:	4770      	bx	lr
 8009fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8009faa:	e7f9      	b.n	8009fa0 <memset+0x4>

08009fac <iprintf>:
 8009fac:	b40f      	push	{r0, r1, r2, r3}
 8009fae:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <iprintf+0x2c>)
 8009fb0:	b513      	push	{r0, r1, r4, lr}
 8009fb2:	681c      	ldr	r4, [r3, #0]
 8009fb4:	b124      	cbz	r4, 8009fc0 <iprintf+0x14>
 8009fb6:	69a3      	ldr	r3, [r4, #24]
 8009fb8:	b913      	cbnz	r3, 8009fc0 <iprintf+0x14>
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f000 fa22 	bl	800a404 <__sinit>
 8009fc0:	ab05      	add	r3, sp, #20
 8009fc2:	9a04      	ldr	r2, [sp, #16]
 8009fc4:	68a1      	ldr	r1, [r4, #8]
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fbdb 	bl	800a784 <_vfiprintf_r>
 8009fce:	b002      	add	sp, #8
 8009fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fd4:	b004      	add	sp, #16
 8009fd6:	4770      	bx	lr
 8009fd8:	20000010 	.word	0x20000010

08009fdc <_puts_r>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	460e      	mov	r6, r1
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	b118      	cbz	r0, 8009fec <_puts_r+0x10>
 8009fe4:	6983      	ldr	r3, [r0, #24]
 8009fe6:	b90b      	cbnz	r3, 8009fec <_puts_r+0x10>
 8009fe8:	f000 fa0c 	bl	800a404 <__sinit>
 8009fec:	69ab      	ldr	r3, [r5, #24]
 8009fee:	68ac      	ldr	r4, [r5, #8]
 8009ff0:	b913      	cbnz	r3, 8009ff8 <_puts_r+0x1c>
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f000 fa06 	bl	800a404 <__sinit>
 8009ff8:	4b23      	ldr	r3, [pc, #140]	; (800a088 <_puts_r+0xac>)
 8009ffa:	429c      	cmp	r4, r3
 8009ffc:	d117      	bne.n	800a02e <_puts_r+0x52>
 8009ffe:	686c      	ldr	r4, [r5, #4]
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	071b      	lsls	r3, r3, #28
 800a004:	d51d      	bpl.n	800a042 <_puts_r+0x66>
 800a006:	6923      	ldr	r3, [r4, #16]
 800a008:	b1db      	cbz	r3, 800a042 <_puts_r+0x66>
 800a00a:	3e01      	subs	r6, #1
 800a00c:	68a3      	ldr	r3, [r4, #8]
 800a00e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a012:	3b01      	subs	r3, #1
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	b9e9      	cbnz	r1, 800a054 <_puts_r+0x78>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	da2e      	bge.n	800a07a <_puts_r+0x9e>
 800a01c:	4622      	mov	r2, r4
 800a01e:	210a      	movs	r1, #10
 800a020:	4628      	mov	r0, r5
 800a022:	f000 f83f 	bl	800a0a4 <__swbuf_r>
 800a026:	3001      	adds	r0, #1
 800a028:	d011      	beq.n	800a04e <_puts_r+0x72>
 800a02a:	200a      	movs	r0, #10
 800a02c:	e011      	b.n	800a052 <_puts_r+0x76>
 800a02e:	4b17      	ldr	r3, [pc, #92]	; (800a08c <_puts_r+0xb0>)
 800a030:	429c      	cmp	r4, r3
 800a032:	d101      	bne.n	800a038 <_puts_r+0x5c>
 800a034:	68ac      	ldr	r4, [r5, #8]
 800a036:	e7e3      	b.n	800a000 <_puts_r+0x24>
 800a038:	4b15      	ldr	r3, [pc, #84]	; (800a090 <_puts_r+0xb4>)
 800a03a:	429c      	cmp	r4, r3
 800a03c:	bf08      	it	eq
 800a03e:	68ec      	ldreq	r4, [r5, #12]
 800a040:	e7de      	b.n	800a000 <_puts_r+0x24>
 800a042:	4621      	mov	r1, r4
 800a044:	4628      	mov	r0, r5
 800a046:	f000 f87f 	bl	800a148 <__swsetup_r>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d0dd      	beq.n	800a00a <_puts_r+0x2e>
 800a04e:	f04f 30ff 	mov.w	r0, #4294967295
 800a052:	bd70      	pop	{r4, r5, r6, pc}
 800a054:	2b00      	cmp	r3, #0
 800a056:	da04      	bge.n	800a062 <_puts_r+0x86>
 800a058:	69a2      	ldr	r2, [r4, #24]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	dc06      	bgt.n	800a06c <_puts_r+0x90>
 800a05e:	290a      	cmp	r1, #10
 800a060:	d004      	beq.n	800a06c <_puts_r+0x90>
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	1c5a      	adds	r2, r3, #1
 800a066:	6022      	str	r2, [r4, #0]
 800a068:	7019      	strb	r1, [r3, #0]
 800a06a:	e7cf      	b.n	800a00c <_puts_r+0x30>
 800a06c:	4622      	mov	r2, r4
 800a06e:	4628      	mov	r0, r5
 800a070:	f000 f818 	bl	800a0a4 <__swbuf_r>
 800a074:	3001      	adds	r0, #1
 800a076:	d1c9      	bne.n	800a00c <_puts_r+0x30>
 800a078:	e7e9      	b.n	800a04e <_puts_r+0x72>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	200a      	movs	r0, #10
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	6022      	str	r2, [r4, #0]
 800a082:	7018      	strb	r0, [r3, #0]
 800a084:	e7e5      	b.n	800a052 <_puts_r+0x76>
 800a086:	bf00      	nop
 800a088:	0800b17c 	.word	0x0800b17c
 800a08c:	0800b19c 	.word	0x0800b19c
 800a090:	0800b15c 	.word	0x0800b15c

0800a094 <puts>:
 800a094:	4b02      	ldr	r3, [pc, #8]	; (800a0a0 <puts+0xc>)
 800a096:	4601      	mov	r1, r0
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	f7ff bf9f 	b.w	8009fdc <_puts_r>
 800a09e:	bf00      	nop
 800a0a0:	20000010 	.word	0x20000010

0800a0a4 <__swbuf_r>:
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	460e      	mov	r6, r1
 800a0a8:	4614      	mov	r4, r2
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	b118      	cbz	r0, 800a0b6 <__swbuf_r+0x12>
 800a0ae:	6983      	ldr	r3, [r0, #24]
 800a0b0:	b90b      	cbnz	r3, 800a0b6 <__swbuf_r+0x12>
 800a0b2:	f000 f9a7 	bl	800a404 <__sinit>
 800a0b6:	4b21      	ldr	r3, [pc, #132]	; (800a13c <__swbuf_r+0x98>)
 800a0b8:	429c      	cmp	r4, r3
 800a0ba:	d12a      	bne.n	800a112 <__swbuf_r+0x6e>
 800a0bc:	686c      	ldr	r4, [r5, #4]
 800a0be:	69a3      	ldr	r3, [r4, #24]
 800a0c0:	60a3      	str	r3, [r4, #8]
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	071a      	lsls	r2, r3, #28
 800a0c6:	d52e      	bpl.n	800a126 <__swbuf_r+0x82>
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	b363      	cbz	r3, 800a126 <__swbuf_r+0x82>
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	6820      	ldr	r0, [r4, #0]
 800a0d0:	1ac0      	subs	r0, r0, r3
 800a0d2:	6963      	ldr	r3, [r4, #20]
 800a0d4:	b2f6      	uxtb	r6, r6
 800a0d6:	4283      	cmp	r3, r0
 800a0d8:	4637      	mov	r7, r6
 800a0da:	dc04      	bgt.n	800a0e6 <__swbuf_r+0x42>
 800a0dc:	4621      	mov	r1, r4
 800a0de:	4628      	mov	r0, r5
 800a0e0:	f000 f926 	bl	800a330 <_fflush_r>
 800a0e4:	bb28      	cbnz	r0, 800a132 <__swbuf_r+0x8e>
 800a0e6:	68a3      	ldr	r3, [r4, #8]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	60a3      	str	r3, [r4, #8]
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	1c5a      	adds	r2, r3, #1
 800a0f0:	6022      	str	r2, [r4, #0]
 800a0f2:	701e      	strb	r6, [r3, #0]
 800a0f4:	6963      	ldr	r3, [r4, #20]
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	4283      	cmp	r3, r0
 800a0fa:	d004      	beq.n	800a106 <__swbuf_r+0x62>
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	07db      	lsls	r3, r3, #31
 800a100:	d519      	bpl.n	800a136 <__swbuf_r+0x92>
 800a102:	2e0a      	cmp	r6, #10
 800a104:	d117      	bne.n	800a136 <__swbuf_r+0x92>
 800a106:	4621      	mov	r1, r4
 800a108:	4628      	mov	r0, r5
 800a10a:	f000 f911 	bl	800a330 <_fflush_r>
 800a10e:	b190      	cbz	r0, 800a136 <__swbuf_r+0x92>
 800a110:	e00f      	b.n	800a132 <__swbuf_r+0x8e>
 800a112:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <__swbuf_r+0x9c>)
 800a114:	429c      	cmp	r4, r3
 800a116:	d101      	bne.n	800a11c <__swbuf_r+0x78>
 800a118:	68ac      	ldr	r4, [r5, #8]
 800a11a:	e7d0      	b.n	800a0be <__swbuf_r+0x1a>
 800a11c:	4b09      	ldr	r3, [pc, #36]	; (800a144 <__swbuf_r+0xa0>)
 800a11e:	429c      	cmp	r4, r3
 800a120:	bf08      	it	eq
 800a122:	68ec      	ldreq	r4, [r5, #12]
 800a124:	e7cb      	b.n	800a0be <__swbuf_r+0x1a>
 800a126:	4621      	mov	r1, r4
 800a128:	4628      	mov	r0, r5
 800a12a:	f000 f80d 	bl	800a148 <__swsetup_r>
 800a12e:	2800      	cmp	r0, #0
 800a130:	d0cc      	beq.n	800a0cc <__swbuf_r+0x28>
 800a132:	f04f 37ff 	mov.w	r7, #4294967295
 800a136:	4638      	mov	r0, r7
 800a138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a13a:	bf00      	nop
 800a13c:	0800b17c 	.word	0x0800b17c
 800a140:	0800b19c 	.word	0x0800b19c
 800a144:	0800b15c 	.word	0x0800b15c

0800a148 <__swsetup_r>:
 800a148:	4b32      	ldr	r3, [pc, #200]	; (800a214 <__swsetup_r+0xcc>)
 800a14a:	b570      	push	{r4, r5, r6, lr}
 800a14c:	681d      	ldr	r5, [r3, #0]
 800a14e:	4606      	mov	r6, r0
 800a150:	460c      	mov	r4, r1
 800a152:	b125      	cbz	r5, 800a15e <__swsetup_r+0x16>
 800a154:	69ab      	ldr	r3, [r5, #24]
 800a156:	b913      	cbnz	r3, 800a15e <__swsetup_r+0x16>
 800a158:	4628      	mov	r0, r5
 800a15a:	f000 f953 	bl	800a404 <__sinit>
 800a15e:	4b2e      	ldr	r3, [pc, #184]	; (800a218 <__swsetup_r+0xd0>)
 800a160:	429c      	cmp	r4, r3
 800a162:	d10f      	bne.n	800a184 <__swsetup_r+0x3c>
 800a164:	686c      	ldr	r4, [r5, #4]
 800a166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	0715      	lsls	r5, r2, #28
 800a16e:	d42c      	bmi.n	800a1ca <__swsetup_r+0x82>
 800a170:	06d0      	lsls	r0, r2, #27
 800a172:	d411      	bmi.n	800a198 <__swsetup_r+0x50>
 800a174:	2209      	movs	r2, #9
 800a176:	6032      	str	r2, [r6, #0]
 800a178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a17c:	81a3      	strh	r3, [r4, #12]
 800a17e:	f04f 30ff 	mov.w	r0, #4294967295
 800a182:	e03e      	b.n	800a202 <__swsetup_r+0xba>
 800a184:	4b25      	ldr	r3, [pc, #148]	; (800a21c <__swsetup_r+0xd4>)
 800a186:	429c      	cmp	r4, r3
 800a188:	d101      	bne.n	800a18e <__swsetup_r+0x46>
 800a18a:	68ac      	ldr	r4, [r5, #8]
 800a18c:	e7eb      	b.n	800a166 <__swsetup_r+0x1e>
 800a18e:	4b24      	ldr	r3, [pc, #144]	; (800a220 <__swsetup_r+0xd8>)
 800a190:	429c      	cmp	r4, r3
 800a192:	bf08      	it	eq
 800a194:	68ec      	ldreq	r4, [r5, #12]
 800a196:	e7e6      	b.n	800a166 <__swsetup_r+0x1e>
 800a198:	0751      	lsls	r1, r2, #29
 800a19a:	d512      	bpl.n	800a1c2 <__swsetup_r+0x7a>
 800a19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a19e:	b141      	cbz	r1, 800a1b2 <__swsetup_r+0x6a>
 800a1a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1a4:	4299      	cmp	r1, r3
 800a1a6:	d002      	beq.n	800a1ae <__swsetup_r+0x66>
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f000 fa19 	bl	800a5e0 <_free_r>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	6363      	str	r3, [r4, #52]	; 0x34
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1b8:	81a3      	strh	r3, [r4, #12]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	6063      	str	r3, [r4, #4]
 800a1be:	6923      	ldr	r3, [r4, #16]
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	f043 0308 	orr.w	r3, r3, #8
 800a1c8:	81a3      	strh	r3, [r4, #12]
 800a1ca:	6923      	ldr	r3, [r4, #16]
 800a1cc:	b94b      	cbnz	r3, 800a1e2 <__swsetup_r+0x9a>
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d8:	d003      	beq.n	800a1e2 <__swsetup_r+0x9a>
 800a1da:	4621      	mov	r1, r4
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f000 f9bf 	bl	800a560 <__smakebuf_r>
 800a1e2:	89a2      	ldrh	r2, [r4, #12]
 800a1e4:	f012 0301 	ands.w	r3, r2, #1
 800a1e8:	d00c      	beq.n	800a204 <__swsetup_r+0xbc>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60a3      	str	r3, [r4, #8]
 800a1ee:	6963      	ldr	r3, [r4, #20]
 800a1f0:	425b      	negs	r3, r3
 800a1f2:	61a3      	str	r3, [r4, #24]
 800a1f4:	6923      	ldr	r3, [r4, #16]
 800a1f6:	b953      	cbnz	r3, 800a20e <__swsetup_r+0xc6>
 800a1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a200:	d1ba      	bne.n	800a178 <__swsetup_r+0x30>
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	0792      	lsls	r2, r2, #30
 800a206:	bf58      	it	pl
 800a208:	6963      	ldrpl	r3, [r4, #20]
 800a20a:	60a3      	str	r3, [r4, #8]
 800a20c:	e7f2      	b.n	800a1f4 <__swsetup_r+0xac>
 800a20e:	2000      	movs	r0, #0
 800a210:	e7f7      	b.n	800a202 <__swsetup_r+0xba>
 800a212:	bf00      	nop
 800a214:	20000010 	.word	0x20000010
 800a218:	0800b17c 	.word	0x0800b17c
 800a21c:	0800b19c 	.word	0x0800b19c
 800a220:	0800b15c 	.word	0x0800b15c

0800a224 <__sflush_r>:
 800a224:	898a      	ldrh	r2, [r1, #12]
 800a226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a22a:	4605      	mov	r5, r0
 800a22c:	0710      	lsls	r0, r2, #28
 800a22e:	460c      	mov	r4, r1
 800a230:	d458      	bmi.n	800a2e4 <__sflush_r+0xc0>
 800a232:	684b      	ldr	r3, [r1, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	dc05      	bgt.n	800a244 <__sflush_r+0x20>
 800a238:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	dc02      	bgt.n	800a244 <__sflush_r+0x20>
 800a23e:	2000      	movs	r0, #0
 800a240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a246:	2e00      	cmp	r6, #0
 800a248:	d0f9      	beq.n	800a23e <__sflush_r+0x1a>
 800a24a:	2300      	movs	r3, #0
 800a24c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a250:	682f      	ldr	r7, [r5, #0]
 800a252:	6a21      	ldr	r1, [r4, #32]
 800a254:	602b      	str	r3, [r5, #0]
 800a256:	d032      	beq.n	800a2be <__sflush_r+0x9a>
 800a258:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	075a      	lsls	r2, r3, #29
 800a25e:	d505      	bpl.n	800a26c <__sflush_r+0x48>
 800a260:	6863      	ldr	r3, [r4, #4]
 800a262:	1ac0      	subs	r0, r0, r3
 800a264:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a266:	b10b      	cbz	r3, 800a26c <__sflush_r+0x48>
 800a268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a26a:	1ac0      	subs	r0, r0, r3
 800a26c:	2300      	movs	r3, #0
 800a26e:	4602      	mov	r2, r0
 800a270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a272:	6a21      	ldr	r1, [r4, #32]
 800a274:	4628      	mov	r0, r5
 800a276:	47b0      	blx	r6
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	d106      	bne.n	800a28c <__sflush_r+0x68>
 800a27e:	6829      	ldr	r1, [r5, #0]
 800a280:	291d      	cmp	r1, #29
 800a282:	d848      	bhi.n	800a316 <__sflush_r+0xf2>
 800a284:	4a29      	ldr	r2, [pc, #164]	; (800a32c <__sflush_r+0x108>)
 800a286:	40ca      	lsrs	r2, r1
 800a288:	07d6      	lsls	r6, r2, #31
 800a28a:	d544      	bpl.n	800a316 <__sflush_r+0xf2>
 800a28c:	2200      	movs	r2, #0
 800a28e:	6062      	str	r2, [r4, #4]
 800a290:	04d9      	lsls	r1, r3, #19
 800a292:	6922      	ldr	r2, [r4, #16]
 800a294:	6022      	str	r2, [r4, #0]
 800a296:	d504      	bpl.n	800a2a2 <__sflush_r+0x7e>
 800a298:	1c42      	adds	r2, r0, #1
 800a29a:	d101      	bne.n	800a2a0 <__sflush_r+0x7c>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	b903      	cbnz	r3, 800a2a2 <__sflush_r+0x7e>
 800a2a0:	6560      	str	r0, [r4, #84]	; 0x54
 800a2a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2a4:	602f      	str	r7, [r5, #0]
 800a2a6:	2900      	cmp	r1, #0
 800a2a8:	d0c9      	beq.n	800a23e <__sflush_r+0x1a>
 800a2aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2ae:	4299      	cmp	r1, r3
 800a2b0:	d002      	beq.n	800a2b8 <__sflush_r+0x94>
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	f000 f994 	bl	800a5e0 <_free_r>
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	6360      	str	r0, [r4, #52]	; 0x34
 800a2bc:	e7c0      	b.n	800a240 <__sflush_r+0x1c>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	47b0      	blx	r6
 800a2c4:	1c41      	adds	r1, r0, #1
 800a2c6:	d1c8      	bne.n	800a25a <__sflush_r+0x36>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0c5      	beq.n	800a25a <__sflush_r+0x36>
 800a2ce:	2b1d      	cmp	r3, #29
 800a2d0:	d001      	beq.n	800a2d6 <__sflush_r+0xb2>
 800a2d2:	2b16      	cmp	r3, #22
 800a2d4:	d101      	bne.n	800a2da <__sflush_r+0xb6>
 800a2d6:	602f      	str	r7, [r5, #0]
 800a2d8:	e7b1      	b.n	800a23e <__sflush_r+0x1a>
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	e7ad      	b.n	800a240 <__sflush_r+0x1c>
 800a2e4:	690f      	ldr	r7, [r1, #16]
 800a2e6:	2f00      	cmp	r7, #0
 800a2e8:	d0a9      	beq.n	800a23e <__sflush_r+0x1a>
 800a2ea:	0793      	lsls	r3, r2, #30
 800a2ec:	680e      	ldr	r6, [r1, #0]
 800a2ee:	bf08      	it	eq
 800a2f0:	694b      	ldreq	r3, [r1, #20]
 800a2f2:	600f      	str	r7, [r1, #0]
 800a2f4:	bf18      	it	ne
 800a2f6:	2300      	movne	r3, #0
 800a2f8:	eba6 0807 	sub.w	r8, r6, r7
 800a2fc:	608b      	str	r3, [r1, #8]
 800a2fe:	f1b8 0f00 	cmp.w	r8, #0
 800a302:	dd9c      	ble.n	800a23e <__sflush_r+0x1a>
 800a304:	4643      	mov	r3, r8
 800a306:	463a      	mov	r2, r7
 800a308:	6a21      	ldr	r1, [r4, #32]
 800a30a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a30c:	4628      	mov	r0, r5
 800a30e:	47b0      	blx	r6
 800a310:	2800      	cmp	r0, #0
 800a312:	dc06      	bgt.n	800a322 <__sflush_r+0xfe>
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295
 800a320:	e78e      	b.n	800a240 <__sflush_r+0x1c>
 800a322:	4407      	add	r7, r0
 800a324:	eba8 0800 	sub.w	r8, r8, r0
 800a328:	e7e9      	b.n	800a2fe <__sflush_r+0xda>
 800a32a:	bf00      	nop
 800a32c:	20400001 	.word	0x20400001

0800a330 <_fflush_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	690b      	ldr	r3, [r1, #16]
 800a334:	4605      	mov	r5, r0
 800a336:	460c      	mov	r4, r1
 800a338:	b1db      	cbz	r3, 800a372 <_fflush_r+0x42>
 800a33a:	b118      	cbz	r0, 800a344 <_fflush_r+0x14>
 800a33c:	6983      	ldr	r3, [r0, #24]
 800a33e:	b90b      	cbnz	r3, 800a344 <_fflush_r+0x14>
 800a340:	f000 f860 	bl	800a404 <__sinit>
 800a344:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <_fflush_r+0x48>)
 800a346:	429c      	cmp	r4, r3
 800a348:	d109      	bne.n	800a35e <_fflush_r+0x2e>
 800a34a:	686c      	ldr	r4, [r5, #4]
 800a34c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a350:	b17b      	cbz	r3, 800a372 <_fflush_r+0x42>
 800a352:	4621      	mov	r1, r4
 800a354:	4628      	mov	r0, r5
 800a356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a35a:	f7ff bf63 	b.w	800a224 <__sflush_r>
 800a35e:	4b07      	ldr	r3, [pc, #28]	; (800a37c <_fflush_r+0x4c>)
 800a360:	429c      	cmp	r4, r3
 800a362:	d101      	bne.n	800a368 <_fflush_r+0x38>
 800a364:	68ac      	ldr	r4, [r5, #8]
 800a366:	e7f1      	b.n	800a34c <_fflush_r+0x1c>
 800a368:	4b05      	ldr	r3, [pc, #20]	; (800a380 <_fflush_r+0x50>)
 800a36a:	429c      	cmp	r4, r3
 800a36c:	bf08      	it	eq
 800a36e:	68ec      	ldreq	r4, [r5, #12]
 800a370:	e7ec      	b.n	800a34c <_fflush_r+0x1c>
 800a372:	2000      	movs	r0, #0
 800a374:	bd38      	pop	{r3, r4, r5, pc}
 800a376:	bf00      	nop
 800a378:	0800b17c 	.word	0x0800b17c
 800a37c:	0800b19c 	.word	0x0800b19c
 800a380:	0800b15c 	.word	0x0800b15c

0800a384 <std>:
 800a384:	2300      	movs	r3, #0
 800a386:	b510      	push	{r4, lr}
 800a388:	4604      	mov	r4, r0
 800a38a:	e9c0 3300 	strd	r3, r3, [r0]
 800a38e:	6083      	str	r3, [r0, #8]
 800a390:	8181      	strh	r1, [r0, #12]
 800a392:	6643      	str	r3, [r0, #100]	; 0x64
 800a394:	81c2      	strh	r2, [r0, #14]
 800a396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a39a:	6183      	str	r3, [r0, #24]
 800a39c:	4619      	mov	r1, r3
 800a39e:	2208      	movs	r2, #8
 800a3a0:	305c      	adds	r0, #92	; 0x5c
 800a3a2:	f7ff fdfb 	bl	8009f9c <memset>
 800a3a6:	4b05      	ldr	r3, [pc, #20]	; (800a3bc <std+0x38>)
 800a3a8:	6263      	str	r3, [r4, #36]	; 0x24
 800a3aa:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <std+0x3c>)
 800a3ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3ae:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <std+0x40>)
 800a3b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3b2:	4b05      	ldr	r3, [pc, #20]	; (800a3c8 <std+0x44>)
 800a3b4:	6224      	str	r4, [r4, #32]
 800a3b6:	6323      	str	r3, [r4, #48]	; 0x30
 800a3b8:	bd10      	pop	{r4, pc}
 800a3ba:	bf00      	nop
 800a3bc:	0800ace1 	.word	0x0800ace1
 800a3c0:	0800ad03 	.word	0x0800ad03
 800a3c4:	0800ad3b 	.word	0x0800ad3b
 800a3c8:	0800ad5f 	.word	0x0800ad5f

0800a3cc <_cleanup_r>:
 800a3cc:	4901      	ldr	r1, [pc, #4]	; (800a3d4 <_cleanup_r+0x8>)
 800a3ce:	f000 b885 	b.w	800a4dc <_fwalk_reent>
 800a3d2:	bf00      	nop
 800a3d4:	0800a331 	.word	0x0800a331

0800a3d8 <__sfmoreglue>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	1e4a      	subs	r2, r1, #1
 800a3dc:	2568      	movs	r5, #104	; 0x68
 800a3de:	4355      	muls	r5, r2
 800a3e0:	460e      	mov	r6, r1
 800a3e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a3e6:	f000 f949 	bl	800a67c <_malloc_r>
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	b140      	cbz	r0, 800a400 <__sfmoreglue+0x28>
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	e9c0 1600 	strd	r1, r6, [r0]
 800a3f4:	300c      	adds	r0, #12
 800a3f6:	60a0      	str	r0, [r4, #8]
 800a3f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3fc:	f7ff fdce 	bl	8009f9c <memset>
 800a400:	4620      	mov	r0, r4
 800a402:	bd70      	pop	{r4, r5, r6, pc}

0800a404 <__sinit>:
 800a404:	6983      	ldr	r3, [r0, #24]
 800a406:	b510      	push	{r4, lr}
 800a408:	4604      	mov	r4, r0
 800a40a:	bb33      	cbnz	r3, 800a45a <__sinit+0x56>
 800a40c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a410:	6503      	str	r3, [r0, #80]	; 0x50
 800a412:	4b12      	ldr	r3, [pc, #72]	; (800a45c <__sinit+0x58>)
 800a414:	4a12      	ldr	r2, [pc, #72]	; (800a460 <__sinit+0x5c>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6282      	str	r2, [r0, #40]	; 0x28
 800a41a:	4298      	cmp	r0, r3
 800a41c:	bf04      	itt	eq
 800a41e:	2301      	moveq	r3, #1
 800a420:	6183      	streq	r3, [r0, #24]
 800a422:	f000 f81f 	bl	800a464 <__sfp>
 800a426:	6060      	str	r0, [r4, #4]
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 f81b 	bl	800a464 <__sfp>
 800a42e:	60a0      	str	r0, [r4, #8]
 800a430:	4620      	mov	r0, r4
 800a432:	f000 f817 	bl	800a464 <__sfp>
 800a436:	2200      	movs	r2, #0
 800a438:	60e0      	str	r0, [r4, #12]
 800a43a:	2104      	movs	r1, #4
 800a43c:	6860      	ldr	r0, [r4, #4]
 800a43e:	f7ff ffa1 	bl	800a384 <std>
 800a442:	2201      	movs	r2, #1
 800a444:	2109      	movs	r1, #9
 800a446:	68a0      	ldr	r0, [r4, #8]
 800a448:	f7ff ff9c 	bl	800a384 <std>
 800a44c:	2202      	movs	r2, #2
 800a44e:	2112      	movs	r1, #18
 800a450:	68e0      	ldr	r0, [r4, #12]
 800a452:	f7ff ff97 	bl	800a384 <std>
 800a456:	2301      	movs	r3, #1
 800a458:	61a3      	str	r3, [r4, #24]
 800a45a:	bd10      	pop	{r4, pc}
 800a45c:	0800b158 	.word	0x0800b158
 800a460:	0800a3cd 	.word	0x0800a3cd

0800a464 <__sfp>:
 800a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a466:	4b1b      	ldr	r3, [pc, #108]	; (800a4d4 <__sfp+0x70>)
 800a468:	681e      	ldr	r6, [r3, #0]
 800a46a:	69b3      	ldr	r3, [r6, #24]
 800a46c:	4607      	mov	r7, r0
 800a46e:	b913      	cbnz	r3, 800a476 <__sfp+0x12>
 800a470:	4630      	mov	r0, r6
 800a472:	f7ff ffc7 	bl	800a404 <__sinit>
 800a476:	3648      	adds	r6, #72	; 0x48
 800a478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a47c:	3b01      	subs	r3, #1
 800a47e:	d503      	bpl.n	800a488 <__sfp+0x24>
 800a480:	6833      	ldr	r3, [r6, #0]
 800a482:	b133      	cbz	r3, 800a492 <__sfp+0x2e>
 800a484:	6836      	ldr	r6, [r6, #0]
 800a486:	e7f7      	b.n	800a478 <__sfp+0x14>
 800a488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a48c:	b16d      	cbz	r5, 800a4aa <__sfp+0x46>
 800a48e:	3468      	adds	r4, #104	; 0x68
 800a490:	e7f4      	b.n	800a47c <__sfp+0x18>
 800a492:	2104      	movs	r1, #4
 800a494:	4638      	mov	r0, r7
 800a496:	f7ff ff9f 	bl	800a3d8 <__sfmoreglue>
 800a49a:	6030      	str	r0, [r6, #0]
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d1f1      	bne.n	800a484 <__sfp+0x20>
 800a4a0:	230c      	movs	r3, #12
 800a4a2:	603b      	str	r3, [r7, #0]
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4aa:	4b0b      	ldr	r3, [pc, #44]	; (800a4d8 <__sfp+0x74>)
 800a4ac:	6665      	str	r5, [r4, #100]	; 0x64
 800a4ae:	e9c4 5500 	strd	r5, r5, [r4]
 800a4b2:	60a5      	str	r5, [r4, #8]
 800a4b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a4b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a4bc:	2208      	movs	r2, #8
 800a4be:	4629      	mov	r1, r5
 800a4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4c4:	f7ff fd6a 	bl	8009f9c <memset>
 800a4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4d0:	e7e9      	b.n	800a4a6 <__sfp+0x42>
 800a4d2:	bf00      	nop
 800a4d4:	0800b158 	.word	0x0800b158
 800a4d8:	ffff0001 	.word	0xffff0001

0800a4dc <_fwalk_reent>:
 800a4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	4680      	mov	r8, r0
 800a4e2:	4689      	mov	r9, r1
 800a4e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4e8:	2600      	movs	r6, #0
 800a4ea:	b914      	cbnz	r4, 800a4f2 <_fwalk_reent+0x16>
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a4f6:	3f01      	subs	r7, #1
 800a4f8:	d501      	bpl.n	800a4fe <_fwalk_reent+0x22>
 800a4fa:	6824      	ldr	r4, [r4, #0]
 800a4fc:	e7f5      	b.n	800a4ea <_fwalk_reent+0xe>
 800a4fe:	89ab      	ldrh	r3, [r5, #12]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d907      	bls.n	800a514 <_fwalk_reent+0x38>
 800a504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a508:	3301      	adds	r3, #1
 800a50a:	d003      	beq.n	800a514 <_fwalk_reent+0x38>
 800a50c:	4629      	mov	r1, r5
 800a50e:	4640      	mov	r0, r8
 800a510:	47c8      	blx	r9
 800a512:	4306      	orrs	r6, r0
 800a514:	3568      	adds	r5, #104	; 0x68
 800a516:	e7ee      	b.n	800a4f6 <_fwalk_reent+0x1a>

0800a518 <__swhatbuf_r>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	460e      	mov	r6, r1
 800a51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a520:	2900      	cmp	r1, #0
 800a522:	b096      	sub	sp, #88	; 0x58
 800a524:	4614      	mov	r4, r2
 800a526:	461d      	mov	r5, r3
 800a528:	da07      	bge.n	800a53a <__swhatbuf_r+0x22>
 800a52a:	2300      	movs	r3, #0
 800a52c:	602b      	str	r3, [r5, #0]
 800a52e:	89b3      	ldrh	r3, [r6, #12]
 800a530:	061a      	lsls	r2, r3, #24
 800a532:	d410      	bmi.n	800a556 <__swhatbuf_r+0x3e>
 800a534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a538:	e00e      	b.n	800a558 <__swhatbuf_r+0x40>
 800a53a:	466a      	mov	r2, sp
 800a53c:	f000 fc36 	bl	800adac <_fstat_r>
 800a540:	2800      	cmp	r0, #0
 800a542:	dbf2      	blt.n	800a52a <__swhatbuf_r+0x12>
 800a544:	9a01      	ldr	r2, [sp, #4]
 800a546:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a54a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a54e:	425a      	negs	r2, r3
 800a550:	415a      	adcs	r2, r3
 800a552:	602a      	str	r2, [r5, #0]
 800a554:	e7ee      	b.n	800a534 <__swhatbuf_r+0x1c>
 800a556:	2340      	movs	r3, #64	; 0x40
 800a558:	2000      	movs	r0, #0
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	b016      	add	sp, #88	; 0x58
 800a55e:	bd70      	pop	{r4, r5, r6, pc}

0800a560 <__smakebuf_r>:
 800a560:	898b      	ldrh	r3, [r1, #12]
 800a562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a564:	079d      	lsls	r5, r3, #30
 800a566:	4606      	mov	r6, r0
 800a568:	460c      	mov	r4, r1
 800a56a:	d507      	bpl.n	800a57c <__smakebuf_r+0x1c>
 800a56c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	6123      	str	r3, [r4, #16]
 800a574:	2301      	movs	r3, #1
 800a576:	6163      	str	r3, [r4, #20]
 800a578:	b002      	add	sp, #8
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	ab01      	add	r3, sp, #4
 800a57e:	466a      	mov	r2, sp
 800a580:	f7ff ffca 	bl	800a518 <__swhatbuf_r>
 800a584:	9900      	ldr	r1, [sp, #0]
 800a586:	4605      	mov	r5, r0
 800a588:	4630      	mov	r0, r6
 800a58a:	f000 f877 	bl	800a67c <_malloc_r>
 800a58e:	b948      	cbnz	r0, 800a5a4 <__smakebuf_r+0x44>
 800a590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a594:	059a      	lsls	r2, r3, #22
 800a596:	d4ef      	bmi.n	800a578 <__smakebuf_r+0x18>
 800a598:	f023 0303 	bic.w	r3, r3, #3
 800a59c:	f043 0302 	orr.w	r3, r3, #2
 800a5a0:	81a3      	strh	r3, [r4, #12]
 800a5a2:	e7e3      	b.n	800a56c <__smakebuf_r+0xc>
 800a5a4:	4b0d      	ldr	r3, [pc, #52]	; (800a5dc <__smakebuf_r+0x7c>)
 800a5a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	6020      	str	r0, [r4, #0]
 800a5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b0:	81a3      	strh	r3, [r4, #12]
 800a5b2:	9b00      	ldr	r3, [sp, #0]
 800a5b4:	6163      	str	r3, [r4, #20]
 800a5b6:	9b01      	ldr	r3, [sp, #4]
 800a5b8:	6120      	str	r0, [r4, #16]
 800a5ba:	b15b      	cbz	r3, 800a5d4 <__smakebuf_r+0x74>
 800a5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f000 fc05 	bl	800add0 <_isatty_r>
 800a5c6:	b128      	cbz	r0, 800a5d4 <__smakebuf_r+0x74>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f023 0303 	bic.w	r3, r3, #3
 800a5ce:	f043 0301 	orr.w	r3, r3, #1
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	431d      	orrs	r5, r3
 800a5d8:	81a5      	strh	r5, [r4, #12]
 800a5da:	e7cd      	b.n	800a578 <__smakebuf_r+0x18>
 800a5dc:	0800a3cd 	.word	0x0800a3cd

0800a5e0 <_free_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	2900      	cmp	r1, #0
 800a5e6:	d045      	beq.n	800a674 <_free_r+0x94>
 800a5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ec:	1f0c      	subs	r4, r1, #4
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	bfb8      	it	lt
 800a5f2:	18e4      	addlt	r4, r4, r3
 800a5f4:	f000 fc0e 	bl	800ae14 <__malloc_lock>
 800a5f8:	4a1f      	ldr	r2, [pc, #124]	; (800a678 <_free_r+0x98>)
 800a5fa:	6813      	ldr	r3, [r2, #0]
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	b933      	cbnz	r3, 800a60e <_free_r+0x2e>
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	6014      	str	r4, [r2, #0]
 800a604:	4628      	mov	r0, r5
 800a606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a60a:	f000 bc04 	b.w	800ae16 <__malloc_unlock>
 800a60e:	42a3      	cmp	r3, r4
 800a610:	d90c      	bls.n	800a62c <_free_r+0x4c>
 800a612:	6821      	ldr	r1, [r4, #0]
 800a614:	1862      	adds	r2, r4, r1
 800a616:	4293      	cmp	r3, r2
 800a618:	bf04      	itt	eq
 800a61a:	681a      	ldreq	r2, [r3, #0]
 800a61c:	685b      	ldreq	r3, [r3, #4]
 800a61e:	6063      	str	r3, [r4, #4]
 800a620:	bf04      	itt	eq
 800a622:	1852      	addeq	r2, r2, r1
 800a624:	6022      	streq	r2, [r4, #0]
 800a626:	6004      	str	r4, [r0, #0]
 800a628:	e7ec      	b.n	800a604 <_free_r+0x24>
 800a62a:	4613      	mov	r3, r2
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	b10a      	cbz	r2, 800a634 <_free_r+0x54>
 800a630:	42a2      	cmp	r2, r4
 800a632:	d9fa      	bls.n	800a62a <_free_r+0x4a>
 800a634:	6819      	ldr	r1, [r3, #0]
 800a636:	1858      	adds	r0, r3, r1
 800a638:	42a0      	cmp	r0, r4
 800a63a:	d10b      	bne.n	800a654 <_free_r+0x74>
 800a63c:	6820      	ldr	r0, [r4, #0]
 800a63e:	4401      	add	r1, r0
 800a640:	1858      	adds	r0, r3, r1
 800a642:	4282      	cmp	r2, r0
 800a644:	6019      	str	r1, [r3, #0]
 800a646:	d1dd      	bne.n	800a604 <_free_r+0x24>
 800a648:	6810      	ldr	r0, [r2, #0]
 800a64a:	6852      	ldr	r2, [r2, #4]
 800a64c:	605a      	str	r2, [r3, #4]
 800a64e:	4401      	add	r1, r0
 800a650:	6019      	str	r1, [r3, #0]
 800a652:	e7d7      	b.n	800a604 <_free_r+0x24>
 800a654:	d902      	bls.n	800a65c <_free_r+0x7c>
 800a656:	230c      	movs	r3, #12
 800a658:	602b      	str	r3, [r5, #0]
 800a65a:	e7d3      	b.n	800a604 <_free_r+0x24>
 800a65c:	6820      	ldr	r0, [r4, #0]
 800a65e:	1821      	adds	r1, r4, r0
 800a660:	428a      	cmp	r2, r1
 800a662:	bf04      	itt	eq
 800a664:	6811      	ldreq	r1, [r2, #0]
 800a666:	6852      	ldreq	r2, [r2, #4]
 800a668:	6062      	str	r2, [r4, #4]
 800a66a:	bf04      	itt	eq
 800a66c:	1809      	addeq	r1, r1, r0
 800a66e:	6021      	streq	r1, [r4, #0]
 800a670:	605c      	str	r4, [r3, #4]
 800a672:	e7c7      	b.n	800a604 <_free_r+0x24>
 800a674:	bd38      	pop	{r3, r4, r5, pc}
 800a676:	bf00      	nop
 800a678:	200000c8 	.word	0x200000c8

0800a67c <_malloc_r>:
 800a67c:	b570      	push	{r4, r5, r6, lr}
 800a67e:	1ccd      	adds	r5, r1, #3
 800a680:	f025 0503 	bic.w	r5, r5, #3
 800a684:	3508      	adds	r5, #8
 800a686:	2d0c      	cmp	r5, #12
 800a688:	bf38      	it	cc
 800a68a:	250c      	movcc	r5, #12
 800a68c:	2d00      	cmp	r5, #0
 800a68e:	4606      	mov	r6, r0
 800a690:	db01      	blt.n	800a696 <_malloc_r+0x1a>
 800a692:	42a9      	cmp	r1, r5
 800a694:	d903      	bls.n	800a69e <_malloc_r+0x22>
 800a696:	230c      	movs	r3, #12
 800a698:	6033      	str	r3, [r6, #0]
 800a69a:	2000      	movs	r0, #0
 800a69c:	bd70      	pop	{r4, r5, r6, pc}
 800a69e:	f000 fbb9 	bl	800ae14 <__malloc_lock>
 800a6a2:	4a21      	ldr	r2, [pc, #132]	; (800a728 <_malloc_r+0xac>)
 800a6a4:	6814      	ldr	r4, [r2, #0]
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	b991      	cbnz	r1, 800a6d0 <_malloc_r+0x54>
 800a6aa:	4c20      	ldr	r4, [pc, #128]	; (800a72c <_malloc_r+0xb0>)
 800a6ac:	6823      	ldr	r3, [r4, #0]
 800a6ae:	b91b      	cbnz	r3, 800a6b8 <_malloc_r+0x3c>
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f000 fb05 	bl	800acc0 <_sbrk_r>
 800a6b6:	6020      	str	r0, [r4, #0]
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	f000 fb00 	bl	800acc0 <_sbrk_r>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d124      	bne.n	800a70e <_malloc_r+0x92>
 800a6c4:	230c      	movs	r3, #12
 800a6c6:	6033      	str	r3, [r6, #0]
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 fba4 	bl	800ae16 <__malloc_unlock>
 800a6ce:	e7e4      	b.n	800a69a <_malloc_r+0x1e>
 800a6d0:	680b      	ldr	r3, [r1, #0]
 800a6d2:	1b5b      	subs	r3, r3, r5
 800a6d4:	d418      	bmi.n	800a708 <_malloc_r+0x8c>
 800a6d6:	2b0b      	cmp	r3, #11
 800a6d8:	d90f      	bls.n	800a6fa <_malloc_r+0x7e>
 800a6da:	600b      	str	r3, [r1, #0]
 800a6dc:	50cd      	str	r5, [r1, r3]
 800a6de:	18cc      	adds	r4, r1, r3
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	f000 fb98 	bl	800ae16 <__malloc_unlock>
 800a6e6:	f104 000b 	add.w	r0, r4, #11
 800a6ea:	1d23      	adds	r3, r4, #4
 800a6ec:	f020 0007 	bic.w	r0, r0, #7
 800a6f0:	1ac3      	subs	r3, r0, r3
 800a6f2:	d0d3      	beq.n	800a69c <_malloc_r+0x20>
 800a6f4:	425a      	negs	r2, r3
 800a6f6:	50e2      	str	r2, [r4, r3]
 800a6f8:	e7d0      	b.n	800a69c <_malloc_r+0x20>
 800a6fa:	428c      	cmp	r4, r1
 800a6fc:	684b      	ldr	r3, [r1, #4]
 800a6fe:	bf16      	itet	ne
 800a700:	6063      	strne	r3, [r4, #4]
 800a702:	6013      	streq	r3, [r2, #0]
 800a704:	460c      	movne	r4, r1
 800a706:	e7eb      	b.n	800a6e0 <_malloc_r+0x64>
 800a708:	460c      	mov	r4, r1
 800a70a:	6849      	ldr	r1, [r1, #4]
 800a70c:	e7cc      	b.n	800a6a8 <_malloc_r+0x2c>
 800a70e:	1cc4      	adds	r4, r0, #3
 800a710:	f024 0403 	bic.w	r4, r4, #3
 800a714:	42a0      	cmp	r0, r4
 800a716:	d005      	beq.n	800a724 <_malloc_r+0xa8>
 800a718:	1a21      	subs	r1, r4, r0
 800a71a:	4630      	mov	r0, r6
 800a71c:	f000 fad0 	bl	800acc0 <_sbrk_r>
 800a720:	3001      	adds	r0, #1
 800a722:	d0cf      	beq.n	800a6c4 <_malloc_r+0x48>
 800a724:	6025      	str	r5, [r4, #0]
 800a726:	e7db      	b.n	800a6e0 <_malloc_r+0x64>
 800a728:	200000c8 	.word	0x200000c8
 800a72c:	200000cc 	.word	0x200000cc

0800a730 <__sfputc_r>:
 800a730:	6893      	ldr	r3, [r2, #8]
 800a732:	3b01      	subs	r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	b410      	push	{r4}
 800a738:	6093      	str	r3, [r2, #8]
 800a73a:	da08      	bge.n	800a74e <__sfputc_r+0x1e>
 800a73c:	6994      	ldr	r4, [r2, #24]
 800a73e:	42a3      	cmp	r3, r4
 800a740:	db01      	blt.n	800a746 <__sfputc_r+0x16>
 800a742:	290a      	cmp	r1, #10
 800a744:	d103      	bne.n	800a74e <__sfputc_r+0x1e>
 800a746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a74a:	f7ff bcab 	b.w	800a0a4 <__swbuf_r>
 800a74e:	6813      	ldr	r3, [r2, #0]
 800a750:	1c58      	adds	r0, r3, #1
 800a752:	6010      	str	r0, [r2, #0]
 800a754:	7019      	strb	r1, [r3, #0]
 800a756:	4608      	mov	r0, r1
 800a758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <__sfputs_r>:
 800a75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a760:	4606      	mov	r6, r0
 800a762:	460f      	mov	r7, r1
 800a764:	4614      	mov	r4, r2
 800a766:	18d5      	adds	r5, r2, r3
 800a768:	42ac      	cmp	r4, r5
 800a76a:	d101      	bne.n	800a770 <__sfputs_r+0x12>
 800a76c:	2000      	movs	r0, #0
 800a76e:	e007      	b.n	800a780 <__sfputs_r+0x22>
 800a770:	463a      	mov	r2, r7
 800a772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a776:	4630      	mov	r0, r6
 800a778:	f7ff ffda 	bl	800a730 <__sfputc_r>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d1f3      	bne.n	800a768 <__sfputs_r+0xa>
 800a780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a784 <_vfiprintf_r>:
 800a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	460c      	mov	r4, r1
 800a78a:	b09d      	sub	sp, #116	; 0x74
 800a78c:	4617      	mov	r7, r2
 800a78e:	461d      	mov	r5, r3
 800a790:	4606      	mov	r6, r0
 800a792:	b118      	cbz	r0, 800a79c <_vfiprintf_r+0x18>
 800a794:	6983      	ldr	r3, [r0, #24]
 800a796:	b90b      	cbnz	r3, 800a79c <_vfiprintf_r+0x18>
 800a798:	f7ff fe34 	bl	800a404 <__sinit>
 800a79c:	4b7c      	ldr	r3, [pc, #496]	; (800a990 <_vfiprintf_r+0x20c>)
 800a79e:	429c      	cmp	r4, r3
 800a7a0:	d158      	bne.n	800a854 <_vfiprintf_r+0xd0>
 800a7a2:	6874      	ldr	r4, [r6, #4]
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	0718      	lsls	r0, r3, #28
 800a7a8:	d55e      	bpl.n	800a868 <_vfiprintf_r+0xe4>
 800a7aa:	6923      	ldr	r3, [r4, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d05b      	beq.n	800a868 <_vfiprintf_r+0xe4>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b4:	2320      	movs	r3, #32
 800a7b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7ba:	2330      	movs	r3, #48	; 0x30
 800a7bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7c0:	9503      	str	r5, [sp, #12]
 800a7c2:	f04f 0b01 	mov.w	fp, #1
 800a7c6:	46b8      	mov	r8, r7
 800a7c8:	4645      	mov	r5, r8
 800a7ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a7ce:	b10b      	cbz	r3, 800a7d4 <_vfiprintf_r+0x50>
 800a7d0:	2b25      	cmp	r3, #37	; 0x25
 800a7d2:	d154      	bne.n	800a87e <_vfiprintf_r+0xfa>
 800a7d4:	ebb8 0a07 	subs.w	sl, r8, r7
 800a7d8:	d00b      	beq.n	800a7f2 <_vfiprintf_r+0x6e>
 800a7da:	4653      	mov	r3, sl
 800a7dc:	463a      	mov	r2, r7
 800a7de:	4621      	mov	r1, r4
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff ffbc 	bl	800a75e <__sfputs_r>
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f000 80c2 	beq.w	800a970 <_vfiprintf_r+0x1ec>
 800a7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ee:	4453      	add	r3, sl
 800a7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f2:	f898 3000 	ldrb.w	r3, [r8]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 80ba 	beq.w	800a970 <_vfiprintf_r+0x1ec>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a806:	9304      	str	r3, [sp, #16]
 800a808:	9307      	str	r3, [sp, #28]
 800a80a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a80e:	931a      	str	r3, [sp, #104]	; 0x68
 800a810:	46a8      	mov	r8, r5
 800a812:	2205      	movs	r2, #5
 800a814:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a818:	485e      	ldr	r0, [pc, #376]	; (800a994 <_vfiprintf_r+0x210>)
 800a81a:	f7f5 fd69 	bl	80002f0 <memchr>
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	bb78      	cbnz	r0, 800a882 <_vfiprintf_r+0xfe>
 800a822:	06d9      	lsls	r1, r3, #27
 800a824:	bf44      	itt	mi
 800a826:	2220      	movmi	r2, #32
 800a828:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a82c:	071a      	lsls	r2, r3, #28
 800a82e:	bf44      	itt	mi
 800a830:	222b      	movmi	r2, #43	; 0x2b
 800a832:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a836:	782a      	ldrb	r2, [r5, #0]
 800a838:	2a2a      	cmp	r2, #42	; 0x2a
 800a83a:	d02a      	beq.n	800a892 <_vfiprintf_r+0x10e>
 800a83c:	9a07      	ldr	r2, [sp, #28]
 800a83e:	46a8      	mov	r8, r5
 800a840:	2000      	movs	r0, #0
 800a842:	250a      	movs	r5, #10
 800a844:	4641      	mov	r1, r8
 800a846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84a:	3b30      	subs	r3, #48	; 0x30
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d969      	bls.n	800a924 <_vfiprintf_r+0x1a0>
 800a850:	b360      	cbz	r0, 800a8ac <_vfiprintf_r+0x128>
 800a852:	e024      	b.n	800a89e <_vfiprintf_r+0x11a>
 800a854:	4b50      	ldr	r3, [pc, #320]	; (800a998 <_vfiprintf_r+0x214>)
 800a856:	429c      	cmp	r4, r3
 800a858:	d101      	bne.n	800a85e <_vfiprintf_r+0xda>
 800a85a:	68b4      	ldr	r4, [r6, #8]
 800a85c:	e7a2      	b.n	800a7a4 <_vfiprintf_r+0x20>
 800a85e:	4b4f      	ldr	r3, [pc, #316]	; (800a99c <_vfiprintf_r+0x218>)
 800a860:	429c      	cmp	r4, r3
 800a862:	bf08      	it	eq
 800a864:	68f4      	ldreq	r4, [r6, #12]
 800a866:	e79d      	b.n	800a7a4 <_vfiprintf_r+0x20>
 800a868:	4621      	mov	r1, r4
 800a86a:	4630      	mov	r0, r6
 800a86c:	f7ff fc6c 	bl	800a148 <__swsetup_r>
 800a870:	2800      	cmp	r0, #0
 800a872:	d09d      	beq.n	800a7b0 <_vfiprintf_r+0x2c>
 800a874:	f04f 30ff 	mov.w	r0, #4294967295
 800a878:	b01d      	add	sp, #116	; 0x74
 800a87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87e:	46a8      	mov	r8, r5
 800a880:	e7a2      	b.n	800a7c8 <_vfiprintf_r+0x44>
 800a882:	4a44      	ldr	r2, [pc, #272]	; (800a994 <_vfiprintf_r+0x210>)
 800a884:	1a80      	subs	r0, r0, r2
 800a886:	fa0b f000 	lsl.w	r0, fp, r0
 800a88a:	4318      	orrs	r0, r3
 800a88c:	9004      	str	r0, [sp, #16]
 800a88e:	4645      	mov	r5, r8
 800a890:	e7be      	b.n	800a810 <_vfiprintf_r+0x8c>
 800a892:	9a03      	ldr	r2, [sp, #12]
 800a894:	1d11      	adds	r1, r2, #4
 800a896:	6812      	ldr	r2, [r2, #0]
 800a898:	9103      	str	r1, [sp, #12]
 800a89a:	2a00      	cmp	r2, #0
 800a89c:	db01      	blt.n	800a8a2 <_vfiprintf_r+0x11e>
 800a89e:	9207      	str	r2, [sp, #28]
 800a8a0:	e004      	b.n	800a8ac <_vfiprintf_r+0x128>
 800a8a2:	4252      	negs	r2, r2
 800a8a4:	f043 0302 	orr.w	r3, r3, #2
 800a8a8:	9207      	str	r2, [sp, #28]
 800a8aa:	9304      	str	r3, [sp, #16]
 800a8ac:	f898 3000 	ldrb.w	r3, [r8]
 800a8b0:	2b2e      	cmp	r3, #46	; 0x2e
 800a8b2:	d10e      	bne.n	800a8d2 <_vfiprintf_r+0x14e>
 800a8b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ba:	d138      	bne.n	800a92e <_vfiprintf_r+0x1aa>
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	1d1a      	adds	r2, r3, #4
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	9203      	str	r2, [sp, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	bfb8      	it	lt
 800a8c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8cc:	f108 0802 	add.w	r8, r8, #2
 800a8d0:	9305      	str	r3, [sp, #20]
 800a8d2:	4d33      	ldr	r5, [pc, #204]	; (800a9a0 <_vfiprintf_r+0x21c>)
 800a8d4:	f898 1000 	ldrb.w	r1, [r8]
 800a8d8:	2203      	movs	r2, #3
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f7f5 fd08 	bl	80002f0 <memchr>
 800a8e0:	b140      	cbz	r0, 800a8f4 <_vfiprintf_r+0x170>
 800a8e2:	2340      	movs	r3, #64	; 0x40
 800a8e4:	1b40      	subs	r0, r0, r5
 800a8e6:	fa03 f000 	lsl.w	r0, r3, r0
 800a8ea:	9b04      	ldr	r3, [sp, #16]
 800a8ec:	4303      	orrs	r3, r0
 800a8ee:	f108 0801 	add.w	r8, r8, #1
 800a8f2:	9304      	str	r3, [sp, #16]
 800a8f4:	f898 1000 	ldrb.w	r1, [r8]
 800a8f8:	482a      	ldr	r0, [pc, #168]	; (800a9a4 <_vfiprintf_r+0x220>)
 800a8fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8fe:	2206      	movs	r2, #6
 800a900:	f108 0701 	add.w	r7, r8, #1
 800a904:	f7f5 fcf4 	bl	80002f0 <memchr>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d037      	beq.n	800a97c <_vfiprintf_r+0x1f8>
 800a90c:	4b26      	ldr	r3, [pc, #152]	; (800a9a8 <_vfiprintf_r+0x224>)
 800a90e:	bb1b      	cbnz	r3, 800a958 <_vfiprintf_r+0x1d4>
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	3307      	adds	r3, #7
 800a914:	f023 0307 	bic.w	r3, r3, #7
 800a918:	3308      	adds	r3, #8
 800a91a:	9303      	str	r3, [sp, #12]
 800a91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a91e:	444b      	add	r3, r9
 800a920:	9309      	str	r3, [sp, #36]	; 0x24
 800a922:	e750      	b.n	800a7c6 <_vfiprintf_r+0x42>
 800a924:	fb05 3202 	mla	r2, r5, r2, r3
 800a928:	2001      	movs	r0, #1
 800a92a:	4688      	mov	r8, r1
 800a92c:	e78a      	b.n	800a844 <_vfiprintf_r+0xc0>
 800a92e:	2300      	movs	r3, #0
 800a930:	f108 0801 	add.w	r8, r8, #1
 800a934:	9305      	str	r3, [sp, #20]
 800a936:	4619      	mov	r1, r3
 800a938:	250a      	movs	r5, #10
 800a93a:	4640      	mov	r0, r8
 800a93c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a940:	3a30      	subs	r2, #48	; 0x30
 800a942:	2a09      	cmp	r2, #9
 800a944:	d903      	bls.n	800a94e <_vfiprintf_r+0x1ca>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0c3      	beq.n	800a8d2 <_vfiprintf_r+0x14e>
 800a94a:	9105      	str	r1, [sp, #20]
 800a94c:	e7c1      	b.n	800a8d2 <_vfiprintf_r+0x14e>
 800a94e:	fb05 2101 	mla	r1, r5, r1, r2
 800a952:	2301      	movs	r3, #1
 800a954:	4680      	mov	r8, r0
 800a956:	e7f0      	b.n	800a93a <_vfiprintf_r+0x1b6>
 800a958:	ab03      	add	r3, sp, #12
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	4622      	mov	r2, r4
 800a95e:	4b13      	ldr	r3, [pc, #76]	; (800a9ac <_vfiprintf_r+0x228>)
 800a960:	a904      	add	r1, sp, #16
 800a962:	4630      	mov	r0, r6
 800a964:	f3af 8000 	nop.w
 800a968:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a96c:	4681      	mov	r9, r0
 800a96e:	d1d5      	bne.n	800a91c <_vfiprintf_r+0x198>
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	065b      	lsls	r3, r3, #25
 800a974:	f53f af7e 	bmi.w	800a874 <_vfiprintf_r+0xf0>
 800a978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a97a:	e77d      	b.n	800a878 <_vfiprintf_r+0xf4>
 800a97c:	ab03      	add	r3, sp, #12
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	4622      	mov	r2, r4
 800a982:	4b0a      	ldr	r3, [pc, #40]	; (800a9ac <_vfiprintf_r+0x228>)
 800a984:	a904      	add	r1, sp, #16
 800a986:	4630      	mov	r0, r6
 800a988:	f000 f888 	bl	800aa9c <_printf_i>
 800a98c:	e7ec      	b.n	800a968 <_vfiprintf_r+0x1e4>
 800a98e:	bf00      	nop
 800a990:	0800b17c 	.word	0x0800b17c
 800a994:	0800b1bc 	.word	0x0800b1bc
 800a998:	0800b19c 	.word	0x0800b19c
 800a99c:	0800b15c 	.word	0x0800b15c
 800a9a0:	0800b1c2 	.word	0x0800b1c2
 800a9a4:	0800b1c6 	.word	0x0800b1c6
 800a9a8:	00000000 	.word	0x00000000
 800a9ac:	0800a75f 	.word	0x0800a75f

0800a9b0 <_printf_common>:
 800a9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b4:	4691      	mov	r9, r2
 800a9b6:	461f      	mov	r7, r3
 800a9b8:	688a      	ldr	r2, [r1, #8]
 800a9ba:	690b      	ldr	r3, [r1, #16]
 800a9bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	bfb8      	it	lt
 800a9c4:	4613      	movlt	r3, r2
 800a9c6:	f8c9 3000 	str.w	r3, [r9]
 800a9ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	b112      	cbz	r2, 800a9da <_printf_common+0x2a>
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	f8c9 3000 	str.w	r3, [r9]
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	0699      	lsls	r1, r3, #26
 800a9de:	bf42      	ittt	mi
 800a9e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a9e4:	3302      	addmi	r3, #2
 800a9e6:	f8c9 3000 	strmi.w	r3, [r9]
 800a9ea:	6825      	ldr	r5, [r4, #0]
 800a9ec:	f015 0506 	ands.w	r5, r5, #6
 800a9f0:	d107      	bne.n	800aa02 <_printf_common+0x52>
 800a9f2:	f104 0a19 	add.w	sl, r4, #25
 800a9f6:	68e3      	ldr	r3, [r4, #12]
 800a9f8:	f8d9 2000 	ldr.w	r2, [r9]
 800a9fc:	1a9b      	subs	r3, r3, r2
 800a9fe:	42ab      	cmp	r3, r5
 800aa00:	dc28      	bgt.n	800aa54 <_printf_common+0xa4>
 800aa02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aa06:	6822      	ldr	r2, [r4, #0]
 800aa08:	3300      	adds	r3, #0
 800aa0a:	bf18      	it	ne
 800aa0c:	2301      	movne	r3, #1
 800aa0e:	0692      	lsls	r2, r2, #26
 800aa10:	d42d      	bmi.n	800aa6e <_printf_common+0xbe>
 800aa12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa16:	4639      	mov	r1, r7
 800aa18:	4630      	mov	r0, r6
 800aa1a:	47c0      	blx	r8
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	d020      	beq.n	800aa62 <_printf_common+0xb2>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	68e5      	ldr	r5, [r4, #12]
 800aa24:	f8d9 2000 	ldr.w	r2, [r9]
 800aa28:	f003 0306 	and.w	r3, r3, #6
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	bf08      	it	eq
 800aa30:	1aad      	subeq	r5, r5, r2
 800aa32:	68a3      	ldr	r3, [r4, #8]
 800aa34:	6922      	ldr	r2, [r4, #16]
 800aa36:	bf0c      	ite	eq
 800aa38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa3c:	2500      	movne	r5, #0
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	bfc4      	itt	gt
 800aa42:	1a9b      	subgt	r3, r3, r2
 800aa44:	18ed      	addgt	r5, r5, r3
 800aa46:	f04f 0900 	mov.w	r9, #0
 800aa4a:	341a      	adds	r4, #26
 800aa4c:	454d      	cmp	r5, r9
 800aa4e:	d11a      	bne.n	800aa86 <_printf_common+0xd6>
 800aa50:	2000      	movs	r0, #0
 800aa52:	e008      	b.n	800aa66 <_printf_common+0xb6>
 800aa54:	2301      	movs	r3, #1
 800aa56:	4652      	mov	r2, sl
 800aa58:	4639      	mov	r1, r7
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	47c0      	blx	r8
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d103      	bne.n	800aa6a <_printf_common+0xba>
 800aa62:	f04f 30ff 	mov.w	r0, #4294967295
 800aa66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa6a:	3501      	adds	r5, #1
 800aa6c:	e7c3      	b.n	800a9f6 <_printf_common+0x46>
 800aa6e:	18e1      	adds	r1, r4, r3
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	2030      	movs	r0, #48	; 0x30
 800aa74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa78:	4422      	add	r2, r4
 800aa7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa82:	3302      	adds	r3, #2
 800aa84:	e7c5      	b.n	800aa12 <_printf_common+0x62>
 800aa86:	2301      	movs	r3, #1
 800aa88:	4622      	mov	r2, r4
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	47c0      	blx	r8
 800aa90:	3001      	adds	r0, #1
 800aa92:	d0e6      	beq.n	800aa62 <_printf_common+0xb2>
 800aa94:	f109 0901 	add.w	r9, r9, #1
 800aa98:	e7d8      	b.n	800aa4c <_printf_common+0x9c>
	...

0800aa9c <_printf_i>:
 800aa9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800aaa4:	460c      	mov	r4, r1
 800aaa6:	7e09      	ldrb	r1, [r1, #24]
 800aaa8:	b085      	sub	sp, #20
 800aaaa:	296e      	cmp	r1, #110	; 0x6e
 800aaac:	4617      	mov	r7, r2
 800aaae:	4606      	mov	r6, r0
 800aab0:	4698      	mov	r8, r3
 800aab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aab4:	f000 80b3 	beq.w	800ac1e <_printf_i+0x182>
 800aab8:	d822      	bhi.n	800ab00 <_printf_i+0x64>
 800aaba:	2963      	cmp	r1, #99	; 0x63
 800aabc:	d036      	beq.n	800ab2c <_printf_i+0x90>
 800aabe:	d80a      	bhi.n	800aad6 <_printf_i+0x3a>
 800aac0:	2900      	cmp	r1, #0
 800aac2:	f000 80b9 	beq.w	800ac38 <_printf_i+0x19c>
 800aac6:	2958      	cmp	r1, #88	; 0x58
 800aac8:	f000 8083 	beq.w	800abd2 <_printf_i+0x136>
 800aacc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aad0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800aad4:	e032      	b.n	800ab3c <_printf_i+0xa0>
 800aad6:	2964      	cmp	r1, #100	; 0x64
 800aad8:	d001      	beq.n	800aade <_printf_i+0x42>
 800aada:	2969      	cmp	r1, #105	; 0x69
 800aadc:	d1f6      	bne.n	800aacc <_printf_i+0x30>
 800aade:	6820      	ldr	r0, [r4, #0]
 800aae0:	6813      	ldr	r3, [r2, #0]
 800aae2:	0605      	lsls	r5, r0, #24
 800aae4:	f103 0104 	add.w	r1, r3, #4
 800aae8:	d52a      	bpl.n	800ab40 <_printf_i+0xa4>
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6011      	str	r1, [r2, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	da03      	bge.n	800aafa <_printf_i+0x5e>
 800aaf2:	222d      	movs	r2, #45	; 0x2d
 800aaf4:	425b      	negs	r3, r3
 800aaf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800aafa:	486f      	ldr	r0, [pc, #444]	; (800acb8 <_printf_i+0x21c>)
 800aafc:	220a      	movs	r2, #10
 800aafe:	e039      	b.n	800ab74 <_printf_i+0xd8>
 800ab00:	2973      	cmp	r1, #115	; 0x73
 800ab02:	f000 809d 	beq.w	800ac40 <_printf_i+0x1a4>
 800ab06:	d808      	bhi.n	800ab1a <_printf_i+0x7e>
 800ab08:	296f      	cmp	r1, #111	; 0x6f
 800ab0a:	d020      	beq.n	800ab4e <_printf_i+0xb2>
 800ab0c:	2970      	cmp	r1, #112	; 0x70
 800ab0e:	d1dd      	bne.n	800aacc <_printf_i+0x30>
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	f043 0320 	orr.w	r3, r3, #32
 800ab16:	6023      	str	r3, [r4, #0]
 800ab18:	e003      	b.n	800ab22 <_printf_i+0x86>
 800ab1a:	2975      	cmp	r1, #117	; 0x75
 800ab1c:	d017      	beq.n	800ab4e <_printf_i+0xb2>
 800ab1e:	2978      	cmp	r1, #120	; 0x78
 800ab20:	d1d4      	bne.n	800aacc <_printf_i+0x30>
 800ab22:	2378      	movs	r3, #120	; 0x78
 800ab24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab28:	4864      	ldr	r0, [pc, #400]	; (800acbc <_printf_i+0x220>)
 800ab2a:	e055      	b.n	800abd8 <_printf_i+0x13c>
 800ab2c:	6813      	ldr	r3, [r2, #0]
 800ab2e:	1d19      	adds	r1, r3, #4
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	6011      	str	r1, [r2, #0]
 800ab34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e08c      	b.n	800ac5a <_printf_i+0x1be>
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6011      	str	r1, [r2, #0]
 800ab44:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab48:	bf18      	it	ne
 800ab4a:	b21b      	sxthne	r3, r3
 800ab4c:	e7cf      	b.n	800aaee <_printf_i+0x52>
 800ab4e:	6813      	ldr	r3, [r2, #0]
 800ab50:	6825      	ldr	r5, [r4, #0]
 800ab52:	1d18      	adds	r0, r3, #4
 800ab54:	6010      	str	r0, [r2, #0]
 800ab56:	0628      	lsls	r0, r5, #24
 800ab58:	d501      	bpl.n	800ab5e <_printf_i+0xc2>
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	e002      	b.n	800ab64 <_printf_i+0xc8>
 800ab5e:	0668      	lsls	r0, r5, #25
 800ab60:	d5fb      	bpl.n	800ab5a <_printf_i+0xbe>
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	4854      	ldr	r0, [pc, #336]	; (800acb8 <_printf_i+0x21c>)
 800ab66:	296f      	cmp	r1, #111	; 0x6f
 800ab68:	bf14      	ite	ne
 800ab6a:	220a      	movne	r2, #10
 800ab6c:	2208      	moveq	r2, #8
 800ab6e:	2100      	movs	r1, #0
 800ab70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab74:	6865      	ldr	r5, [r4, #4]
 800ab76:	60a5      	str	r5, [r4, #8]
 800ab78:	2d00      	cmp	r5, #0
 800ab7a:	f2c0 8095 	blt.w	800aca8 <_printf_i+0x20c>
 800ab7e:	6821      	ldr	r1, [r4, #0]
 800ab80:	f021 0104 	bic.w	r1, r1, #4
 800ab84:	6021      	str	r1, [r4, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d13d      	bne.n	800ac06 <_printf_i+0x16a>
 800ab8a:	2d00      	cmp	r5, #0
 800ab8c:	f040 808e 	bne.w	800acac <_printf_i+0x210>
 800ab90:	4665      	mov	r5, ip
 800ab92:	2a08      	cmp	r2, #8
 800ab94:	d10b      	bne.n	800abae <_printf_i+0x112>
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	07db      	lsls	r3, r3, #31
 800ab9a:	d508      	bpl.n	800abae <_printf_i+0x112>
 800ab9c:	6923      	ldr	r3, [r4, #16]
 800ab9e:	6862      	ldr	r2, [r4, #4]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	bfde      	ittt	le
 800aba4:	2330      	movle	r3, #48	; 0x30
 800aba6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800abae:	ebac 0305 	sub.w	r3, ip, r5
 800abb2:	6123      	str	r3, [r4, #16]
 800abb4:	f8cd 8000 	str.w	r8, [sp]
 800abb8:	463b      	mov	r3, r7
 800abba:	aa03      	add	r2, sp, #12
 800abbc:	4621      	mov	r1, r4
 800abbe:	4630      	mov	r0, r6
 800abc0:	f7ff fef6 	bl	800a9b0 <_printf_common>
 800abc4:	3001      	adds	r0, #1
 800abc6:	d14d      	bne.n	800ac64 <_printf_i+0x1c8>
 800abc8:	f04f 30ff 	mov.w	r0, #4294967295
 800abcc:	b005      	add	sp, #20
 800abce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abd2:	4839      	ldr	r0, [pc, #228]	; (800acb8 <_printf_i+0x21c>)
 800abd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800abd8:	6813      	ldr	r3, [r2, #0]
 800abda:	6821      	ldr	r1, [r4, #0]
 800abdc:	1d1d      	adds	r5, r3, #4
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6015      	str	r5, [r2, #0]
 800abe2:	060a      	lsls	r2, r1, #24
 800abe4:	d50b      	bpl.n	800abfe <_printf_i+0x162>
 800abe6:	07ca      	lsls	r2, r1, #31
 800abe8:	bf44      	itt	mi
 800abea:	f041 0120 	orrmi.w	r1, r1, #32
 800abee:	6021      	strmi	r1, [r4, #0]
 800abf0:	b91b      	cbnz	r3, 800abfa <_printf_i+0x15e>
 800abf2:	6822      	ldr	r2, [r4, #0]
 800abf4:	f022 0220 	bic.w	r2, r2, #32
 800abf8:	6022      	str	r2, [r4, #0]
 800abfa:	2210      	movs	r2, #16
 800abfc:	e7b7      	b.n	800ab6e <_printf_i+0xd2>
 800abfe:	064d      	lsls	r5, r1, #25
 800ac00:	bf48      	it	mi
 800ac02:	b29b      	uxthmi	r3, r3
 800ac04:	e7ef      	b.n	800abe6 <_printf_i+0x14a>
 800ac06:	4665      	mov	r5, ip
 800ac08:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac0c:	fb02 3311 	mls	r3, r2, r1, r3
 800ac10:	5cc3      	ldrb	r3, [r0, r3]
 800ac12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ac16:	460b      	mov	r3, r1
 800ac18:	2900      	cmp	r1, #0
 800ac1a:	d1f5      	bne.n	800ac08 <_printf_i+0x16c>
 800ac1c:	e7b9      	b.n	800ab92 <_printf_i+0xf6>
 800ac1e:	6813      	ldr	r3, [r2, #0]
 800ac20:	6825      	ldr	r5, [r4, #0]
 800ac22:	6961      	ldr	r1, [r4, #20]
 800ac24:	1d18      	adds	r0, r3, #4
 800ac26:	6010      	str	r0, [r2, #0]
 800ac28:	0628      	lsls	r0, r5, #24
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	d501      	bpl.n	800ac32 <_printf_i+0x196>
 800ac2e:	6019      	str	r1, [r3, #0]
 800ac30:	e002      	b.n	800ac38 <_printf_i+0x19c>
 800ac32:	066a      	lsls	r2, r5, #25
 800ac34:	d5fb      	bpl.n	800ac2e <_printf_i+0x192>
 800ac36:	8019      	strh	r1, [r3, #0]
 800ac38:	2300      	movs	r3, #0
 800ac3a:	6123      	str	r3, [r4, #16]
 800ac3c:	4665      	mov	r5, ip
 800ac3e:	e7b9      	b.n	800abb4 <_printf_i+0x118>
 800ac40:	6813      	ldr	r3, [r2, #0]
 800ac42:	1d19      	adds	r1, r3, #4
 800ac44:	6011      	str	r1, [r2, #0]
 800ac46:	681d      	ldr	r5, [r3, #0]
 800ac48:	6862      	ldr	r2, [r4, #4]
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f7f5 fb4f 	bl	80002f0 <memchr>
 800ac52:	b108      	cbz	r0, 800ac58 <_printf_i+0x1bc>
 800ac54:	1b40      	subs	r0, r0, r5
 800ac56:	6060      	str	r0, [r4, #4]
 800ac58:	6863      	ldr	r3, [r4, #4]
 800ac5a:	6123      	str	r3, [r4, #16]
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac62:	e7a7      	b.n	800abb4 <_printf_i+0x118>
 800ac64:	6923      	ldr	r3, [r4, #16]
 800ac66:	462a      	mov	r2, r5
 800ac68:	4639      	mov	r1, r7
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	47c0      	blx	r8
 800ac6e:	3001      	adds	r0, #1
 800ac70:	d0aa      	beq.n	800abc8 <_printf_i+0x12c>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	079b      	lsls	r3, r3, #30
 800ac76:	d413      	bmi.n	800aca0 <_printf_i+0x204>
 800ac78:	68e0      	ldr	r0, [r4, #12]
 800ac7a:	9b03      	ldr	r3, [sp, #12]
 800ac7c:	4298      	cmp	r0, r3
 800ac7e:	bfb8      	it	lt
 800ac80:	4618      	movlt	r0, r3
 800ac82:	e7a3      	b.n	800abcc <_printf_i+0x130>
 800ac84:	2301      	movs	r3, #1
 800ac86:	464a      	mov	r2, r9
 800ac88:	4639      	mov	r1, r7
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	47c0      	blx	r8
 800ac8e:	3001      	adds	r0, #1
 800ac90:	d09a      	beq.n	800abc8 <_printf_i+0x12c>
 800ac92:	3501      	adds	r5, #1
 800ac94:	68e3      	ldr	r3, [r4, #12]
 800ac96:	9a03      	ldr	r2, [sp, #12]
 800ac98:	1a9b      	subs	r3, r3, r2
 800ac9a:	42ab      	cmp	r3, r5
 800ac9c:	dcf2      	bgt.n	800ac84 <_printf_i+0x1e8>
 800ac9e:	e7eb      	b.n	800ac78 <_printf_i+0x1dc>
 800aca0:	2500      	movs	r5, #0
 800aca2:	f104 0919 	add.w	r9, r4, #25
 800aca6:	e7f5      	b.n	800ac94 <_printf_i+0x1f8>
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1ac      	bne.n	800ac06 <_printf_i+0x16a>
 800acac:	7803      	ldrb	r3, [r0, #0]
 800acae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acb6:	e76c      	b.n	800ab92 <_printf_i+0xf6>
 800acb8:	0800b1cd 	.word	0x0800b1cd
 800acbc:	0800b1de 	.word	0x0800b1de

0800acc0 <_sbrk_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4c06      	ldr	r4, [pc, #24]	; (800acdc <_sbrk_r+0x1c>)
 800acc4:	2300      	movs	r3, #0
 800acc6:	4605      	mov	r5, r0
 800acc8:	4608      	mov	r0, r1
 800acca:	6023      	str	r3, [r4, #0]
 800accc:	f7f6 fa5a 	bl	8001184 <_sbrk>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	d102      	bne.n	800acda <_sbrk_r+0x1a>
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	b103      	cbz	r3, 800acda <_sbrk_r+0x1a>
 800acd8:	602b      	str	r3, [r5, #0]
 800acda:	bd38      	pop	{r3, r4, r5, pc}
 800acdc:	20000ab4 	.word	0x20000ab4

0800ace0 <__sread>:
 800ace0:	b510      	push	{r4, lr}
 800ace2:	460c      	mov	r4, r1
 800ace4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace8:	f000 f896 	bl	800ae18 <_read_r>
 800acec:	2800      	cmp	r0, #0
 800acee:	bfab      	itete	ge
 800acf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acf2:	89a3      	ldrhlt	r3, [r4, #12]
 800acf4:	181b      	addge	r3, r3, r0
 800acf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acfa:	bfac      	ite	ge
 800acfc:	6563      	strge	r3, [r4, #84]	; 0x54
 800acfe:	81a3      	strhlt	r3, [r4, #12]
 800ad00:	bd10      	pop	{r4, pc}

0800ad02 <__swrite>:
 800ad02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad06:	461f      	mov	r7, r3
 800ad08:	898b      	ldrh	r3, [r1, #12]
 800ad0a:	05db      	lsls	r3, r3, #23
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	460c      	mov	r4, r1
 800ad10:	4616      	mov	r6, r2
 800ad12:	d505      	bpl.n	800ad20 <__swrite+0x1e>
 800ad14:	2302      	movs	r3, #2
 800ad16:	2200      	movs	r2, #0
 800ad18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad1c:	f000 f868 	bl	800adf0 <_lseek_r>
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad2a:	81a3      	strh	r3, [r4, #12]
 800ad2c:	4632      	mov	r2, r6
 800ad2e:	463b      	mov	r3, r7
 800ad30:	4628      	mov	r0, r5
 800ad32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad36:	f000 b817 	b.w	800ad68 <_write_r>

0800ad3a <__sseek>:
 800ad3a:	b510      	push	{r4, lr}
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad42:	f000 f855 	bl	800adf0 <_lseek_r>
 800ad46:	1c43      	adds	r3, r0, #1
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	bf15      	itete	ne
 800ad4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad56:	81a3      	strheq	r3, [r4, #12]
 800ad58:	bf18      	it	ne
 800ad5a:	81a3      	strhne	r3, [r4, #12]
 800ad5c:	bd10      	pop	{r4, pc}

0800ad5e <__sclose>:
 800ad5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad62:	f000 b813 	b.w	800ad8c <_close_r>
	...

0800ad68 <_write_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4c07      	ldr	r4, [pc, #28]	; (800ad88 <_write_r+0x20>)
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	4608      	mov	r0, r1
 800ad70:	4611      	mov	r1, r2
 800ad72:	2200      	movs	r2, #0
 800ad74:	6022      	str	r2, [r4, #0]
 800ad76:	461a      	mov	r2, r3
 800ad78:	f7f6 f9b3 	bl	80010e2 <_write>
 800ad7c:	1c43      	adds	r3, r0, #1
 800ad7e:	d102      	bne.n	800ad86 <_write_r+0x1e>
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	b103      	cbz	r3, 800ad86 <_write_r+0x1e>
 800ad84:	602b      	str	r3, [r5, #0]
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	20000ab4 	.word	0x20000ab4

0800ad8c <_close_r>:
 800ad8c:	b538      	push	{r3, r4, r5, lr}
 800ad8e:	4c06      	ldr	r4, [pc, #24]	; (800ada8 <_close_r+0x1c>)
 800ad90:	2300      	movs	r3, #0
 800ad92:	4605      	mov	r5, r0
 800ad94:	4608      	mov	r0, r1
 800ad96:	6023      	str	r3, [r4, #0]
 800ad98:	f7f6 f9bf 	bl	800111a <_close>
 800ad9c:	1c43      	adds	r3, r0, #1
 800ad9e:	d102      	bne.n	800ada6 <_close_r+0x1a>
 800ada0:	6823      	ldr	r3, [r4, #0]
 800ada2:	b103      	cbz	r3, 800ada6 <_close_r+0x1a>
 800ada4:	602b      	str	r3, [r5, #0]
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	20000ab4 	.word	0x20000ab4

0800adac <_fstat_r>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	4c07      	ldr	r4, [pc, #28]	; (800adcc <_fstat_r+0x20>)
 800adb0:	2300      	movs	r3, #0
 800adb2:	4605      	mov	r5, r0
 800adb4:	4608      	mov	r0, r1
 800adb6:	4611      	mov	r1, r2
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	f7f6 f9ba 	bl	8001132 <_fstat>
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	d102      	bne.n	800adc8 <_fstat_r+0x1c>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	b103      	cbz	r3, 800adc8 <_fstat_r+0x1c>
 800adc6:	602b      	str	r3, [r5, #0]
 800adc8:	bd38      	pop	{r3, r4, r5, pc}
 800adca:	bf00      	nop
 800adcc:	20000ab4 	.word	0x20000ab4

0800add0 <_isatty_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4c06      	ldr	r4, [pc, #24]	; (800adec <_isatty_r+0x1c>)
 800add4:	2300      	movs	r3, #0
 800add6:	4605      	mov	r5, r0
 800add8:	4608      	mov	r0, r1
 800adda:	6023      	str	r3, [r4, #0]
 800addc:	f7f6 f9b9 	bl	8001152 <_isatty>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_isatty_r+0x1a>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	b103      	cbz	r3, 800adea <_isatty_r+0x1a>
 800ade8:	602b      	str	r3, [r5, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	20000ab4 	.word	0x20000ab4

0800adf0 <_lseek_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4c07      	ldr	r4, [pc, #28]	; (800ae10 <_lseek_r+0x20>)
 800adf4:	4605      	mov	r5, r0
 800adf6:	4608      	mov	r0, r1
 800adf8:	4611      	mov	r1, r2
 800adfa:	2200      	movs	r2, #0
 800adfc:	6022      	str	r2, [r4, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f7f6 f9b2 	bl	8001168 <_lseek>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_lseek_r+0x1e>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_lseek_r+0x1e>
 800ae0c:	602b      	str	r3, [r5, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	20000ab4 	.word	0x20000ab4

0800ae14 <__malloc_lock>:
 800ae14:	4770      	bx	lr

0800ae16 <__malloc_unlock>:
 800ae16:	4770      	bx	lr

0800ae18 <_read_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4c07      	ldr	r4, [pc, #28]	; (800ae38 <_read_r+0x20>)
 800ae1c:	4605      	mov	r5, r0
 800ae1e:	4608      	mov	r0, r1
 800ae20:	4611      	mov	r1, r2
 800ae22:	2200      	movs	r2, #0
 800ae24:	6022      	str	r2, [r4, #0]
 800ae26:	461a      	mov	r2, r3
 800ae28:	f7f6 f93e 	bl	80010a8 <_read>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	d102      	bne.n	800ae36 <_read_r+0x1e>
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	b103      	cbz	r3, 800ae36 <_read_r+0x1e>
 800ae34:	602b      	str	r3, [r5, #0]
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	20000ab4 	.word	0x20000ab4

0800ae3c <_init>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	bf00      	nop
 800ae40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae42:	bc08      	pop	{r3}
 800ae44:	469e      	mov	lr, r3
 800ae46:	4770      	bx	lr

0800ae48 <_fini>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	bf00      	nop
 800ae4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4e:	bc08      	pop	{r3}
 800ae50:	469e      	mov	lr, r3
 800ae52:	4770      	bx	lr
