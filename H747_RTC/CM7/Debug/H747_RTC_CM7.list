
H747_RTC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000615c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006578  08006578  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006578  08006578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006580  08006580  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006580  08006580  00016580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006584  08006584  00016584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  24000000  08006588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  24000018  080065a0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240001f4  080065a0  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edbc  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000337f  00000000  00000000  0003ee02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00042188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00043108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040418  00000000  00000000  00043f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bb9  00000000  00000000  000843a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019b945  00000000  00000000  00097f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002338a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004030  00000000  00000000  002338fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080063dc 	.word	0x080063dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	080063dc 	.word	0x080063dc

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b96e 	b.w	80005dc <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468c      	mov	ip, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8083 	bne.w	800042e <__udivmoddi4+0x116>
 8000328:	428a      	cmp	r2, r1
 800032a:	4617      	mov	r7, r2
 800032c:	d947      	bls.n	80003be <__udivmoddi4+0xa6>
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	b142      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000334:	f1c2 0020 	rsb	r0, r2, #32
 8000338:	fa24 f000 	lsr.w	r0, r4, r0
 800033c:	4091      	lsls	r1, r2
 800033e:	4097      	lsls	r7, r2
 8000340:	ea40 0c01 	orr.w	ip, r0, r1
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbbc f6f8 	udiv	r6, ip, r8
 8000350:	fa1f fe87 	uxth.w	lr, r7
 8000354:	fb08 c116 	mls	r1, r8, r6, ip
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb06 f10e 	mul.w	r1, r6, lr
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	f106 30ff 	add.w	r0, r6, #4294967295
 800036a:	f080 8119 	bcs.w	80005a0 <__udivmoddi4+0x288>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8116 	bls.w	80005a0 <__udivmoddi4+0x288>
 8000374:	3e02      	subs	r6, #2
 8000376:	443b      	add	r3, r7
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fe0e 	mul.w	lr, r0, lr
 800038c:	45a6      	cmp	lr, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8105 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8102 	bls.w	80005a4 <__udivmoddi4+0x28c>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	2600      	movs	r6, #0
 80003ae:	b11d      	cbz	r5, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c5 4300 	strd	r4, r3, [r5]
 80003b8:	4631      	mov	r1, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	b902      	cbnz	r2, 80003c2 <__udivmoddi4+0xaa>
 80003c0:	deff      	udf	#255	; 0xff
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	d150      	bne.n	800046c <__udivmoddi4+0x154>
 80003ca:	1bcb      	subs	r3, r1, r7
 80003cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	2601      	movs	r6, #1
 80003d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003da:	0c21      	lsrs	r1, r4, #16
 80003dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb08 f30c 	mul.w	r3, r8, ip
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0xe4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0xe2>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	f200 80e9 	bhi.w	80005cc <__udivmoddi4+0x2b4>
 80003fa:	4684      	mov	ip, r0
 80003fc:	1ac9      	subs	r1, r1, r3
 80003fe:	b2a3      	uxth	r3, r4
 8000400:	fbb1 f0fe 	udiv	r0, r1, lr
 8000404:	fb0e 1110 	mls	r1, lr, r0, r1
 8000408:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800040c:	fb08 f800 	mul.w	r8, r8, r0
 8000410:	45a0      	cmp	r8, r4
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x10c>
 8000414:	193c      	adds	r4, r7, r4
 8000416:	f100 33ff 	add.w	r3, r0, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x10a>
 800041c:	45a0      	cmp	r8, r4
 800041e:	f200 80d9 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 8000422:	4618      	mov	r0, r3
 8000424:	eba4 0408 	sub.w	r4, r4, r8
 8000428:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800042c:	e7bf      	b.n	80003ae <__udivmoddi4+0x96>
 800042e:	428b      	cmp	r3, r1
 8000430:	d909      	bls.n	8000446 <__udivmoddi4+0x12e>
 8000432:	2d00      	cmp	r5, #0
 8000434:	f000 80b1 	beq.w	800059a <__udivmoddi4+0x282>
 8000438:	2600      	movs	r6, #0
 800043a:	e9c5 0100 	strd	r0, r1, [r5]
 800043e:	4630      	mov	r0, r6
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	fab3 f683 	clz	r6, r3
 800044a:	2e00      	cmp	r6, #0
 800044c:	d14a      	bne.n	80004e4 <__udivmoddi4+0x1cc>
 800044e:	428b      	cmp	r3, r1
 8000450:	d302      	bcc.n	8000458 <__udivmoddi4+0x140>
 8000452:	4282      	cmp	r2, r0
 8000454:	f200 80b8 	bhi.w	80005c8 <__udivmoddi4+0x2b0>
 8000458:	1a84      	subs	r4, r0, r2
 800045a:	eb61 0103 	sbc.w	r1, r1, r3
 800045e:	2001      	movs	r0, #1
 8000460:	468c      	mov	ip, r1
 8000462:	2d00      	cmp	r5, #0
 8000464:	d0a8      	beq.n	80003b8 <__udivmoddi4+0xa0>
 8000466:	e9c5 4c00 	strd	r4, ip, [r5]
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f603 	lsr.w	r6, r0, r3
 8000474:	4097      	lsls	r7, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047e:	40d9      	lsrs	r1, r3
 8000480:	4330      	orrs	r0, r6
 8000482:	0c03      	lsrs	r3, r0, #16
 8000484:	fbb1 f6fe 	udiv	r6, r1, lr
 8000488:	fa1f f887 	uxth.w	r8, r7
 800048c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000490:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000494:	fb06 f108 	mul.w	r1, r6, r8
 8000498:	4299      	cmp	r1, r3
 800049a:	fa04 f402 	lsl.w	r4, r4, r2
 800049e:	d909      	bls.n	80004b4 <__udivmoddi4+0x19c>
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80004a6:	f080 808d 	bcs.w	80005c4 <__udivmoddi4+0x2ac>
 80004aa:	4299      	cmp	r1, r3
 80004ac:	f240 808a 	bls.w	80005c4 <__udivmoddi4+0x2ac>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	443b      	add	r3, r7
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b281      	uxth	r1, r0
 80004b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c4:	fb00 f308 	mul.w	r3, r0, r8
 80004c8:	428b      	cmp	r3, r1
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x1c4>
 80004cc:	1879      	adds	r1, r7, r1
 80004ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d2:	d273      	bcs.n	80005bc <__udivmoddi4+0x2a4>
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d971      	bls.n	80005bc <__udivmoddi4+0x2a4>
 80004d8:	3802      	subs	r0, #2
 80004da:	4439      	add	r1, r7
 80004dc:	1acb      	subs	r3, r1, r3
 80004de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e2:	e778      	b.n	80003d6 <__udivmoddi4+0xbe>
 80004e4:	f1c6 0c20 	rsb	ip, r6, #32
 80004e8:	fa03 f406 	lsl.w	r4, r3, r6
 80004ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f0:	431c      	orrs	r4, r3
 80004f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004f6:	fa01 f306 	lsl.w	r3, r1, r6
 80004fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000502:	431f      	orrs	r7, r3
 8000504:	0c3b      	lsrs	r3, r7, #16
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fa1f f884 	uxth.w	r8, r4
 800050e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000512:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000516:	fb09 fa08 	mul.w	sl, r9, r8
 800051a:	458a      	cmp	sl, r1
 800051c:	fa02 f206 	lsl.w	r2, r2, r6
 8000520:	fa00 f306 	lsl.w	r3, r0, r6
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x220>
 8000526:	1861      	adds	r1, r4, r1
 8000528:	f109 30ff 	add.w	r0, r9, #4294967295
 800052c:	d248      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 800052e:	458a      	cmp	sl, r1
 8000530:	d946      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000532:	f1a9 0902 	sub.w	r9, r9, #2
 8000536:	4421      	add	r1, r4
 8000538:	eba1 010a 	sub.w	r1, r1, sl
 800053c:	b2bf      	uxth	r7, r7
 800053e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000542:	fb0e 1110 	mls	r1, lr, r0, r1
 8000546:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054a:	fb00 f808 	mul.w	r8, r0, r8
 800054e:	45b8      	cmp	r8, r7
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x24a>
 8000552:	19e7      	adds	r7, r4, r7
 8000554:	f100 31ff 	add.w	r1, r0, #4294967295
 8000558:	d22e      	bcs.n	80005b8 <__udivmoddi4+0x2a0>
 800055a:	45b8      	cmp	r8, r7
 800055c:	d92c      	bls.n	80005b8 <__udivmoddi4+0x2a0>
 800055e:	3802      	subs	r0, #2
 8000560:	4427      	add	r7, r4
 8000562:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000566:	eba7 0708 	sub.w	r7, r7, r8
 800056a:	fba0 8902 	umull	r8, r9, r0, r2
 800056e:	454f      	cmp	r7, r9
 8000570:	46c6      	mov	lr, r8
 8000572:	4649      	mov	r1, r9
 8000574:	d31a      	bcc.n	80005ac <__udivmoddi4+0x294>
 8000576:	d017      	beq.n	80005a8 <__udivmoddi4+0x290>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x27a>
 800057a:	ebb3 020e 	subs.w	r2, r3, lr
 800057e:	eb67 0701 	sbc.w	r7, r7, r1
 8000582:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000586:	40f2      	lsrs	r2, r6
 8000588:	ea4c 0202 	orr.w	r2, ip, r2
 800058c:	40f7      	lsrs	r7, r6
 800058e:	e9c5 2700 	strd	r2, r7, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e70b      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e9      	b.n	8000378 <__udivmoddi4+0x60>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6fd      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005a8:	4543      	cmp	r3, r8
 80005aa:	d2e5      	bcs.n	8000578 <__udivmoddi4+0x260>
 80005ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b0:	eb69 0104 	sbc.w	r1, r9, r4
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7df      	b.n	8000578 <__udivmoddi4+0x260>
 80005b8:	4608      	mov	r0, r1
 80005ba:	e7d2      	b.n	8000562 <__udivmoddi4+0x24a>
 80005bc:	4660      	mov	r0, ip
 80005be:	e78d      	b.n	80004dc <__udivmoddi4+0x1c4>
 80005c0:	4681      	mov	r9, r0
 80005c2:	e7b9      	b.n	8000538 <__udivmoddi4+0x220>
 80005c4:	4666      	mov	r6, ip
 80005c6:	e775      	b.n	80004b4 <__udivmoddi4+0x19c>
 80005c8:	4630      	mov	r0, r6
 80005ca:	e74a      	b.n	8000462 <__udivmoddi4+0x14a>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	4439      	add	r1, r7
 80005d2:	e713      	b.n	80003fc <__udivmoddi4+0xe4>
 80005d4:	3802      	subs	r0, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e724      	b.n	8000424 <__udivmoddi4+0x10c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e4:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <SystemInit+0x104>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ea:	4a3e      	ldr	r2, [pc, #248]	; (80006e4 <SystemInit+0x104>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f4:	4b3b      	ldr	r3, [pc, #236]	; (80006e4 <SystemInit+0x104>)
 80005f6:	691b      	ldr	r3, [r3, #16]
 80005f8:	4a3a      	ldr	r2, [pc, #232]	; (80006e4 <SystemInit+0x104>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <SystemInit+0x108>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f003 030f 	and.w	r3, r3, #15
 8000608:	2b06      	cmp	r3, #6
 800060a:	d807      	bhi.n	800061c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800060c:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <SystemInit+0x108>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f023 030f 	bic.w	r3, r3, #15
 8000614:	4a34      	ldr	r2, [pc, #208]	; (80006e8 <SystemInit+0x108>)
 8000616:	f043 0307 	orr.w	r3, r3, #7
 800061a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800061c:	4b33      	ldr	r3, [pc, #204]	; (80006ec <SystemInit+0x10c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <SystemInit+0x10c>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000628:	4b30      	ldr	r3, [pc, #192]	; (80006ec <SystemInit+0x10c>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062e:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <SystemInit+0x10c>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	492e      	ldr	r1, [pc, #184]	; (80006ec <SystemInit+0x10c>)
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemInit+0x110>)
 8000636:	4013      	ands	r3, r2
 8000638:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <SystemInit+0x108>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f003 0308 	and.w	r3, r3, #8
 8000642:	2b00      	cmp	r3, #0
 8000644:	d007      	beq.n	8000656 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemInit+0x108>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f023 030f 	bic.w	r3, r3, #15
 800064e:	4a26      	ldr	r2, [pc, #152]	; (80006e8 <SystemInit+0x108>)
 8000650:	f043 0307 	orr.w	r3, r3, #7
 8000654:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000656:	4b25      	ldr	r3, [pc, #148]	; (80006ec <SystemInit+0x10c>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemInit+0x10c>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000662:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemInit+0x10c>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <SystemInit+0x10c>)
 800066a:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <SystemInit+0x114>)
 800066c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemInit+0x10c>)
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemInit+0x118>)
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <SystemInit+0x10c>)
 8000676:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemInit+0x11c>)
 8000678:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <SystemInit+0x10c>)
 800067c:	2200      	movs	r2, #0
 800067e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <SystemInit+0x10c>)
 8000682:	4a1e      	ldr	r2, [pc, #120]	; (80006fc <SystemInit+0x11c>)
 8000684:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <SystemInit+0x10c>)
 8000688:	2200      	movs	r2, #0
 800068a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <SystemInit+0x10c>)
 800068e:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <SystemInit+0x11c>)
 8000690:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <SystemInit+0x10c>)
 8000694:	2200      	movs	r2, #0
 8000696:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <SystemInit+0x10c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <SystemInit+0x10c>)
 800069e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <SystemInit+0x10c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <SystemInit+0x120>)
 80006ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <SystemInit+0x120>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x124>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <SystemInit+0x128>)
 80006bc:	4013      	ands	r3, r2
 80006be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006c2:	d202      	bcs.n	80006ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x12c>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <SystemInit+0x130>)
 80006cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <SystemInit+0x104>)
 80006d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	52002000 	.word	0x52002000
 80006ec:	58024400 	.word	0x58024400
 80006f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f4:	02020200 	.word	0x02020200
 80006f8:	01ff0000 	.word	0x01ff0000
 80006fc:	01010280 	.word	0x01010280
 8000700:	580000c0 	.word	0x580000c0
 8000704:	5c001000 	.word	0x5c001000
 8000708:	ffff0000 	.word	0xffff0000
 800070c:	51008108 	.word	0x51008108
 8000710:	52004000 	.word	0x52004000

08000714 <vMoveScreenUp>:
teLCDState eLCDState = E_LCD_MAIN_MENU;

uint8_t u8MenuIndex = 1;

void vMoveScreenUp(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	if(u8MenuIndex < 4)
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <vMoveScreenUp+0x24>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d805      	bhi.n	800072c <vMoveScreenUp+0x18>
		u8MenuIndex++;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <vMoveScreenUp+0x24>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <vMoveScreenUp+0x24>)
 800072a:	701a      	strb	r2, [r3, #0]
    //LCD_SetCursor(u8MenuIndex,1);
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	24000008 	.word	0x24000008

0800073c <vMoveScreenDown>:

void vMoveScreenDown(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	if(u8MenuIndex >1)
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <vMoveScreenDown+0x24>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d905      	bls.n	8000754 <vMoveScreenDown+0x18>
		u8MenuIndex--;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <vMoveScreenDown+0x24>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <vMoveScreenDown+0x24>)
 8000752:	701a      	strb	r2, [r3, #0]
    //LCD_SetCursor(u8MenuIndex,1);
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	24000008 	.word	0x24000008

08000764 <vLCDDisplay>:


void vLCDDisplay(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	switch (eLCDState)
 8000768:	4b41      	ldr	r3, [pc, #260]	; (8000870 <vLCDDisplay+0x10c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d054      	beq.n	800081a <vLCDDisplay+0xb6>
 8000770:	2b02      	cmp	r3, #2
 8000772:	dc79      	bgt.n	8000868 <vLCDDisplay+0x104>
 8000774:	2b00      	cmp	r3, #0
 8000776:	d002      	beq.n	800077e <vLCDDisplay+0x1a>
 8000778:	2b01      	cmp	r3, #1
 800077a:	d027      	beq.n	80007cc <vLCDDisplay+0x68>
//			LCD_Send_String("Date: 5-5-2021", STR_NOSLIDE);
//			LCD_SetCursor(u8MenuIndex,1);
//			break;
//		}
		default:
		break;
 800077c:	e074      	b.n	8000868 <vLCDDisplay+0x104>
			LCD_SetCursor(1,1);
 800077e:	2101      	movs	r1, #1
 8000780:	2001      	movs	r0, #1
 8000782:	f000 fa11 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("Overview", STR_NOSLIDE);
 8000786:	2100      	movs	r1, #0
 8000788:	483a      	ldr	r0, [pc, #232]	; (8000874 <vLCDDisplay+0x110>)
 800078a:	f000 fa3d 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(2,1);
 800078e:	2101      	movs	r1, #1
 8000790:	2002      	movs	r0, #2
 8000792:	f000 fa09 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("System setting", STR_NOSLIDE);
 8000796:	2100      	movs	r1, #0
 8000798:	4837      	ldr	r0, [pc, #220]	; (8000878 <vLCDDisplay+0x114>)
 800079a:	f000 fa35 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(3,1);
 800079e:	2101      	movs	r1, #1
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 fa01 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("I/O setting", STR_NOSLIDE);
 80007a6:	2100      	movs	r1, #0
 80007a8:	4834      	ldr	r0, [pc, #208]	; (800087c <vLCDDisplay+0x118>)
 80007aa:	f000 fa2d 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(4,1);
 80007ae:	2101      	movs	r1, #1
 80007b0:	2004      	movs	r0, #4
 80007b2:	f000 f9f9 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("Sensor status", STR_NOSLIDE);
 80007b6:	2100      	movs	r1, #0
 80007b8:	4831      	ldr	r0, [pc, #196]	; (8000880 <vLCDDisplay+0x11c>)
 80007ba:	f000 fa25 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(u8MenuIndex,1);
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <vLCDDisplay+0x120>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2101      	movs	r1, #1
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f9ef 	bl	8000ba8 <LCD_SetCursor>
			break;
 80007ca:	e04e      	b.n	800086a <vLCDDisplay+0x106>
			LCD_SetCursor(1,1);
 80007cc:	2101      	movs	r1, #1
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 f9ea 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("Model name: D-SL21", STR_NOSLIDE);
 80007d4:	2100      	movs	r1, #0
 80007d6:	482c      	ldr	r0, [pc, #176]	; (8000888 <vLCDDisplay+0x124>)
 80007d8:	f000 fa16 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(2,1);
 80007dc:	2101      	movs	r1, #1
 80007de:	2002      	movs	r0, #2
 80007e0:	f000 f9e2 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("Station name: Hi", STR_NOSLIDE);
 80007e4:	2100      	movs	r1, #0
 80007e6:	4829      	ldr	r0, [pc, #164]	; (800088c <vLCDDisplay+0x128>)
 80007e8:	f000 fa0e 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(3,1);
 80007ec:	2101      	movs	r1, #1
 80007ee:	2003      	movs	r0, #3
 80007f0:	f000 f9da 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("Serial number: 202", STR_NOSLIDE);
 80007f4:	2100      	movs	r1, #0
 80007f6:	4826      	ldr	r0, [pc, #152]	; (8000890 <vLCDDisplay+0x12c>)
 80007f8:	f000 fa06 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(4,1);
 80007fc:	2101      	movs	r1, #1
 80007fe:	2004      	movs	r0, #4
 8000800:	f000 f9d2 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("Voltage: 9.1V", STR_NOSLIDE);
 8000804:	2100      	movs	r1, #0
 8000806:	4823      	ldr	r0, [pc, #140]	; (8000894 <vLCDDisplay+0x130>)
 8000808:	f000 f9fe 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(u8MenuIndex,1);
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <vLCDDisplay+0x120>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2101      	movs	r1, #1
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f9c8 	bl	8000ba8 <LCD_SetCursor>
			break;
 8000818:	e027      	b.n	800086a <vLCDDisplay+0x106>
			LCD_SetCursor(1,1);
 800081a:	2101      	movs	r1, #1
 800081c:	2001      	movs	r0, #1
 800081e:	f000 f9c3 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("Name: _________", STR_NOSLIDE);
 8000822:	2100      	movs	r1, #0
 8000824:	481c      	ldr	r0, [pc, #112]	; (8000898 <vLCDDisplay+0x134>)
 8000826:	f000 f9ef 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(2,1);
 800082a:	2101      	movs	r1, #1
 800082c:	2002      	movs	r0, #2
 800082e:	f000 f9bb 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("ID: ___________", STR_NOSLIDE);
 8000832:	2100      	movs	r1, #0
 8000834:	4819      	ldr	r0, [pc, #100]	; (800089c <vLCDDisplay+0x138>)
 8000836:	f000 f9e7 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(3,1);
 800083a:	2101      	movs	r1, #1
 800083c:	2003      	movs	r0, #3
 800083e:	f000 f9b3 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("IPAdd: 192.168", STR_NOSLIDE);
 8000842:	2100      	movs	r1, #0
 8000844:	4816      	ldr	r0, [pc, #88]	; (80008a0 <vLCDDisplay+0x13c>)
 8000846:	f000 f9df 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(4,1);
 800084a:	2101      	movs	r1, #1
 800084c:	2004      	movs	r0, #4
 800084e:	f000 f9ab 	bl	8000ba8 <LCD_SetCursor>
			LCD_Send_String("Date: 5-5-2021", STR_NOSLIDE);
 8000852:	2100      	movs	r1, #0
 8000854:	4813      	ldr	r0, [pc, #76]	; (80008a4 <vLCDDisplay+0x140>)
 8000856:	f000 f9d7 	bl	8000c08 <LCD_Send_String>
			LCD_SetCursor(u8MenuIndex,1);
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <vLCDDisplay+0x120>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f9a1 	bl	8000ba8 <LCD_SetCursor>
			break;
 8000866:	e000      	b.n	800086a <vLCDDisplay+0x106>
		break;
 8000868:	bf00      	nop
	}
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	24000034 	.word	0x24000034
 8000874:	080063f4 	.word	0x080063f4
 8000878:	08006400 	.word	0x08006400
 800087c:	08006410 	.word	0x08006410
 8000880:	0800641c 	.word	0x0800641c
 8000884:	24000008 	.word	0x24000008
 8000888:	0800642c 	.word	0x0800642c
 800088c:	08006440 	.word	0x08006440
 8000890:	08006454 	.word	0x08006454
 8000894:	08006468 	.word	0x08006468
 8000898:	08006478 	.word	0x08006478
 800089c:	08006488 	.word	0x08006488
 80008a0:	08006498 	.word	0x08006498
 80008a4:	080064a8 	.word	0x080064a8

080008a8 <vChangeLCDState>:

void vChangeLCDState(uint8_t u8Key)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
    switch (eLCDState)
 80008b2:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <vChangeLCDState+0xfc>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d050      	beq.n	800095c <vChangeLCDState+0xb4>
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	dc6c      	bgt.n	8000998 <vChangeLCDState+0xf0>
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <vChangeLCDState+0x20>
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d02c      	beq.n	8000920 <vChangeLCDState+0x78>
 80008c6:	e067      	b.n	8000998 <vChangeLCDState+0xf0>
    {
        case E_LCD_MAIN_MENU:
        {
            switch(u8Key)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b40      	cmp	r3, #64	; 0x40
 80008cc:	d023      	beq.n	8000916 <vChangeLCDState+0x6e>
 80008ce:	2b40      	cmp	r3, #64	; 0x40
 80008d0:	dc24      	bgt.n	800091c <vChangeLCDState+0x74>
 80008d2:	2b20      	cmp	r3, #32
 80008d4:	d005      	beq.n	80008e2 <vChangeLCDState+0x3a>
 80008d6:	2b20      	cmp	r3, #32
 80008d8:	dc20      	bgt.n	800091c <vChangeLCDState+0x74>
 80008da:	2b08      	cmp	r3, #8
 80008dc:	d018      	beq.n	8000910 <vChangeLCDState+0x68>
 80008de:	2b10      	cmp	r3, #16
                case GPIO_PIN_6:
                        vMoveScreenDown();
                    break;

                case GPIO_PIN_4:
                    break;
 80008e0:	e01d      	b.n	800091e <vChangeLCDState+0x76>
					switch(u8MenuIndex)
 80008e2:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <vChangeLCDState+0x100>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d002      	beq.n	80008f0 <vChangeLCDState+0x48>
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d004      	beq.n	80008f8 <vChangeLCDState+0x50>
 80008ee:	e007      	b.n	8000900 <vChangeLCDState+0x58>
							eLCDState = E_LCD_OVERVIEW;
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <vChangeLCDState+0xfc>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
						break;
 80008f6:	e007      	b.n	8000908 <vChangeLCDState+0x60>
							eLCDState = E_LCD_SYSTEM_SETTING;
 80008f8:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <vChangeLCDState+0xfc>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	701a      	strb	r2, [r3, #0]
						break;
 80008fe:	e003      	b.n	8000908 <vChangeLCDState+0x60>
							eLCDState = E_LCD_MAIN_MENU;
 8000900:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <vChangeLCDState+0xfc>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
						break;
 8000906:	bf00      	nop
					u8MenuIndex = 1;
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <vChangeLCDState+0x100>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
                    break;
 800090e:	e006      	b.n	800091e <vChangeLCDState+0x76>
                        vMoveScreenUp();
 8000910:	f7ff ff00 	bl	8000714 <vMoveScreenUp>
                    break;
 8000914:	e003      	b.n	800091e <vChangeLCDState+0x76>
                        vMoveScreenDown();
 8000916:	f7ff ff11 	bl	800073c <vMoveScreenDown>
                    break;
 800091a:	e000      	b.n	800091e <vChangeLCDState+0x76>
                default:
                    break;
 800091c:	bf00      	nop
            }
            break;
 800091e:	e03b      	b.n	8000998 <vChangeLCDState+0xf0>
        }
        case E_LCD_OVERVIEW:
        {
            switch(u8Key)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b40      	cmp	r3, #64	; 0x40
 8000924:	d00e      	beq.n	8000944 <vChangeLCDState+0x9c>
 8000926:	2b40      	cmp	r3, #64	; 0x40
 8000928:	dc16      	bgt.n	8000958 <vChangeLCDState+0xb0>
 800092a:	2b20      	cmp	r3, #32
 800092c:	d006      	beq.n	800093c <vChangeLCDState+0x94>
 800092e:	2b20      	cmp	r3, #32
 8000930:	dc12      	bgt.n	8000958 <vChangeLCDState+0xb0>
 8000932:	2b08      	cmp	r3, #8
 8000934:	d009      	beq.n	800094a <vChangeLCDState+0xa2>
 8000936:	2b10      	cmp	r3, #16
 8000938:	d00a      	beq.n	8000950 <vChangeLCDState+0xa8>
                case GPIO_PIN_4:
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 800093a:	e00d      	b.n	8000958 <vChangeLCDState+0xb0>
                	u8MenuIndex = 1;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <vChangeLCDState+0x100>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
                    break;
 8000942:	e00a      	b.n	800095a <vChangeLCDState+0xb2>
                	vMoveScreenUp();
 8000944:	f7ff fee6 	bl	8000714 <vMoveScreenUp>
                    break;
 8000948:	e007      	b.n	800095a <vChangeLCDState+0xb2>
                	vMoveScreenUp();
 800094a:	f7ff fee3 	bl	8000714 <vMoveScreenUp>
                	break;
 800094e:	e004      	b.n	800095a <vChangeLCDState+0xb2>
					eLCDState = E_LCD_MAIN_MENU;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <vChangeLCDState+0xfc>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
                    break;
 8000956:	e000      	b.n	800095a <vChangeLCDState+0xb2>
                    break;
 8000958:	bf00      	nop
            }
            break;
 800095a:	e01d      	b.n	8000998 <vChangeLCDState+0xf0>
        }
        case E_LCD_SYSTEM_SETTING:
        {
            switch(u8Key)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b40      	cmp	r3, #64	; 0x40
 8000960:	d00e      	beq.n	8000980 <vChangeLCDState+0xd8>
 8000962:	2b40      	cmp	r3, #64	; 0x40
 8000964:	dc16      	bgt.n	8000994 <vChangeLCDState+0xec>
 8000966:	2b20      	cmp	r3, #32
 8000968:	d006      	beq.n	8000978 <vChangeLCDState+0xd0>
 800096a:	2b20      	cmp	r3, #32
 800096c:	dc12      	bgt.n	8000994 <vChangeLCDState+0xec>
 800096e:	2b08      	cmp	r3, #8
 8000970:	d009      	beq.n	8000986 <vChangeLCDState+0xde>
 8000972:	2b10      	cmp	r3, #16
 8000974:	d00a      	beq.n	800098c <vChangeLCDState+0xe4>
                case GPIO_PIN_4:
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 8000976:	e00d      	b.n	8000994 <vChangeLCDState+0xec>
                	u8MenuIndex = 1;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <vChangeLCDState+0x100>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
                    break;
 800097e:	e00a      	b.n	8000996 <vChangeLCDState+0xee>
                	vMoveScreenUp();
 8000980:	f7ff fec8 	bl	8000714 <vMoveScreenUp>
                    break;
 8000984:	e007      	b.n	8000996 <vChangeLCDState+0xee>
                	vMoveScreenUp();
 8000986:	f7ff fec5 	bl	8000714 <vMoveScreenUp>
                	break;
 800098a:	e004      	b.n	8000996 <vChangeLCDState+0xee>
					eLCDState = E_LCD_MAIN_MENU;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <vChangeLCDState+0xfc>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
                    break;
 8000992:	e000      	b.n	8000996 <vChangeLCDState+0xee>
                    break;
 8000994:	bf00      	nop
            }
            break;
 8000996:	bf00      	nop
        }
    }
    vLCDDisplay();
 8000998:	f7ff fee4 	bl	8000764 <vLCDDisplay>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	24000034 	.word	0x24000034
 80009a8:	24000008 	.word	0x24000008

080009ac <hi2cx_define>:
*/
I2C_HandleTypeDef hi2cx;
extern I2C_HandleTypeDef hi2c4; //* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type(i2c1,i2c2...) you use, default is hi2c1.
                                //That I2C_HandleTypeDef hi2c1 comes from main.c*.
static void hi2cx_define(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	hi2cx = hi2c4;	//* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type you use, default is hi2c1.
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <hi2cx_define+0x18>)
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <hi2cx_define+0x1c>)
 80009b4:	4610      	mov	r0, r2
 80009b6:	4619      	mov	r1, r3
 80009b8:	234c      	movs	r3, #76	; 0x4c
 80009ba:	461a      	mov	r2, r3
 80009bc:	f005 fcf8 	bl	80063b0 <memcpy>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	24000048 	.word	0x24000048
 80009c8:	24000098 	.word	0x24000098

080009cc <LCD_i2cDeviceCheck>:
/**
*@brief: Lcd i2c device check.
*@retval: none
*/
void LCD_i2cDeviceCheck(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	/* Checks if target device is ready for communication. */
	/* 3 is number of trials, 1000ms is timeout */
	HAL_Delay(50);
 80009d0:	2032      	movs	r0, #50	; 0x32
 80009d2:	f000 fee5 	bl	80017a0 <HAL_Delay>
	hi2cx_define();
 80009d6:	f7ff ffe9 	bl	80009ac <hi2cx_define>
	while (HAL_I2C_IsDeviceReady(&hi2cx, i2cDeviceAddr, 3, 1000) != HAL_OK) 
 80009da:	bf00      	nop
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <LCD_i2cDeviceCheck+0x30>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b299      	uxth	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	2203      	movs	r2, #3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <LCD_i2cDeviceCheck+0x34>)
 80009ea:	f001 fbaf 	bl	800214c <HAL_I2C_IsDeviceReady>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f3      	bne.n	80009dc <LCD_i2cDeviceCheck+0x10>
	{	
		
	}
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	24000009 	.word	0x24000009
 8000a00:	24000048 	.word	0x24000048

08000a04 <LCD_Set_Command>:
/**
*@brief: Send commands to lcd.
*@retval: none
*/
void LCD_Set_Command(uint8_t cmd)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af02      	add	r7, sp, #8
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	data_M = cmd & Mask_Data;        //Most significant bit
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <LCD_Set_Command+0x9c>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4013      	ands	r3, r2
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <LCD_Set_Command+0xa0>)
 8000a1a:	701a      	strb	r2, [r3, #0]
	data_L = (cmd << 4) & Mask_Data; //Least significant bit
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	b25a      	sxtb	r2, r3
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <LCD_Set_Command+0x9c>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	4013      	ands	r3, r2
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <LCD_Set_Command+0xa4>)
 8000a30:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <LCD_Set_Command+0xa0>)
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <LCD_Set_Command+0xa8>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <LCD_Set_Command+0xa0>)
 8000a40:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <LCD_Set_Command+0xa4>)
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <LCD_Set_Command+0xa8>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <LCD_Set_Command+0xa4>)
 8000a50:	701a      	strb	r2, [r3, #0]
	
	data[0] = data_M | LCD_E;  //Enable E pin, RS=0
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <LCD_Set_Command+0xa0>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <LCD_Set_Command+0xac>)
 8000a5e:	701a      	strb	r2, [r3, #0]
	data[1] = data_M;          //Disable E pin, RS=0
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <LCD_Set_Command+0xa0>)
 8000a62:	781a      	ldrb	r2, [r3, #0]
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <LCD_Set_Command+0xac>)
 8000a66:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <LCD_Set_Command+0xa4>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <LCD_Set_Command+0xac>)
 8000a74:	709a      	strb	r2, [r3, #2]
	data[3] = data_L;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <LCD_Set_Command+0xa4>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <LCD_Set_Command+0xac>)
 8000a7c:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();	
 8000a7e:	f7ff ff95 	bl	80009ac <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <LCD_Set_Command+0xb0>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b299      	uxth	r1, r3
 8000a88:	23c8      	movs	r3, #200	; 0xc8
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <LCD_Set_Command+0xac>)
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <LCD_Set_Command+0xb4>)
 8000a92:	f001 fa67 	bl	8001f64 <HAL_I2C_Master_Transmit>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2400000a 	.word	0x2400000a
 8000aa4:	2400003c 	.word	0x2400003c
 8000aa8:	2400003d 	.word	0x2400003d
 8000aac:	2400003e 	.word	0x2400003e
 8000ab0:	24000038 	.word	0x24000038
 8000ab4:	24000009 	.word	0x24000009
 8000ab8:	24000048 	.word	0x24000048

08000abc <LCD_Write_Data>:
/**
*@brief: Write data to lcd.
*@retval: none
*/
void LCD_Write_Data(uint8_t datax)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	data_M = datax & Mask_Data;        //Most significant bit
 8000ac6:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <LCD_Write_Data+0xa8>)
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4013      	ands	r3, r2
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <LCD_Write_Data+0xac>)
 8000ad2:	701a      	strb	r2, [r3, #0]
	data_L = (datax << 4) & Mask_Data; //Least significant bit
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	b25a      	sxtb	r2, r3
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <LCD_Write_Data+0xa8>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <LCD_Write_Data+0xb0>)
 8000ae8:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <LCD_Write_Data+0xac>)
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <LCD_Write_Data+0xb4>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <LCD_Write_Data+0xac>)
 8000af8:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <LCD_Write_Data+0xb0>)
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <LCD_Write_Data+0xb4>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <LCD_Write_Data+0xb0>)
 8000b08:	701a      	strb	r2, [r3, #0]
	 	
	data[0] = data_M | LCD_E|LCD_RS;  //Enable E pin, RS=1
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <LCD_Write_Data+0xac>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f043 0305 	orr.w	r3, r3, #5
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <LCD_Write_Data+0xb8>)
 8000b16:	701a      	strb	r2, [r3, #0]
	data[1] = data_M | LCD_RS;        //Disable E pin, RS=1
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <LCD_Write_Data+0xac>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <LCD_Write_Data+0xb8>)
 8000b24:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E|LCD_RS;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <LCD_Write_Data+0xb0>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	f043 0305 	orr.w	r3, r3, #5
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <LCD_Write_Data+0xb8>)
 8000b32:	709a      	strb	r2, [r3, #2]
	data[3] = data_L | LCD_RS;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <LCD_Write_Data+0xb0>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <LCD_Write_Data+0xb8>)
 8000b40:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();
 8000b42:	f7ff ff33 	bl	80009ac <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <LCD_Write_Data+0xbc>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b299      	uxth	r1, r3
 8000b4c:	23c8      	movs	r3, #200	; 0xc8
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2304      	movs	r3, #4
 8000b52:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <LCD_Write_Data+0xb8>)
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <LCD_Write_Data+0xc0>)
 8000b56:	f001 fa05 	bl	8001f64 <HAL_I2C_Master_Transmit>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2400000a 	.word	0x2400000a
 8000b68:	2400003c 	.word	0x2400003c
 8000b6c:	2400003d 	.word	0x2400003d
 8000b70:	2400003e 	.word	0x2400003e
 8000b74:	24000038 	.word	0x24000038
 8000b78:	24000009 	.word	0x24000009
 8000b7c:	24000048 	.word	0x24000048

08000b80 <LCD_Clear>:
/**
*@brief: Clear lcd display.
*@retval: none
*/
void LCD_Clear(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f7ff ff3d 	bl	8000a04 <LCD_Set_Command>
	HAL_Delay(10);
 8000b8a:	200a      	movs	r0, #10
 8000b8c:	f000 fe08 	bl	80017a0 <HAL_Delay>
	str_len = 0;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <LCD_Clear+0x20>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
	line_pos = 1;
 8000b96:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <LCD_Clear+0x24>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2400003f 	.word	0x2400003f
 8000ba4:	2400000b 	.word	0x2400000b

08000ba8 <LCD_SetCursor>:
*@brief: Set lcd cursor position.
*@param: line_x: line no, chr_x: character no.
*@retval: none
*/
void LCD_SetCursor(int line_x, int chr_x)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	line_pos = line_x; //hold line position.
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <LCD_SetCursor+0x58>)
 8000bb8:	701a      	strb	r2, [r3, #0]
	
	if(((line_x >=1 && line_x <= line_MAX) && (chr_x >=1 && chr_x <= chr_MAX)))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dd1a      	ble.n	8000bf6 <LCD_SetCursor+0x4e>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	dc17      	bgt.n	8000bf6 <LCD_SetCursor+0x4e>
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dd14      	ble.n	8000bf6 <LCD_SetCursor+0x4e>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2b14      	cmp	r3, #20
 8000bd0:	dc11      	bgt.n	8000bf6 <LCD_SetCursor+0x4e>
	{		
		LCD_Set_Command(LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][chr_x - 1]);		
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	1e5a      	subs	r2, r3, #1
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	1e59      	subs	r1, r3, #1
 8000bda:	480a      	ldr	r0, [pc, #40]	; (8000c04 <LCD_SetCursor+0x5c>)
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4403      	add	r3, r0
 8000be6:	440b      	add	r3, r1
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff07 	bl	8000a04 <LCD_Set_Command>
	}
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2400000b 	.word	0x2400000b
 8000c04:	08006500 	.word	0x08006500

08000c08 <LCD_Send_String>:
*@brief: Send string data to lcd.
*@param: str[]: string array, mode: str slide/noslide.
*@retval: none
*/
void LCD_Send_String(char str[], uint8_t mode)
{	 
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
 8000c14:	466b      	mov	r3, sp
 8000c16:	461c      	mov	r4, r3
	char *buffer[BFR_MAX];
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	2364      	movs	r3, #100	; 0x64
 8000c20:	b2d8      	uxtb	r0, r3
 8000c22:	f04f 0100 	mov.w	r1, #0
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	014b      	lsls	r3, r1, #5
 8000c30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000c34:	0142      	lsls	r2, r0, #5
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	b2d8      	uxtb	r0, r3
 8000c3a:	f04f 0100 	mov.w	r1, #0
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	f04f 0300 	mov.w	r3, #0
 8000c46:	014b      	lsls	r3, r1, #5
 8000c48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000c4c:	0142      	lsls	r2, r0, #5
 8000c4e:	2364      	movs	r3, #100	; 0x64
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	3307      	adds	r3, #7
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	ebad 0d03 	sub.w	sp, sp, r3
 8000c5c:	466b      	mov	r3, sp
 8000c5e:	3303      	adds	r3, #3
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	60bb      	str	r3, [r7, #8]
	static uint8_t i[4] = {chr_MAX,chr_MAX,chr_MAX,chr_MAX}; //i follows the ch position while sliding.
	static uint8_t c[4] = {0, 0, 0, 0}; //c follows the each ch of the str buffer while sliding.
	static uint8_t ch_len = 0; //follow the string lenght.
	str_len = 0;
 8000c66:	4b52      	ldr	r3, [pc, #328]	; (8000db0 <LCD_Send_String+0x1a8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
	

	switch(mode)
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d01d      	beq.n	8000cae <LCD_Send_String+0xa6>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d020      	beq.n	8000cb8 <LCD_Send_String+0xb0>
 8000c76:	e095      	b.n	8000da4 <LCD_Send_String+0x19c>
	{			
		case STR_NOSLIDE:
			while (*str) 
			{
				LCD_Write_Data (*str++);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff1b 	bl	8000abc <LCD_Write_Data>
				str_len++;
 8000c86:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <LCD_Send_String+0x1a8>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <LCD_Send_String+0x1a8>)
 8000c90:	701a      	strb	r2, [r3, #0]
				if(str_len == chr_MAX)
 8000c92:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <LCD_Send_String+0x1a8>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b14      	cmp	r3, #20
 8000c98:	d109      	bne.n	8000cae <LCD_Send_String+0xa6>
				{
					LCD_SetCursor(line_pos + 1, 1);
 8000c9a:	4b46      	ldr	r3, [pc, #280]	; (8000db4 <LCD_Send_String+0x1ac>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff80 	bl	8000ba8 <LCD_SetCursor>
					str_len = 0;
 8000ca8:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <LCD_Send_String+0x1a8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
			while (*str) 
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1e0      	bne.n	8000c78 <LCD_Send_String+0x70>
				}			
			}
			break;
 8000cb6:	e075      	b.n	8000da4 <LCD_Send_String+0x19c>
		
		case STR_SLIDE:
			for(int a = 0; a < BFR_MAX; a++)buffer[a]=str++;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	e009      	b.n	8000cd2 <LCD_Send_String+0xca>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	6939      	ldr	r1, [r7, #16]
 8000cc8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	2364      	movs	r3, #100	; 0x64
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	dbf0      	blt.n	8000cbe <LCD_Send_String+0xb6>

				ch_len = strlen(*buffer);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff faf9 	bl	80002d8 <strlen>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <LCD_Send_String+0x1b0>)
 8000cec:	701a      	strb	r2, [r3, #0]
						
				LCD_SetCursor(line_pos, i[line_pos - 1]);
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <LCD_Send_String+0x1ac>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <LCD_Send_String+0x1ac>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	4a30      	ldr	r2, [pc, #192]	; (8000dbc <LCD_Send_String+0x1b4>)
 8000cfc:	5cd3      	ldrb	r3, [r2, r3]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff ff52 	bl	8000ba8 <LCD_SetCursor>

				for(int k = c[line_pos - 1];k < ch_len; k++)
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <LCD_Send_String+0x1ac>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	4a2d      	ldr	r2, [pc, #180]	; (8000dc0 <LCD_Send_String+0x1b8>)
 8000d0c:	5cd3      	ldrb	r3, [r2, r3]
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e00a      	b.n	8000d28 <LCD_Send_String+0x120>
				LCD_Write_Data (*buffer[k]);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fecd 	bl	8000abc <LCD_Write_Data>
				for(int k = c[line_pos - 1];k < ch_len; k++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <LCD_Send_String+0x1b0>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	4293      	cmp	r3, r2
 8000d32:	dbee      	blt.n	8000d12 <LCD_Send_String+0x10a>
								
				i[line_pos - 1]--;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <LCD_Send_String+0x1ac>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <LCD_Send_String+0x1b4>)
 8000d3c:	5cd2      	ldrb	r2, [r2, r3]
 8000d3e:	3a01      	subs	r2, #1
 8000d40:	b2d1      	uxtb	r1, r2
 8000d42:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <LCD_Send_String+0x1b4>)
 8000d44:	54d1      	strb	r1, [r2, r3]

				if(i[line_pos -1] == 0)
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <LCD_Send_String+0x1ac>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <LCD_Send_String+0x1b4>)
 8000d4e:	5cd3      	ldrb	r3, [r2, r3]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d126      	bne.n	8000da2 <LCD_Send_String+0x19a>
				{
					i[line_pos - 1] = 1;
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <LCD_Send_String+0x1ac>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <LCD_Send_String+0x1b4>)
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	54d1      	strb	r1, [r2, r3]
					c[line_pos - 1]++;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <LCD_Send_String+0x1ac>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <LCD_Send_String+0x1b8>)
 8000d68:	5cd2      	ldrb	r2, [r2, r3]
 8000d6a:	3201      	adds	r2, #1
 8000d6c:	b2d1      	uxtb	r1, r2
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <LCD_Send_String+0x1b8>)
 8000d70:	54d1      	strb	r1, [r2, r3]
					if(c[line_pos - 1] == ch_len)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <LCD_Send_String+0x1ac>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <LCD_Send_String+0x1b8>)
 8000d7a:	5cd2      	ldrb	r2, [r2, r3]
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <LCD_Send_String+0x1b0>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d10e      	bne.n	8000da2 <LCD_Send_String+0x19a>
					{
						i[line_pos - 1] = chr_MAX;
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <LCD_Send_String+0x1ac>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <LCD_Send_String+0x1b4>)
 8000d8c:	2114      	movs	r1, #20
 8000d8e:	54d1      	strb	r1, [r2, r3]
						c[line_pos - 1] = 0;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <LCD_Send_String+0x1ac>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LCD_Send_String+0x1b8>)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	54d1      	strb	r1, [r2, r3]
						ch_len = 0;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <LCD_Send_String+0x1b0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
					}
				}
			break;	 
 8000da2:	bf00      	nop
 8000da4:	46a5      	mov	sp, r4
	}	
}
 8000da6:	bf00      	nop
 8000da8:	371c      	adds	r7, #28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2400003f 	.word	0x2400003f
 8000db4:	2400000b 	.word	0x2400000b
 8000db8:	24000040 	.word	0x24000040
 8000dbc:	2400000c 	.word	0x2400000c
 8000dc0:	24000044 	.word	0x24000044

08000dc4 <LCD_BackLight>:
*@brief: Backlight control
*@param: light_state: BL on/off
*@retval: none
*/
void LCD_BackLight(uint8_t light_state)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	if(light_state == LCD_BL_ON)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d106      	bne.n	8000de2 <LCD_BackLight+0x1e>
	{
		data_BL = LCD_BL_ON;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <LCD_BackLight+0x38>)
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20); //Empty character
 8000dda:	2020      	movs	r0, #32
 8000ddc:	f7ff fe6e 	bl	8000abc <LCD_Write_Data>
	else if (light_state == LCD_BL_OFF)
	{
		data_BL = LCD_BL_OFF;
		LCD_Write_Data(0x20);
	}
}
 8000de0:	e008      	b.n	8000df4 <LCD_BackLight+0x30>
	else if (light_state == LCD_BL_OFF)
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d105      	bne.n	8000df4 <LCD_BackLight+0x30>
		data_BL = LCD_BL_OFF;
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <LCD_BackLight+0x38>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20);
 8000dee:	2020      	movs	r0, #32
 8000df0:	f7ff fe64 	bl	8000abc <LCD_Write_Data>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2400003e 	.word	0x2400003e

08000e00 <LCD_Init>:
/**
*@brief: Lcd initiliazing settings.
*@retval: none
*/
void LCD_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fdfd 	bl	8000a04 <LCD_Set_Command>
	HAL_Delay(1000);
 8000e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0e:	f000 fcc7 	bl	80017a0 <HAL_Delay>
	LCD_Set_Command(LCD_RETURN_HOME);
 8000e12:	2002      	movs	r0, #2
 8000e14:	f7ff fdf6 	bl	8000a04 <LCD_Set_Command>
	HAL_Delay(5);
 8000e18:	2005      	movs	r0, #5
 8000e1a:	f000 fcc1 	bl	80017a0 <HAL_Delay>
	LCD_Set_Command(LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 8000e1e:	2028      	movs	r0, #40	; 0x28
 8000e20:	f7ff fdf0 	bl	8000a04 <LCD_Set_Command>
	HAL_Delay(5);
 8000e24:	2005      	movs	r0, #5
 8000e26:	f000 fcbb 	bl	80017a0 <HAL_Delay>
	LCD_Set_Command(LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_ON|BLINK_ON);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f7ff fdea 	bl	8000a04 <LCD_Set_Command>
	HAL_Delay(5);
 8000e30:	2005      	movs	r0, #5
 8000e32:	f000 fcb5 	bl	80017a0 <HAL_Delay>
	LCD_Set_Command(LCD_SET_DDRAMADDR);
 8000e36:	2080      	movs	r0, #128	; 0x80
 8000e38:	f7ff fde4 	bl	8000a04 <LCD_Set_Command>
	HAL_Delay(500);
 8000e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e40:	f000 fcae 	bl	80017a0 <HAL_Delay>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	int32_t timeout;

	timeout = 0xFFFF;
 8000e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e52:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e54:	bf00      	nop
 8000e56:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <main+0xec>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d004      	beq.n	8000e6c <main+0x24>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	1e5a      	subs	r2, r3, #1
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	dcf4      	bgt.n	8000e56 <main+0xe>
	if ( timeout < 0 )
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	da01      	bge.n	8000e76 <main+0x2e>
	{
	Error_Handler();
 8000e72:	f000 fa71 	bl	8001358 <Error_Handler>
	}

	HAL_Init();
 8000e76:	f000 fc01 	bl	800167c <HAL_Init>
	SystemClock_Config();
 8000e7a:	f000 f873 	bl	8000f64 <SystemClock_Config>
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <main+0xec>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	4a2b      	ldr	r2, [pc, #172]	; (8000f34 <main+0xec>)
 8000e86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8e:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <main+0xec>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	683b      	ldr	r3, [r7, #0]

	HAL_HSEM_FastTake(HSEM_ID_0);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f000 ffa3 	bl	8001de8 <HAL_HSEM_FastTake>
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 ffb9 	bl	8001e1c <HAL_HSEM_Release>
	timeout = 0xFFFF;
 8000eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eae:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000eb0:	bf00      	nop
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <main+0xec>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d104      	bne.n	8000ec8 <main+0x80>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dcf4      	bgt.n	8000eb2 <main+0x6a>
	if ( timeout < 0 )
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	da01      	bge.n	8000ed2 <main+0x8a>
	{
	Error_Handler();
 8000ece:	f000 fa43 	bl	8001358 <Error_Handler>
	}

	MX_GPIO_Init();
 8000ed2:	f000 f9ad 	bl	8001230 <MX_GPIO_Init>
	MX_RTC_Init();
 8000ed6:	f000 f903 	bl	80010e0 <MX_RTC_Init>
	MX_UART8_Init();
 8000eda:	f000 f95d 	bl	8001198 <MX_UART8_Init>
	MX_I2C4_Init();
 8000ede:	f000 f8bf 	bl	8001060 <MX_I2C4_Init>

	LCD_i2cDeviceCheck();
 8000ee2:	f7ff fd73 	bl	80009cc <LCD_i2cDeviceCheck>
	LCD_Init();
 8000ee6:	f7ff ff8b 	bl	8000e00 <LCD_Init>
	LCD_BackLight(LCD_BL_ON);
 8000eea:	2008      	movs	r0, #8
 8000eec:	f7ff ff6a 	bl	8000dc4 <LCD_BackLight>

	LCD_SetCursor(1,1);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff fe58 	bl	8000ba8 <LCD_SetCursor>
	LCD_Send_String("-----Hi------", STR_NOSLIDE);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	480f      	ldr	r0, [pc, #60]	; (8000f38 <main+0xf0>)
 8000efc:	f7ff fe84 	bl	8000c08 <LCD_Send_String>
	LCD_SetCursor(2,1);
 8000f00:	2101      	movs	r1, #1
 8000f02:	2002      	movs	r0, #2
 8000f04:	f7ff fe50 	bl	8000ba8 <LCD_SetCursor>
	LCD_Send_String("---MY name is---", STR_NOSLIDE);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <main+0xf4>)
 8000f0c:	f7ff fe7c 	bl	8000c08 <LCD_Send_String>
	LCD_SetCursor(3,1);
 8000f10:	2101      	movs	r1, #1
 8000f12:	2003      	movs	r0, #3
 8000f14:	f7ff fe48 	bl	8000ba8 <LCD_SetCursor>
	LCD_Send_String("---Datalogger---", STR_NOSLIDE);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <main+0xf8>)
 8000f1c:	f7ff fe74 	bl	8000c08 <LCD_Send_String>

	HAL_Delay(2000);
 8000f20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f24:	f000 fc3c 	bl	80017a0 <HAL_Delay>
	LCD_Clear();
 8000f28:	f7ff fe2a 	bl	8000b80 <LCD_Clear>

	vLCDDisplay();
 8000f2c:	f7ff fc1a 	bl	8000764 <vLCDDisplay>
//	vLCDDisplay();
//	eTime.Minutes = 10;
//	eTime.Seconds = 5;
//	eTime.Hours = 7;

	while (1)
 8000f30:	e7fe      	b.n	8000f30 <main+0xe8>
 8000f32:	bf00      	nop
 8000f34:	58024400 	.word	0x58024400
 8000f38:	080064b8 	.word	0x080064b8
 8000f3c:	080064c8 	.word	0x080064c8
 8000f40:	080064dc 	.word	0x080064dc

08000f44 <HAL_GPIO_EXTI_Callback>:
//		HAL_Delay(1000);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
//		printf("***LEFT***\r\n");
//	}
//	if(GPIO_Pin == GPIO_PIN_5){
//		printf("***RIGHT***\r\n");
//	}
	LCD_Clear();
 8000f4e:	f7ff fe17 	bl	8000b80 <LCD_Clear>
	vChangeLCDState(GPIO_Pin);
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fca6 	bl	80008a8 <vChangeLCDState>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b09e      	sub	sp, #120	; 0x78
 8000f68:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f70:	2004      	movs	r0, #4
 8000f72:	f001 fbff 	bl	8002774 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <SystemClock_Config+0xf4>)
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	4a36      	ldr	r2, [pc, #216]	; (8001058 <SystemClock_Config+0xf4>)
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f86:	4b34      	ldr	r3, [pc, #208]	; (8001058 <SystemClock_Config+0xf4>)
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b32      	ldr	r3, [pc, #200]	; (800105c <SystemClock_Config+0xf8>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a31      	ldr	r2, [pc, #196]	; (800105c <SystemClock_Config+0xf8>)
 8000f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	; (800105c <SystemClock_Config+0xf8>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fa8:	bf00      	nop
 8000faa:	4b2c      	ldr	r3, [pc, #176]	; (800105c <SystemClock_Config+0xf8>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb6:	d1f8      	bne.n	8000faa <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000fd6:	23a0      	movs	r3, #160	; 0xa0
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fc16 	bl	8002828 <HAL_RCC_OscConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8001002:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800100a:	f000 f9a5 	bl	8001358 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800100e:	233f      	movs	r3, #63	; 0x3f
 8001010:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2303      	movs	r3, #3
 8001014:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800101a:	2308      	movs	r3, #8
 800101c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800101e:	2340      	movs	r3, #64	; 0x40
 8001020:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001022:	2340      	movs	r3, #64	; 0x40
 8001024:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800102a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800102c:	2340      	movs	r3, #64	; 0x40
 800102e:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001030:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001034:	2104      	movs	r1, #4
 8001036:	4618      	mov	r0, r3
 8001038:	f002 f806 	bl	8003048 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8001042:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800104a:	f000 f985 	bl	8001358 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 800104e:	bf00      	nop
 8001050:	3778      	adds	r7, #120	; 0x78
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	58000400 	.word	0x58000400
 800105c:	58024800 	.word	0x58024800

08001060 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	hi2c4.Instance = I2C4;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_I2C4_Init+0x74>)
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <MX_I2C4_Init+0x78>)
 8001068:	601a      	str	r2, [r3, #0]
	hi2c4.Init.Timing = 0x00707CBB;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_I2C4_Init+0x74>)
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <MX_I2C4_Init+0x7c>)
 800106e:	605a      	str	r2, [r3, #4]
	hi2c4.Init.OwnAddress1 = 0;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_I2C4_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_I2C4_Init+0x74>)
 8001078:	2201      	movs	r2, #1
 800107a:	60da      	str	r2, [r3, #12]
	hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_I2C4_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
	hi2c4.Init.OwnAddress2 = 0;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_I2C4_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
	hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C4_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_I2C4_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C4_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <MX_I2C4_Init+0x74>)
 800109c:	f000 fed2 	bl	8001e44 <HAL_I2C_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_I2C4_Init+0x4a>
	{
	Error_Handler();
 80010a6:	f000 f957 	bl	8001358 <Error_Handler>
	}
	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010aa:	2100      	movs	r1, #0
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <MX_I2C4_Init+0x74>)
 80010ae:	f001 fac9 	bl	8002644 <HAL_I2CEx_ConfigAnalogFilter>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_I2C4_Init+0x5c>
	{
	Error_Handler();
 80010b8:	f000 f94e 	bl	8001358 <Error_Handler>
	}
	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80010bc:	2100      	movs	r1, #0
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_I2C4_Init+0x74>)
 80010c0:	f001 fb0b 	bl	80026da <HAL_I2CEx_ConfigDigitalFilter>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_I2C4_Init+0x6e>
	{
	Error_Handler();
 80010ca:	f000 f945 	bl	8001358 <Error_Handler>
	}
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	24000098 	.word	0x24000098
 80010d8:	58001c00 	.word	0x58001c00
 80010dc:	00707cbb 	.word	0x00707cbb

080010e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]

	/** Initialize RTC Only
	*/
	hrtc.Instance = RTC;
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <MX_RTC_Init+0xb0>)
 80010fa:	4a26      	ldr	r2, [pc, #152]	; (8001194 <MX_RTC_Init+0xb4>)
 80010fc:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <MX_RTC_Init+0xb0>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_RTC_Init+0xb0>)
 8001106:	227f      	movs	r2, #127	; 0x7f
 8001108:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_RTC_Init+0xb0>)
 800110c:	22ff      	movs	r2, #255	; 0xff
 800110e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_RTC_Init+0xb0>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_RTC_Init+0xb0>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_RTC_Init+0xb0>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_RTC_Init+0xb0>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001128:	4819      	ldr	r0, [pc, #100]	; (8001190 <MX_RTC_Init+0xb0>)
 800112a:	f003 feab 	bl	8004e84 <HAL_RTC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_RTC_Init+0x58>
	{
	Error_Handler();
 8001134:	f000 f910 	bl	8001358 <Error_Handler>
	}

	/** Initialize RTC and set the Time and Date
	*/
	sTime.Hours = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <MX_RTC_Init+0xb0>)
 8001154:	f003 ff0e 	bl	8004f74 <HAL_RTC_SetTime>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_RTC_Init+0x82>
	{
	Error_Handler();
 800115e:	f000 f8fb 	bl	8001358 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001162:	2301      	movs	r3, #1
 8001164:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_MAY;
 8001166:	2305      	movs	r3, #5
 8001168:	707b      	strb	r3, [r7, #1]
	sDate.Date = 24;
 800116a:	2318      	movs	r3, #24
 800116c:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 16;
 800116e:	2310      	movs	r3, #16
 8001170:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_RTC_Init+0xb0>)
 800117a:	f003 ff99 	bl	80050b0 <HAL_RTC_SetDate>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_RTC_Init+0xa8>
	{
	Error_Handler();
 8001184:	f000 f8e8 	bl	8001358 <Error_Handler>
	}
}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	24000104 	.word	0x24000104
 8001194:	58004000 	.word	0x58004000

08001198 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	huart8.Instance = UART8;
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_UART8_Init+0x90>)
 800119e:	4a23      	ldr	r2, [pc, #140]	; (800122c <MX_UART8_Init+0x94>)
 80011a0:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <MX_UART8_Init+0x90>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_UART8_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <MX_UART8_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_UART8_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_UART8_Init+0x90>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_UART8_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_UART8_Init+0x90>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_UART8_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_UART8_Init+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_UART8_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 80011e0:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_UART8_Init+0x90>)
 80011e2:	f004 f8a1 	bl	8005328 <HAL_UART_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_UART8_Init+0x58>
	{
	Error_Handler();
 80011ec:	f000 f8b4 	bl	8001358 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f0:	2100      	movs	r1, #0
 80011f2:	480d      	ldr	r0, [pc, #52]	; (8001228 <MX_UART8_Init+0x90>)
 80011f4:	f004 ffee 	bl	80061d4 <HAL_UARTEx_SetTxFifoThreshold>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_UART8_Init+0x6a>
	{
	Error_Handler();
 80011fe:	f000 f8ab 	bl	8001358 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <MX_UART8_Init+0x90>)
 8001206:	f005 f823 	bl	8006250 <HAL_UARTEx_SetRxFifoThreshold>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_UART8_Init+0x7c>
	{
	Error_Handler();
 8001210:	f000 f8a2 	bl	8001358 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_UART8_Init+0x90>)
 8001216:	f004 ffa4 	bl	8006162 <HAL_UARTEx_DisableFifoMode>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_UART8_Init+0x8c>
	{
	Error_Handler();
 8001220:	f000 f89a 	bl	8001358 <Error_Handler>
	}
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	24000144 	.word	0x24000144
 800122c:	40007c00 	.word	0x40007c00

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001246:	4b40      	ldr	r3, [pc, #256]	; (8001348 <MX_GPIO_Init+0x118>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124c:	4a3e      	ldr	r2, [pc, #248]	; (8001348 <MX_GPIO_Init+0x118>)
 800124e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001256:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <MX_GPIO_Init+0x118>)
 8001258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001264:	4b38      	ldr	r3, [pc, #224]	; (8001348 <MX_GPIO_Init+0x118>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126a:	4a37      	ldr	r2, [pc, #220]	; (8001348 <MX_GPIO_Init+0x118>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001274:	4b34      	ldr	r3, [pc, #208]	; (8001348 <MX_GPIO_Init+0x118>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <MX_GPIO_Init+0x118>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <MX_GPIO_Init+0x118>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <MX_GPIO_Init+0x118>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <MX_GPIO_Init+0x118>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a6:	4a28      	ldr	r2, [pc, #160]	; (8001348 <MX_GPIO_Init+0x118>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <MX_GPIO_Init+0x118>)
 80012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80012c4:	4821      	ldr	r0, [pc, #132]	; (800134c <MX_GPIO_Init+0x11c>)
 80012c6:	f000 fd5b 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_2;
 80012ca:	237c      	movs	r3, #124	; 0x7c
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <MX_GPIO_Init+0x120>)
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	481d      	ldr	r0, [pc, #116]	; (8001354 <MX_GPIO_Init+0x124>)
 80012de:	f000 fb9f 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4814      	ldr	r0, [pc, #80]	; (800134c <MX_GPIO_Init+0x11c>)
 80012fc:	f000 fb90 	bl	8001a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2008      	movs	r0, #8
 8001306:	f000 fb56 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800130a:	2008      	movs	r0, #8
 800130c:	f000 fb6d 	bl	80019ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2009      	movs	r0, #9
 8001316:	f000 fb4e 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800131a:	2009      	movs	r0, #9
 800131c:	f000 fb65 	bl	80019ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	200a      	movs	r0, #10
 8001326:	f000 fb46 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800132a:	200a      	movs	r0, #10
 800132c:	f000 fb5d 	bl	80019ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2017      	movs	r0, #23
 8001336:	f000 fb3e 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800133a:	2017      	movs	r0, #23
 800133c:	f000 fb55 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	58024400 	.word	0x58024400
 800134c:	58022000 	.word	0x58022000
 8001350:	11210000 	.word	0x11210000
 8001354:	58022800 	.word	0x58022800

08001358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_MspInit+0x30>)
 8001370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_MspInit+0x30>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_MspInit+0x30>)
 8001380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58024400 	.word	0x58024400

0800139c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0ba      	sub	sp, #232	; 0xe8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	22c0      	movs	r2, #192	; 0xc0
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 f805 	bl	80063cc <memset>
  if(hi2c->Instance==I2C4)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a25      	ldr	r2, [pc, #148]	; (800145c <HAL_I2C_MspInit+0xc0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d142      	bne.n	8001452 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80013cc:	2310      	movs	r3, #16
 80013ce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 f9c0 	bl	8003760 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013e6:	f7ff ffb7 	bl	8001358 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f0:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001408:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800140c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001410:	2312      	movs	r3, #18
 8001412:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001422:	2304      	movs	r3, #4
 8001424:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001428:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <HAL_I2C_MspInit+0xc8>)
 8001430:	f000 faf6 	bl	8001a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 8001436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001440:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 8001446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	37e8      	adds	r7, #232	; 0xe8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	58001c00 	.word	0x58001c00
 8001460:	58024400 	.word	0x58024400
 8001464:	58020c00 	.word	0x58020c00

08001468 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b0b2      	sub	sp, #200	; 0xc8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	22c0      	movs	r2, #192	; 0xc0
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f004 ffa7 	bl	80063cc <memset>
  if(hrtc->Instance==RTC)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <HAL_RTC_MspInit+0x58>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d116      	bne.n	80014b6 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001488:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800148c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800148e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001492:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	4618      	mov	r0, r3
 800149c:	f002 f960 	bl	8003760 <HAL_RCCEx_PeriphCLKConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014a6:	f7ff ff57 	bl	8001358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_RTC_MspInit+0x5c>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <HAL_RTC_MspInit+0x5c>)
 80014b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	37c8      	adds	r7, #200	; 0xc8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	58004000 	.word	0x58004000
 80014c4:	58024400 	.word	0x58024400

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0ba      	sub	sp, #232	; 0xe8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	22c0      	movs	r2, #192	; 0xc0
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 ff6f 	bl	80063cc <memset>
  if(huart->Instance==UART8)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a25      	ldr	r2, [pc, #148]	; (8001588 <HAL_UART_MspInit+0xc0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d142      	bne.n	800157e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80014f8:	2302      	movs	r3, #2
 80014fa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4618      	mov	r0, r3
 8001508:	f002 f92a 	bl	8003760 <HAL_RCCEx_PeriphCLKConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001512:	f7ff ff21 	bl	8001358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_UART_MspInit+0xc4>)
 8001518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_UART_MspInit+0xc4>)
 800151e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001522:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_UART_MspInit+0xc4>)
 8001528:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800152c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_UART_MspInit+0xc4>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <HAL_UART_MspInit+0xc4>)
 800153c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_UART_MspInit+0xc4>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001552:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800156c:	2308      	movs	r3, #8
 800156e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001572:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_UART_MspInit+0xc8>)
 800157a:	f000 fa51 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	37e8      	adds	r7, #232	; 0xe8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40007c00 	.word	0x40007c00
 800158c:	58024400 	.word	0x58024400
 8001590:	58022400 	.word	0x58022400

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e0:	f000 f8be 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80015ec:	2004      	movs	r0, #4
 80015ee:	f000 fbe0 	bl	8001db2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80015fa:	2008      	movs	r0, #8
 80015fc:	f000 fbd9 	bl	8001db2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001608:	2010      	movs	r0, #16
 800160a:	f000 fbd2 	bl	8001db2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}

08001612 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001616:	2020      	movs	r0, #32
 8001618:	f000 fbcb 	bl	8001db2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800161c:	2040      	movs	r0, #64	; 0x40
 800161e:	f000 fbc8 	bl	8001db2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001660 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800162c:	f7fe ffd8 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001632:	490d      	ldr	r1, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001648:	4c0a      	ldr	r4, [pc, #40]	; (8001674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001656:	f004 fe87 	bl	8006368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7ff fbf5 	bl	8000e48 <main>
  bx  lr
 800165e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001660:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001664:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001668:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 800166c:	08006588 	.word	0x08006588
  ldr r2, =_sbss
 8001670:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001674:	240001f4 	.word	0x240001f4

08001678 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC3_IRQHandler>
	...

0800167c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001682:	2003      	movs	r0, #3
 8001684:	f000 f98c 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001688:	f001 fe94 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 800168c:	4602      	mov	r2, r0
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_Init+0x68>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	4913      	ldr	r1, [pc, #76]	; (80016e8 <HAL_Init+0x6c>)
 800169a:	5ccb      	ldrb	r3, [r1, r3]
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_Init+0x68>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <HAL_Init+0x6c>)
 80016b0:	5cd3      	ldrb	r3, [r2, r3]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <HAL_Init+0x70>)
 80016be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_Init+0x74>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f814 	bl	80016f4 <HAL_InitTick>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e002      	b.n	80016dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016d6:	f7ff fe47 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	58024400 	.word	0x58024400
 80016e8:	080064f0 	.word	0x080064f0
 80016ec:	24000004 	.word	0x24000004
 80016f0:	24000000 	.word	0x24000000

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_InitTick+0x60>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e021      	b.n	800174c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_InitTick+0x64>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_InitTick+0x60>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f971 	bl	8001a06 <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00e      	b.n	800174c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d80a      	bhi.n	800174a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f000 f93b 	bl	80019b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4a06      	ldr	r2, [pc, #24]	; (800175c <HAL_InitTick+0x68>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	24000014 	.word	0x24000014
 8001758:	24000000 	.word	0x24000000
 800175c:	24000010 	.word	0x24000010

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	24000014 	.word	0x24000014
 8001784:	240001f0 	.word	0x240001f0

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	240001f0 	.word	0x240001f0

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffee 	bl	8001788 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffde 	bl	8001788 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24000014 	.word	0x24000014

080017e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_GetREVID+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0c1b      	lsrs	r3, r3, #16
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	5c001000 	.word	0x5c001000

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <__NVIC_SetPriorityGrouping+0x40>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	4313      	orrs	r3, r2
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <__NVIC_SetPriorityGrouping+0x40>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00
 8001844:	05fa0000 	.word	0x05fa0000

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db0b      	blt.n	800188e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	4907      	ldr	r1, [pc, #28]	; (800189c <__NVIC_EnableIRQ+0x38>)
 800187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f7ff ff8e 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff29 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff40 	bl	8001848 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff90 	bl	80018f4 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5f 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff33 	bl	8001864 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa4 	bl	800195c <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a2e:	4b89      	ldr	r3, [pc, #548]	; (8001c54 <HAL_GPIO_Init+0x234>)
 8001a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a32:	e194      	b.n	8001d5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8186 	beq.w	8001d58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d00b      	beq.n	8001a6c <HAL_GPIO_Init+0x4c>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d007      	beq.n	8001a6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a60:	2b11      	cmp	r3, #17
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b12      	cmp	r3, #18
 8001a6a:	d130      	bne.n	8001ace <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 0201 	and.w	r2, r3, #1
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0xee>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b12      	cmp	r3, #18
 8001b0c:	d123      	bne.n	8001b56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	69b9      	ldr	r1, [r7, #24]
 8001b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0203 	and.w	r2, r3, #3
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80e0 	beq.w	8001d58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b98:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <HAL_GPIO_Init+0x238>)
 8001b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b9e:	4a2e      	ldr	r2, [pc, #184]	; (8001c58 <HAL_GPIO_Init+0x238>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_GPIO_Init+0x238>)
 8001baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb6:	4a29      	ldr	r2, [pc, #164]	; (8001c5c <HAL_GPIO_Init+0x23c>)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a20      	ldr	r2, [pc, #128]	; (8001c60 <HAL_GPIO_Init+0x240>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d052      	beq.n	8001c88 <HAL_GPIO_Init+0x268>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <HAL_GPIO_Init+0x244>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d031      	beq.n	8001c4e <HAL_GPIO_Init+0x22e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <HAL_GPIO_Init+0x248>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d02b      	beq.n	8001c4a <HAL_GPIO_Init+0x22a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <HAL_GPIO_Init+0x24c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d025      	beq.n	8001c46 <HAL_GPIO_Init+0x226>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <HAL_GPIO_Init+0x250>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01f      	beq.n	8001c42 <HAL_GPIO_Init+0x222>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_GPIO_Init+0x254>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x21e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <HAL_GPIO_Init+0x258>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x21a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_GPIO_Init+0x25c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x216>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_GPIO_Init+0x260>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <HAL_GPIO_Init+0x264>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x20e>
 8001c2a:	2309      	movs	r3, #9
 8001c2c:	e02d      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c2e:	230a      	movs	r3, #10
 8001c30:	e02b      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c32:	2308      	movs	r3, #8
 8001c34:	e029      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c36:	2307      	movs	r3, #7
 8001c38:	e027      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	e025      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c3e:	2305      	movs	r3, #5
 8001c40:	e023      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c42:	2304      	movs	r3, #4
 8001c44:	e021      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c46:	2303      	movs	r3, #3
 8001c48:	e01f      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e01d      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e01b      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c52:	bf00      	nop
 8001c54:	58000080 	.word	0x58000080
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	58000400 	.word	0x58000400
 8001c60:	58020000 	.word	0x58020000
 8001c64:	58020400 	.word	0x58020400
 8001c68:	58020800 	.word	0x58020800
 8001c6c:	58020c00 	.word	0x58020c00
 8001c70:	58021000 	.word	0x58021000
 8001c74:	58021400 	.word	0x58021400
 8001c78:	58021800 	.word	0x58021800
 8001c7c:	58021c00 	.word	0x58021c00
 8001c80:	58022000 	.word	0x58022000
 8001c84:	58022400 	.word	0x58022400
 8001c88:	2300      	movs	r3, #0
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	f002 0203 	and.w	r2, r2, #3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4093      	lsls	r3, r2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9a:	4938      	ldr	r1, [pc, #224]	; (8001d7c <HAL_GPIO_Init+0x35c>)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f ae63 	bne.w	8001a34 <HAL_GPIO_Init+0x14>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	3724      	adds	r7, #36	; 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	58000400 	.word	0x58000400

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d9c:	e003      	b.n	8001da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	619a      	str	r2, [r3, #24]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff f8b3 	bl	8000f44 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001df0:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <HAL_HSEM_FastTake+0x2c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3320      	adds	r3, #32
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_HSEM_FastTake+0x30>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e000      	b.n	8001e06 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	58026400 	.word	0x58026400
 8001e18:	80000300 	.word	0x80000300

08001e1c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001e26:	4906      	ldr	r1, [pc, #24]	; (8001e40 <HAL_HSEM_Release+0x24>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	58026400 	.word	0x58026400

08001e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e07f      	b.n	8001f56 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fa96 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2224      	movs	r2, #36	; 0x24
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0201 	bic.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	e006      	b.n	8001ecc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001eca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d104      	bne.n	8001ede <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001edc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_I2C_Init+0x11c>)
 8001eea:	430b      	orrs	r3, r1
 8001eec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	ea42 0103 	orr.w	r1, r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	021a      	lsls	r2, r3, #8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69d9      	ldr	r1, [r3, #28]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1a      	ldr	r2, [r3, #32]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	02008000 	.word	0x02008000

08001f64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	460b      	mov	r3, r1
 8001f72:	817b      	strh	r3, [r7, #10]
 8001f74:	4613      	mov	r3, r2
 8001f76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	f040 80da 	bne.w	800213a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_I2C_Master_Transmit+0x30>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e0d3      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f9c:	f7ff fbf4 	bl	8001788 <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2319      	movs	r3, #25
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f9f8 	bl	80023a4 <I2C_WaitOnFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0be      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2221      	movs	r2, #33	; 0x21
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2210      	movs	r2, #16
 8001fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	893a      	ldrh	r2, [r7, #8]
 8001fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2bff      	cmp	r3, #255	; 0xff
 8001fee:	d90e      	bls.n	800200e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	22ff      	movs	r2, #255	; 0xff
 8001ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	8979      	ldrh	r1, [r7, #10]
 8001ffe:	4b51      	ldr	r3, [pc, #324]	; (8002144 <HAL_I2C_Master_Transmit+0x1e0>)
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 faee 	bl	80025e8 <I2C_TransferConfig>
 800200c:	e06c      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	b2da      	uxtb	r2, r3
 800201e:	8979      	ldrh	r1, [r7, #10]
 8002020:	4b48      	ldr	r3, [pc, #288]	; (8002144 <HAL_I2C_Master_Transmit+0x1e0>)
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fadd 	bl	80025e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800202e:	e05b      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	6a39      	ldr	r1, [r7, #32]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f9f5 	bl	8002424 <I2C_WaitOnTXISFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e07b      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d034      	beq.n	80020e8 <HAL_I2C_Master_Transmit+0x184>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	2b00      	cmp	r3, #0
 8002084:	d130      	bne.n	80020e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	2200      	movs	r2, #0
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f987 	bl	80023a4 <I2C_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e04d      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d90e      	bls.n	80020c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	22ff      	movs	r2, #255	; 0xff
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	8979      	ldrh	r1, [r7, #10]
 80020b8:	2300      	movs	r3, #0
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fa91 	bl	80025e8 <I2C_TransferConfig>
 80020c6:	e00f      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	8979      	ldrh	r1, [r7, #10]
 80020da:	2300      	movs	r3, #0
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fa80 	bl	80025e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d19e      	bne.n	8002030 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	6a39      	ldr	r1, [r7, #32]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f9d4 	bl	80024a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e01a      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2220      	movs	r2, #32
 800210c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_I2C_Master_Transmit+0x1e4>)
 800211a:	400b      	ands	r3, r1
 800211c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800213a:	2302      	movs	r3, #2
  }
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	80002000 	.word	0x80002000
 8002148:	fe00e800 	.word	0xfe00e800

0800214c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	460b      	mov	r3, r1
 800215a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b20      	cmp	r3, #32
 800216a:	f040 80ef 	bne.w	800234c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800217c:	d101      	bne.n	8002182 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800217e:	2302      	movs	r3, #2
 8002180:	e0e5      	b.n	800234e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_I2C_IsDeviceReady+0x44>
 800218c:	2302      	movs	r3, #2
 800218e:	e0de      	b.n	800234e <HAL_I2C_IsDeviceReady+0x202>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_I2C_IsDeviceReady+0x6e>
 80021ae:	897b      	ldrh	r3, [r7, #10]
 80021b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021b4:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_I2C_IsDeviceReady+0x20c>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	e004      	b.n	80021c4 <HAL_I2C_IsDeviceReady+0x78>
 80021ba:	897b      	ldrh	r3, [r7, #10]
 80021bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80021ca:	f7ff fadd 	bl	8001788 <HAL_GetTick>
 80021ce:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	2b20      	cmp	r3, #32
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	bf0c      	ite	eq
 80021f4:	2301      	moveq	r3, #1
 80021f6:	2300      	movne	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80021fc:	e034      	b.n	8002268 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d01a      	beq.n	800223c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002206:	f7ff fabf 	bl	8001788 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d302      	bcc.n	800221c <HAL_I2C_IsDeviceReady+0xd0>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10f      	bne.n	800223c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e088      	b.n	800234e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b20      	cmp	r3, #32
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b10      	cmp	r3, #16
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002268:	7ffb      	ldrb	r3, [r7, #31]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <HAL_I2C_IsDeviceReady+0x128>
 800226e:	7fbb      	ldrb	r3, [r7, #30]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0c4      	beq.n	80021fe <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b10      	cmp	r3, #16
 8002280:	d01a      	beq.n	80022b8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	2120      	movs	r1, #32
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f889 	bl	80023a4 <I2C_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e058      	b.n	800234e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2220      	movs	r2, #32
 80022a2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e04a      	b.n	800234e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	2120      	movs	r1, #32
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f86e 	bl	80023a4 <I2C_WaitOnFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e03d      	b.n	800234e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2210      	movs	r2, #16
 80022d8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2220      	movs	r2, #32
 80022e0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d118      	bne.n	800231c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022f8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2200      	movs	r2, #0
 8002302:	2120      	movs	r1, #32
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f84d 	bl	80023a4 <I2C_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e01c      	b.n	800234e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2220      	movs	r2, #32
 800231a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3301      	adds	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	f63f af3d 	bhi.w	80021a6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f043 0220 	orr.w	r2, r3, #32
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	02002000 	.word	0x02002000

0800235c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b02      	cmp	r3, #2
 8002370:	d103      	bne.n	800237a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d007      	beq.n	8002398 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	619a      	str	r2, [r3, #24]
  }
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023b4:	e022      	b.n	80023fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d01e      	beq.n	80023fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023be:	f7ff f9e3 	bl	8001788 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d302      	bcc.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d113      	bne.n	80023fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e00f      	b.n	800241c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4013      	ands	r3, r2
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	429a      	cmp	r2, r3
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	429a      	cmp	r2, r3
 8002418:	d0cd      	beq.n	80023b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002430:	e02c      	b.n	800248c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f870 	bl	800251c <I2C_IsAcknowledgeFailed>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e02a      	b.n	800249c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d01e      	beq.n	800248c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244e:	f7ff f99b 	bl	8001788 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	429a      	cmp	r2, r3
 800245c:	d302      	bcc.n	8002464 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d113      	bne.n	800248c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f043 0220 	orr.w	r2, r3, #32
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e007      	b.n	800249c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b02      	cmp	r3, #2
 8002498:	d1cb      	bne.n	8002432 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b0:	e028      	b.n	8002504 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f830 	bl	800251c <I2C_IsAcknowledgeFailed>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e026      	b.n	8002514 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c6:	f7ff f95f 	bl	8001788 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d302      	bcc.n	80024dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d113      	bne.n	8002504 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e007      	b.n	8002514 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b20      	cmp	r3, #32
 8002510:	d1cf      	bne.n	80024b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b10      	cmp	r3, #16
 8002534:	d151      	bne.n	80025da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002536:	e022      	b.n	800257e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253e:	d01e      	beq.n	800257e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002540:	f7ff f922 	bl	8001788 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	429a      	cmp	r2, r3
 800254e:	d302      	bcc.n	8002556 <I2C_IsAcknowledgeFailed+0x3a>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d113      	bne.n	800257e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f043 0220 	orr.w	r2, r3, #32
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e02e      	b.n	80025dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b20      	cmp	r3, #32
 800258a:	d1d5      	bne.n	8002538 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2210      	movs	r2, #16
 8002592:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2220      	movs	r2, #32
 800259a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7ff fedd 	bl	800235c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <I2C_IsAcknowledgeFailed+0xc8>)
 80025ae:	400b      	ands	r3, r1
 80025b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f043 0204 	orr.w	r2, r3, #4
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	fe00e800 	.word	0xfe00e800

080025e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	4613      	mov	r3, r2
 80025f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	0d5b      	lsrs	r3, r3, #21
 8002604:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <I2C_TransferConfig+0x58>)
 800260a:	430b      	orrs	r3, r1
 800260c:	43db      	mvns	r3, r3
 800260e:	ea02 0103 	and.w	r1, r2, r3
 8002612:	897b      	ldrh	r3, [r7, #10]
 8002614:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002618:	7a7b      	ldrb	r3, [r7, #9]
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	431a      	orrs	r2, r3
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	431a      	orrs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	03ff63ff 	.word	0x03ff63ff

08002644 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b20      	cmp	r3, #32
 8002658:	d138      	bne.n	80026cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002664:	2302      	movs	r3, #2
 8002666:	e032      	b.n	80026ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002696:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6819      	ldr	r1, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d139      	bne.n	8002764 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e033      	b.n	8002766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2224      	movs	r2, #36	; 0x24
 800270a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800272c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800277c:	4b29      	ldr	r3, [pc, #164]	; (8002824 <HAL_PWREx_ConfigSupply+0xb0>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	2b06      	cmp	r3, #6
 8002786:	d00a      	beq.n	800279e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002788:	4b26      	ldr	r3, [pc, #152]	; (8002824 <HAL_PWREx_ConfigSupply+0xb0>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	429a      	cmp	r2, r3
 8002794:	d001      	beq.n	800279a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e040      	b.n	800281c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e03e      	b.n	800281c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800279e:	4b21      	ldr	r3, [pc, #132]	; (8002824 <HAL_PWREx_ConfigSupply+0xb0>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80027a6:	491f      	ldr	r1, [pc, #124]	; (8002824 <HAL_PWREx_ConfigSupply+0xb0>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027ae:	f7fe ffeb 	bl	8001788 <HAL_GetTick>
 80027b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027b4:	e009      	b.n	80027ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027b6:	f7fe ffe7 	bl	8001788 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c4:	d901      	bls.n	80027ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e028      	b.n	800281c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_PWREx_ConfigSupply+0xb0>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d6:	d1ee      	bne.n	80027b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b1e      	cmp	r3, #30
 80027dc:	d008      	beq.n	80027f0 <HAL_PWREx_ConfigSupply+0x7c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b2e      	cmp	r3, #46	; 0x2e
 80027e2:	d005      	beq.n	80027f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b1d      	cmp	r3, #29
 80027e8:	d002      	beq.n	80027f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b2d      	cmp	r3, #45	; 0x2d
 80027ee:	d114      	bne.n	800281a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80027f0:	f7fe ffca 	bl	8001788 <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027f6:	e009      	b.n	800280c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027f8:	f7fe ffc6 	bl	8001788 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002806:	d901      	bls.n	800280c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e007      	b.n	800281c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_PWREx_ConfigSupply+0xb0>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002818:	d1ee      	bne.n	80027f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	58024800 	.word	0x58024800

08002828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	; 0x30
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e3ff      	b.n	800303a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8087 	beq.w	8002956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002848:	4b99      	ldr	r3, [pc, #612]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002852:	4b97      	ldr	r3, [pc, #604]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	2b10      	cmp	r3, #16
 800285c:	d007      	beq.n	800286e <HAL_RCC_OscConfig+0x46>
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	2b18      	cmp	r3, #24
 8002862:	d110      	bne.n	8002886 <HAL_RCC_OscConfig+0x5e>
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d10b      	bne.n	8002886 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286e:	4b90      	ldr	r3, [pc, #576]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d06c      	beq.n	8002954 <HAL_RCC_OscConfig+0x12c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d168      	bne.n	8002954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e3d9      	b.n	800303a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x76>
 8002890:	4b87      	ldr	r3, [pc, #540]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a86      	ldr	r2, [pc, #536]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e02e      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x98>
 80028a6:	4b82      	ldr	r3, [pc, #520]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a81      	ldr	r2, [pc, #516]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b7f      	ldr	r3, [pc, #508]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7e      	ldr	r2, [pc, #504]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e01d      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0xbc>
 80028ca:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a78      	ldr	r2, [pc, #480]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b76      	ldr	r3, [pc, #472]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a75      	ldr	r2, [pc, #468]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 80028e4:	4b72      	ldr	r3, [pc, #456]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a71      	ldr	r2, [pc, #452]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b6f      	ldr	r3, [pc, #444]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6e      	ldr	r2, [pc, #440]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe ff40 	bl	8001788 <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe ff3c 	bl	8001788 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e38d      	b.n	800303a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800291e:	4b64      	ldr	r3, [pc, #400]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xe4>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe ff2c 	bl	8001788 <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe ff28 	bl	8001788 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e379      	b.n	800303a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002946:	4b5a      	ldr	r3, [pc, #360]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x10c>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80ae 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002964:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800296c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800296e:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_RCC_OscConfig+0x162>
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	2b18      	cmp	r3, #24
 800297e:	d13a      	bne.n	80029f6 <HAL_RCC_OscConfig+0x1ce>
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d135      	bne.n	80029f6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800298a:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x17a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e34b      	b.n	800303a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a2:	f7fe ff21 	bl	80017e8 <HAL_GetREVID>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d817      	bhi.n	80029e0 <HAL_RCC_OscConfig+0x1b8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b40      	cmp	r3, #64	; 0x40
 80029b6:	d108      	bne.n	80029ca <HAL_RCC_OscConfig+0x1a2>
 80029b8:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029c0:	4a3b      	ldr	r2, [pc, #236]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c8:	e07a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	031b      	lsls	r3, r3, #12
 80029d8:	4935      	ldr	r1, [pc, #212]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029de:	e06f      	b.n	8002ac0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	4930      	ldr	r1, [pc, #192]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f4:	e064      	b.n	8002ac0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d045      	beq.n	8002a8a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029fe:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 0219 	bic.w	r2, r3, #25
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	4929      	ldr	r1, [pc, #164]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe feba 	bl	8001788 <HAL_GetTick>
 8002a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a18:	f7fe feb6 	bl	8001788 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e307      	b.n	800303a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a2a:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	f7fe fed7 	bl	80017e8 <HAL_GetREVID>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d817      	bhi.n	8002a74 <HAL_RCC_OscConfig+0x24c>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b40      	cmp	r3, #64	; 0x40
 8002a4a:	d108      	bne.n	8002a5e <HAL_RCC_OscConfig+0x236>
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a54:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5a:	6053      	str	r3, [r2, #4]
 8002a5c:	e030      	b.n	8002ac0 <HAL_RCC_OscConfig+0x298>
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	031b      	lsls	r3, r3, #12
 8002a6c:	4910      	ldr	r1, [pc, #64]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
 8002a72:	e025      	b.n	8002ac0 <HAL_RCC_OscConfig+0x298>
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	490b      	ldr	r1, [pc, #44]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
 8002a88:	e01a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <HAL_RCC_OscConfig+0x288>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fe77 	bl	8001788 <HAL_GetTick>
 8002a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fe73 	bl	8001788 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d903      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e2c4      	b.n	800303a <HAL_RCC_OscConfig+0x812>
 8002ab0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ab4:	4ba4      	ldr	r3, [pc, #656]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ee      	bne.n	8002a9e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a9 	beq.w	8002c20 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ace:	4b9e      	ldr	r3, [pc, #632]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ad6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ad8:	4b9b      	ldr	r3, [pc, #620]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d007      	beq.n	8002af4 <HAL_RCC_OscConfig+0x2cc>
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b18      	cmp	r3, #24
 8002ae8:	d13a      	bne.n	8002b60 <HAL_RCC_OscConfig+0x338>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d135      	bne.n	8002b60 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002af4:	4b94      	ldr	r3, [pc, #592]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_OscConfig+0x2e4>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e296      	b.n	800303a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b0c:	f7fe fe6c 	bl	80017e8 <HAL_GetREVID>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d817      	bhi.n	8002b4a <HAL_RCC_OscConfig+0x322>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d108      	bne.n	8002b34 <HAL_RCC_OscConfig+0x30c>
 8002b22:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b2a:	4a87      	ldr	r2, [pc, #540]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b32:	e075      	b.n	8002c20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b34:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	069b      	lsls	r3, r3, #26
 8002b42:	4981      	ldr	r1, [pc, #516]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b48:	e06a      	b.n	8002c20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b4a:	4b7f      	ldr	r3, [pc, #508]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	061b      	lsls	r3, r3, #24
 8002b58:	497b      	ldr	r1, [pc, #492]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b5e:	e05f      	b.n	8002c20 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d042      	beq.n	8002bee <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b68:	4b77      	ldr	r3, [pc, #476]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a76      	ldr	r2, [pc, #472]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe fe08 	bl	8001788 <HAL_GetTick>
 8002b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b7c:	f7fe fe04 	bl	8001788 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e255      	b.n	800303a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b8e:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b9a:	f7fe fe25 	bl	80017e8 <HAL_GetREVID>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d817      	bhi.n	8002bd8 <HAL_RCC_OscConfig+0x3b0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d108      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x39a>
 8002bb0:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bb8:	4a63      	ldr	r2, [pc, #396]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bbe:	6053      	str	r3, [r2, #4]
 8002bc0:	e02e      	b.n	8002c20 <HAL_RCC_OscConfig+0x3f8>
 8002bc2:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	069b      	lsls	r3, r3, #26
 8002bd0:	495d      	ldr	r1, [pc, #372]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
 8002bd6:	e023      	b.n	8002c20 <HAL_RCC_OscConfig+0x3f8>
 8002bd8:	4b5b      	ldr	r3, [pc, #364]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	4958      	ldr	r1, [pc, #352]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60cb      	str	r3, [r1, #12]
 8002bec:	e018      	b.n	8002c20 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bee:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a55      	ldr	r2, [pc, #340]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fdc5 	bl	8001788 <HAL_GetTick>
 8002bfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c02:	f7fe fdc1 	bl	8001788 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e212      	b.n	800303a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c14:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d036      	beq.n	8002c9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d019      	beq.n	8002c68 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c34:	4b44      	ldr	r3, [pc, #272]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c38:	4a43      	ldr	r2, [pc, #268]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fe fda2 	bl	8001788 <HAL_GetTick>
 8002c44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c48:	f7fe fd9e 	bl	8001788 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1ef      	b.n	800303a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c5a:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x420>
 8002c66:	e018      	b.n	8002c9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c68:	4b37      	ldr	r3, [pc, #220]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6c:	4a36      	ldr	r2, [pc, #216]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fd88 	bl	8001788 <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fd84 	bl	8001788 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1d5      	b.n	800303a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c8e:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d036      	beq.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d019      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fd65 	bl	8001788 <HAL_GetTick>
 8002cbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cc2:	f7fe fd61 	bl	8001788 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e1b2      	b.n	800303a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x49a>
 8002ce0:	e018      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ce2:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cee:	f7fe fd4b 	bl	8001788 <HAL_GetTick>
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cf6:	f7fe fd47 	bl	8001788 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e198      	b.n	800303a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_RCC_OscConfig+0x520>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 8085 	beq.w	8002e2c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_RCC_OscConfig+0x524>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <HAL_RCC_OscConfig+0x524>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d2e:	f7fe fd2b 	bl	8001788 <HAL_GetTick>
 8002d32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d34:	e00c      	b.n	8002d50 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7fe fd27 	bl	8001788 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b64      	cmp	r3, #100	; 0x64
 8002d42:	d905      	bls.n	8002d50 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e178      	b.n	800303a <HAL_RCC_OscConfig+0x812>
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d50:	4b96      	ldr	r3, [pc, #600]	; (8002fac <HAL_RCC_OscConfig+0x784>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ec      	beq.n	8002d36 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x54a>
 8002d64:	4b92      	ldr	r3, [pc, #584]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4a91      	ldr	r2, [pc, #580]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d70:	e02d      	b.n	8002dce <HAL_RCC_OscConfig+0x5a6>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x56c>
 8002d7a:	4b8d      	ldr	r3, [pc, #564]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a8c      	ldr	r2, [pc, #560]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
 8002d86:	4b8a      	ldr	r3, [pc, #552]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4a89      	ldr	r2, [pc, #548]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
 8002d92:	e01c      	b.n	8002dce <HAL_RCC_OscConfig+0x5a6>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d10c      	bne.n	8002db6 <HAL_RCC_OscConfig+0x58e>
 8002d9c:	4b84      	ldr	r3, [pc, #528]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a83      	ldr	r2, [pc, #524]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
 8002da8:	4b81      	ldr	r3, [pc, #516]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4a80      	ldr	r2, [pc, #512]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70
 8002db4:	e00b      	b.n	8002dce <HAL_RCC_OscConfig+0x5a6>
 8002db6:	4b7e      	ldr	r3, [pc, #504]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a7d      	ldr	r2, [pc, #500]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc2:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a7a      	ldr	r2, [pc, #488]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002dc8:	f023 0304 	bic.w	r3, r3, #4
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d015      	beq.n	8002e02 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fcd7 	bl	8001788 <HAL_GetTick>
 8002dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dde:	f7fe fcd3 	bl	8001788 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e122      	b.n	800303a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002df4:	4b6e      	ldr	r3, [pc, #440]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ee      	beq.n	8002dde <HAL_RCC_OscConfig+0x5b6>
 8002e00:	e014      	b.n	8002e2c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	f7fe fcc1 	bl	8001788 <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7fe fcbd 	bl	8001788 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e10c      	b.n	800303a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e20:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ee      	bne.n	8002e0a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8101 	beq.w	8003038 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e36:	4b5e      	ldr	r3, [pc, #376]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e3e:	2b18      	cmp	r3, #24
 8002e40:	f000 80bc 	beq.w	8002fbc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	f040 8095 	bne.w	8002f78 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4e:	4b58      	ldr	r3, [pc, #352]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a57      	ldr	r2, [pc, #348]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fc95 	bl	8001788 <HAL_GetTick>
 8002e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fe fc91 	bl	8001788 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0e2      	b.n	800303a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e74:	4b4e      	ldr	r3, [pc, #312]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e80:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e84:	4b4b      	ldr	r3, [pc, #300]	; (8002fb4 <HAL_RCC_OscConfig+0x78c>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e90:	0112      	lsls	r2, r2, #4
 8002e92:	430a      	orrs	r2, r1
 8002e94:	4946      	ldr	r1, [pc, #280]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	628b      	str	r3, [r1, #40]	; 0x28
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	025b      	lsls	r3, r3, #9
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002eca:	4939      	ldr	r1, [pc, #228]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ed0:	4b37      	ldr	r3, [pc, #220]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	4a36      	ldr	r2, [pc, #216]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002edc:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <HAL_RCC_OscConfig+0x790>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ee8:	00d2      	lsls	r2, r2, #3
 8002eea:	4931      	ldr	r1, [pc, #196]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ef0:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	f023 020c 	bic.w	r2, r3, #12
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	492c      	ldr	r1, [pc, #176]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f02:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	f023 0202 	bic.w	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	4928      	ldr	r1, [pc, #160]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f14:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	4a22      	ldr	r2, [pc, #136]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fc1a 	bl	8001788 <HAL_GetTick>
 8002f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fc16 	bl	8001788 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e067      	b.n	800303a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x730>
 8002f76:	e05f      	b.n	8003038 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe fc00 	bl	8001788 <HAL_GetTick>
 8002f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe fbfc 	bl	8001788 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e04d      	b.n	800303a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f9e:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HAL_RCC_OscConfig+0x788>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x764>
 8002faa:	e045      	b.n	8003038 <HAL_RCC_OscConfig+0x810>
 8002fac:	58024800 	.word	0x58024800
 8002fb0:	58024400 	.word	0x58024400
 8002fb4:	fffffc0c 	.word	0xfffffc0c
 8002fb8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fbc:	4b21      	ldr	r3, [pc, #132]	; (8003044 <HAL_RCC_OscConfig+0x81c>)
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fc2:	4b20      	ldr	r3, [pc, #128]	; (8003044 <HAL_RCC_OscConfig+0x81c>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d031      	beq.n	8003034 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f003 0203 	and.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d12a      	bne.n	8003034 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d122      	bne.n	8003034 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d11a      	bne.n	8003034 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	0a5b      	lsrs	r3, r3, #9
 8003002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d111      	bne.n	8003034 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	0c1b      	lsrs	r3, r3, #16
 8003014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d108      	bne.n	8003034 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	0e1b      	lsrs	r3, r3, #24
 8003026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3730      	adds	r7, #48	; 0x30
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	58024400 	.word	0x58024400

08003048 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e19c      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b8a      	ldr	r3, [pc, #552]	; (8003288 <HAL_RCC_ClockConfig+0x240>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d910      	bls.n	800308c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b87      	ldr	r3, [pc, #540]	; (8003288 <HAL_RCC_ClockConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 020f 	bic.w	r2, r3, #15
 8003072:	4985      	ldr	r1, [pc, #532]	; (8003288 <HAL_RCC_ClockConfig+0x240>)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b83      	ldr	r3, [pc, #524]	; (8003288 <HAL_RCC_ClockConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e184      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d010      	beq.n	80030ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	4b7b      	ldr	r3, [pc, #492]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d908      	bls.n	80030ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030a8:	4b78      	ldr	r3, [pc, #480]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	4975      	ldr	r1, [pc, #468]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d010      	beq.n	80030e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	4b70      	ldr	r3, [pc, #448]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d908      	bls.n	80030e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030d6:	4b6d      	ldr	r3, [pc, #436]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	496a      	ldr	r1, [pc, #424]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d010      	beq.n	8003116 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	4b64      	ldr	r3, [pc, #400]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003100:	429a      	cmp	r2, r3
 8003102:	d908      	bls.n	8003116 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003104:	4b61      	ldr	r3, [pc, #388]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	495e      	ldr	r1, [pc, #376]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 8003112:	4313      	orrs	r3, r2
 8003114:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d010      	beq.n	8003144 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	4b59      	ldr	r3, [pc, #356]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800312e:	429a      	cmp	r2, r3
 8003130:	d908      	bls.n	8003144 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003132:	4b56      	ldr	r3, [pc, #344]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4953      	ldr	r1, [pc, #332]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 8003140:	4313      	orrs	r3, r2
 8003142:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d010      	beq.n	8003172 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	4b4d      	ldr	r3, [pc, #308]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	429a      	cmp	r2, r3
 800315e:	d908      	bls.n	8003172 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003160:	4b4a      	ldr	r3, [pc, #296]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f023 020f 	bic.w	r2, r3, #15
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4947      	ldr	r1, [pc, #284]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 800316e:	4313      	orrs	r3, r2
 8003170:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d055      	beq.n	800322a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800317e:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4940      	ldr	r1, [pc, #256]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 800318c:	4313      	orrs	r3, r2
 800318e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003198:	4b3c      	ldr	r3, [pc, #240]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d121      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0f6      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031b0:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d115      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0ea      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031c8:	4b30      	ldr	r3, [pc, #192]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d109      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0de      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0d6      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f023 0207 	bic.w	r2, r3, #7
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4925      	ldr	r1, [pc, #148]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7fe fac5 	bl	8001788 <HAL_GetTick>
 80031fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003200:	e00a      	b.n	8003218 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003202:	f7fe fac1 	bl	8001788 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e0be      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003218:	4b1c      	ldr	r3, [pc, #112]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	429a      	cmp	r2, r3
 8003228:	d1eb      	bne.n	8003202 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	429a      	cmp	r2, r3
 8003244:	d208      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f023 020f 	bic.w	r2, r3, #15
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	490e      	ldr	r1, [pc, #56]	; (800328c <HAL_RCC_ClockConfig+0x244>)
 8003254:	4313      	orrs	r3, r2
 8003256:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_ClockConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d214      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <HAL_RCC_ClockConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 020f 	bic.w	r2, r3, #15
 800326e:	4906      	ldr	r1, [pc, #24]	; (8003288 <HAL_RCC_ClockConfig+0x240>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b04      	ldr	r3, [pc, #16]	; (8003288 <HAL_RCC_ClockConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e086      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
 8003288:	52002000 	.word	0x52002000
 800328c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d010      	beq.n	80032be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d208      	bcs.n	80032be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032ac:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	4939      	ldr	r1, [pc, #228]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d010      	beq.n	80032ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	4b34      	ldr	r3, [pc, #208]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d208      	bcs.n	80032ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032da:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	492e      	ldr	r1, [pc, #184]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d010      	beq.n	800331a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003304:	429a      	cmp	r2, r3
 8003306:	d208      	bcs.n	800331a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003308:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	4922      	ldr	r1, [pc, #136]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 8003316:	4313      	orrs	r3, r2
 8003318:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003332:	429a      	cmp	r2, r3
 8003334:	d208      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	4917      	ldr	r1, [pc, #92]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 8003344:	4313      	orrs	r3, r2
 8003346:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003348:	f000 f834 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	4912      	ldr	r1, [pc, #72]	; (80033a4 <HAL_RCC_ClockConfig+0x35c>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
 8003364:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <HAL_RCC_ClockConfig+0x358>)
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	4a0d      	ldr	r2, [pc, #52]	; (80033a4 <HAL_RCC_ClockConfig+0x35c>)
 8003370:	5cd3      	ldrb	r3, [r2, r3]
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
 800337c:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <HAL_RCC_ClockConfig+0x360>)
 800337e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003380:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <HAL_RCC_ClockConfig+0x364>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003386:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <HAL_RCC_ClockConfig+0x368>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe f9b2 	bl	80016f4 <HAL_InitTick>
 8003390:	4603      	mov	r3, r0
 8003392:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	58024400 	.word	0x58024400
 80033a4:	080064f0 	.word	0x080064f0
 80033a8:	24000004 	.word	0x24000004
 80033ac:	24000000 	.word	0x24000000
 80033b0:	24000010 	.word	0x24000010

080033b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ba:	4bb3      	ldr	r3, [pc, #716]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033c2:	2b18      	cmp	r3, #24
 80033c4:	f200 8155 	bhi.w	8003672 <HAL_RCC_GetSysClockFreq+0x2be>
 80033c8:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	08003435 	.word	0x08003435
 80033d4:	08003673 	.word	0x08003673
 80033d8:	08003673 	.word	0x08003673
 80033dc:	08003673 	.word	0x08003673
 80033e0:	08003673 	.word	0x08003673
 80033e4:	08003673 	.word	0x08003673
 80033e8:	08003673 	.word	0x08003673
 80033ec:	08003673 	.word	0x08003673
 80033f0:	0800345b 	.word	0x0800345b
 80033f4:	08003673 	.word	0x08003673
 80033f8:	08003673 	.word	0x08003673
 80033fc:	08003673 	.word	0x08003673
 8003400:	08003673 	.word	0x08003673
 8003404:	08003673 	.word	0x08003673
 8003408:	08003673 	.word	0x08003673
 800340c:	08003673 	.word	0x08003673
 8003410:	08003461 	.word	0x08003461
 8003414:	08003673 	.word	0x08003673
 8003418:	08003673 	.word	0x08003673
 800341c:	08003673 	.word	0x08003673
 8003420:	08003673 	.word	0x08003673
 8003424:	08003673 	.word	0x08003673
 8003428:	08003673 	.word	0x08003673
 800342c:	08003673 	.word	0x08003673
 8003430:	08003467 	.word	0x08003467
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003434:	4b94      	ldr	r3, [pc, #592]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003440:	4b91      	ldr	r3, [pc, #580]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	08db      	lsrs	r3, r3, #3
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	4a90      	ldr	r2, [pc, #576]	; (800368c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003452:	e111      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003454:	4b8d      	ldr	r3, [pc, #564]	; (800368c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003456:	61bb      	str	r3, [r7, #24]
    break;
 8003458:	e10e      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800345a:	4b8d      	ldr	r3, [pc, #564]	; (8003690 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800345c:	61bb      	str	r3, [r7, #24]
    break;
 800345e:	e10b      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003460:	4b8c      	ldr	r3, [pc, #560]	; (8003694 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003462:	61bb      	str	r3, [r7, #24]
    break;
 8003464:	e108      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003466:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003470:	4b85      	ldr	r3, [pc, #532]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800347a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800347c:	4b82      	ldr	r3, [pc, #520]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003486:	4b80      	ldr	r3, [pc, #512]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348a:	08db      	lsrs	r3, r3, #3
 800348c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80e1 	beq.w	800366c <HAL_RCC_GetSysClockFreq+0x2b8>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	f000 8083 	beq.w	80035b8 <HAL_RCC_GetSysClockFreq+0x204>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	f200 80a1 	bhi.w	80035fc <HAL_RCC_GetSysClockFreq+0x248>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x114>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d056      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x1c0>
 80034c6:	e099      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034c8:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02d      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034d4:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	08db      	lsrs	r3, r3, #3
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	4a6b      	ldr	r2, [pc, #428]	; (800368c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
 80034e4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034fe:	4b62      	ldr	r3, [pc, #392]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800350e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003512:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003698 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800351a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800351e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800352e:	e087      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800369c <HAL_RCC_GetSysClockFreq+0x2e8>
 800353e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003542:	4b51      	ldr	r3, [pc, #324]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003552:	ed97 6a02 	vldr	s12, [r7, #8]
 8003556:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800355a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800356a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003572:	e065      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80036a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003586:	4b40      	ldr	r3, [pc, #256]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003596:	ed97 6a02 	vldr	s12, [r7, #8]
 800359a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800359e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035b6:	e043      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80036a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80035c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ca:	4b2f      	ldr	r3, [pc, #188]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035da:	ed97 6a02 	vldr	s12, [r7, #8]
 80035de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003698 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035fa:	e021      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	eddf 6a26 	vldr	s13, [pc, #152]	; 80036a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800360a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360e:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003622:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003698 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800363e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	0a5b      	lsrs	r3, r3, #9
 8003646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800364a:	3301      	adds	r3, #1
 800364c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	ee07 3a90 	vmov	s15, r3
 8003654:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003658:	edd7 6a07 	vldr	s13, [r7, #28]
 800365c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003664:	ee17 3a90 	vmov	r3, s15
 8003668:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800366a:	e005      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
    break;
 8003670:	e002      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003674:	61bb      	str	r3, [r7, #24]
    break;
 8003676:	bf00      	nop
  }

  return sysclockfreq;
 8003678:	69bb      	ldr	r3, [r7, #24]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	58024400 	.word	0x58024400
 800368c:	03d09000 	.word	0x03d09000
 8003690:	003d0900 	.word	0x003d0900
 8003694:	017d7840 	.word	0x017d7840
 8003698:	46000000 	.word	0x46000000
 800369c:	4c742400 	.word	0x4c742400
 80036a0:	4a742400 	.word	0x4a742400
 80036a4:	4bbebc20 	.word	0x4bbebc20

080036a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036ae:	f7ff fe81 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 80036b2:	4602      	mov	r2, r0
 80036b4:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	490f      	ldr	r1, [pc, #60]	; (80036fc <HAL_RCC_GetHCLKFreq+0x54>)
 80036c0:	5ccb      	ldrb	r3, [r1, r3]
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	4a09      	ldr	r2, [pc, #36]	; (80036fc <HAL_RCC_GetHCLKFreq+0x54>)
 80036d6:	5cd3      	ldrb	r3, [r2, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	fa22 f303 	lsr.w	r3, r2, r3
 80036e2:	4a07      	ldr	r2, [pc, #28]	; (8003700 <HAL_RCC_GetHCLKFreq+0x58>)
 80036e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036e6:	4a07      	ldr	r2, [pc, #28]	; (8003704 <HAL_RCC_GetHCLKFreq+0x5c>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <HAL_RCC_GetHCLKFreq+0x58>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	58024400 	.word	0x58024400
 80036fc:	080064f0 	.word	0x080064f0
 8003700:	24000004 	.word	0x24000004
 8003704:	24000000 	.word	0x24000000

08003708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800370c:	f7ff ffcc 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	58024400 	.word	0x58024400
 8003730:	080064f0 	.word	0x080064f0

08003734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003738:	f7ff ffb6 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	0a1b      	lsrs	r3, r3, #8
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4904      	ldr	r1, [pc, #16]	; (800375c <HAL_RCC_GetPCLK2Freq+0x28>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003754:	4618      	mov	r0, r3
 8003756:	bd80      	pop	{r7, pc}
 8003758:	58024400 	.word	0x58024400
 800375c:	080064f0 	.word	0x080064f0

08003760 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003768:	2300      	movs	r3, #0
 800376a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800376c:	2300      	movs	r3, #0
 800376e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d03f      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003780:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003784:	d02a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003786:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800378a:	d824      	bhi.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800378c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003790:	d018      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003796:	d81e      	bhi.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800379c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a0:	d007      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037a2:	e018      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a4:	4bab      	ldr	r3, [pc, #684]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	4aaa      	ldr	r2, [pc, #680]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037b0:	e015      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2102      	movs	r1, #2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 f9ff 	bl	8004bbc <RCCEx_PLL2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037c2:	e00c      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3324      	adds	r3, #36	; 0x24
 80037c8:	2102      	movs	r1, #2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 faa8 	bl	8004d20 <RCCEx_PLL3_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037d4:	e003      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
      break;
 80037da:	e000      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037e4:	4b9b      	ldr	r3, [pc, #620]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f0:	4998      	ldr	r1, [pc, #608]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	650b      	str	r3, [r1, #80]	; 0x50
 80037f6:	e001      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d03d      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	2b04      	cmp	r3, #4
 800380e:	d826      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	0800382d 	.word	0x0800382d
 800381c:	0800383b 	.word	0x0800383b
 8003820:	0800384d 	.word	0x0800384d
 8003824:	08003865 	.word	0x08003865
 8003828:	08003865 	.word	0x08003865
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382c:	4b89      	ldr	r3, [pc, #548]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	4a88      	ldr	r2, [pc, #544]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003838:	e015      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f001 f9bb 	bl	8004bbc <RCCEx_PLL2_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800384a:	e00c      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3324      	adds	r3, #36	; 0x24
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f001 fa64 	bl	8004d20 <RCCEx_PLL3_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800385c:	e003      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	75fb      	strb	r3, [r7, #23]
      break;
 8003862:	e000      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800386c:	4b79      	ldr	r3, [pc, #484]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800386e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003870:	f023 0207 	bic.w	r2, r3, #7
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	4976      	ldr	r1, [pc, #472]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	650b      	str	r3, [r1, #80]	; 0x50
 800387e:	e001      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388c:	2b00      	cmp	r3, #0
 800388e:	d042      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003898:	d02b      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800389a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389e:	d825      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80038a0:	2bc0      	cmp	r3, #192	; 0xc0
 80038a2:	d028      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80038a4:	2bc0      	cmp	r3, #192	; 0xc0
 80038a6:	d821      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d016      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80038ac:	2b80      	cmp	r3, #128	; 0x80
 80038ae:	d81d      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d007      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80038b8:	e018      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ba:	4b66      	ldr	r3, [pc, #408]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	4a65      	ldr	r2, [pc, #404]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038c6:	e017      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 f974 	bl	8004bbc <RCCEx_PLL2_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038d8:	e00e      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3324      	adds	r3, #36	; 0x24
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 fa1d 	bl	8004d20 <RCCEx_PLL3_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038ea:	e005      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	75fb      	strb	r3, [r7, #23]
      break;
 80038f0:	e002      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038fe:	4b55      	ldr	r3, [pc, #340]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003902:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	4952      	ldr	r1, [pc, #328]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	650b      	str	r3, [r1, #80]	; 0x50
 8003910:	e001      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391e:	2b00      	cmp	r3, #0
 8003920:	d049      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003928:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800392c:	d030      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800392e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003932:	d82a      	bhi.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003934:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003938:	d02c      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800393a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800393e:	d824      	bhi.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003944:	d018      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394a:	d81e      	bhi.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003950:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003954:	d007      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003956:	e018      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003958:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	4a3d      	ldr	r2, [pc, #244]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800395e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003962:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003964:	e017      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f001 f925 	bl	8004bbc <RCCEx_PLL2_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003976:	e00e      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3324      	adds	r3, #36	; 0x24
 800397c:	2100      	movs	r1, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f001 f9ce 	bl	8004d20 <RCCEx_PLL3_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003988:	e005      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]
      break;
 800398e:	e002      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800399c:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039aa:	492a      	ldr	r1, [pc, #168]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	658b      	str	r3, [r1, #88]	; 0x58
 80039b0:	e001      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d04c      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039cc:	d030      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80039ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039d2:	d82a      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039d8:	d02c      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80039da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039de:	d824      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039e4:	d018      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80039e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ea:	d81e      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80039f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f4:	d007      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80039f6:	e018      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a04:	e017      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 f8d5 	bl	8004bbc <RCCEx_PLL2_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a16:	e00e      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3324      	adds	r3, #36	; 0x24
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 f97e 	bl	8004d20 <RCCEx_PLL3_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a28:	e005      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003a30:	bf00      	nop
 8003a32:	e000      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10d      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a4a:	4902      	ldr	r1, [pc, #8]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	658b      	str	r3, [r1, #88]	; 0x58
 8003a50:	e004      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003a52:	bf00      	nop
 8003a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d032      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6c:	2b30      	cmp	r3, #48	; 0x30
 8003a6e:	d01c      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a70:	2b30      	cmp	r3, #48	; 0x30
 8003a72:	d817      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d00c      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d813      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d016      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d10f      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a84:	4bb1      	ldr	r3, [pc, #708]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	4ab0      	ldr	r2, [pc, #704]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a90:	e00e      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2102      	movs	r1, #2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 f88f 	bl	8004bbc <RCCEx_PLL2_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003aa2:	e005      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ab6:	4ba5      	ldr	r3, [pc, #660]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac2:	49a2      	ldr	r1, [pc, #648]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ac8:	e001      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d047      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae2:	d030      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae8:	d82a      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003aea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003aee:	d02c      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003af0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003af4:	d824      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afa:	d018      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b00:	d81e      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0a:	d007      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003b0c:	e018      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0e:	4b8f      	ldr	r3, [pc, #572]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	4a8e      	ldr	r2, [pc, #568]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b1a:	e017      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 f84a 	bl	8004bbc <RCCEx_PLL2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b2c:	e00e      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3324      	adds	r3, #36	; 0x24
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 f8f3 	bl	8004d20 <RCCEx_PLL3_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b3e:	e005      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	75fb      	strb	r3, [r7, #23]
      break;
 8003b44:	e002      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b52:	4b7e      	ldr	r3, [pc, #504]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b56:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5e:	497b      	ldr	r1, [pc, #492]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	650b      	str	r3, [r1, #80]	; 0x50
 8003b64:	e001      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d049      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b7e:	d02e      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b84:	d828      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b8a:	d02a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003b8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b90:	d822      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b96:	d026      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003b98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b9c:	d81c      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba2:	d010      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba8:	d816      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01d      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb2:	d111      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	2101      	movs	r1, #1
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fffe 	bl	8004bbc <RCCEx_PLL2_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bc4:	e012      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3324      	adds	r3, #36	; 0x24
 8003bca:	2101      	movs	r1, #1
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 f8a7 	bl	8004d20 <RCCEx_PLL3_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bd6:	e009      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
      break;
 8003bdc:	e006      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003bde:	bf00      	nop
 8003be0:	e004      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003be2:	bf00      	nop
 8003be4:	e002      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bf2:	4b56      	ldr	r3, [pc, #344]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bfe:	4953      	ldr	r1, [pc, #332]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	650b      	str	r3, [r1, #80]	; 0x50
 8003c04:	e001      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
 8003c08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d04b      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c20:	d02e      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c26:	d828      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d02a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c32:	d822      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c38:	d026      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003c3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c3e:	d81c      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c44:	d010      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4a:	d816      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01d      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c54:	d111      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 ffad 	bl	8004bbc <RCCEx_PLL2_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c66:	e012      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3324      	adds	r3, #36	; 0x24
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 f856 	bl	8004d20 <RCCEx_PLL3_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c78:	e009      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c7e:	e006      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c80:	bf00      	nop
 8003c82:	e004      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c84:	bf00      	nop
 8003c86:	e002      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c88:	bf00      	nop
 8003c8a:	e000      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c94:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ca2:	492a      	ldr	r1, [pc, #168]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	658b      	str	r3, [r1, #88]	; 0x58
 8003ca8:	e001      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d022      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc6:	d108      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 ff74 	bl	8004bbc <RCCEx_PLL2_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8003cd8:	e003      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8003ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d109      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003ce8:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf4:	4915      	ldr	r1, [pc, #84]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cfa:	e001      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d031      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d14:	d00e      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d1a:	d814      	bhi.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d017      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8003d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d24:	d10f      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d32:	e00e      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 ff3e 	bl	8004bbc <RCCEx_PLL2_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d44:	e005      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4a:	e002      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003d4c:	58024400 	.word	0x58024400
      break;
 8003d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d58:	4bbc      	ldr	r3, [pc, #752]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	49b9      	ldr	r1, [pc, #740]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	650b      	str	r3, [r1, #80]	; 0x50
 8003d6a:	e001      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d032      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d81b      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dc3 	.word	0x08003dc3
 8003d90:	08003d9d 	.word	0x08003d9d
 8003d94:	08003dab 	.word	0x08003dab
 8003d98:	08003dc3 	.word	0x08003dc3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4bab      	ldr	r3, [pc, #684]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	4aaa      	ldr	r2, [pc, #680]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003da8:	e00c      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2102      	movs	r1, #2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 ff03 	bl	8004bbc <RCCEx_PLL2_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dba:	e003      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8003dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dca:	4ba0      	ldr	r3, [pc, #640]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	499d      	ldr	r1, [pc, #628]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ddc:	e001      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8086 	beq.w	8003efc <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df0:	4b97      	ldr	r3, [pc, #604]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a96      	ldr	r2, [pc, #600]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dfc:	f7fd fcc4 	bl	8001788 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e02:	e009      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7fd fcc0 	bl	8001788 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d902      	bls.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	75fb      	strb	r3, [r7, #23]
        break;
 8003e16:	e005      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e18:	4b8d      	ldr	r3, [pc, #564]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ef      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d166      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e2a:	4b88      	ldr	r3, [pc, #544]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e34:	4053      	eors	r3, r2
 8003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d013      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e3e:	4b83      	ldr	r3, [pc, #524]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e48:	4b80      	ldr	r3, [pc, #512]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a7f      	ldr	r2, [pc, #508]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e54:	4b7d      	ldr	r3, [pc, #500]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a7c      	ldr	r2, [pc, #496]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e60:	4a7a      	ldr	r2, [pc, #488]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e70:	d115      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e72:	f7fd fc89 	bl	8001788 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e78:	e00b      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd fc85 	bl	8001788 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d902      	bls.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	75fb      	strb	r3, [r7, #23]
            break;
 8003e90:	e005      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e92:	4b6e      	ldr	r3, [pc, #440]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ed      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d126      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8003eb4:	4b65      	ldr	r3, [pc, #404]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ec2:	0919      	lsrs	r1, r3, #4
 8003ec4:	4b63      	ldr	r3, [pc, #396]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8003ec6:	400b      	ands	r3, r1
 8003ec8:	4960      	ldr	r1, [pc, #384]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	610b      	str	r3, [r1, #16]
 8003ece:	e005      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8003ed0:	4b5e      	ldr	r3, [pc, #376]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	4a5d      	ldr	r2, [pc, #372]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ed6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eda:	6113      	str	r3, [r2, #16]
 8003edc:	4b5b      	ldr	r3, [pc, #364]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eea:	4958      	ldr	r1, [pc, #352]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	670b      	str	r3, [r1, #112]	; 0x70
 8003ef0:	e004      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	75bb      	strb	r3, [r7, #22]
 8003ef6:	e001      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d07e      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f0c:	2b28      	cmp	r3, #40	; 0x28
 8003f0e:	d867      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003fe7 	.word	0x08003fe7
 8003f1c:	08003fe1 	.word	0x08003fe1
 8003f20:	08003fe1 	.word	0x08003fe1
 8003f24:	08003fe1 	.word	0x08003fe1
 8003f28:	08003fe1 	.word	0x08003fe1
 8003f2c:	08003fe1 	.word	0x08003fe1
 8003f30:	08003fe1 	.word	0x08003fe1
 8003f34:	08003fe1 	.word	0x08003fe1
 8003f38:	08003fbd 	.word	0x08003fbd
 8003f3c:	08003fe1 	.word	0x08003fe1
 8003f40:	08003fe1 	.word	0x08003fe1
 8003f44:	08003fe1 	.word	0x08003fe1
 8003f48:	08003fe1 	.word	0x08003fe1
 8003f4c:	08003fe1 	.word	0x08003fe1
 8003f50:	08003fe1 	.word	0x08003fe1
 8003f54:	08003fe1 	.word	0x08003fe1
 8003f58:	08003fcf 	.word	0x08003fcf
 8003f5c:	08003fe1 	.word	0x08003fe1
 8003f60:	08003fe1 	.word	0x08003fe1
 8003f64:	08003fe1 	.word	0x08003fe1
 8003f68:	08003fe1 	.word	0x08003fe1
 8003f6c:	08003fe1 	.word	0x08003fe1
 8003f70:	08003fe1 	.word	0x08003fe1
 8003f74:	08003fe1 	.word	0x08003fe1
 8003f78:	08003fe7 	.word	0x08003fe7
 8003f7c:	08003fe1 	.word	0x08003fe1
 8003f80:	08003fe1 	.word	0x08003fe1
 8003f84:	08003fe1 	.word	0x08003fe1
 8003f88:	08003fe1 	.word	0x08003fe1
 8003f8c:	08003fe1 	.word	0x08003fe1
 8003f90:	08003fe1 	.word	0x08003fe1
 8003f94:	08003fe1 	.word	0x08003fe1
 8003f98:	08003fe7 	.word	0x08003fe7
 8003f9c:	08003fe1 	.word	0x08003fe1
 8003fa0:	08003fe1 	.word	0x08003fe1
 8003fa4:	08003fe1 	.word	0x08003fe1
 8003fa8:	08003fe1 	.word	0x08003fe1
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	08003fe1 	.word	0x08003fe1
 8003fb4:	08003fe1 	.word	0x08003fe1
 8003fb8:	08003fe7 	.word	0x08003fe7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fdfa 	bl	8004bbc <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fcc:	e00c      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fea3 	bl	8004d20 <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8003fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fee:	4b17      	ldr	r3, [pc, #92]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ffa:	4914      	ldr	r1, [pc, #80]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	654b      	str	r3, [r1, #84]	; 0x54
 8004000:	e001      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d03e      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004016:	2b05      	cmp	r3, #5
 8004018:	d827      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004071 	.word	0x08004071
 8004024:	08004039 	.word	0x08004039
 8004028:	08004059 	.word	0x08004059
 800402c:	08004071 	.word	0x08004071
 8004030:	08004071 	.word	0x08004071
 8004034:	08004071 	.word	0x08004071
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fdbc 	bl	8004bbc <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004048:	e013      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800404a:	bf00      	nop
 800404c:	58024400 	.word	0x58024400
 8004050:	58024800 	.word	0x58024800
 8004054:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3324      	adds	r3, #36	; 0x24
 800405c:	2101      	movs	r1, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fe5e 	bl	8004d20 <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004068:	e003      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
      break;
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8004070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d109      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004078:	4b9f      	ldr	r3, [pc, #636]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	f023 0207 	bic.w	r2, r3, #7
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004084:	499c      	ldr	r1, [pc, #624]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004086:	4313      	orrs	r3, r2
 8004088:	654b      	str	r3, [r1, #84]	; 0x54
 800408a:	e001      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d039      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d820      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80040a6:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	080040ef 	.word	0x080040ef
 80040b0:	080040c5 	.word	0x080040c5
 80040b4:	080040d7 	.word	0x080040d7
 80040b8:	080040ef 	.word	0x080040ef
 80040bc:	080040ef 	.word	0x080040ef
 80040c0:	080040ef 	.word	0x080040ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fd76 	bl	8004bbc <RCCEx_PLL2_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040d4:	e00c      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3324      	adds	r3, #36	; 0x24
 80040da:	2101      	movs	r1, #1
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fe1f 	bl	8004d20 <RCCEx_PLL3_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040e6:	e003      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
      break;
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 80040ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040f6:	4b80      	ldr	r3, [pc, #512]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	f023 0207 	bic.w	r2, r3, #7
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004104:	497c      	ldr	r1, [pc, #496]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004106:	4313      	orrs	r3, r2
 8004108:	658b      	str	r3, [r1, #88]	; 0x58
 800410a:	e001      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d04b      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004126:	d02e      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8004128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800412c:	d828      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800412e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004132:	d02a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d822      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800413a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800413e:	d026      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8004140:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004144:	d81c      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800414a:	d010      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800414c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004150:	d816      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01d      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800415a:	d111      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fd2a 	bl	8004bbc <RCCEx_PLL2_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800416c:	e012      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3324      	adds	r3, #36	; 0x24
 8004172:	2102      	movs	r1, #2
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fdd3 	bl	8004d20 <RCCEx_PLL3_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800417e:	e009      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
      break;
 8004184:	e006      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004186:	bf00      	nop
 8004188:	e004      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800418a:	bf00      	nop
 800418c:	e002      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800418e:	bf00      	nop
 8004190:	e000      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004194:	7dfb      	ldrb	r3, [r7, #23]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800419a:	4b57      	ldr	r3, [pc, #348]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a8:	4953      	ldr	r1, [pc, #332]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	654b      	str	r3, [r1, #84]	; 0x54
 80041ae:	e001      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d04b      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041ca:	d02e      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80041cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041d0:	d828      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	d02a      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xace>
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d822      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80041de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e2:	d026      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 80041e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e8:	d81c      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80041ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ee:	d010      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f4:	d816      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01d      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 80041fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fe:	d111      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fcd8 	bl	8004bbc <RCCEx_PLL2_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004210:	e012      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3324      	adds	r3, #36	; 0x24
 8004216:	2102      	movs	r1, #2
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fd81 	bl	8004d20 <RCCEx_PLL3_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004222:	e009      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	75fb      	strb	r3, [r7, #23]
      break;
 8004228:	e006      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800422a:	bf00      	nop
 800422c:	e004      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800422e:	bf00      	nop
 8004230:	e002      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004232:	bf00      	nop
 8004234:	e000      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800423e:	4b2e      	ldr	r3, [pc, #184]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800424c:	492a      	ldr	r1, [pc, #168]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800424e:	4313      	orrs	r3, r2
 8004250:	658b      	str	r3, [r1, #88]	; 0x58
 8004252:	e001      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	2b00      	cmp	r3, #0
 8004262:	d04d      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800426a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800426e:	d02e      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8004270:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004274:	d828      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427a:	d02a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004280:	d822      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004282:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004286:	d026      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8004288:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800428c:	d81c      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800428e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004292:	d010      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8004294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004298:	d816      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01d      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 800429e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a2:	d111      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fc86 	bl	8004bbc <RCCEx_PLL2_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042b4:	e012      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3324      	adds	r3, #36	; 0x24
 80042ba:	2102      	movs	r1, #2
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fd2f 	bl	8004d20 <RCCEx_PLL3_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042c6:	e009      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
      break;
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80042ce:	bf00      	nop
 80042d0:	e004      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80042da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10c      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042f0:	4901      	ldr	r1, [pc, #4]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	658b      	str	r3, [r1, #88]	; 0x58
 80042f6:	e003      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80042f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	d10a      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fcfe 	bl	8004d20 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800432e:	4b8c      	ldr	r3, [pc, #560]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433c:	4988      	ldr	r1, [pc, #544]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800433e:	4313      	orrs	r3, r2
 8004340:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004358:	d10a      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3324      	adds	r3, #36	; 0x24
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fcdd 	bl	8004d20 <RCCEx_PLL3_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004370:	4b7b      	ldr	r3, [pc, #492]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800437e:	4978      	ldr	r1, [pc, #480]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004380:	4313      	orrs	r3, r2
 8004382:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d034      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800439a:	d01d      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800439c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043a0:	d817      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80043a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043aa:	d009      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 80043ac:	e011      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fc01 	bl	8004bbc <RCCEx_PLL2_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043be:	e00c      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3324      	adds	r3, #36	; 0x24
 80043c4:	2102      	movs	r1, #2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fcaa 	bl	8004d20 <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
      break;
 80043d6:	e000      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 80043d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043e0:	4b5f      	ldr	r3, [pc, #380]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043ee:	495c      	ldr	r1, [pc, #368]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	658b      	str	r3, [r1, #88]	; 0x58
 80043f4:	e001      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d033      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004410:	d01c      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004412:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004416:	d816      	bhi.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8004418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800441c:	d003      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800441e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004422:	d007      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8004424:	e00f      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004426:	4b4e      	ldr	r3, [pc, #312]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	4a4d      	ldr	r2, [pc, #308]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800442c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004430:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004432:	e00c      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3324      	adds	r3, #36	; 0x24
 8004438:	2101      	movs	r1, #1
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fc70 	bl	8004d20 <RCCEx_PLL3_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004444:	e003      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	75fb      	strb	r3, [r7, #23]
      break;
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 800444c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004454:	4b42      	ldr	r3, [pc, #264]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	493f      	ldr	r1, [pc, #252]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004464:	4313      	orrs	r3, r2
 8004466:	654b      	str	r3, [r1, #84]	; 0x54
 8004468:	e001      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446a:	7dfb      	ldrb	r3, [r7, #23]
 800446c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d029      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8004482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004486:	d007      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8004488:	e00f      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800448a:	4b35      	ldr	r3, [pc, #212]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	4a34      	ldr	r2, [pc, #208]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004494:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004496:	e00b      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	2102      	movs	r1, #2
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fb8c 	bl	8004bbc <RCCEx_PLL2_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044a8:	e002      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	75fb      	strb	r3, [r7, #23]
      break;
 80044ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044b6:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	4927      	ldr	r1, [pc, #156]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044c8:	e001      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3324      	adds	r3, #36	; 0x24
 80044de:	2102      	movs	r1, #2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fc1d 	bl	8004d20 <RCCEx_PLL3_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d035      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004506:	d017      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8004508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450c:	d811      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800450e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004512:	d013      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8004514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004518:	d80b      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d010      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800451e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004522:	d106      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800452a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004530:	e007      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
      break;
 8004536:	e004      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004538:	bf00      	nop
 800453a:	e002      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 800453c:	bf00      	nop
 800453e:	e000      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10d      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004556:	4902      	ldr	r1, [pc, #8]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004558:	4313      	orrs	r3, r2
 800455a:	654b      	str	r3, [r1, #84]	; 0x54
 800455c:	e004      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800455e:	bf00      	nop
 8004560:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004574:	4b31      	ldr	r3, [pc, #196]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004578:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004580:	492e      	ldr	r1, [pc, #184]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004582:	4313      	orrs	r3, r2
 8004584:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004592:	4b2a      	ldr	r3, [pc, #168]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045a0:	4926      	ldr	r1, [pc, #152]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045b2:	4b22      	ldr	r3, [pc, #136]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80045b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045be:	491f      	ldr	r1, [pc, #124]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00d      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	4a19      	ldr	r2, [pc, #100]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80045d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045da:	6113      	str	r3, [r2, #16]
 80045dc:	4b17      	ldr	r3, [pc, #92]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80045e6:	4915      	ldr	r1, [pc, #84]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da08      	bge.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80045f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	490e      	ldr	r1, [pc, #56]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004602:	4313      	orrs	r3, r2
 8004604:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004620:	4906      	ldr	r1, [pc, #24]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004626:	7dbb      	ldrb	r3, [r7, #22]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	e000      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	58024400 	.word	0x58024400

08004640 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004644:	f7ff f830 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4904      	ldr	r1, [pc, #16]	; (8004668 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	58024400 	.word	0x58024400
 8004668:	080064f0 	.word	0x080064f0

0800466c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004674:	4ba1      	ldr	r3, [pc, #644]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800467e:	4b9f      	ldr	r3, [pc, #636]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	0b1b      	lsrs	r3, r3, #12
 8004684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004688:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800468a:	4b9c      	ldr	r3, [pc, #624]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004696:	4b99      	ldr	r3, [pc, #612]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469a:	08db      	lsrs	r3, r3, #3
 800469c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8111 	beq.w	80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	f000 8083 	beq.w	80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	f200 80a1 	bhi.w	800480c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d056      	beq.n	8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046d6:	e099      	b.n	800480c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046d8:	4b88      	ldr	r3, [pc, #544]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d02d      	beq.n	8004740 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046e4:	4b85      	ldr	r3, [pc, #532]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	08db      	lsrs	r3, r3, #3
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	4a84      	ldr	r2, [pc, #528]	; (8004900 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
 80046f4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470e:	4b7b      	ldr	r3, [pc, #492]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004722:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800473e:	e087      	b.n	8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800474e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004752:	4b6a      	ldr	r3, [pc, #424]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004762:	ed97 6a03 	vldr	s12, [r7, #12]
 8004766:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800476a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004782:	e065      	b.n	8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800490c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004796:	4b59      	ldr	r3, [pc, #356]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047c6:	e043      	b.n	8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b48      	ldr	r3, [pc, #288]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800480a:	e021      	b.n	8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800490c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800481a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481e:	4b37      	ldr	r3, [pc, #220]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004832:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800484e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004850:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	0a5b      	lsrs	r3, r3, #9
 8004856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800486a:	edd7 6a07 	vldr	s13, [r7, #28]
 800486e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004876:	ee17 2a90 	vmov	r2, s15
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800487e:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	0c1b      	lsrs	r3, r3, #16
 8004884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004894:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004898:	edd7 6a07 	vldr	s13, [r7, #28]
 800489c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a4:	ee17 2a90 	vmov	r2, s15
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80048ac:	4b13      	ldr	r3, [pc, #76]	; (80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	0e1b      	lsrs	r3, r3, #24
 80048b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048d2:	ee17 2a90 	vmov	r2, s15
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048da:	e008      	b.n	80048ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
}
 80048ee:	bf00      	nop
 80048f0:	3724      	adds	r7, #36	; 0x24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	58024400 	.word	0x58024400
 8004900:	03d09000 	.word	0x03d09000
 8004904:	46000000 	.word	0x46000000
 8004908:	4c742400 	.word	0x4c742400
 800490c:	4a742400 	.word	0x4a742400
 8004910:	4bbebc20 	.word	0x4bbebc20

08004914 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004914:	b480      	push	{r7}
 8004916:	b089      	sub	sp, #36	; 0x24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800491c:	4ba1      	ldr	r3, [pc, #644]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004926:	4b9f      	ldr	r3, [pc, #636]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	0d1b      	lsrs	r3, r3, #20
 800492c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004930:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004932:	4b9c      	ldr	r3, [pc, #624]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800493e:	4b99      	ldr	r3, [pc, #612]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	08db      	lsrs	r3, r3, #3
 8004944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8111 	beq.w	8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b02      	cmp	r3, #2
 8004966:	f000 8083 	beq.w	8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b02      	cmp	r3, #2
 800496e:	f200 80a1 	bhi.w	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d056      	beq.n	8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800497e:	e099      	b.n	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004980:	4b88      	ldr	r3, [pc, #544]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d02d      	beq.n	80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800498c:	4b85      	ldr	r3, [pc, #532]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	08db      	lsrs	r3, r3, #3
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	4a84      	ldr	r2, [pc, #528]	; (8004ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
 800499c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b6:	4b7b      	ldr	r3, [pc, #492]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80049e6:	e087      	b.n	8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fa:	4b6a      	ldr	r3, [pc, #424]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a2a:	e065      	b.n	8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3e:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a6e:	e043      	b.n	8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a82:	4b48      	ldr	r3, [pc, #288]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ab2:	e021      	b.n	8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac6:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ada:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004af6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004af8:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	0a5b      	lsrs	r3, r3, #9
 8004afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1e:	ee17 2a90 	vmov	r2, s15
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004b26:	4b1f      	ldr	r3, [pc, #124]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	0c1b      	lsrs	r3, r3, #16
 8004b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b30:	ee07 3a90 	vmov	s15, r3
 8004b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b4c:	ee17 2a90 	vmov	r2, s15
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004b54:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	0e1b      	lsrs	r3, r3, #24
 8004b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b7a:	ee17 2a90 	vmov	r2, s15
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b82:	e008      	b.n	8004b96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	609a      	str	r2, [r3, #8]
}
 8004b96:	bf00      	nop
 8004b98:	3724      	adds	r7, #36	; 0x24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	58024400 	.word	0x58024400
 8004ba8:	03d09000 	.word	0x03d09000
 8004bac:	46000000 	.word	0x46000000
 8004bb0:	4c742400 	.word	0x4c742400
 8004bb4:	4a742400 	.word	0x4a742400
 8004bb8:	4bbebc20 	.word	0x4bbebc20

08004bbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bca:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d101      	bne.n	8004bda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e099      	b.n	8004d0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bda:	4b4f      	ldr	r3, [pc, #316]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a4e      	ldr	r2, [pc, #312]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004be0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be6:	f7fc fdcf 	bl	8001788 <HAL_GetTick>
 8004bea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bec:	e008      	b.n	8004c00 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bee:	f7fc fdcb 	bl	8001788 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e086      	b.n	8004d0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c00:	4b45      	ldr	r3, [pc, #276]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f0      	bne.n	8004bee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c0c:	4b42      	ldr	r3, [pc, #264]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	031b      	lsls	r3, r3, #12
 8004c1a:	493f      	ldr	r1, [pc, #252]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	628b      	str	r3, [r1, #40]	; 0x28
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	025b      	lsls	r3, r3, #9
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	041b      	lsls	r3, r3, #16
 8004c3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	061b      	lsls	r3, r3, #24
 8004c4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c50:	4931      	ldr	r1, [pc, #196]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c56:	4b30      	ldr	r3, [pc, #192]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	492d      	ldr	r1, [pc, #180]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c68:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	f023 0220 	bic.w	r2, r3, #32
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	4928      	ldr	r1, [pc, #160]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c7a:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	4a26      	ldr	r2, [pc, #152]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c80:	f023 0310 	bic.w	r3, r3, #16
 8004c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c86:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c8a:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <RCCEx_PLL2_Config+0x160>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	69d2      	ldr	r2, [r2, #28]
 8004c92:	00d2      	lsls	r2, r2, #3
 8004c94:	4920      	ldr	r1, [pc, #128]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c9a:	4b1f      	ldr	r3, [pc, #124]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004ca0:	f043 0310 	orr.w	r3, r3, #16
 8004ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cac:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cb8:	e00f      	b.n	8004cda <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d106      	bne.n	8004cce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cc0:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ccc:	e005      	b.n	8004cda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	4a11      	ldr	r2, [pc, #68]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce6:	f7fc fd4f 	bl	8001788 <HAL_GetTick>
 8004cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cec:	e008      	b.n	8004d00 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004cee:	f7fc fd4b 	bl	8001788 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e006      	b.n	8004d0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <RCCEx_PLL2_Config+0x15c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	58024400 	.word	0x58024400
 8004d1c:	ffff0007 	.word	0xffff0007

08004d20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d2e:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d101      	bne.n	8004d3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e099      	b.n	8004e72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d3e:	4b4f      	ldr	r3, [pc, #316]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a4e      	ldr	r2, [pc, #312]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4a:	f7fc fd1d 	bl	8001788 <HAL_GetTick>
 8004d4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d50:	e008      	b.n	8004d64 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d52:	f7fc fd19 	bl	8001788 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e086      	b.n	8004e72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d64:	4b45      	ldr	r3, [pc, #276]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f0      	bne.n	8004d52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d70:	4b42      	ldr	r3, [pc, #264]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	051b      	lsls	r3, r3, #20
 8004d7e:	493f      	ldr	r1, [pc, #252]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	628b      	str	r3, [r1, #40]	; 0x28
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	025b      	lsls	r3, r3, #9
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	061b      	lsls	r3, r3, #24
 8004db0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004db4:	4931      	ldr	r1, [pc, #196]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dba:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	492d      	ldr	r1, [pc, #180]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004dcc:	4b2b      	ldr	r3, [pc, #172]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	4928      	ldr	r1, [pc, #160]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dde:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	4a26      	ldr	r2, [pc, #152]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dea:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dee:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <RCCEx_PLL3_Config+0x160>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	69d2      	ldr	r2, [r2, #28]
 8004df6:	00d2      	lsls	r2, r2, #3
 8004df8:	4920      	ldr	r1, [pc, #128]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004dfe:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	4a1e      	ldr	r2, [pc, #120]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	4a19      	ldr	r2, [pc, #100]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e1c:	e00f      	b.n	8004e3e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d106      	bne.n	8004e32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e24:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004e2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e30:	e005      	b.n	8004e3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	4a11      	ldr	r2, [pc, #68]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a0e      	ldr	r2, [pc, #56]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4a:	f7fc fc9d 	bl	8001788 <HAL_GetTick>
 8004e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e50:	e008      	b.n	8004e64 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e52:	f7fc fc99 	bl	8001788 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e006      	b.n	8004e72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e64:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <RCCEx_PLL3_Config+0x15c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	58024400 	.word	0x58024400
 8004e80:	ffff0007 	.word	0xffff0007

08004e84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d067      	beq.n	8004f66 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fc fadc 	bl	8001468 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	22ca      	movs	r2, #202	; 0xca
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2253      	movs	r2, #83	; 0x53
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f99f 	bl	800520c <RTC_EnterInitMode>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d13b      	bne.n	8004f50 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6899      	ldr	r1, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b23      	ldr	r3, [pc, #140]	; (8004f70 <HAL_RTC_Init+0xec>)
 8004ee4:	400b      	ands	r3, r1
 8004ee6:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6899      	ldr	r1, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	0419      	lsls	r1, r3, #16
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f9a7 	bl	800526c <RTC_ExitInitMode>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d113      	bne.n	8004f50 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0203 	bic.w	r2, r2, #3
 8004f36:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	22ff      	movs	r2, #255	; 0xff
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d103      	bne.n	8004f66 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	ff8fffbf 	.word	0xff8fffbf

08004f74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_RTC_SetTime+0x1a>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e089      	b.n	80050a2 <HAL_RTC_SetTime+0x12e>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	22ca      	movs	r2, #202	; 0xca
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2253      	movs	r2, #83	; 0x53
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f92c 	bl	800520c <RTC_EnterInitMode>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d161      	bne.n	8005082 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d126      	bne.n	8005012 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 f983 	bl	80052e8 <RTC_ByteToBcd2>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f97c 	bl	80052e8 <RTC_ByteToBcd2>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ff4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	789b      	ldrb	r3, [r3, #2]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 f974 	bl	80052e8 <RTC_ByteToBcd2>
 8005000:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005002:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	78db      	ldrb	r3, [r3, #3]
 800500a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e018      	b.n	8005044 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005032:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005038:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	78db      	ldrb	r3, [r3, #3]
 800503e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	6979      	ldr	r1, [r7, #20]
 800504a:	4b18      	ldr	r3, [pc, #96]	; (80050ac <HAL_RTC_SetTime+0x138>)
 800504c:	400b      	ands	r3, r1
 800504e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800505e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6899      	ldr	r1, [r3, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	431a      	orrs	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f8f7 	bl	800526c <RTC_ExitInitMode>
 800507e:	4603      	mov	r3, r0
 8005080:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	22ff      	movs	r2, #255	; 0xff
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d103      	bne.n	8005098 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80050a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd90      	pop	{r4, r7, pc}
 80050aa:	bf00      	nop
 80050ac:	007f7f7f 	.word	0x007f7f7f

080050b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_RTC_SetDate+0x1a>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e073      	b.n	80051b2 <HAL_RTC_SetDate+0x102>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10e      	bne.n	80050fe <HAL_RTC_SetDate+0x4e>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	f003 0310 	and.w	r3, r3, #16
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	785b      	ldrb	r3, [r3, #1]
 80050f0:	f023 0310 	bic.w	r3, r3, #16
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	330a      	adds	r3, #10
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d11c      	bne.n	800513e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	78db      	ldrb	r3, [r3, #3]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 f8ed 	bl	80052e8 <RTC_ByteToBcd2>
 800510e:	4603      	mov	r3, r0
 8005110:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f8e6 	bl	80052e8 <RTC_ByteToBcd2>
 800511c:	4603      	mov	r3, r0
 800511e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005120:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	789b      	ldrb	r3, [r3, #2]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 f8de 	bl	80052e8 <RTC_ByteToBcd2>
 800512c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800512e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e00e      	b.n	800515c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	78db      	ldrb	r3, [r3, #3]
 8005142:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800514a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005150:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	22ca      	movs	r2, #202	; 0xca
 8005162:	625a      	str	r2, [r3, #36]	; 0x24
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2253      	movs	r2, #83	; 0x53
 800516a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f84d 	bl	800520c <RTC_EnterInitMode>
 8005172:	4603      	mov	r3, r0
 8005174:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	6979      	ldr	r1, [r7, #20]
 8005182:	4b0e      	ldr	r3, [pc, #56]	; (80051bc <HAL_RTC_SetDate+0x10c>)
 8005184:	400b      	ands	r3, r1
 8005186:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f86f 	bl	800526c <RTC_ExitInitMode>
 800518e:	4603      	mov	r3, r0
 8005190:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	22ff      	movs	r2, #255	; 0xff
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800519a:	7cfb      	ldrb	r3, [r7, #19]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d103      	bne.n	80051a8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80051b0:	7cfb      	ldrb	r3, [r7, #19]


}
 80051b2:	4618      	mov	r0, r3
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd90      	pop	{r4, r7, pc}
 80051ba:	bf00      	nop
 80051bc:	00ffff3f 	.word	0x00ffff3f

080051c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051d6:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 80051d8:	f7fc fad6 	bl	8001788 <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051de:	e009      	b.n	80051f4 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051e0:	f7fc fad2 	bl	8001788 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ee:	d901      	bls.n	80051f4 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e007      	b.n	8005204 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0ee      	beq.n	80051e0 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d11d      	bne.n	8005262 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f04f 32ff 	mov.w	r2, #4294967295
 800522e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005230:	f7fc faaa 	bl	8001788 <HAL_GetTick>
 8005234:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005236:	e00d      	b.n	8005254 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005238:	f7fc faa6 	bl	8001788 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005246:	d905      	bls.n	8005254 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2203      	movs	r2, #3
 8005250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0ea      	beq.n	8005238 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <RTC_ExitInitMode+0x78>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <RTC_ExitInitMode+0x78>)
 800527e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005282:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005284:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <RTC_ExitInitMode+0x78>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10c      	bne.n	80052aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ff95 	bl	80051c0 <HAL_RTC_WaitForSynchro>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01e      	beq.n	80052da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2203      	movs	r2, #3
 80052a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	73fb      	strb	r3, [r7, #15]
 80052a8:	e017      	b.n	80052da <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052aa:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <RTC_ExitInitMode+0x78>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	4a0d      	ldr	r2, [pc, #52]	; (80052e4 <RTC_ExitInitMode+0x78>)
 80052b0:	f023 0320 	bic.w	r3, r3, #32
 80052b4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff ff82 	bl	80051c0 <HAL_RTC_WaitForSynchro>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2203      	movs	r2, #3
 80052c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052ce:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <RTC_ExitInitMode+0x78>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	4a04      	ldr	r2, [pc, #16]	; (80052e4 <RTC_ExitInitMode+0x78>)
 80052d4:	f043 0320 	orr.w	r3, r3, #32
 80052d8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	58004000 	.word	0x58004000

080052e8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80052fa:	e005      	b.n	8005308 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8005302:	7afb      	ldrb	r3, [r7, #11]
 8005304:	3b0a      	subs	r3, #10
 8005306:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8005308:	7afb      	ldrb	r3, [r7, #11]
 800530a:	2b09      	cmp	r3, #9
 800530c:	d8f6      	bhi.n	80052fc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	b2da      	uxtb	r2, r3
 8005316:	7afb      	ldrb	r3, [r7, #11]
 8005318:	4313      	orrs	r3, r2
 800531a:	b2db      	uxtb	r3, r3
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e042      	b.n	80053c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7fc f8bb 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2224      	movs	r2, #36	; 0x24
 8005356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f82c 	bl	80053c8 <UART_SetConfig>
 8005370:	4603      	mov	r3, r0
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e022      	b.n	80053c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fd80 	bl	8005e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fe07 	bl	8005fcc <UART_CheckIdleState>
 80053be:	4603      	mov	r3, r0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053c8:	b5b0      	push	{r4, r5, r7, lr}
 80053ca:	b08e      	sub	sp, #56	; 0x38
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4bbf      	ldr	r3, [pc, #764]	; (80056f4 <UART_SetConfig+0x32c>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053fe:	430b      	orrs	r3, r1
 8005400:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4ab5      	ldr	r2, [pc, #724]	; (80056f8 <UART_SetConfig+0x330>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d004      	beq.n	8005432 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800542e:	4313      	orrs	r3, r2
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	4bb0      	ldr	r3, [pc, #704]	; (80056fc <UART_SetConfig+0x334>)
 800543a:	4013      	ands	r3, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005442:	430b      	orrs	r3, r1
 8005444:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	f023 010f 	bic.w	r1, r3, #15
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4aa7      	ldr	r2, [pc, #668]	; (8005700 <UART_SetConfig+0x338>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d176      	bne.n	8005554 <UART_SetConfig+0x18c>
 8005466:	4ba7      	ldr	r3, [pc, #668]	; (8005704 <UART_SetConfig+0x33c>)
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800546e:	2b28      	cmp	r3, #40	; 0x28
 8005470:	d86c      	bhi.n	800554c <UART_SetConfig+0x184>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <UART_SetConfig+0xb0>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	0800551d 	.word	0x0800551d
 800547c:	0800554d 	.word	0x0800554d
 8005480:	0800554d 	.word	0x0800554d
 8005484:	0800554d 	.word	0x0800554d
 8005488:	0800554d 	.word	0x0800554d
 800548c:	0800554d 	.word	0x0800554d
 8005490:	0800554d 	.word	0x0800554d
 8005494:	0800554d 	.word	0x0800554d
 8005498:	08005525 	.word	0x08005525
 800549c:	0800554d 	.word	0x0800554d
 80054a0:	0800554d 	.word	0x0800554d
 80054a4:	0800554d 	.word	0x0800554d
 80054a8:	0800554d 	.word	0x0800554d
 80054ac:	0800554d 	.word	0x0800554d
 80054b0:	0800554d 	.word	0x0800554d
 80054b4:	0800554d 	.word	0x0800554d
 80054b8:	0800552d 	.word	0x0800552d
 80054bc:	0800554d 	.word	0x0800554d
 80054c0:	0800554d 	.word	0x0800554d
 80054c4:	0800554d 	.word	0x0800554d
 80054c8:	0800554d 	.word	0x0800554d
 80054cc:	0800554d 	.word	0x0800554d
 80054d0:	0800554d 	.word	0x0800554d
 80054d4:	0800554d 	.word	0x0800554d
 80054d8:	08005535 	.word	0x08005535
 80054dc:	0800554d 	.word	0x0800554d
 80054e0:	0800554d 	.word	0x0800554d
 80054e4:	0800554d 	.word	0x0800554d
 80054e8:	0800554d 	.word	0x0800554d
 80054ec:	0800554d 	.word	0x0800554d
 80054f0:	0800554d 	.word	0x0800554d
 80054f4:	0800554d 	.word	0x0800554d
 80054f8:	0800553d 	.word	0x0800553d
 80054fc:	0800554d 	.word	0x0800554d
 8005500:	0800554d 	.word	0x0800554d
 8005504:	0800554d 	.word	0x0800554d
 8005508:	0800554d 	.word	0x0800554d
 800550c:	0800554d 	.word	0x0800554d
 8005510:	0800554d 	.word	0x0800554d
 8005514:	0800554d 	.word	0x0800554d
 8005518:	08005545 	.word	0x08005545
 800551c:	2301      	movs	r3, #1
 800551e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005522:	e222      	b.n	800596a <UART_SetConfig+0x5a2>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552a:	e21e      	b.n	800596a <UART_SetConfig+0x5a2>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005532:	e21a      	b.n	800596a <UART_SetConfig+0x5a2>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553a:	e216      	b.n	800596a <UART_SetConfig+0x5a2>
 800553c:	2320      	movs	r3, #32
 800553e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005542:	e212      	b.n	800596a <UART_SetConfig+0x5a2>
 8005544:	2340      	movs	r3, #64	; 0x40
 8005546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554a:	e20e      	b.n	800596a <UART_SetConfig+0x5a2>
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005552:	e20a      	b.n	800596a <UART_SetConfig+0x5a2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a6b      	ldr	r2, [pc, #428]	; (8005708 <UART_SetConfig+0x340>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d130      	bne.n	80055c0 <UART_SetConfig+0x1f8>
 800555e:	4b69      	ldr	r3, [pc, #420]	; (8005704 <UART_SetConfig+0x33c>)
 8005560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	2b05      	cmp	r3, #5
 8005568:	d826      	bhi.n	80055b8 <UART_SetConfig+0x1f0>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <UART_SetConfig+0x1a8>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	08005589 	.word	0x08005589
 8005574:	08005591 	.word	0x08005591
 8005578:	08005599 	.word	0x08005599
 800557c:	080055a1 	.word	0x080055a1
 8005580:	080055a9 	.word	0x080055a9
 8005584:	080055b1 	.word	0x080055b1
 8005588:	2300      	movs	r3, #0
 800558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558e:	e1ec      	b.n	800596a <UART_SetConfig+0x5a2>
 8005590:	2304      	movs	r3, #4
 8005592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005596:	e1e8      	b.n	800596a <UART_SetConfig+0x5a2>
 8005598:	2308      	movs	r3, #8
 800559a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559e:	e1e4      	b.n	800596a <UART_SetConfig+0x5a2>
 80055a0:	2310      	movs	r3, #16
 80055a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a6:	e1e0      	b.n	800596a <UART_SetConfig+0x5a2>
 80055a8:	2320      	movs	r3, #32
 80055aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ae:	e1dc      	b.n	800596a <UART_SetConfig+0x5a2>
 80055b0:	2340      	movs	r3, #64	; 0x40
 80055b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b6:	e1d8      	b.n	800596a <UART_SetConfig+0x5a2>
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055be:	e1d4      	b.n	800596a <UART_SetConfig+0x5a2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a51      	ldr	r2, [pc, #324]	; (800570c <UART_SetConfig+0x344>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d130      	bne.n	800562c <UART_SetConfig+0x264>
 80055ca:	4b4e      	ldr	r3, [pc, #312]	; (8005704 <UART_SetConfig+0x33c>)
 80055cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	d826      	bhi.n	8005624 <UART_SetConfig+0x25c>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <UART_SetConfig+0x214>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	080055f5 	.word	0x080055f5
 80055e0:	080055fd 	.word	0x080055fd
 80055e4:	08005605 	.word	0x08005605
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	08005615 	.word	0x08005615
 80055f0:	0800561d 	.word	0x0800561d
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fa:	e1b6      	b.n	800596a <UART_SetConfig+0x5a2>
 80055fc:	2304      	movs	r3, #4
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	e1b2      	b.n	800596a <UART_SetConfig+0x5a2>
 8005604:	2308      	movs	r3, #8
 8005606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560a:	e1ae      	b.n	800596a <UART_SetConfig+0x5a2>
 800560c:	2310      	movs	r3, #16
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e1aa      	b.n	800596a <UART_SetConfig+0x5a2>
 8005614:	2320      	movs	r3, #32
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561a:	e1a6      	b.n	800596a <UART_SetConfig+0x5a2>
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	e1a2      	b.n	800596a <UART_SetConfig+0x5a2>
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562a:	e19e      	b.n	800596a <UART_SetConfig+0x5a2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a37      	ldr	r2, [pc, #220]	; (8005710 <UART_SetConfig+0x348>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d130      	bne.n	8005698 <UART_SetConfig+0x2d0>
 8005636:	4b33      	ldr	r3, [pc, #204]	; (8005704 <UART_SetConfig+0x33c>)
 8005638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b05      	cmp	r3, #5
 8005640:	d826      	bhi.n	8005690 <UART_SetConfig+0x2c8>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <UART_SetConfig+0x280>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	08005661 	.word	0x08005661
 800564c:	08005669 	.word	0x08005669
 8005650:	08005671 	.word	0x08005671
 8005654:	08005679 	.word	0x08005679
 8005658:	08005681 	.word	0x08005681
 800565c:	08005689 	.word	0x08005689
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005666:	e180      	b.n	800596a <UART_SetConfig+0x5a2>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566e:	e17c      	b.n	800596a <UART_SetConfig+0x5a2>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005676:	e178      	b.n	800596a <UART_SetConfig+0x5a2>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567e:	e174      	b.n	800596a <UART_SetConfig+0x5a2>
 8005680:	2320      	movs	r3, #32
 8005682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005686:	e170      	b.n	800596a <UART_SetConfig+0x5a2>
 8005688:	2340      	movs	r3, #64	; 0x40
 800568a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568e:	e16c      	b.n	800596a <UART_SetConfig+0x5a2>
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005696:	e168      	b.n	800596a <UART_SetConfig+0x5a2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1d      	ldr	r2, [pc, #116]	; (8005714 <UART_SetConfig+0x34c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d142      	bne.n	8005728 <UART_SetConfig+0x360>
 80056a2:	4b18      	ldr	r3, [pc, #96]	; (8005704 <UART_SetConfig+0x33c>)
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	d838      	bhi.n	8005720 <UART_SetConfig+0x358>
 80056ae:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <UART_SetConfig+0x2ec>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	080056cd 	.word	0x080056cd
 80056b8:	080056d5 	.word	0x080056d5
 80056bc:	080056dd 	.word	0x080056dd
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	080056ed 	.word	0x080056ed
 80056c8:	08005719 	.word	0x08005719
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d2:	e14a      	b.n	800596a <UART_SetConfig+0x5a2>
 80056d4:	2304      	movs	r3, #4
 80056d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056da:	e146      	b.n	800596a <UART_SetConfig+0x5a2>
 80056dc:	2308      	movs	r3, #8
 80056de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056e2:	e142      	b.n	800596a <UART_SetConfig+0x5a2>
 80056e4:	2310      	movs	r3, #16
 80056e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ea:	e13e      	b.n	800596a <UART_SetConfig+0x5a2>
 80056ec:	2320      	movs	r3, #32
 80056ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f2:	e13a      	b.n	800596a <UART_SetConfig+0x5a2>
 80056f4:	cfff69f3 	.word	0xcfff69f3
 80056f8:	58000c00 	.word	0x58000c00
 80056fc:	11fff4ff 	.word	0x11fff4ff
 8005700:	40011000 	.word	0x40011000
 8005704:	58024400 	.word	0x58024400
 8005708:	40004400 	.word	0x40004400
 800570c:	40004800 	.word	0x40004800
 8005710:	40004c00 	.word	0x40004c00
 8005714:	40005000 	.word	0x40005000
 8005718:	2340      	movs	r3, #64	; 0x40
 800571a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800571e:	e124      	b.n	800596a <UART_SetConfig+0x5a2>
 8005720:	2380      	movs	r3, #128	; 0x80
 8005722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005726:	e120      	b.n	800596a <UART_SetConfig+0x5a2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4acc      	ldr	r2, [pc, #816]	; (8005a60 <UART_SetConfig+0x698>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d176      	bne.n	8005820 <UART_SetConfig+0x458>
 8005732:	4bcc      	ldr	r3, [pc, #816]	; (8005a64 <UART_SetConfig+0x69c>)
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800573a:	2b28      	cmp	r3, #40	; 0x28
 800573c:	d86c      	bhi.n	8005818 <UART_SetConfig+0x450>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <UART_SetConfig+0x37c>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	080057e9 	.word	0x080057e9
 8005748:	08005819 	.word	0x08005819
 800574c:	08005819 	.word	0x08005819
 8005750:	08005819 	.word	0x08005819
 8005754:	08005819 	.word	0x08005819
 8005758:	08005819 	.word	0x08005819
 800575c:	08005819 	.word	0x08005819
 8005760:	08005819 	.word	0x08005819
 8005764:	080057f1 	.word	0x080057f1
 8005768:	08005819 	.word	0x08005819
 800576c:	08005819 	.word	0x08005819
 8005770:	08005819 	.word	0x08005819
 8005774:	08005819 	.word	0x08005819
 8005778:	08005819 	.word	0x08005819
 800577c:	08005819 	.word	0x08005819
 8005780:	08005819 	.word	0x08005819
 8005784:	080057f9 	.word	0x080057f9
 8005788:	08005819 	.word	0x08005819
 800578c:	08005819 	.word	0x08005819
 8005790:	08005819 	.word	0x08005819
 8005794:	08005819 	.word	0x08005819
 8005798:	08005819 	.word	0x08005819
 800579c:	08005819 	.word	0x08005819
 80057a0:	08005819 	.word	0x08005819
 80057a4:	08005801 	.word	0x08005801
 80057a8:	08005819 	.word	0x08005819
 80057ac:	08005819 	.word	0x08005819
 80057b0:	08005819 	.word	0x08005819
 80057b4:	08005819 	.word	0x08005819
 80057b8:	08005819 	.word	0x08005819
 80057bc:	08005819 	.word	0x08005819
 80057c0:	08005819 	.word	0x08005819
 80057c4:	08005809 	.word	0x08005809
 80057c8:	08005819 	.word	0x08005819
 80057cc:	08005819 	.word	0x08005819
 80057d0:	08005819 	.word	0x08005819
 80057d4:	08005819 	.word	0x08005819
 80057d8:	08005819 	.word	0x08005819
 80057dc:	08005819 	.word	0x08005819
 80057e0:	08005819 	.word	0x08005819
 80057e4:	08005811 	.word	0x08005811
 80057e8:	2301      	movs	r3, #1
 80057ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ee:	e0bc      	b.n	800596a <UART_SetConfig+0x5a2>
 80057f0:	2304      	movs	r3, #4
 80057f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f6:	e0b8      	b.n	800596a <UART_SetConfig+0x5a2>
 80057f8:	2308      	movs	r3, #8
 80057fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fe:	e0b4      	b.n	800596a <UART_SetConfig+0x5a2>
 8005800:	2310      	movs	r3, #16
 8005802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005806:	e0b0      	b.n	800596a <UART_SetConfig+0x5a2>
 8005808:	2320      	movs	r3, #32
 800580a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580e:	e0ac      	b.n	800596a <UART_SetConfig+0x5a2>
 8005810:	2340      	movs	r3, #64	; 0x40
 8005812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005816:	e0a8      	b.n	800596a <UART_SetConfig+0x5a2>
 8005818:	2380      	movs	r3, #128	; 0x80
 800581a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581e:	e0a4      	b.n	800596a <UART_SetConfig+0x5a2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a90      	ldr	r2, [pc, #576]	; (8005a68 <UART_SetConfig+0x6a0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d130      	bne.n	800588c <UART_SetConfig+0x4c4>
 800582a:	4b8e      	ldr	r3, [pc, #568]	; (8005a64 <UART_SetConfig+0x69c>)
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	2b05      	cmp	r3, #5
 8005834:	d826      	bhi.n	8005884 <UART_SetConfig+0x4bc>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <UART_SetConfig+0x474>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	08005855 	.word	0x08005855
 8005840:	0800585d 	.word	0x0800585d
 8005844:	08005865 	.word	0x08005865
 8005848:	0800586d 	.word	0x0800586d
 800584c:	08005875 	.word	0x08005875
 8005850:	0800587d 	.word	0x0800587d
 8005854:	2300      	movs	r3, #0
 8005856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585a:	e086      	b.n	800596a <UART_SetConfig+0x5a2>
 800585c:	2304      	movs	r3, #4
 800585e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005862:	e082      	b.n	800596a <UART_SetConfig+0x5a2>
 8005864:	2308      	movs	r3, #8
 8005866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586a:	e07e      	b.n	800596a <UART_SetConfig+0x5a2>
 800586c:	2310      	movs	r3, #16
 800586e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005872:	e07a      	b.n	800596a <UART_SetConfig+0x5a2>
 8005874:	2320      	movs	r3, #32
 8005876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587a:	e076      	b.n	800596a <UART_SetConfig+0x5a2>
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005882:	e072      	b.n	800596a <UART_SetConfig+0x5a2>
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588a:	e06e      	b.n	800596a <UART_SetConfig+0x5a2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a76      	ldr	r2, [pc, #472]	; (8005a6c <UART_SetConfig+0x6a4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d130      	bne.n	80058f8 <UART_SetConfig+0x530>
 8005896:	4b73      	ldr	r3, [pc, #460]	; (8005a64 <UART_SetConfig+0x69c>)
 8005898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	2b05      	cmp	r3, #5
 80058a0:	d826      	bhi.n	80058f0 <UART_SetConfig+0x528>
 80058a2:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <UART_SetConfig+0x4e0>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	080058c1 	.word	0x080058c1
 80058ac:	080058c9 	.word	0x080058c9
 80058b0:	080058d1 	.word	0x080058d1
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058e1 	.word	0x080058e1
 80058bc:	080058e9 	.word	0x080058e9
 80058c0:	2300      	movs	r3, #0
 80058c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058c6:	e050      	b.n	800596a <UART_SetConfig+0x5a2>
 80058c8:	2304      	movs	r3, #4
 80058ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ce:	e04c      	b.n	800596a <UART_SetConfig+0x5a2>
 80058d0:	2308      	movs	r3, #8
 80058d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d6:	e048      	b.n	800596a <UART_SetConfig+0x5a2>
 80058d8:	2310      	movs	r3, #16
 80058da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058de:	e044      	b.n	800596a <UART_SetConfig+0x5a2>
 80058e0:	2320      	movs	r3, #32
 80058e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e6:	e040      	b.n	800596a <UART_SetConfig+0x5a2>
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ee:	e03c      	b.n	800596a <UART_SetConfig+0x5a2>
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f6:	e038      	b.n	800596a <UART_SetConfig+0x5a2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a5c      	ldr	r2, [pc, #368]	; (8005a70 <UART_SetConfig+0x6a8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d130      	bne.n	8005964 <UART_SetConfig+0x59c>
 8005902:	4b58      	ldr	r3, [pc, #352]	; (8005a64 <UART_SetConfig+0x69c>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	2b05      	cmp	r3, #5
 800590c:	d826      	bhi.n	800595c <UART_SetConfig+0x594>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <UART_SetConfig+0x54c>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	0800592d 	.word	0x0800592d
 8005918:	08005935 	.word	0x08005935
 800591c:	0800593d 	.word	0x0800593d
 8005920:	08005945 	.word	0x08005945
 8005924:	0800594d 	.word	0x0800594d
 8005928:	08005955 	.word	0x08005955
 800592c:	2302      	movs	r3, #2
 800592e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005932:	e01a      	b.n	800596a <UART_SetConfig+0x5a2>
 8005934:	2304      	movs	r3, #4
 8005936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593a:	e016      	b.n	800596a <UART_SetConfig+0x5a2>
 800593c:	2308      	movs	r3, #8
 800593e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005942:	e012      	b.n	800596a <UART_SetConfig+0x5a2>
 8005944:	2310      	movs	r3, #16
 8005946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800594a:	e00e      	b.n	800596a <UART_SetConfig+0x5a2>
 800594c:	2320      	movs	r3, #32
 800594e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005952:	e00a      	b.n	800596a <UART_SetConfig+0x5a2>
 8005954:	2340      	movs	r3, #64	; 0x40
 8005956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595a:	e006      	b.n	800596a <UART_SetConfig+0x5a2>
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005962:	e002      	b.n	800596a <UART_SetConfig+0x5a2>
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a40      	ldr	r2, [pc, #256]	; (8005a70 <UART_SetConfig+0x6a8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	f040 80ef 	bne.w	8005b54 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005976:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800597a:	2b20      	cmp	r3, #32
 800597c:	dc46      	bgt.n	8005a0c <UART_SetConfig+0x644>
 800597e:	2b02      	cmp	r3, #2
 8005980:	f2c0 8081 	blt.w	8005a86 <UART_SetConfig+0x6be>
 8005984:	3b02      	subs	r3, #2
 8005986:	2b1e      	cmp	r3, #30
 8005988:	d87d      	bhi.n	8005a86 <UART_SetConfig+0x6be>
 800598a:	a201      	add	r2, pc, #4	; (adr r2, 8005990 <UART_SetConfig+0x5c8>)
 800598c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005990:	08005a13 	.word	0x08005a13
 8005994:	08005a87 	.word	0x08005a87
 8005998:	08005a1b 	.word	0x08005a1b
 800599c:	08005a87 	.word	0x08005a87
 80059a0:	08005a87 	.word	0x08005a87
 80059a4:	08005a87 	.word	0x08005a87
 80059a8:	08005a2b 	.word	0x08005a2b
 80059ac:	08005a87 	.word	0x08005a87
 80059b0:	08005a87 	.word	0x08005a87
 80059b4:	08005a87 	.word	0x08005a87
 80059b8:	08005a87 	.word	0x08005a87
 80059bc:	08005a87 	.word	0x08005a87
 80059c0:	08005a87 	.word	0x08005a87
 80059c4:	08005a87 	.word	0x08005a87
 80059c8:	08005a3b 	.word	0x08005a3b
 80059cc:	08005a87 	.word	0x08005a87
 80059d0:	08005a87 	.word	0x08005a87
 80059d4:	08005a87 	.word	0x08005a87
 80059d8:	08005a87 	.word	0x08005a87
 80059dc:	08005a87 	.word	0x08005a87
 80059e0:	08005a87 	.word	0x08005a87
 80059e4:	08005a87 	.word	0x08005a87
 80059e8:	08005a87 	.word	0x08005a87
 80059ec:	08005a87 	.word	0x08005a87
 80059f0:	08005a87 	.word	0x08005a87
 80059f4:	08005a87 	.word	0x08005a87
 80059f8:	08005a87 	.word	0x08005a87
 80059fc:	08005a87 	.word	0x08005a87
 8005a00:	08005a87 	.word	0x08005a87
 8005a04:	08005a87 	.word	0x08005a87
 8005a08:	08005a79 	.word	0x08005a79
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d036      	beq.n	8005a7e <UART_SetConfig+0x6b6>
 8005a10:	e039      	b.n	8005a86 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005a12:	f7fe fe15 	bl	8004640 <HAL_RCCEx_GetD3PCLK1Freq>
 8005a16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a18:	e03b      	b.n	8005a92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a1a:	f107 0314 	add.w	r3, r7, #20
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe fe24 	bl	800466c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a28:	e033      	b.n	8005a92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a2a:	f107 0308 	add.w	r3, r7, #8
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe ff70 	bl	8004914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a38:	e02b      	b.n	8005a92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a3a:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <UART_SetConfig+0x69c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a46:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <UART_SetConfig+0x69c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	08db      	lsrs	r3, r3, #3
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <UART_SetConfig+0x6ac>)
 8005a52:	fa22 f303 	lsr.w	r3, r2, r3
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a58:	e01b      	b.n	8005a92 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <UART_SetConfig+0x6ac>)
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a5e:	e018      	b.n	8005a92 <UART_SetConfig+0x6ca>
 8005a60:	40011400 	.word	0x40011400
 8005a64:	58024400 	.word	0x58024400
 8005a68:	40007800 	.word	0x40007800
 8005a6c:	40007c00 	.word	0x40007c00
 8005a70:	58000c00 	.word	0x58000c00
 8005a74:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a78:	4bc4      	ldr	r3, [pc, #784]	; (8005d8c <UART_SetConfig+0x9c4>)
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a7c:	e009      	b.n	8005a92 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a84:	e005      	b.n	8005a92 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005a90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 81da 	beq.w	8005e4e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	4abc      	ldr	r2, [pc, #752]	; (8005d90 <UART_SetConfig+0x9c8>)
 8005aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	4413      	add	r3, r2
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d305      	bcc.n	8005aca <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ac4:	6a3a      	ldr	r2, [r7, #32]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d903      	bls.n	8005ad2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005ad0:	e1bd      	b.n	8005e4e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f04f 0100 	mov.w	r1, #0
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	4aac      	ldr	r2, [pc, #688]	; (8005d90 <UART_SetConfig+0x9c8>)
 8005ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	f7fa fbfd 	bl	80002e8 <__aeabi_uldivmod>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4610      	mov	r0, r2
 8005af4:	4619      	mov	r1, r3
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	020b      	lsls	r3, r1, #8
 8005b00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b04:	0202      	lsls	r2, r0, #8
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	6849      	ldr	r1, [r1, #4]
 8005b0a:	0849      	lsrs	r1, r1, #1
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	f04f 0100 	mov.w	r1, #0
 8005b12:	1814      	adds	r4, r2, r0
 8005b14:	eb43 0501 	adc.w	r5, r3, r1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	4620      	mov	r0, r4
 8005b24:	4629      	mov	r1, r5
 8005b26:	f7fa fbdf 	bl	80002e8 <__aeabi_uldivmod>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4613      	mov	r3, r2
 8005b30:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b38:	d308      	bcc.n	8005b4c <UART_SetConfig+0x784>
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b40:	d204      	bcs.n	8005b4c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b48:	60da      	str	r2, [r3, #12]
 8005b4a:	e180      	b.n	8005e4e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005b52:	e17c      	b.n	8005e4e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5c:	f040 80bf 	bne.w	8005cde <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005b60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	dc49      	bgt.n	8005bfc <UART_SetConfig+0x834>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	db7c      	blt.n	8005c66 <UART_SetConfig+0x89e>
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d87a      	bhi.n	8005c66 <UART_SetConfig+0x89e>
 8005b70:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <UART_SetConfig+0x7b0>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005c03 	.word	0x08005c03
 8005b7c:	08005c0b 	.word	0x08005c0b
 8005b80:	08005c67 	.word	0x08005c67
 8005b84:	08005c67 	.word	0x08005c67
 8005b88:	08005c13 	.word	0x08005c13
 8005b8c:	08005c67 	.word	0x08005c67
 8005b90:	08005c67 	.word	0x08005c67
 8005b94:	08005c67 	.word	0x08005c67
 8005b98:	08005c23 	.word	0x08005c23
 8005b9c:	08005c67 	.word	0x08005c67
 8005ba0:	08005c67 	.word	0x08005c67
 8005ba4:	08005c67 	.word	0x08005c67
 8005ba8:	08005c67 	.word	0x08005c67
 8005bac:	08005c67 	.word	0x08005c67
 8005bb0:	08005c67 	.word	0x08005c67
 8005bb4:	08005c67 	.word	0x08005c67
 8005bb8:	08005c33 	.word	0x08005c33
 8005bbc:	08005c67 	.word	0x08005c67
 8005bc0:	08005c67 	.word	0x08005c67
 8005bc4:	08005c67 	.word	0x08005c67
 8005bc8:	08005c67 	.word	0x08005c67
 8005bcc:	08005c67 	.word	0x08005c67
 8005bd0:	08005c67 	.word	0x08005c67
 8005bd4:	08005c67 	.word	0x08005c67
 8005bd8:	08005c67 	.word	0x08005c67
 8005bdc:	08005c67 	.word	0x08005c67
 8005be0:	08005c67 	.word	0x08005c67
 8005be4:	08005c67 	.word	0x08005c67
 8005be8:	08005c67 	.word	0x08005c67
 8005bec:	08005c67 	.word	0x08005c67
 8005bf0:	08005c67 	.word	0x08005c67
 8005bf4:	08005c67 	.word	0x08005c67
 8005bf8:	08005c59 	.word	0x08005c59
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	d02e      	beq.n	8005c5e <UART_SetConfig+0x896>
 8005c00:	e031      	b.n	8005c66 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c02:	f7fd fd81 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8005c06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c08:	e033      	b.n	8005c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c0a:	f7fd fd93 	bl	8003734 <HAL_RCC_GetPCLK2Freq>
 8005c0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c10:	e02f      	b.n	8005c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c12:	f107 0314 	add.w	r3, r7, #20
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe fd28 	bl	800466c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c20:	e027      	b.n	8005c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c22:	f107 0308 	add.w	r3, r7, #8
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe fe74 	bl	8004914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c30:	e01f      	b.n	8005c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c32:	4b58      	ldr	r3, [pc, #352]	; (8005d94 <UART_SetConfig+0x9cc>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d009      	beq.n	8005c52 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c3e:	4b55      	ldr	r3, [pc, #340]	; (8005d94 <UART_SetConfig+0x9cc>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	08db      	lsrs	r3, r3, #3
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	4a53      	ldr	r2, [pc, #332]	; (8005d98 <UART_SetConfig+0x9d0>)
 8005c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c50:	e00f      	b.n	8005c72 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005c52:	4b51      	ldr	r3, [pc, #324]	; (8005d98 <UART_SetConfig+0x9d0>)
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c56:	e00c      	b.n	8005c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c58:	4b4c      	ldr	r3, [pc, #304]	; (8005d8c <UART_SetConfig+0x9c4>)
 8005c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c5c:	e009      	b.n	8005c72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c64:	e005      	b.n	8005c72 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80ea 	beq.w	8005e4e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	4a44      	ldr	r2, [pc, #272]	; (8005d90 <UART_SetConfig+0x9c8>)
 8005c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c84:	461a      	mov	r2, r3
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c8c:	005a      	lsls	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	441a      	add	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	2b0f      	cmp	r3, #15
 8005ca6:	d916      	bls.n	8005cd6 <UART_SetConfig+0x90e>
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cae:	d212      	bcs.n	8005cd6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f023 030f 	bic.w	r3, r3, #15
 8005cb8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cd2:	60da      	str	r2, [r3, #12]
 8005cd4:	e0bb      	b.n	8005e4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005cdc:	e0b7      	b.n	8005e4e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	dc4a      	bgt.n	8005d7c <UART_SetConfig+0x9b4>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f2c0 8086 	blt.w	8005df8 <UART_SetConfig+0xa30>
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	f200 8083 	bhi.w	8005df8 <UART_SetConfig+0xa30>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <UART_SetConfig+0x930>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d83 	.word	0x08005d83
 8005cfc:	08005d9d 	.word	0x08005d9d
 8005d00:	08005df9 	.word	0x08005df9
 8005d04:	08005df9 	.word	0x08005df9
 8005d08:	08005da5 	.word	0x08005da5
 8005d0c:	08005df9 	.word	0x08005df9
 8005d10:	08005df9 	.word	0x08005df9
 8005d14:	08005df9 	.word	0x08005df9
 8005d18:	08005db5 	.word	0x08005db5
 8005d1c:	08005df9 	.word	0x08005df9
 8005d20:	08005df9 	.word	0x08005df9
 8005d24:	08005df9 	.word	0x08005df9
 8005d28:	08005df9 	.word	0x08005df9
 8005d2c:	08005df9 	.word	0x08005df9
 8005d30:	08005df9 	.word	0x08005df9
 8005d34:	08005df9 	.word	0x08005df9
 8005d38:	08005dc5 	.word	0x08005dc5
 8005d3c:	08005df9 	.word	0x08005df9
 8005d40:	08005df9 	.word	0x08005df9
 8005d44:	08005df9 	.word	0x08005df9
 8005d48:	08005df9 	.word	0x08005df9
 8005d4c:	08005df9 	.word	0x08005df9
 8005d50:	08005df9 	.word	0x08005df9
 8005d54:	08005df9 	.word	0x08005df9
 8005d58:	08005df9 	.word	0x08005df9
 8005d5c:	08005df9 	.word	0x08005df9
 8005d60:	08005df9 	.word	0x08005df9
 8005d64:	08005df9 	.word	0x08005df9
 8005d68:	08005df9 	.word	0x08005df9
 8005d6c:	08005df9 	.word	0x08005df9
 8005d70:	08005df9 	.word	0x08005df9
 8005d74:	08005df9 	.word	0x08005df9
 8005d78:	08005deb 	.word	0x08005deb
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d037      	beq.n	8005df0 <UART_SetConfig+0xa28>
 8005d80:	e03a      	b.n	8005df8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d82:	f7fd fcc1 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8005d86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d88:	e03c      	b.n	8005e04 <UART_SetConfig+0xa3c>
 8005d8a:	bf00      	nop
 8005d8c:	003d0900 	.word	0x003d0900
 8005d90:	08006550 	.word	0x08006550
 8005d94:	58024400 	.word	0x58024400
 8005d98:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d9c:	f7fd fcca 	bl	8003734 <HAL_RCC_GetPCLK2Freq>
 8005da0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005da2:	e02f      	b.n	8005e04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fe fc5f 	bl	800466c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005db2:	e027      	b.n	8005e04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005db4:	f107 0308 	add.w	r3, r7, #8
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe fdab 	bl	8004914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dc2:	e01f      	b.n	8005e04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dc4:	4b2c      	ldr	r3, [pc, #176]	; (8005e78 <UART_SetConfig+0xab0>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dd0:	4b29      	ldr	r3, [pc, #164]	; (8005e78 <UART_SetConfig+0xab0>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	08db      	lsrs	r3, r3, #3
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	4a28      	ldr	r2, [pc, #160]	; (8005e7c <UART_SetConfig+0xab4>)
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005de2:	e00f      	b.n	8005e04 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005de4:	4b25      	ldr	r3, [pc, #148]	; (8005e7c <UART_SetConfig+0xab4>)
 8005de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005de8:	e00c      	b.n	8005e04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005dea:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <UART_SetConfig+0xab8>)
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dee:	e009      	b.n	8005e04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005df6:	e005      	b.n	8005e04 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005e02:	bf00      	nop
    }

    if (pclk != 0U)
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d021      	beq.n	8005e4e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <UART_SetConfig+0xabc>)
 8005e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e14:	461a      	mov	r2, r3
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	441a      	add	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	2b0f      	cmp	r3, #15
 8005e34:	d908      	bls.n	8005e48 <UART_SetConfig+0xa80>
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	d204      	bcs.n	8005e48 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e44:	60da      	str	r2, [r3, #12]
 8005e46:	e002      	b.n	8005e4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3738      	adds	r7, #56	; 0x38
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bdb0      	pop	{r4, r5, r7, pc}
 8005e76:	bf00      	nop
 8005e78:	58024400 	.word	0x58024400
 8005e7c:	03d09000 	.word	0x03d09000
 8005e80:	003d0900 	.word	0x003d0900
 8005e84:	08006550 	.word	0x08006550

08005e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01a      	beq.n	8005f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f86:	d10a      	bne.n	8005f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	605a      	str	r2, [r3, #4]
  }
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fdc:	f7fb fbd4 	bl	8001788 <HAL_GetTick>
 8005fe0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d10e      	bne.n	800600e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f82f 	bl	8006062 <UART_WaitOnFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e025      	b.n	800605a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b04      	cmp	r3, #4
 800601a:	d10e      	bne.n	800603a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800601c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f819 	bl	8006062 <UART_WaitOnFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e00f      	b.n	800605a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	603b      	str	r3, [r7, #0]
 800606e:	4613      	mov	r3, r2
 8006070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006072:	e062      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d05e      	beq.n	800613a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607c:	f7fb fb84 	bl	8001788 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	429a      	cmp	r2, r3
 800608a:	d302      	bcc.n	8006092 <UART_WaitOnFlagUntilTimeout+0x30>
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d11d      	bne.n	80060ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0201 	bic.w	r2, r2, #1
 80060b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e045      	b.n	800615a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d02e      	beq.n	800613a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ea:	d126      	bne.n	800613a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006104:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e00f      	b.n	800615a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4013      	ands	r3, r2
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	bf0c      	ite	eq
 800614a:	2301      	moveq	r3, #1
 800614c:	2300      	movne	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	429a      	cmp	r2, r3
 8006156:	d08d      	beq.n	8006074 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_UARTEx_DisableFifoMode+0x16>
 8006174:	2302      	movs	r3, #2
 8006176:	e027      	b.n	80061c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2224      	movs	r2, #36	; 0x24
 8006184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e02d      	b.n	8006248 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2224      	movs	r2, #36	; 0x24
 80061f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0201 	bic.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f84f 	bl	80062cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006264:	2302      	movs	r3, #2
 8006266:	e02d      	b.n	80062c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2224      	movs	r2, #36	; 0x24
 8006274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0201 	bic.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f811 	bl	80062cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d108      	bne.n	80062ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062ec:	e031      	b.n	8006352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062ee:	2310      	movs	r3, #16
 80062f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062f2:	2310      	movs	r3, #16
 80062f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	0e5b      	lsrs	r3, r3, #25
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f003 0307 	and.w	r3, r3, #7
 8006304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	0f5b      	lsrs	r3, r3, #29
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	7b3a      	ldrb	r2, [r7, #12]
 800631a:	4911      	ldr	r1, [pc, #68]	; (8006360 <UARTEx_SetNbDataToProcess+0x94>)
 800631c:	5c8a      	ldrb	r2, [r1, r2]
 800631e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006322:	7b3a      	ldrb	r2, [r7, #12]
 8006324:	490f      	ldr	r1, [pc, #60]	; (8006364 <UARTEx_SetNbDataToProcess+0x98>)
 8006326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006328:	fb93 f3f2 	sdiv	r3, r3, r2
 800632c:	b29a      	uxth	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	7b7a      	ldrb	r2, [r7, #13]
 8006338:	4909      	ldr	r1, [pc, #36]	; (8006360 <UARTEx_SetNbDataToProcess+0x94>)
 800633a:	5c8a      	ldrb	r2, [r1, r2]
 800633c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006340:	7b7a      	ldrb	r2, [r7, #13]
 8006342:	4908      	ldr	r1, [pc, #32]	; (8006364 <UARTEx_SetNbDataToProcess+0x98>)
 8006344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006346:	fb93 f3f2 	sdiv	r3, r3, r2
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	08006568 	.word	0x08006568
 8006364:	08006570 	.word	0x08006570

08006368 <__libc_init_array>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	4d0d      	ldr	r5, [pc, #52]	; (80063a0 <__libc_init_array+0x38>)
 800636c:	4c0d      	ldr	r4, [pc, #52]	; (80063a4 <__libc_init_array+0x3c>)
 800636e:	1b64      	subs	r4, r4, r5
 8006370:	10a4      	asrs	r4, r4, #2
 8006372:	2600      	movs	r6, #0
 8006374:	42a6      	cmp	r6, r4
 8006376:	d109      	bne.n	800638c <__libc_init_array+0x24>
 8006378:	4d0b      	ldr	r5, [pc, #44]	; (80063a8 <__libc_init_array+0x40>)
 800637a:	4c0c      	ldr	r4, [pc, #48]	; (80063ac <__libc_init_array+0x44>)
 800637c:	f000 f82e 	bl	80063dc <_init>
 8006380:	1b64      	subs	r4, r4, r5
 8006382:	10a4      	asrs	r4, r4, #2
 8006384:	2600      	movs	r6, #0
 8006386:	42a6      	cmp	r6, r4
 8006388:	d105      	bne.n	8006396 <__libc_init_array+0x2e>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006390:	4798      	blx	r3
 8006392:	3601      	adds	r6, #1
 8006394:	e7ee      	b.n	8006374 <__libc_init_array+0xc>
 8006396:	f855 3b04 	ldr.w	r3, [r5], #4
 800639a:	4798      	blx	r3
 800639c:	3601      	adds	r6, #1
 800639e:	e7f2      	b.n	8006386 <__libc_init_array+0x1e>
 80063a0:	08006580 	.word	0x08006580
 80063a4:	08006580 	.word	0x08006580
 80063a8:	08006580 	.word	0x08006580
 80063ac:	08006584 	.word	0x08006584

080063b0 <memcpy>:
 80063b0:	440a      	add	r2, r1
 80063b2:	4291      	cmp	r1, r2
 80063b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063b8:	d100      	bne.n	80063bc <memcpy+0xc>
 80063ba:	4770      	bx	lr
 80063bc:	b510      	push	{r4, lr}
 80063be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063c6:	4291      	cmp	r1, r2
 80063c8:	d1f9      	bne.n	80063be <memcpy+0xe>
 80063ca:	bd10      	pop	{r4, pc}

080063cc <memset>:
 80063cc:	4402      	add	r2, r0
 80063ce:	4603      	mov	r3, r0
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d100      	bne.n	80063d6 <memset+0xa>
 80063d4:	4770      	bx	lr
 80063d6:	f803 1b01 	strb.w	r1, [r3], #1
 80063da:	e7f9      	b.n	80063d0 <memset+0x4>

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr
