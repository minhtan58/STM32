
F407_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003494  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800363c  0800363c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800363c  0800363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003644  08003644  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003644  08003644  00013644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003648  08003648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800364c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  2000000c  08003658  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08003658  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076bd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a6  00000000  00000000  000276f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  00028ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  000293d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f320  00000000  00000000  00029a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007889  00000000  00000000  00048da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be3a8  00000000  00000000  00050631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e9d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c1c  00000000  00000000  0010ea2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003604 	.word	0x08003604

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003604 	.word	0x08003604

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fe32 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f81a 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9d4 	bl	8000878 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d0:	f000 f97c 	bl	80007cc <MX_DMA_Init>
  MX_UART4_Init();
 80004d4:	f000 f87e 	bl	80005d4 <MX_UART4_Init>
  MX_UART5_Init();
 80004d8:	f000 f8a6 	bl	8000628 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80004dc:	f000 f8ce 	bl	800067c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8f6 	bl	80006d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004e4:	f000 f91e 	bl	8000724 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80004e8:	f000 f946 	bl	8000778 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart4, &receive_data, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	4902      	ldr	r1, [pc, #8]	; (80004f8 <main+0x38>)
 80004f0:	4802      	ldr	r0, [pc, #8]	; (80004fc <main+0x3c>)
 80004f2:	f002 fa18 	bl	8002926 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <main+0x36>
 80004f8:	20000028 	.word	0x20000028
 80004fc:	2000031c 	.word	0x2000031c

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f003 f870 	bl	80035f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a27      	ldr	r2, [pc, #156]	; (80005cc <SystemClock_Config+0xcc>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <SystemClock_Config+0xd0>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800057e:	2304      	movs	r3, #4
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fd0c 	bl	8001fa4 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000592:	f000 f9df 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2105      	movs	r1, #5
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 ff6d 	bl	8002494 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c0:	f000 f9c8 	bl	8000954 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_UART4_Init+0x4c>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <MX_UART4_Init+0x50>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_UART4_Init+0x4c>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_UART4_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_UART4_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_UART4_Init+0x4c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_UART4_Init+0x4c>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_UART4_Init+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_UART4_Init+0x4c>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_UART4_Init+0x4c>)
 800060c:	f002 f93e 	bl	800288c <HAL_UART_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000616:	f000 f99d 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000031c 	.word	0x2000031c
 8000624:	40004c00 	.word	0x40004c00

08000628 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_UART5_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_UART5_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_UART5_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_UART5_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_UART5_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_UART5_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_UART5_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_UART5_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_UART5_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_UART5_Init+0x4c>)
 8000660:	f002 f914 	bl	800288c <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f973 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200001f0 	.word	0x200001f0
 8000678:	40005000 	.word	0x40005000

0800067c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_USART1_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006b4:	f002 f8ea 	bl	800288c <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f949 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000294 	.word	0x20000294
 80006cc:	40011000 	.word	0x40011000

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f002 f8c0 	bl	800288c <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f91f 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000360 	.word	0x20000360
 8000720:	40004400 	.word	0x40004400

08000724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART3_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800075c:	f002 f896 	bl	800288c <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f8f5 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200001ac 	.word	0x200001ac
 8000774:	40004800 	.word	0x40004800

08000778 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART6_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART6_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART6_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART6_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART6_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART6_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART6_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART6_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART6_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART6_UART_Init+0x4c>)
 80007b0:	f002 f86c 	bl	800288c <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f8cb 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200002d8 	.word	0x200002d8
 80007c8:	40011400 	.word	0x40011400

080007cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <MX_DMA_Init+0xa8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a26      	ldr	r2, [pc, #152]	; (8000874 <MX_DMA_Init+0xa8>)
 80007dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <MX_DMA_Init+0xa8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <MX_DMA_Init+0xa8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <MX_DMA_Init+0xa8>)
 80007f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_DMA_Init+0xa8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	200b      	movs	r0, #11
 8000810:	f000 fdd9 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000814:	200b      	movs	r0, #11
 8000816:	f000 fdf2 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	200c      	movs	r0, #12
 8000820:	f000 fdd1 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000824:	200c      	movs	r0, #12
 8000826:	f000 fdea 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	200d      	movs	r0, #13
 8000830:	f000 fdc9 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000834:	200d      	movs	r0, #13
 8000836:	f000 fde2 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2010      	movs	r0, #16
 8000840:	f000 fdc1 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000844:	2010      	movs	r0, #16
 8000846:	f000 fdda 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2039      	movs	r0, #57	; 0x39
 8000850:	f000 fdb9 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000854:	2039      	movs	r0, #57	; 0x39
 8000856:	f000 fdd2 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	203a      	movs	r0, #58	; 0x3a
 8000860:	f000 fdb1 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000864:	203a      	movs	r0, #58	; 0x3a
 8000866:	f000 fdca 	bl	80013fe <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <MX_GPIO_Init+0xd4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a2d      	ldr	r2, [pc, #180]	; (800094c <MX_GPIO_Init+0xd4>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <MX_GPIO_Init+0xd4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b27      	ldr	r3, [pc, #156]	; (800094c <MX_GPIO_Init+0xd4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a26      	ldr	r2, [pc, #152]	; (800094c <MX_GPIO_Init+0xd4>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <MX_GPIO_Init+0xd4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <MX_GPIO_Init+0xd4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a1f      	ldr	r2, [pc, #124]	; (800094c <MX_GPIO_Init+0xd4>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_GPIO_Init+0xd4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_GPIO_Init+0xd4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a18      	ldr	r2, [pc, #96]	; (800094c <MX_GPIO_Init+0xd4>)
 80008ec:	f043 0308 	orr.w	r3, r3, #8
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_GPIO_Init+0xd4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0308 	and.w	r3, r3, #8
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0xd4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <MX_GPIO_Init+0xd4>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_GPIO_Init+0xd4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_GPIO_Init+0xd8>)
 8000922:	f001 fb25 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000926:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0xd8>)
 8000940:	f001 f97a 	bl	8001c38 <HAL_GPIO_Init>

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020c00 	.word	0x40020c00

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b094      	sub	sp, #80	; 0x50
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a77      	ldr	r2, [pc, #476]	; (8000bb0 <HAL_UART_MspInit+0x1fc>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d163      	bne.n	8000a9e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80009da:	4b76      	ldr	r3, [pc, #472]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a75      	ldr	r2, [pc, #468]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 80009e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b73      	ldr	r3, [pc, #460]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80009f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
 80009f6:	4b6f      	ldr	r3, [pc, #444]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a6e      	ldr	r2, [pc, #440]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b6c      	ldr	r3, [pc, #432]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8000a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a1e:	2308      	movs	r3, #8
 8000a20:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a26:	4619      	mov	r1, r3
 8000a28:	4863      	ldr	r0, [pc, #396]	; (8000bb8 <HAL_UART_MspInit+0x204>)
 8000a2a:	f001 f905 	bl	8001c38 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000a2e:	4b63      	ldr	r3, [pc, #396]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a30:	4a63      	ldr	r2, [pc, #396]	; (8000bc0 <HAL_UART_MspInit+0x20c>)
 8000a32:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000a34:	4b61      	ldr	r3, [pc, #388]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b5f      	ldr	r3, [pc, #380]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b5c      	ldr	r3, [pc, #368]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a50:	4b5a      	ldr	r3, [pc, #360]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a56:	4b59      	ldr	r3, [pc, #356]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8000a5c:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a62:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a64:	4b55      	ldr	r3, [pc, #340]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6a:	4b54      	ldr	r3, [pc, #336]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000a70:	4852      	ldr	r0, [pc, #328]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a72:	f000 fcdf 	bl	8001434 <HAL_DMA_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000a7c:	f7ff ff6a 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a4e      	ldr	r2, [pc, #312]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a84:	639a      	str	r2, [r3, #56]	; 0x38
 8000a86:	4a4d      	ldr	r2, [pc, #308]	; (8000bbc <HAL_UART_MspInit+0x208>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2034      	movs	r0, #52	; 0x34
 8000a92:	f000 fc98 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a96:	2034      	movs	r0, #52	; 0x34
 8000a98:	f000 fcb1 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000a9c:	e25a      	b.n	8000f54 <HAL_UART_MspInit+0x5a0>
  else if(huart->Instance==UART5)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a48      	ldr	r2, [pc, #288]	; (8000bc4 <HAL_UART_MspInit+0x210>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	f040 8097 	bne.w	8000bd8 <HAL_UART_MspInit+0x224>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
 8000aae:	4b41      	ldr	r3, [pc, #260]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 8000ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aca:	4b3a      	ldr	r3, [pc, #232]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a39      	ldr	r2, [pc, #228]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b37      	ldr	r3, [pc, #220]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae6:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a32      	ldr	r2, [pc, #200]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b30      	ldr	r3, [pc, #192]	; (8000bb4 <HAL_UART_MspInit+0x200>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b10:	2308      	movs	r3, #8
 8000b12:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	482b      	ldr	r0, [pc, #172]	; (8000bc8 <HAL_UART_MspInit+0x214>)
 8000b1c:	f001 f88c 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b20:	2304      	movs	r3, #4
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b30:	2308      	movs	r3, #8
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4824      	ldr	r0, [pc, #144]	; (8000bcc <HAL_UART_MspInit+0x218>)
 8000b3c:	f001 f87c 	bl	8001c38 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b42:	4a24      	ldr	r2, [pc, #144]	; (8000bd4 <HAL_UART_MspInit+0x220>)
 8000b44:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b60:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b74:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000b82:	4813      	ldr	r0, [pc, #76]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b84:	f000 fc56 	bl	8001434 <HAL_DMA_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_UART_MspInit+0x1de>
      Error_Handler();
 8000b8e:	f7ff fee1 	bl	8000954 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b96:	639a      	str	r2, [r3, #56]	; 0x38
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_UART_MspInit+0x21c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2035      	movs	r0, #53	; 0x35
 8000ba4:	f000 fc0f 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000ba8:	2035      	movs	r0, #53	; 0x35
 8000baa:	f000 fc28 	bl	80013fe <HAL_NVIC_EnableIRQ>
}
 8000bae:	e1d1      	b.n	8000f54 <HAL_UART_MspInit+0x5a0>
 8000bb0:	40004c00 	.word	0x40004c00
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	2000002c 	.word	0x2000002c
 8000bc0:	40026040 	.word	0x40026040
 8000bc4:	40005000 	.word	0x40005000
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	200003a4 	.word	0x200003a4
 8000bd4:	40026010 	.word	0x40026010
  else if(huart->Instance==USART1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a9d      	ldr	r2, [pc, #628]	; (8000e54 <HAL_UART_MspInit+0x4a0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d164      	bne.n	8000cac <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
 8000be6:	4b9c      	ldr	r3, [pc, #624]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a9b      	ldr	r2, [pc, #620]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000bec:	f043 0310 	orr.w	r3, r3, #16
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b99      	ldr	r3, [pc, #612]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
 8000c02:	4b95      	ldr	r3, [pc, #596]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a94      	ldr	r2, [pc, #592]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b92      	ldr	r3, [pc, #584]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	623b      	str	r3, [r7, #32]
 8000c18:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c34:	4619      	mov	r1, r3
 8000c36:	4889      	ldr	r0, [pc, #548]	; (8000e5c <HAL_UART_MspInit+0x4a8>)
 8000c38:	f000 fffe 	bl	8001c38 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000c3c:	4b88      	ldr	r3, [pc, #544]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c3e:	4a89      	ldr	r2, [pc, #548]	; (8000e64 <HAL_UART_MspInit+0x4b0>)
 8000c40:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000c42:	4b87      	ldr	r3, [pc, #540]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c48:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4a:	4b85      	ldr	r3, [pc, #532]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c50:	4b83      	ldr	r3, [pc, #524]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c56:	4b82      	ldr	r3, [pc, #520]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c5e:	4b80      	ldr	r3, [pc, #512]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c64:	4b7e      	ldr	r3, [pc, #504]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c6a:	4b7d      	ldr	r3, [pc, #500]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c70:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c72:	4b7b      	ldr	r3, [pc, #492]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c78:	4b79      	ldr	r3, [pc, #484]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c7e:	4878      	ldr	r0, [pc, #480]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c80:	f000 fbd8 	bl	8001434 <HAL_DMA_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_UART_MspInit+0x2da>
      Error_Handler();
 8000c8a:	f7ff fe63 	bl	8000954 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a73      	ldr	r2, [pc, #460]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c92:	639a      	str	r2, [r3, #56]	; 0x38
 8000c94:	4a72      	ldr	r2, [pc, #456]	; (8000e60 <HAL_UART_MspInit+0x4ac>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2025      	movs	r0, #37	; 0x25
 8000ca0:	f000 fb91 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ca4:	2025      	movs	r0, #37	; 0x25
 8000ca6:	f000 fbaa 	bl	80013fe <HAL_NVIC_EnableIRQ>
}
 8000caa:	e153      	b.n	8000f54 <HAL_UART_MspInit+0x5a0>
  else if(huart->Instance==USART2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a6d      	ldr	r2, [pc, #436]	; (8000e68 <HAL_UART_MspInit+0x4b4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d163      	bne.n	8000d7e <HAL_UART_MspInit+0x3ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	4b67      	ldr	r3, [pc, #412]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a66      	ldr	r2, [pc, #408]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b64      	ldr	r3, [pc, #400]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	61fb      	str	r3, [r7, #28]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	4b60      	ldr	r3, [pc, #384]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a5f      	ldr	r2, [pc, #380]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b5d      	ldr	r3, [pc, #372]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d06:	4619      	mov	r1, r3
 8000d08:	4854      	ldr	r0, [pc, #336]	; (8000e5c <HAL_UART_MspInit+0x4a8>)
 8000d0a:	f000 ff95 	bl	8001c38 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d0e:	4b57      	ldr	r3, [pc, #348]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d10:	4a57      	ldr	r2, [pc, #348]	; (8000e70 <HAL_UART_MspInit+0x4bc>)
 8000d12:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d14:	4b55      	ldr	r3, [pc, #340]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d1c:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d22:	4b52      	ldr	r3, [pc, #328]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d28:	4b50      	ldr	r3, [pc, #320]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d30:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d36:	4b4d      	ldr	r3, [pc, #308]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d3c:	4b4b      	ldr	r3, [pc, #300]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d44:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d4a:	4b48      	ldr	r3, [pc, #288]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d50:	4846      	ldr	r0, [pc, #280]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d52:	f000 fb6f 	bl	8001434 <HAL_DMA_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_UART_MspInit+0x3ac>
      Error_Handler();
 8000d5c:	f7ff fdfa 	bl	8000954 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a42      	ldr	r2, [pc, #264]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d64:	639a      	str	r2, [r3, #56]	; 0x38
 8000d66:	4a41      	ldr	r2, [pc, #260]	; (8000e6c <HAL_UART_MspInit+0x4b8>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2026      	movs	r0, #38	; 0x26
 8000d72:	f000 fb28 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d76:	2026      	movs	r0, #38	; 0x26
 8000d78:	f000 fb41 	bl	80013fe <HAL_NVIC_EnableIRQ>
}
 8000d7c:	e0ea      	b.n	8000f54 <HAL_UART_MspInit+0x5a0>
  else if(huart->Instance==USART3)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a3c      	ldr	r2, [pc, #240]	; (8000e74 <HAL_UART_MspInit+0x4c0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d17d      	bne.n	8000e84 <HAL_UART_MspInit+0x4d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a31      	ldr	r2, [pc, #196]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a2a      	ldr	r2, [pc, #168]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <HAL_UART_MspInit+0x4a4>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4826      	ldr	r0, [pc, #152]	; (8000e78 <HAL_UART_MspInit+0x4c4>)
 8000dde:	f000 ff2b 	bl	8001c38 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000de4:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <HAL_UART_MspInit+0x4cc>)
 8000de6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000dea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e02:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e16:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e24:	4815      	ldr	r0, [pc, #84]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000e26:	f000 fb05 	bl	8001434 <HAL_DMA_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_UART_MspInit+0x480>
      Error_Handler();
 8000e30:	f7ff fd90 	bl	8000954 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38
 8000e3a:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_UART_MspInit+0x4c8>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2027      	movs	r0, #39	; 0x27
 8000e46:	f000 fabe 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e4a:	2027      	movs	r0, #39	; 0x27
 8000e4c:	f000 fad7 	bl	80013fe <HAL_NVIC_EnableIRQ>
}
 8000e50:	e080      	b.n	8000f54 <HAL_UART_MspInit+0x5a0>
 8000e52:	bf00      	nop
 8000e54:	40011000 	.word	0x40011000
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	20000234 	.word	0x20000234
 8000e64:	40026440 	.word	0x40026440
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	2000008c 	.word	0x2000008c
 8000e70:	40026088 	.word	0x40026088
 8000e74:	40004800 	.word	0x40004800
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	2000014c 	.word	0x2000014c
 8000e80:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a34      	ldr	r2, [pc, #208]	; (8000f5c <HAL_UART_MspInit+0x5a8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d162      	bne.n	8000f54 <HAL_UART_MspInit+0x5a0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b33      	ldr	r3, [pc, #204]	; (8000f60 <HAL_UART_MspInit+0x5ac>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a32      	ldr	r2, [pc, #200]	; (8000f60 <HAL_UART_MspInit+0x5ac>)
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b30      	ldr	r3, [pc, #192]	; (8000f60 <HAL_UART_MspInit+0x5ac>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <HAL_UART_MspInit+0x5ac>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a2b      	ldr	r2, [pc, #172]	; (8000f60 <HAL_UART_MspInit+0x5ac>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_UART_MspInit+0x5ac>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec6:	23c0      	movs	r3, #192	; 0xc0
 8000ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4820      	ldr	r0, [pc, #128]	; (8000f64 <HAL_UART_MspInit+0x5b0>)
 8000ee2:	f000 fea9 	bl	8001c38 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000ee8:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <HAL_UART_MspInit+0x5b8>)
 8000eea:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000eee:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000ef2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f06:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000f28:	480f      	ldr	r0, [pc, #60]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000f2a:	f000 fa83 	bl	8001434 <HAL_DMA_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_UART_MspInit+0x584>
      Error_Handler();
 8000f34:	f7ff fd0e 	bl	8000954 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_UART_MspInit+0x5b4>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2047      	movs	r0, #71	; 0x47
 8000f4a:	f000 fa3c 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f4e:	2047      	movs	r0, #71	; 0x47
 8000f50:	f000 fa55 	bl	80013fe <HAL_NVIC_EnableIRQ>
}
 8000f54:	bf00      	nop
 8000f56:	3750      	adds	r7, #80	; 0x50
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40011400 	.word	0x40011400
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020800 	.word	0x40020800
 8000f68:	200000ec 	.word	0x200000ec
 8000f6c:	40026428 	.word	0x40026428

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f908 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <DMA1_Stream0_IRQHandler+0x10>)
 8000fca:	f000 fbcb 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200003a4 	.word	0x200003a4

08000fd8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <DMA1_Stream1_IRQHandler+0x10>)
 8000fde:	f000 fbc1 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000014c 	.word	0x2000014c

08000fec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <DMA1_Stream2_IRQHandler+0x10>)
 8000ff2:	f000 fbb7 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000002c 	.word	0x2000002c

08001000 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <DMA1_Stream5_IRQHandler+0x10>)
 8001006:	f000 fbad 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000008c 	.word	0x2000008c

08001014 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <USART1_IRQHandler+0x10>)
 800101a:	f001 fcb5 	bl	8002988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000294 	.word	0x20000294

08001028 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <USART2_IRQHandler+0x10>)
 800102e:	f001 fcab 	bl	8002988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000360 	.word	0x20000360

0800103c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <USART3_IRQHandler+0x10>)
 8001042:	f001 fca1 	bl	8002988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001ac 	.word	0x200001ac

08001050 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <UART4_IRQHandler+0x10>)
 8001056:	f001 fc97 	bl	8002988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000031c 	.word	0x2000031c

08001064 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <UART5_IRQHandler+0x10>)
 800106a:	f001 fc8d 	bl	8002988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200001f0 	.word	0x200001f0

08001078 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <DMA2_Stream1_IRQHandler+0x10>)
 800107e:	f000 fb71 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000ec 	.word	0x200000ec

0800108c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <DMA2_Stream2_IRQHandler+0x10>)
 8001092:	f000 fb67 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000234 	.word	0x20000234

080010a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <USART6_IRQHandler+0x10>)
 80010a6:	f001 fc6f 	bl	8002988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200002d8 	.word	0x200002d8

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010de:	490e      	ldr	r1, [pc, #56]	; (8001118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f4:	4c0b      	ldr	r4, [pc, #44]	; (8001124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001102:	f7ff ffd7 	bl	80010b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f002 fa51 	bl	80035ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff f9d9 	bl	80004c0 <main>
  bx  lr    
 800110e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800111c:	0800364c 	.word	0x0800364c
  ldr r2, =_sbss
 8001120:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001124:	20000408 	.word	0x20000408

08001128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <HAL_Init+0x40>)
 8001136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_Init+0x40>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_Init+0x40>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f92b 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fc00 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023c00 	.word	0x40023c00

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f943 	bl	800141a <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f90b 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000404 	.word	0x20000404

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000404 	.word	0x20000404

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <__NVIC_EnableIRQ+0x38>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff29 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff3e 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff31 	bl	8001274 <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffa2 	bl	800136c <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff feda 	bl	80011f8 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e099      	b.n	8001584 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2202      	movs	r2, #2
 800145c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001470:	e00f      	b.n	8001492 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001472:	f7ff fec1 	bl	80011f8 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b05      	cmp	r3, #5
 800147e:	d908      	bls.n	8001492 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2220      	movs	r2, #32
 8001484:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2203      	movs	r2, #3
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e078      	b.n	8001584 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1e8      	bne.n	8001472 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	4b38      	ldr	r3, [pc, #224]	; (800158c <HAL_DMA_Init+0x158>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d107      	bne.n	80014fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4313      	orrs	r3, r2
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f023 0307 	bic.w	r3, r3, #7
 8001512:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	4313      	orrs	r3, r2
 800151c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	2b04      	cmp	r3, #4
 8001524:	d117      	bne.n	8001556 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4313      	orrs	r3, r2
 800152e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00e      	beq.n	8001556 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fb01 	bl	8001b40 <DMA_CheckFifoParam>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2240      	movs	r2, #64	; 0x40
 8001548:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001552:	2301      	movs	r3, #1
 8001554:	e016      	b.n	8001584 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fab8 	bl	8001ad4 <DMA_CalcBaseAndBitshift>
 8001564:	4603      	mov	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156c:	223f      	movs	r2, #63	; 0x3f
 800156e:	409a      	lsls	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	f010803f 	.word	0xf010803f

08001590 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Start_IT+0x26>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e040      	b.n	8001638 <HAL_DMA_Start_IT+0xa8>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d12f      	bne.n	800162a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 fa4a 	bl	8001a78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	223f      	movs	r2, #63	; 0x3f
 80015ea:	409a      	lsls	r2, r3
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0216 	orr.w	r2, r2, #22
 80015fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0208 	orr.w	r2, r2, #8
 8001616:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e005      	b.n	8001636 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001632:	2302      	movs	r3, #2
 8001634:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001636:	7dfb      	ldrb	r3, [r7, #23]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800164e:	f7ff fdd3 	bl	80011f8 <HAL_GetTick>
 8001652:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d008      	beq.n	8001672 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e052      	b.n	8001718 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0216 	bic.w	r2, r2, #22
 8001680:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001690:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	2b00      	cmp	r3, #0
 8001698:	d103      	bne.n	80016a2 <HAL_DMA_Abort+0x62>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d007      	beq.n	80016b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0208 	bic.w	r2, r2, #8
 80016b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0201 	bic.w	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c2:	e013      	b.n	80016ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016c4:	f7ff fd98 	bl	80011f8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d90c      	bls.n	80016ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2220      	movs	r2, #32
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2203      	movs	r2, #3
 80016e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e015      	b.n	8001718 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1e4      	bne.n	80016c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	223f      	movs	r2, #63	; 0x3f
 8001700:	409a      	lsls	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d004      	beq.n	800173e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00c      	b.n	8001758 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2205      	movs	r2, #5
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001770:	4b92      	ldr	r3, [pc, #584]	; (80019bc <HAL_DMA_IRQHandler+0x258>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a92      	ldr	r2, [pc, #584]	; (80019c0 <HAL_DMA_IRQHandler+0x25c>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0a9b      	lsrs	r3, r3, #10
 800177c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2208      	movs	r2, #8
 8001790:	409a      	lsls	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01a      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	2208      	movs	r2, #8
 80017be:	409a      	lsls	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	2201      	movs	r2, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d012      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	2201      	movs	r2, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fe:	f043 0202 	orr.w	r2, r3, #2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180a:	2204      	movs	r2, #4
 800180c:	409a      	lsls	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d012      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00b      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	2204      	movs	r2, #4
 800182a:	409a      	lsls	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001834:	f043 0204 	orr.w	r2, r3, #4
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001840:	2210      	movs	r2, #16
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d043      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03c      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	2210      	movs	r2, #16
 8001860:	409a      	lsls	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d018      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2b00      	cmp	r3, #0
 8001888:	d024      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
 8001892:	e01f      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
 80018a4:	e016      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0208 	bic.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d8:	2220      	movs	r2, #32
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 808e 	beq.w	8001a02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8086 	beq.w	8001a02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	2220      	movs	r2, #32
 80018fc:	409a      	lsls	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b05      	cmp	r3, #5
 800190c:	d136      	bne.n	800197c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0216 	bic.w	r2, r2, #22
 800191c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800192c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <HAL_DMA_IRQHandler+0x1da>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0208 	bic.w	r2, r2, #8
 800194c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	223f      	movs	r2, #63	; 0x3f
 8001954:	409a      	lsls	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	2b00      	cmp	r3, #0
 8001970:	d07d      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
        }
        return;
 800197a:	e078      	b.n	8001a6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01c      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d108      	bne.n	80019aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	2b00      	cmp	r3, #0
 800199e:	d030      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
 80019a8:	e02b      	b.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d027      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
 80019ba:	e022      	b.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
 80019bc:	20000000 	.word	0x20000000
 80019c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0210 	bic.w	r2, r2, #16
 80019e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d032      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d022      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2205      	movs	r2, #5
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3301      	adds	r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d307      	bcc.n	8001a4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f2      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x2ca>
 8001a48:	e000      	b.n	8001a4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
 8001a6c:	e000      	b.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a6e:	bf00      	nop
    }
  }
}
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop

08001a78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b40      	cmp	r3, #64	; 0x40
 8001aa4:	d108      	bne.n	8001ab8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ab6:	e007      	b.n	8001ac8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	60da      	str	r2, [r3, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3b10      	subs	r3, #16
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <DMA_CalcBaseAndBitshift+0x68>)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d909      	bls.n	8001b16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	1d1a      	adds	r2, r3, #4
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	659a      	str	r2, [r3, #88]	; 0x58
 8001b14:	e007      	b.n	8001b26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	aaaaaaab 	.word	0xaaaaaaab
 8001b3c:	08003634 	.word	0x08003634

08001b40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11f      	bne.n	8001b9a <DMA_CheckFifoParam+0x5a>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d856      	bhi.n	8001c0e <DMA_CheckFifoParam+0xce>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <DMA_CheckFifoParam+0x28>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001b8b 	.word	0x08001b8b
 8001b70:	08001b79 	.word	0x08001b79
 8001b74:	08001c0f 	.word	0x08001c0f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d046      	beq.n	8001c12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b88:	e043      	b.n	8001c12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b92:	d140      	bne.n	8001c16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b98:	e03d      	b.n	8001c16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba2:	d121      	bne.n	8001be8 <DMA_CheckFifoParam+0xa8>
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d837      	bhi.n	8001c1a <DMA_CheckFifoParam+0xda>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <DMA_CheckFifoParam+0x70>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001bc1 	.word	0x08001bc1
 8001bb4:	08001bc7 	.word	0x08001bc7
 8001bb8:	08001bc1 	.word	0x08001bc1
 8001bbc:	08001bd9 	.word	0x08001bd9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc4:	e030      	b.n	8001c28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d025      	beq.n	8001c1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd6:	e022      	b.n	8001c1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001be0:	d11f      	bne.n	8001c22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001be6:	e01c      	b.n	8001c22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d903      	bls.n	8001bf6 <DMA_CheckFifoParam+0xb6>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d003      	beq.n	8001bfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bf4:	e018      	b.n	8001c28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8001bfa:	e015      	b.n	8001c28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00e      	beq.n	8001c26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c0c:	e00b      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c0e:	bf00      	nop
 8001c10:	e00a      	b.n	8001c28 <DMA_CheckFifoParam+0xe8>
      break;
 8001c12:	bf00      	nop
 8001c14:	e008      	b.n	8001c28 <DMA_CheckFifoParam+0xe8>
      break;
 8001c16:	bf00      	nop
 8001c18:	e006      	b.n	8001c28 <DMA_CheckFifoParam+0xe8>
      break;
 8001c1a:	bf00      	nop
 8001c1c:	e004      	b.n	8001c28 <DMA_CheckFifoParam+0xe8>
      break;
 8001c1e:	bf00      	nop
 8001c20:	e002      	b.n	8001c28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c22:	bf00      	nop
 8001c24:	e000      	b.n	8001c28 <DMA_CheckFifoParam+0xe8>
      break;
 8001c26:	bf00      	nop
    }
  } 
  
  return status; 
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	e16b      	b.n	8001f2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c54:	2201      	movs	r2, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f040 815a 	bne.w	8001f26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d005      	beq.n	8001c8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d130      	bne.n	8001cec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0201 	and.w	r2, r3, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d017      	beq.n	8001d28 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d123      	bne.n	8001d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	69b9      	ldr	r1, [r7, #24]
 8001d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80b4 	beq.w	8001f26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b60      	ldr	r3, [pc, #384]	; (8001f44 <HAL_GPIO_Init+0x30c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a5f      	ldr	r2, [pc, #380]	; (8001f44 <HAL_GPIO_Init+0x30c>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_GPIO_Init+0x30c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dda:	4a5b      	ldr	r2, [pc, #364]	; (8001f48 <HAL_GPIO_Init+0x310>)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a52      	ldr	r2, [pc, #328]	; (8001f4c <HAL_GPIO_Init+0x314>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02b      	beq.n	8001e5e <HAL_GPIO_Init+0x226>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a51      	ldr	r2, [pc, #324]	; (8001f50 <HAL_GPIO_Init+0x318>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d025      	beq.n	8001e5a <HAL_GPIO_Init+0x222>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a50      	ldr	r2, [pc, #320]	; (8001f54 <HAL_GPIO_Init+0x31c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01f      	beq.n	8001e56 <HAL_GPIO_Init+0x21e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4f      	ldr	r2, [pc, #316]	; (8001f58 <HAL_GPIO_Init+0x320>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_Init+0x21a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4e      	ldr	r2, [pc, #312]	; (8001f5c <HAL_GPIO_Init+0x324>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0x216>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4d      	ldr	r2, [pc, #308]	; (8001f60 <HAL_GPIO_Init+0x328>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_GPIO_Init+0x212>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_GPIO_Init+0x32c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x20e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4b      	ldr	r2, [pc, #300]	; (8001f68 <HAL_GPIO_Init+0x330>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_GPIO_Init+0x20a>
 8001e3e:	2307      	movs	r3, #7
 8001e40:	e00e      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e42:	2308      	movs	r3, #8
 8001e44:	e00c      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e46:	2306      	movs	r3, #6
 8001e48:	e00a      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	e008      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e4e:	2304      	movs	r3, #4
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e52:	2303      	movs	r3, #3
 8001e54:	e004      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	f002 0203 	and.w	r2, r2, #3
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	4093      	lsls	r3, r2
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e70:	4935      	ldr	r1, [pc, #212]	; (8001f48 <HAL_GPIO_Init+0x310>)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea2:	4a32      	ldr	r2, [pc, #200]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ea8:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ecc:	4a27      	ldr	r2, [pc, #156]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b0f      	cmp	r3, #15
 8001f30:	f67f ae90 	bls.w	8001c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40013800 	.word	0x40013800
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40020800 	.word	0x40020800
 8001f58:	40020c00 	.word	0x40020c00
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40021400 	.word	0x40021400
 8001f64:	40021800 	.word	0x40021800
 8001f68:	40021c00 	.word	0x40021c00
 8001f6c:	40013c00 	.word	0x40013c00

08001f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f8c:	e003      	b.n	8001f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	041a      	lsls	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	619a      	str	r2, [r3, #24]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e264      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d075      	beq.n	80020ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fc2:	4ba3      	ldr	r3, [pc, #652]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fce:	4ba0      	ldr	r3, [pc, #640]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d112      	bne.n	8002000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fda:	4b9d      	ldr	r3, [pc, #628]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe6:	d10b      	bne.n	8002000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	4b99      	ldr	r3, [pc, #612]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d05b      	beq.n	80020ac <HAL_RCC_OscConfig+0x108>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d157      	bne.n	80020ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e23f      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002008:	d106      	bne.n	8002018 <HAL_RCC_OscConfig+0x74>
 800200a:	4b91      	ldr	r3, [pc, #580]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a90      	ldr	r2, [pc, #576]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e01d      	b.n	8002054 <HAL_RCC_OscConfig+0xb0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0x98>
 8002022:	4b8b      	ldr	r3, [pc, #556]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a8a      	ldr	r2, [pc, #552]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b88      	ldr	r3, [pc, #544]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a87      	ldr	r2, [pc, #540]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e00b      	b.n	8002054 <HAL_RCC_OscConfig+0xb0>
 800203c:	4b84      	ldr	r3, [pc, #528]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a83      	ldr	r2, [pc, #524]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b81      	ldr	r3, [pc, #516]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a80      	ldr	r2, [pc, #512]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 800204e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff f8cc 	bl	80011f8 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff f8c8 	bl	80011f8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e204      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b76      	ldr	r3, [pc, #472]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0xc0>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff f8b8 	bl	80011f8 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff f8b4 	bl	80011f8 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1f0      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	4b6c      	ldr	r3, [pc, #432]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0xe8>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d063      	beq.n	8002182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ba:	4b65      	ldr	r3, [pc, #404]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c6:	4b62      	ldr	r3, [pc, #392]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d11c      	bne.n	800210c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d2:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_OscConfig+0x152>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e1c4      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4b56      	ldr	r3, [pc, #344]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4952      	ldr	r1, [pc, #328]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	e03a      	b.n	8002182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <HAL_RCC_OscConfig+0x2b0>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7ff f86d 	bl	80011f8 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002122:	f7ff f869 	bl	80011f8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1a5      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b43      	ldr	r3, [pc, #268]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4940      	ldr	r1, [pc, #256]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <HAL_RCC_OscConfig+0x2b0>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7ff f84c 	bl	80011f8 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002164:	f7ff f848 	bl	80011f8 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e184      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d030      	beq.n	80021f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d016      	beq.n	80021c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002196:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_RCC_OscConfig+0x2b4>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7ff f82c 	bl	80011f8 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a4:	f7ff f828 	bl	80011f8 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e164      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x200>
 80021c2:	e015      	b.n	80021f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_OscConfig+0x2b4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7ff f815 	bl	80011f8 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d2:	f7ff f811 	bl	80011f8 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e14d      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80021e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a0 	beq.w	800233e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10f      	bne.n	800222e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_OscConfig+0x2b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d121      	bne.n	800227e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_RCC_OscConfig+0x2b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_RCC_OscConfig+0x2b8>)
 8002240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002246:	f7fe ffd7 	bl	80011f8 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	e011      	b.n	8002272 <HAL_RCC_OscConfig+0x2ce>
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	42470000 	.word	0x42470000
 8002258:	42470e80 	.word	0x42470e80
 800225c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002260:	f7fe ffca 	bl	80011f8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e106      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b85      	ldr	r3, [pc, #532]	; (8002488 <HAL_RCC_OscConfig+0x4e4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x2f0>
 8002286:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a80      	ldr	r2, [pc, #512]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
 8002292:	e01c      	b.n	80022ce <HAL_RCC_OscConfig+0x32a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d10c      	bne.n	80022b6 <HAL_RCC_OscConfig+0x312>
 800229c:	4b7b      	ldr	r3, [pc, #492]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a7a      	ldr	r2, [pc, #488]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	4b78      	ldr	r3, [pc, #480]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a77      	ldr	r2, [pc, #476]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
 80022b4:	e00b      	b.n	80022ce <HAL_RCC_OscConfig+0x32a>
 80022b6:	4b75      	ldr	r3, [pc, #468]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a74      	ldr	r2, [pc, #464]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	4b72      	ldr	r3, [pc, #456]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c6:	4a71      	ldr	r2, [pc, #452]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 80022c8:	f023 0304 	bic.w	r3, r3, #4
 80022cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d015      	beq.n	8002302 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7fe ff8f 	bl	80011f8 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe ff8b 	bl	80011f8 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0c5      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	4b65      	ldr	r3, [pc, #404]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ee      	beq.n	80022de <HAL_RCC_OscConfig+0x33a>
 8002300:	e014      	b.n	800232c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe ff79 	bl	80011f8 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7fe ff75 	bl	80011f8 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	; 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0af      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	4b5a      	ldr	r3, [pc, #360]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ee      	bne.n	800230a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002332:	4b56      	ldr	r3, [pc, #344]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a55      	ldr	r2, [pc, #340]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 8002338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 809b 	beq.w	800247e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002348:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b08      	cmp	r3, #8
 8002352:	d05c      	beq.n	800240e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d141      	bne.n	80023e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <HAL_RCC_OscConfig+0x4ec>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe ff49 	bl	80011f8 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe ff45 	bl	80011f8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e081      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237c:	4b43      	ldr	r3, [pc, #268]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	019b      	lsls	r3, r3, #6
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	3b01      	subs	r3, #1
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	061b      	lsls	r3, r3, #24
 80023ac:	4937      	ldr	r1, [pc, #220]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <HAL_RCC_OscConfig+0x4ec>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff1e 	bl	80011f8 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe ff1a 	bl	80011f8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e056      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x41c>
 80023de:	e04e      	b.n	800247e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCC_OscConfig+0x4ec>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7fe ff07 	bl	80011f8 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ee:	f7fe ff03 	bl	80011f8 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e03f      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002400:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x44a>
 800240c:	e037      	b.n	800247e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e032      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_RCC_OscConfig+0x4e8>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d028      	beq.n	800247a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d121      	bne.n	800247a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d11a      	bne.n	800247a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800244a:	4013      	ands	r3, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002450:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002452:	4293      	cmp	r3, r2
 8002454:	d111      	bne.n	800247a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	3b01      	subs	r3, #1
 8002464:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d107      	bne.n	800247a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40007000 	.word	0x40007000
 800248c:	40023800 	.word	0x40023800
 8002490:	42470060 	.word	0x42470060

08002494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0cc      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a8:	4b68      	ldr	r3, [pc, #416]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d90c      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0b8      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d020      	beq.n	800251e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e8:	4b59      	ldr	r3, [pc, #356]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a58      	ldr	r2, [pc, #352]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002500:	4b53      	ldr	r3, [pc, #332]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800250a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250c:	4b50      	ldr	r3, [pc, #320]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	494d      	ldr	r1, [pc, #308]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d044      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b47      	ldr	r3, [pc, #284]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d119      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e07f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d003      	beq.n	8002552 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254e:	2b03      	cmp	r3, #3
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002562:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e067      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4934      	ldr	r1, [pc, #208]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002584:	f7fe fe38 	bl	80011f8 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7fe fe34 	bl	80011f8 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e04f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b4:	4b25      	ldr	r3, [pc, #148]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d20c      	bcs.n	80025dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e032      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4916      	ldr	r1, [pc, #88]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	490e      	ldr	r1, [pc, #56]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800261a:	f000 f821 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 800261e:	4602      	mov	r2, r0
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	490a      	ldr	r1, [pc, #40]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	5ccb      	ldrb	r3, [r1, r3]
 800262e:	fa22 f303 	lsr.w	r3, r2, r3
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe fd98 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023c00 	.word	0x40023c00
 8002650:	40023800 	.word	0x40023800
 8002654:	0800361c 	.word	0x0800361c
 8002658:	20000000 	.word	0x20000000
 800265c:	20000004 	.word	0x20000004

08002660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002660:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	2300      	movs	r3, #0
 8002672:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002678:	4b67      	ldr	r3, [pc, #412]	; (8002818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d00d      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002684:	2b08      	cmp	r3, #8
 8002686:	f200 80bd 	bhi.w	8002804 <HAL_RCC_GetSysClockFreq+0x1a4>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x34>
 800268e:	2b04      	cmp	r3, #4
 8002690:	d003      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x3a>
 8002692:	e0b7      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b61      	ldr	r3, [pc, #388]	; (800281c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002696:	60bb      	str	r3, [r7, #8]
       break;
 8002698:	e0b7      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800269a:	4b61      	ldr	r3, [pc, #388]	; (8002820 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800269c:	60bb      	str	r3, [r7, #8]
      break;
 800269e:	e0b4      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a0:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026aa:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d04d      	beq.n	8002752 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b6:	4b58      	ldr	r3, [pc, #352]	; (8002818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	461a      	mov	r2, r3
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	ea02 0800 	and.w	r8, r2, r0
 80026ce:	ea03 0901 	and.w	r9, r3, r1
 80026d2:	4640      	mov	r0, r8
 80026d4:	4649      	mov	r1, r9
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	014b      	lsls	r3, r1, #5
 80026e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026e4:	0142      	lsls	r2, r0, #5
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	ebb0 0008 	subs.w	r0, r0, r8
 80026ee:	eb61 0109 	sbc.w	r1, r1, r9
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	018b      	lsls	r3, r1, #6
 80026fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002700:	0182      	lsls	r2, r0, #6
 8002702:	1a12      	subs	r2, r2, r0
 8002704:	eb63 0301 	sbc.w	r3, r3, r1
 8002708:	f04f 0000 	mov.w	r0, #0
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	00d9      	lsls	r1, r3, #3
 8002712:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002716:	00d0      	lsls	r0, r2, #3
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	eb12 0208 	adds.w	r2, r2, r8
 8002720:	eb43 0309 	adc.w	r3, r3, r9
 8002724:	f04f 0000 	mov.w	r0, #0
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	0259      	lsls	r1, r3, #9
 800272e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002732:	0250      	lsls	r0, r2, #9
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	461a      	mov	r2, r3
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	f7fd fd40 	bl	80001c8 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4613      	mov	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e04a      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002752:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	099b      	lsrs	r3, r3, #6
 8002758:	461a      	mov	r2, r3
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	ea02 0400 	and.w	r4, r2, r0
 800276a:	ea03 0501 	and.w	r5, r3, r1
 800276e:	4620      	mov	r0, r4
 8002770:	4629      	mov	r1, r5
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	014b      	lsls	r3, r1, #5
 800277c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002780:	0142      	lsls	r2, r0, #5
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	1b00      	subs	r0, r0, r4
 8002788:	eb61 0105 	sbc.w	r1, r1, r5
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	018b      	lsls	r3, r1, #6
 8002796:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800279a:	0182      	lsls	r2, r0, #6
 800279c:	1a12      	subs	r2, r2, r0
 800279e:	eb63 0301 	sbc.w	r3, r3, r1
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	00d9      	lsls	r1, r3, #3
 80027ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027b0:	00d0      	lsls	r0, r2, #3
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	1912      	adds	r2, r2, r4
 80027b8:	eb45 0303 	adc.w	r3, r5, r3
 80027bc:	f04f 0000 	mov.w	r0, #0
 80027c0:	f04f 0100 	mov.w	r1, #0
 80027c4:	0299      	lsls	r1, r3, #10
 80027c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027ca:	0290      	lsls	r0, r2, #10
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	f7fd fcf4 	bl	80001c8 <__aeabi_uldivmod>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4613      	mov	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0c1b      	lsrs	r3, r3, #16
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	3301      	adds	r3, #1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	60bb      	str	r3, [r7, #8]
      break;
 8002802:	e002      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002806:	60bb      	str	r3, [r7, #8]
      break;
 8002808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280a:	68bb      	ldr	r3, [r7, #8]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	00f42400 	.word	0x00f42400
 8002820:	007a1200 	.word	0x007a1200

08002824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_RCC_GetHCLKFreq+0x14>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000000 	.word	0x20000000

0800283c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002840:	f7ff fff0 	bl	8002824 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	0a9b      	lsrs	r3, r3, #10
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	0800362c 	.word	0x0800362c

08002864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002868:	f7ff ffdc 	bl	8002824 <HAL_RCC_GetHCLKFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	0b5b      	lsrs	r3, r3, #13
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4903      	ldr	r1, [pc, #12]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	0800362c 	.word	0x0800362c

0800288c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e03f      	b.n	800291e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe f87e 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2224      	movs	r2, #36	; 0x24
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fca3 	bl	800321c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	4613      	mov	r3, r2
 8002932:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b20      	cmp	r3, #32
 800293e:	d11d      	bne.n	800297c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_UART_Receive_DMA+0x26>
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e016      	b.n	800297e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_UART_Receive_DMA+0x38>
 800295a:	2302      	movs	r3, #2
 800295c:	e00f      	b.n	800297e <HAL_UART_Receive_DMA+0x58>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	461a      	mov	r2, r3
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fa98 	bl	8002ea8 <UART_Start_Receive_DMA>
 8002978:	4603      	mov	r3, r0
 800297a:	e000      	b.n	800297e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800297c:	2302      	movs	r3, #2
  }
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_UART_IRQHandler+0x52>
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fb8b 	bl	80030ee <UART_Receive_IT>
      return;
 80029d8:	e17c      	b.n	8002cd4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80b1 	beq.w	8002b44 <HAL_UART_IRQHandler+0x1bc>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <HAL_UART_IRQHandler+0x70>
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80a6 	beq.w	8002b44 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_UART_IRQHandler+0x90>
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_UART_IRQHandler+0xb0>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f043 0202 	orr.w	r2, r3, #2
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_UART_IRQHandler+0xd0>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f043 0204 	orr.w	r2, r3, #4
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00f      	beq.n	8002a82 <HAL_UART_IRQHandler+0xfa>
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d104      	bne.n	8002a76 <HAL_UART_IRQHandler+0xee>
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f043 0208 	orr.w	r2, r3, #8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 811f 	beq.w	8002cca <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x11e>
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fb24 	bl	80030ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <HAL_UART_IRQHandler+0x146>
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d031      	beq.n	8002b32 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa64 	bl	8002f9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d123      	bne.n	8002b2a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002af0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d013      	beq.n	8002b22 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	4a77      	ldr	r2, [pc, #476]	; (8002cdc <HAL_UART_IRQHandler+0x354>)
 8002b00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fe0a 	bl	8001720 <HAL_DMA_Abort_IT>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b20:	e00e      	b.n	8002b40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f8fa 	bl	8002d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b28:	e00a      	b.n	8002b40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8f6 	bl	8002d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b30:	e006      	b.n	8002b40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8f2 	bl	8002d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b3e:	e0c4      	b.n	8002cca <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b40:	bf00      	nop
    return;
 8002b42:	e0c2      	b.n	8002cca <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	f040 80a2 	bne.w	8002c92 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 809c 	beq.w	8002c92 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8096 	beq.w	8002c92 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b40      	cmp	r3, #64	; 0x40
 8002b88:	d14f      	bne.n	8002c2a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002b94:	8a3b      	ldrh	r3, [r7, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8099 	beq.w	8002cce <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ba0:	8a3a      	ldrh	r2, [r7, #16]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	f080 8093 	bcs.w	8002cce <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8a3a      	ldrh	r2, [r7, #16]
 8002bac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb8:	d02b      	beq.n	8002c12 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bc8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0210 	bic.w	r2, r2, #16
 8002c06:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fd17 	bl	8001640 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f884 	bl	8002d30 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c28:	e051      	b.n	8002cce <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d047      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002c42:	8a7b      	ldrh	r3, [r7, #18]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d044      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c56:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0210 	bic.w	r2, r2, #16
 8002c84:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c86:	8a7b      	ldrh	r3, [r7, #18]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f850 	bl	8002d30 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c90:	e01f      	b.n	8002cd2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_UART_IRQHandler+0x326>
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f9b9 	bl	800301e <UART_Transmit_IT>
    return;
 8002cac:	e012      	b.n	8002cd4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x34c>
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f9fb 	bl	80030be <UART_EndTransmit_IT>
    return;
 8002cc8:	e004      	b.n	8002cd4 <HAL_UART_IRQHandler+0x34c>
    return;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <HAL_UART_IRQHandler+0x34c>
      return;
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <HAL_UART_IRQHandler+0x34c>
      return;
 8002cd2:	bf00      	nop
  }
}
 8002cd4:	3728      	adds	r7, #40	; 0x28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	08002ff7 	.word	0x08002ff7

08002ce0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d12a      	bne.n	8002dba <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d78:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d98:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d107      	bne.n	8002dba <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0210 	bic.w	r2, r2, #16
 8002db8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d106      	bne.n	8002dd0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff ffb1 	bl	8002d30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002dce:	e002      	b.n	8002dd6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff ff8f 	bl	8002cf4 <HAL_UART_RxCpltCallback>
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d108      	bne.n	8002e06 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7ff ff96 	bl	8002d30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e04:	e002      	b.n	8002e0c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff ff7e 	bl	8002d08 <HAL_UART_RxHalfCpltCallback>
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b21      	cmp	r3, #33	; 0x21
 8002e46:	d108      	bne.n	8002e5a <UART_DMAError+0x46>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2200      	movs	r2, #0
 8002e52:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002e54:	68b8      	ldr	r0, [r7, #8]
 8002e56:	f000 f88b 	bl	8002f70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b22      	cmp	r3, #34	; 0x22
 8002e7a:	d108      	bne.n	8002e8e <UART_DMAError+0x7a>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2200      	movs	r2, #0
 8002e86:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002e88:	68b8      	ldr	r0, [r7, #8]
 8002e8a:	f000 f887 	bl	8002f9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f043 0210 	orr.w	r2, r3, #16
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e9a:	68b8      	ldr	r0, [r7, #8]
 8002e9c:	f7ff ff3e 	bl	8002d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2222      	movs	r2, #34	; 0x22
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <UART_Start_Receive_DMA+0xbc>)
 8002ed6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <UART_Start_Receive_DMA+0xc0>)
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <UART_Start_Receive_DMA+0xc4>)
 8002ee6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	2200      	movs	r2, #0
 8002eee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002ef0:	f107 0308 	add.w	r3, r7, #8
 8002ef4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3304      	adds	r3, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	f7fe fb42 	bl	8001590 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f38:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f58:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	08002d49 	.word	0x08002d49
 8002f68:	08002ddf 	.word	0x08002ddf
 8002f6c:	08002e15 	.word	0x08002e15

08002f70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002f86:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fb2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0210 	bic.w	r2, r2, #16
 8002fda:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7ff fe83 	bl	8002d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b21      	cmp	r3, #33	; 0x21
 8003030:	d13e      	bne.n	80030b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303a:	d114      	bne.n	8003066 <UART_Transmit_IT+0x48>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d110      	bne.n	8003066 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003058:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	1c9a      	adds	r2, r3, #2
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	621a      	str	r2, [r3, #32]
 8003064:	e008      	b.n	8003078 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	1c59      	adds	r1, r3, #1
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6211      	str	r1, [r2, #32]
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29b      	uxth	r3, r3
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4619      	mov	r1, r3
 8003086:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10f      	bne.n	80030ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e000      	b.n	80030b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
  }
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff fdfe 	bl	8002ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b22      	cmp	r3, #34	; 0x22
 8003100:	f040 8087 	bne.w	8003212 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310c:	d117      	bne.n	800313e <UART_Receive_IT+0x50>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d113      	bne.n	800313e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	b29b      	uxth	r3, r3
 8003128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312c:	b29a      	uxth	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	1c9a      	adds	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
 800313c:	e026      	b.n	800318c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003144:	2300      	movs	r3, #0
 8003146:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003150:	d007      	beq.n	8003162 <UART_Receive_IT+0x74>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <UART_Receive_IT+0x82>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e008      	b.n	8003182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29b      	uxth	r3, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4619      	mov	r1, r3
 800319a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800319c:	2b00      	cmp	r3, #0
 800319e:	d136      	bne.n	800320e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0220 	bic.w	r2, r2, #32
 80031ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10e      	bne.n	80031fe <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0210 	bic.w	r2, r2, #16
 80031ee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fd9a 	bl	8002d30 <HAL_UARTEx_RxEventCallback>
 80031fc:	e002      	b.n	8003204 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fd78 	bl	8002cf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e002      	b.n	8003214 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
  }
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800321c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003220:	b09f      	sub	sp, #124	; 0x7c
 8003222:	af00      	add	r7, sp, #0
 8003224:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003232:	68d9      	ldr	r1, [r3, #12]
 8003234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	ea40 0301 	orr.w	r3, r0, r1
 800323c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800323e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	431a      	orrs	r2, r3
 8003248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	431a      	orrs	r2, r3
 800324e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4313      	orrs	r3, r2
 8003254:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003260:	f021 010c 	bic.w	r1, r1, #12
 8003264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800326a:	430b      	orrs	r3, r1
 800326c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800326e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327a:	6999      	ldr	r1, [r3, #24]
 800327c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	ea40 0301 	orr.w	r3, r0, r1
 8003284:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4bc5      	ldr	r3, [pc, #788]	; (80035a0 <UART_SetConfig+0x384>)
 800328c:	429a      	cmp	r2, r3
 800328e:	d004      	beq.n	800329a <UART_SetConfig+0x7e>
 8003290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4bc3      	ldr	r3, [pc, #780]	; (80035a4 <UART_SetConfig+0x388>)
 8003296:	429a      	cmp	r2, r3
 8003298:	d103      	bne.n	80032a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800329a:	f7ff fae3 	bl	8002864 <HAL_RCC_GetPCLK2Freq>
 800329e:	6778      	str	r0, [r7, #116]	; 0x74
 80032a0:	e002      	b.n	80032a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032a2:	f7ff facb 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 80032a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b0:	f040 80b6 	bne.w	8003420 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b6:	461c      	mov	r4, r3
 80032b8:	f04f 0500 	mov.w	r5, #0
 80032bc:	4622      	mov	r2, r4
 80032be:	462b      	mov	r3, r5
 80032c0:	1891      	adds	r1, r2, r2
 80032c2:	6439      	str	r1, [r7, #64]	; 0x40
 80032c4:	415b      	adcs	r3, r3
 80032c6:	647b      	str	r3, [r7, #68]	; 0x44
 80032c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032cc:	1912      	adds	r2, r2, r4
 80032ce:	eb45 0303 	adc.w	r3, r5, r3
 80032d2:	f04f 0000 	mov.w	r0, #0
 80032d6:	f04f 0100 	mov.w	r1, #0
 80032da:	00d9      	lsls	r1, r3, #3
 80032dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032e0:	00d0      	lsls	r0, r2, #3
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	1911      	adds	r1, r2, r4
 80032e8:	6639      	str	r1, [r7, #96]	; 0x60
 80032ea:	416b      	adcs	r3, r5
 80032ec:	667b      	str	r3, [r7, #100]	; 0x64
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	1891      	adds	r1, r2, r2
 80032fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80032fc:	415b      	adcs	r3, r3
 80032fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003304:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003308:	f7fc ff5e 	bl	80001c8 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4ba5      	ldr	r3, [pc, #660]	; (80035a8 <UART_SetConfig+0x38c>)
 8003312:	fba3 2302 	umull	r2, r3, r3, r2
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	011e      	lsls	r6, r3, #4
 800331a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800331c:	461c      	mov	r4, r3
 800331e:	f04f 0500 	mov.w	r5, #0
 8003322:	4622      	mov	r2, r4
 8003324:	462b      	mov	r3, r5
 8003326:	1891      	adds	r1, r2, r2
 8003328:	6339      	str	r1, [r7, #48]	; 0x30
 800332a:	415b      	adcs	r3, r3
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
 800332e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003332:	1912      	adds	r2, r2, r4
 8003334:	eb45 0303 	adc.w	r3, r5, r3
 8003338:	f04f 0000 	mov.w	r0, #0
 800333c:	f04f 0100 	mov.w	r1, #0
 8003340:	00d9      	lsls	r1, r3, #3
 8003342:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003346:	00d0      	lsls	r0, r2, #3
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	1911      	adds	r1, r2, r4
 800334e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003350:	416b      	adcs	r3, r5
 8003352:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	461a      	mov	r2, r3
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	1891      	adds	r1, r2, r2
 8003360:	62b9      	str	r1, [r7, #40]	; 0x28
 8003362:	415b      	adcs	r3, r3
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800336a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800336e:	f7fc ff2b 	bl	80001c8 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4b8c      	ldr	r3, [pc, #560]	; (80035a8 <UART_SetConfig+0x38c>)
 8003378:	fba3 1302 	umull	r1, r3, r3, r2
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	2164      	movs	r1, #100	; 0x64
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	3332      	adds	r3, #50	; 0x32
 800338a:	4a87      	ldr	r2, [pc, #540]	; (80035a8 <UART_SetConfig+0x38c>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003398:	441e      	add	r6, r3
 800339a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800339c:	4618      	mov	r0, r3
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	1894      	adds	r4, r2, r2
 80033a8:	623c      	str	r4, [r7, #32]
 80033aa:	415b      	adcs	r3, r3
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
 80033ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033b2:	1812      	adds	r2, r2, r0
 80033b4:	eb41 0303 	adc.w	r3, r1, r3
 80033b8:	f04f 0400 	mov.w	r4, #0
 80033bc:	f04f 0500 	mov.w	r5, #0
 80033c0:	00dd      	lsls	r5, r3, #3
 80033c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033c6:	00d4      	lsls	r4, r2, #3
 80033c8:	4622      	mov	r2, r4
 80033ca:	462b      	mov	r3, r5
 80033cc:	1814      	adds	r4, r2, r0
 80033ce:	653c      	str	r4, [r7, #80]	; 0x50
 80033d0:	414b      	adcs	r3, r1
 80033d2:	657b      	str	r3, [r7, #84]	; 0x54
 80033d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	461a      	mov	r2, r3
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	1891      	adds	r1, r2, r2
 80033e0:	61b9      	str	r1, [r7, #24]
 80033e2:	415b      	adcs	r3, r3
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033ee:	f7fc feeb 	bl	80001c8 <__aeabi_uldivmod>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <UART_SetConfig+0x38c>)
 80033f8:	fba3 1302 	umull	r1, r3, r3, r2
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	2164      	movs	r1, #100	; 0x64
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	3332      	adds	r3, #50	; 0x32
 800340a:	4a67      	ldr	r2, [pc, #412]	; (80035a8 <UART_SetConfig+0x38c>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	f003 0207 	and.w	r2, r3, #7
 8003416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4432      	add	r2, r6
 800341c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800341e:	e0b9      	b.n	8003594 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003422:	461c      	mov	r4, r3
 8003424:	f04f 0500 	mov.w	r5, #0
 8003428:	4622      	mov	r2, r4
 800342a:	462b      	mov	r3, r5
 800342c:	1891      	adds	r1, r2, r2
 800342e:	6139      	str	r1, [r7, #16]
 8003430:	415b      	adcs	r3, r3
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003438:	1912      	adds	r2, r2, r4
 800343a:	eb45 0303 	adc.w	r3, r5, r3
 800343e:	f04f 0000 	mov.w	r0, #0
 8003442:	f04f 0100 	mov.w	r1, #0
 8003446:	00d9      	lsls	r1, r3, #3
 8003448:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800344c:	00d0      	lsls	r0, r2, #3
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	eb12 0804 	adds.w	r8, r2, r4
 8003456:	eb43 0905 	adc.w	r9, r3, r5
 800345a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4618      	mov	r0, r3
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	008b      	lsls	r3, r1, #2
 800346e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003472:	0082      	lsls	r2, r0, #2
 8003474:	4640      	mov	r0, r8
 8003476:	4649      	mov	r1, r9
 8003478:	f7fc fea6 	bl	80001c8 <__aeabi_uldivmod>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4b49      	ldr	r3, [pc, #292]	; (80035a8 <UART_SetConfig+0x38c>)
 8003482:	fba3 2302 	umull	r2, r3, r3, r2
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	011e      	lsls	r6, r3, #4
 800348a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800348c:	4618      	mov	r0, r3
 800348e:	f04f 0100 	mov.w	r1, #0
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	1894      	adds	r4, r2, r2
 8003498:	60bc      	str	r4, [r7, #8]
 800349a:	415b      	adcs	r3, r3
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a2:	1812      	adds	r2, r2, r0
 80034a4:	eb41 0303 	adc.w	r3, r1, r3
 80034a8:	f04f 0400 	mov.w	r4, #0
 80034ac:	f04f 0500 	mov.w	r5, #0
 80034b0:	00dd      	lsls	r5, r3, #3
 80034b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034b6:	00d4      	lsls	r4, r2, #3
 80034b8:	4622      	mov	r2, r4
 80034ba:	462b      	mov	r3, r5
 80034bc:	1814      	adds	r4, r2, r0
 80034be:	64bc      	str	r4, [r7, #72]	; 0x48
 80034c0:	414b      	adcs	r3, r1
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f04f 0100 	mov.w	r1, #0
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	008b      	lsls	r3, r1, #2
 80034d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034dc:	0082      	lsls	r2, r0, #2
 80034de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80034e2:	f7fc fe71 	bl	80001c8 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <UART_SetConfig+0x38c>)
 80034ec:	fba3 1302 	umull	r1, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	2164      	movs	r1, #100	; 0x64
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	3332      	adds	r3, #50	; 0x32
 80034fe:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <UART_SetConfig+0x38c>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800350a:	441e      	add	r6, r3
 800350c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800350e:	4618      	mov	r0, r3
 8003510:	f04f 0100 	mov.w	r1, #0
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	1894      	adds	r4, r2, r2
 800351a:	603c      	str	r4, [r7, #0]
 800351c:	415b      	adcs	r3, r3
 800351e:	607b      	str	r3, [r7, #4]
 8003520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003524:	1812      	adds	r2, r2, r0
 8003526:	eb41 0303 	adc.w	r3, r1, r3
 800352a:	f04f 0400 	mov.w	r4, #0
 800352e:	f04f 0500 	mov.w	r5, #0
 8003532:	00dd      	lsls	r5, r3, #3
 8003534:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003538:	00d4      	lsls	r4, r2, #3
 800353a:	4622      	mov	r2, r4
 800353c:	462b      	mov	r3, r5
 800353e:	eb12 0a00 	adds.w	sl, r2, r0
 8003542:	eb43 0b01 	adc.w	fp, r3, r1
 8003546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	f04f 0100 	mov.w	r1, #0
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	008b      	lsls	r3, r1, #2
 800355a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800355e:	0082      	lsls	r2, r0, #2
 8003560:	4650      	mov	r0, sl
 8003562:	4659      	mov	r1, fp
 8003564:	f7fc fe30 	bl	80001c8 <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <UART_SetConfig+0x38c>)
 800356e:	fba3 1302 	umull	r1, r3, r3, r2
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2164      	movs	r1, #100	; 0x64
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	3332      	adds	r3, #50	; 0x32
 8003580:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <UART_SetConfig+0x38c>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	f003 020f 	and.w	r2, r3, #15
 800358c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4432      	add	r2, r6
 8003592:	609a      	str	r2, [r3, #8]
}
 8003594:	bf00      	nop
 8003596:	377c      	adds	r7, #124	; 0x7c
 8003598:	46bd      	mov	sp, r7
 800359a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800359e:	bf00      	nop
 80035a0:	40011000 	.word	0x40011000
 80035a4:	40011400 	.word	0x40011400
 80035a8:	51eb851f 	.word	0x51eb851f

080035ac <__libc_init_array>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	4d0d      	ldr	r5, [pc, #52]	; (80035e4 <__libc_init_array+0x38>)
 80035b0:	4c0d      	ldr	r4, [pc, #52]	; (80035e8 <__libc_init_array+0x3c>)
 80035b2:	1b64      	subs	r4, r4, r5
 80035b4:	10a4      	asrs	r4, r4, #2
 80035b6:	2600      	movs	r6, #0
 80035b8:	42a6      	cmp	r6, r4
 80035ba:	d109      	bne.n	80035d0 <__libc_init_array+0x24>
 80035bc:	4d0b      	ldr	r5, [pc, #44]	; (80035ec <__libc_init_array+0x40>)
 80035be:	4c0c      	ldr	r4, [pc, #48]	; (80035f0 <__libc_init_array+0x44>)
 80035c0:	f000 f820 	bl	8003604 <_init>
 80035c4:	1b64      	subs	r4, r4, r5
 80035c6:	10a4      	asrs	r4, r4, #2
 80035c8:	2600      	movs	r6, #0
 80035ca:	42a6      	cmp	r6, r4
 80035cc:	d105      	bne.n	80035da <__libc_init_array+0x2e>
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
 80035d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d4:	4798      	blx	r3
 80035d6:	3601      	adds	r6, #1
 80035d8:	e7ee      	b.n	80035b8 <__libc_init_array+0xc>
 80035da:	f855 3b04 	ldr.w	r3, [r5], #4
 80035de:	4798      	blx	r3
 80035e0:	3601      	adds	r6, #1
 80035e2:	e7f2      	b.n	80035ca <__libc_init_array+0x1e>
 80035e4:	08003644 	.word	0x08003644
 80035e8:	08003644 	.word	0x08003644
 80035ec:	08003644 	.word	0x08003644
 80035f0:	08003648 	.word	0x08003648

080035f4 <memset>:
 80035f4:	4402      	add	r2, r0
 80035f6:	4603      	mov	r3, r0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d100      	bne.n	80035fe <memset+0xa>
 80035fc:	4770      	bx	lr
 80035fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003602:	e7f9      	b.n	80035f8 <memset+0x4>

08003604 <_init>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	bf00      	nop
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr

08003610 <_fini>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	bf00      	nop
 8003614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003616:	bc08      	pop	{r3}
 8003618:	469e      	mov	lr, r3
 800361a:	4770      	bx	lr
