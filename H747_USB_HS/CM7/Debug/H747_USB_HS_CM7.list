
H747_USB_HS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e5c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  20000000  08005110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006d4  20000094  080051a4  00020094  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000768  080051a4  00020768  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001fcfb  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003cba  00000000  00000000  0003fdbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000dc0  00000000  00000000  00043a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c58  00000000  00000000  00044838  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040101  00000000  00000000  00045490  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f3c3  00000000  00000000  00085591  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018fe4b  00000000  00000000  00094954  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0022479f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000037f4  00000000  00000000  0022481c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000094 	.word	0x20000094
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080050dc 	.word	0x080050dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000098 	.word	0x20000098
 80002d4:	080050dc 	.word	0x080050dc

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <main+0x94>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 f8f5 	bl	8000624 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 f99b 	bl	8000774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f831 	bl	80004a4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000442:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <main+0x94>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	4a15      	ldr	r2, [pc, #84]	; (80004a0 <main+0x94>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <main+0x94>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f000 ffc7 	bl	80013f4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000466:	2100      	movs	r1, #0
 8000468:	2000      	movs	r0, #0
 800046a:	f000 ffdd 	bl	8001428 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <main+0x94>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x80>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x6a>
if ( timeout < 0 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x8a>
{
Error_Handler();
 8000492:	f000 f8c7 	bl	8000624 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f86f 	bl	8000578 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 800049a:	f004 fa63 	bl	8004964 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049e:	e7fe      	b.n	800049e <main+0x92>
 80004a0:	58024400 	.word	0x58024400

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b09c      	sub	sp, #112	; 0x70
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ae:	224c      	movs	r2, #76	; 0x4c
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f004 fd4f 	bl	8004f56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2220      	movs	r2, #32
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f004 fd49 	bl	8004f56 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004c4:	2002      	movs	r0, #2
 80004c6:	f000 ffc3 	bl	8001450 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004ca:	2300      	movs	r3, #0
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	4b28      	ldr	r3, [pc, #160]	; (8000570 <SystemClock_Config+0xcc>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d2:	4a27      	ldr	r2, [pc, #156]	; (8000570 <SystemClock_Config+0xcc>)
 80004d4:	f023 0301 	bic.w	r3, r3, #1
 80004d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004da:	4b25      	ldr	r3, [pc, #148]	; (8000570 <SystemClock_Config+0xcc>)
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	4b23      	ldr	r3, [pc, #140]	; (8000574 <SystemClock_Config+0xd0>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004ec:	4a21      	ldr	r2, [pc, #132]	; (8000574 <SystemClock_Config+0xd0>)
 80004ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <SystemClock_Config+0xd0>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000500:	bf00      	nop
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <SystemClock_Config+0xd0>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800050a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800050e:	d1f8      	bne.n	8000502 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000510:	2302      	movs	r3, #2
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000514:	2301      	movs	r3, #1
 8000516:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000518:	2340      	movs	r3, #64	; 0x40
 800051a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051c:	2300      	movs	r3, #0
 800051e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000524:	4618      	mov	r0, r3
 8000526:	f000 ffed 	bl	8001504 <HAL_RCC_OscConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000530:	f000 f878 	bl	8000624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000534:	233f      	movs	r3, #63	; 0x3f
 8000536:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f001 fbe3 	bl	8001d24 <HAL_RCC_ClockConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000564:	f000 f85e 	bl	8000624 <Error_Handler>
  }
}
 8000568:	bf00      	nop
 800056a:	3770      	adds	r7, #112	; 0x70
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	58000400 	.word	0x58000400
 8000574:	58024800 	.word	0x58024800

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b087      	sub	sp, #28
 800057c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b28      	ldr	r3, [pc, #160]	; (8000620 <MX_GPIO_Init+0xa8>)
 8000580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000584:	4a26      	ldr	r2, [pc, #152]	; (8000620 <MX_GPIO_Init+0xa8>)
 8000586:	f043 0302 	orr.w	r3, r3, #2
 800058a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <MX_GPIO_Init+0xa8>)
 8000590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000594:	f003 0302 	and.w	r3, r3, #2
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <MX_GPIO_Init+0xa8>)
 800059e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a2:	4a1f      	ldr	r2, [pc, #124]	; (8000620 <MX_GPIO_Init+0xa8>)
 80005a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <MX_GPIO_Init+0xa8>)
 80005ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <MX_GPIO_Init+0xa8>)
 80005bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c0:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MX_GPIO_Init+0xa8>)
 80005c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_GPIO_Init+0xa8>)
 80005cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_GPIO_Init+0xa8>)
 80005da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005de:	4a10      	ldr	r2, [pc, #64]	; (8000620 <MX_GPIO_Init+0xa8>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_GPIO_Init+0xa8>)
 80005ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_GPIO_Init+0xa8>)
 80005f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <MX_GPIO_Init+0xa8>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_GPIO_Init+0xa8>)
 8000608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

}
 8000614:	bf00      	nop
 8000616:	371c      	adds	r7, #28
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	58024400 	.word	0x58024400

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062a:	e7fe      	b.n	800062a <Error_Handler+0x6>

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_MspInit+0x30>)
 8000634:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000638:	4a08      	ldr	r2, [pc, #32]	; (800065c <HAL_MspInit+0x30>)
 800063a:	f043 0302 	orr.w	r3, r3, #2
 800063e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_MspInit+0x30>)
 8000644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000648:	f003 0302 	and.w	r3, r3, #2
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	58024400 	.word	0x58024400

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <MemManage_Handler+0x4>

08000672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <UsageFault_Handler+0x4>

0800067e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ac:	f000 f8d4 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <_sbrk+0x5c>)
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <_sbrk+0x60>)
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <_sbrk+0x64>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <_sbrk+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d207      	bcs.n	80006f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e4:	f004 fbf2 	bl	8004ecc <__errno>
 80006e8:	4602      	mov	r2, r0
 80006ea:	230c      	movs	r3, #12
 80006ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	e009      	b.n	8000708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	4a05      	ldr	r2, [pc, #20]	; (8000718 <_sbrk+0x64>)
 8000704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20020000 	.word	0x20020000
 8000714:	00000400 	.word	0x00000400
 8000718:	200000b0 	.word	0x200000b0
 800071c:	20000768 	.word	0x20000768

08000720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000758 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000724:	f7ff fdd8 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000728:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800072a:	e003      	b.n	8000734 <LoopCopyDataInit>

0800072c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800072e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000730:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000732:	3104      	adds	r1, #4

08000734 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000734:	480a      	ldr	r0, [pc, #40]	; (8000760 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000738:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800073a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800073c:	d3f6      	bcc.n	800072c <CopyDataInit>
  ldr  r2, =_sbss
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000740:	e002      	b.n	8000748 <LoopFillZerobss>

08000742 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000742:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000744:	f842 3b04 	str.w	r3, [r2], #4

08000748 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800074a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800074c:	d3f9      	bcc.n	8000742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800074e:	f004 fbc3 	bl	8004ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000752:	f7ff fe5b 	bl	800040c <main>
  bx  lr    
 8000756:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000758:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800075c:	08005110 	.word	0x08005110
  ldr  r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000764:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8000768:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800076c:	20000768 	.word	0x20000768

08000770 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC3_IRQHandler>
	...

08000774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077a:	2003      	movs	r0, #3
 800077c:	f000 f96c 	bl	8000a58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000780:	f001 fc86 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8000784:	4601      	mov	r1, r0
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_Init+0x68>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	f003 030f 	and.w	r3, r3, #15
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <HAL_Init+0x6c>)
 8000792:	5cd3      	ldrb	r3, [r2, r3]
 8000794:	f003 031f 	and.w	r3, r3, #31
 8000798:	fa21 f303 	lsr.w	r3, r1, r3
 800079c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_Init+0x68>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <HAL_Init+0x6c>)
 80007a8:	5cd3      	ldrb	r3, [r2, r3]
 80007aa:	f003 031f 	and.w	r3, r3, #31
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	fa22 f303 	lsr.w	r3, r2, r3
 80007b4:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <HAL_Init+0x70>)
 80007b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007b8:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <HAL_Init+0x74>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 f814 	bl	80007ec <HAL_InitTick>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e002      	b.n	80007d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007ce:	f7ff ff2d 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d2:	2300      	movs	r3, #0
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58024400 	.word	0x58024400
 80007e0:	080050f8 	.word	0x080050f8
 80007e4:	20000004 	.word	0x20000004
 80007e8:	20000000 	.word	0x20000000

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_InitTick+0x60>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d101      	bne.n	8000800 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007fc:	2301      	movs	r3, #1
 80007fe:	e021      	b.n	8000844 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <HAL_InitTick+0x64>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_InitTick+0x60>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f943 	bl	8000aa2 <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f91b 	bl	8000a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x68>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000000c 	.word	0x2000000c
 8000850:	20000000 	.word	0x20000000
 8000854:	20000008 	.word	0x20000008

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	2000000c 	.word	0x2000000c
 800087c:	200000c4 	.word	0x200000c4

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200000c4 	.word	0x200000c4

08000898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff ffee 	bl	8000880 <HAL_GetTick>
 80008a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b0:	d005      	beq.n	80008be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_Delay+0x40>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008be:	bf00      	nop
 80008c0:	f7ff ffde 	bl	8000880 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d8f7      	bhi.n	80008c0 <HAL_Delay+0x28>
  {
  }
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000000c 	.word	0x2000000c

080008dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <HAL_GetREVID+0x14>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	0c1b      	lsrs	r3, r3, #16
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	5c001000 	.word	0x5c001000

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <__NVIC_SetPriorityGrouping+0x40>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 800091e:	4313      	orrs	r3, r2
 8000920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <__NVIC_SetPriorityGrouping+0x40>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	60d3      	str	r3, [r2, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	05fa0000 	.word	0x05fa0000

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db0a      	blt.n	8000982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	490c      	ldr	r1, [pc, #48]	; (80009a4 <__NVIC_SetPriority+0x4c>)
 8000972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	440b      	add	r3, r1
 800097c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000980:	e00a      	b.n	8000998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4908      	ldr	r1, [pc, #32]	; (80009a8 <__NVIC_SetPriority+0x50>)
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	3b04      	subs	r3, #4
 8000990:	0112      	lsls	r2, r2, #4
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	440b      	add	r3, r1
 8000996:	761a      	strb	r2, [r3, #24]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f1c3 0307 	rsb	r3, r3, #7
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	bf28      	it	cs
 80009ca:	2304      	movcs	r3, #4
 80009cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	d902      	bls.n	80009dc <NVIC_EncodePriority+0x30>
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3b03      	subs	r3, #3
 80009da:	e000      	b.n	80009de <NVIC_EncodePriority+0x32>
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43da      	mvns	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43d9      	mvns	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	4313      	orrs	r3, r2
         );
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	; 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a24:	d301      	bcc.n	8000a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00f      	b.n	8000a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <SysTick_Config+0x40>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a32:	210f      	movs	r1, #15
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f7ff ff8e 	bl	8000958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <SysTick_Config+0x40>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <SysTick_Config+0x40>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff47 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a7c:	f7ff ff5e 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000a80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	6978      	ldr	r0, [r7, #20]
 8000a88:	f7ff ff90 	bl	80009ac <NVIC_EncodePriority>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff5f 	bl	8000958 <__NVIC_SetPriority>
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffb2 	bl	8000a14 <SysTick_Config>
 8000ab0:	4603      	mov	r3, r0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	; 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000aca:	4b89      	ldr	r3, [pc, #548]	; (8000cf0 <HAL_GPIO_Init+0x234>)
 8000acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ace:	e194      	b.n	8000dfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8186 	beq.w	8000df4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d00b      	beq.n	8000b08 <HAL_GPIO_Init+0x4c>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d007      	beq.n	8000b08 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000afc:	2b11      	cmp	r3, #17
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b12      	cmp	r3, #18
 8000b06:	d130      	bne.n	8000b6a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2203      	movs	r2, #3
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b3e:	2201      	movs	r2, #1
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	f003 0201 	and.w	r2, r3, #1
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2203      	movs	r2, #3
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0xee>
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b12      	cmp	r3, #18
 8000ba8:	d123      	bne.n	8000bf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	08da      	lsrs	r2, r3, #3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3208      	adds	r2, #8
 8000bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	691a      	ldr	r2, [r3, #16]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	08da      	lsrs	r2, r3, #3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3208      	adds	r2, #8
 8000bec:	69b9      	ldr	r1, [r7, #24]
 8000bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4013      	ands	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0203 	and.w	r2, r3, #3
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 80e0 	beq.w	8000df4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c34:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <HAL_GPIO_Init+0x238>)
 8000c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c3a:	4a2e      	ldr	r2, [pc, #184]	; (8000cf4 <HAL_GPIO_Init+0x238>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <HAL_GPIO_Init+0x238>)
 8000c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c52:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <HAL_GPIO_Init+0x23c>)
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3302      	adds	r3, #2
 8000c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4013      	ands	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <HAL_GPIO_Init+0x240>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d052      	beq.n	8000d24 <HAL_GPIO_Init+0x268>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <HAL_GPIO_Init+0x244>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d031      	beq.n	8000cea <HAL_GPIO_Init+0x22e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <HAL_GPIO_Init+0x248>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d02b      	beq.n	8000ce6 <HAL_GPIO_Init+0x22a>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <HAL_GPIO_Init+0x24c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d025      	beq.n	8000ce2 <HAL_GPIO_Init+0x226>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <HAL_GPIO_Init+0x250>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d01f      	beq.n	8000cde <HAL_GPIO_Init+0x222>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <HAL_GPIO_Init+0x254>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d019      	beq.n	8000cda <HAL_GPIO_Init+0x21e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <HAL_GPIO_Init+0x258>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d013      	beq.n	8000cd6 <HAL_GPIO_Init+0x21a>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_GPIO_Init+0x25c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d00d      	beq.n	8000cd2 <HAL_GPIO_Init+0x216>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <HAL_GPIO_Init+0x260>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d007      	beq.n	8000cce <HAL_GPIO_Init+0x212>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_GPIO_Init+0x264>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d101      	bne.n	8000cca <HAL_GPIO_Init+0x20e>
 8000cc6:	2309      	movs	r3, #9
 8000cc8:	e02d      	b.n	8000d26 <HAL_GPIO_Init+0x26a>
 8000cca:	230a      	movs	r3, #10
 8000ccc:	e02b      	b.n	8000d26 <HAL_GPIO_Init+0x26a>
 8000cce:	2308      	movs	r3, #8
 8000cd0:	e029      	b.n	8000d26 <HAL_GPIO_Init+0x26a>
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	e027      	b.n	8000d26 <HAL_GPIO_Init+0x26a>
 8000cd6:	2306      	movs	r3, #6
 8000cd8:	e025      	b.n	8000d26 <HAL_GPIO_Init+0x26a>
 8000cda:	2305      	movs	r3, #5
 8000cdc:	e023      	b.n	8000d26 <HAL_GPIO_Init+0x26a>
 8000cde:	2304      	movs	r3, #4
 8000ce0:	e021      	b.n	8000d26 <HAL_GPIO_Init+0x26a>
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e01f      	b.n	8000d26 <HAL_GPIO_Init+0x26a>
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	e01d      	b.n	8000d26 <HAL_GPIO_Init+0x26a>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e01b      	b.n	8000d26 <HAL_GPIO_Init+0x26a>
 8000cee:	bf00      	nop
 8000cf0:	58000080 	.word	0x58000080
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58000400 	.word	0x58000400
 8000cfc:	58020000 	.word	0x58020000
 8000d00:	58020400 	.word	0x58020400
 8000d04:	58020800 	.word	0x58020800
 8000d08:	58020c00 	.word	0x58020c00
 8000d0c:	58021000 	.word	0x58021000
 8000d10:	58021400 	.word	0x58021400
 8000d14:	58021800 	.word	0x58021800
 8000d18:	58021c00 	.word	0x58021c00
 8000d1c:	58022000 	.word	0x58022000
 8000d20:	58022400 	.word	0x58022400
 8000d24:	2300      	movs	r3, #0
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	f002 0203 	and.w	r2, r2, #3
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	4093      	lsls	r3, r2
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d36:	4938      	ldr	r1, [pc, #224]	; (8000e18 <HAL_GPIO_Init+0x35c>)
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	3301      	adds	r3, #1
 8000df8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa22 f303 	lsr.w	r3, r2, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f47f ae63 	bne.w	8000ad0 <HAL_GPIO_Init+0x14>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	58000400 	.word	0x58000400

08000e1c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	b08f      	sub	sp, #60	; 0x3c
 8000e20:	af0a      	add	r7, sp, #40	; 0x28
 8000e22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e054      	b.n	8000ed8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d106      	bne.n	8000e4e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f003 fddf 	bl	8004a0c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 faf4 	bl	800245a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	687e      	ldr	r6, [r7, #4]
 8000e7a:	466d      	mov	r5, sp
 8000e7c:	f106 0410 	add.w	r4, r6, #16
 8000e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e90:	1d33      	adds	r3, r6, #4
 8000e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e94:	6838      	ldr	r0, [r7, #0]
 8000e96:	f001 fa6d 	bl	8002374 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f001 faeb 	bl	800247c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	687e      	ldr	r6, [r7, #4]
 8000eae:	466d      	mov	r5, sp
 8000eb0:	f106 0410 	add.w	r4, r6, #16
 8000eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ebc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ec0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ec4:	1d33      	adds	r3, r6, #4
 8000ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ec8:	6838      	ldr	r0, [r7, #0]
 8000eca:	f001 fbb3 	bl	8002634 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ee0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af04      	add	r7, sp, #16
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	4608      	mov	r0, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	4603      	mov	r3, r0
 8000ef0:	70fb      	strb	r3, [r7, #3]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	70bb      	strb	r3, [r7, #2]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_HCD_HC_Init+0x28>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e07f      	b.n	8001008 <HAL_HCD_HC_Init+0x128>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000f10:	78fa      	ldrb	r2, [r7, #3]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	440b      	add	r3, r1
 8000f1e:	333d      	adds	r3, #61	; 0x3d
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	3338      	adds	r3, #56	; 0x38
 8000f34:	787a      	ldrb	r2, [r7, #1]
 8000f36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000f38:	78fa      	ldrb	r2, [r7, #3]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	3340      	adds	r3, #64	; 0x40
 8000f48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f4a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000f4c:	78fa      	ldrb	r2, [r7, #3]
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	440b      	add	r3, r1
 8000f5a:	3339      	adds	r3, #57	; 0x39
 8000f5c:	78fa      	ldrb	r2, [r7, #3]
 8000f5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000f60:	78fa      	ldrb	r2, [r7, #3]
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	333f      	adds	r3, #63	; 0x3f
 8000f70:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000f74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000f76:	78fa      	ldrb	r2, [r7, #3]
 8000f78:	78bb      	ldrb	r3, [r7, #2]
 8000f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f7e:	b2d8      	uxtb	r0, r3
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	333a      	adds	r3, #58	; 0x3a
 8000f8e:	4602      	mov	r2, r0
 8000f90:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000f92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	da0a      	bge.n	8000fb0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000f9a:	78fa      	ldrb	r2, [r7, #3]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	440b      	add	r3, r1
 8000fa8:	333b      	adds	r3, #59	; 0x3b
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	e009      	b.n	8000fc4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000fb0:	78fa      	ldrb	r2, [r7, #3]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	440b      	add	r3, r1
 8000fbe:	333b      	adds	r3, #59	; 0x3b
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	333c      	adds	r3, #60	; 0x3c
 8000fd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fd8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	787c      	ldrb	r4, [r7, #1]
 8000fe0:	78ba      	ldrb	r2, [r7, #2]
 8000fe2:	78f9      	ldrb	r1, [r7, #3]
 8000fe4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	f001 fc1d 	bl	8002834 <USB_HC_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}

08001010 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001026:	2b01      	cmp	r3, #1
 8001028:	d101      	bne.n	800102e <HAL_HCD_HC_Halt+0x1e>
 800102a:	2302      	movs	r3, #2
 800102c:	e00f      	b.n	800104e <HAL_HCD_HC_Halt+0x3e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	78fa      	ldrb	r2, [r7, #3]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fe46 	bl	8002cd0 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	4608      	mov	r0, r1
 8001062:	4611      	mov	r1, r2
 8001064:	461a      	mov	r2, r3
 8001066:	4603      	mov	r3, r0
 8001068:	70fb      	strb	r3, [r7, #3]
 800106a:	460b      	mov	r3, r1
 800106c:	70bb      	strb	r3, [r7, #2]
 800106e:	4613      	mov	r3, r2
 8001070:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001072:	78fa      	ldrb	r2, [r7, #3]
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	440b      	add	r3, r1
 8001080:	333b      	adds	r3, #59	; 0x3b
 8001082:	78ba      	ldrb	r2, [r7, #2]
 8001084:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001086:	78fa      	ldrb	r2, [r7, #3]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	440b      	add	r3, r1
 8001094:	333f      	adds	r3, #63	; 0x3f
 8001096:	787a      	ldrb	r2, [r7, #1]
 8001098:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800109a:	7c3b      	ldrb	r3, [r7, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d114      	bne.n	80010ca <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	3342      	adds	r3, #66	; 0x42
 80010b0:	2203      	movs	r2, #3
 80010b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	333d      	adds	r3, #61	; 0x3d
 80010c4:	7f3a      	ldrb	r2, [r7, #28]
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e009      	b.n	80010de <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80010ca:	78fa      	ldrb	r2, [r7, #3]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	3342      	adds	r3, #66	; 0x42
 80010da:	2202      	movs	r2, #2
 80010dc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80010de:	787b      	ldrb	r3, [r7, #1]
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	f200 80d6 	bhi.w	8001292 <HAL_HCD_HC_SubmitRequest+0x23a>
 80010e6:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <HAL_HCD_HC_SubmitRequest+0x94>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	080010fd 	.word	0x080010fd
 80010f0:	0800127d 	.word	0x0800127d
 80010f4:	08001169 	.word	0x08001169
 80010f8:	080011f3 	.word	0x080011f3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80010fc:	7c3b      	ldrb	r3, [r7, #16]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	f040 80c9 	bne.w	8001296 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001104:	78bb      	ldrb	r3, [r7, #2]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 80c5 	bne.w	8001296 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800110c:	8b3b      	ldrh	r3, [r7, #24]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d109      	bne.n	8001126 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001112:	78fa      	ldrb	r2, [r7, #3]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	3351      	adds	r3, #81	; 0x51
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001126:	78fa      	ldrb	r2, [r7, #3]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	440b      	add	r3, r1
 8001134:	3351      	adds	r3, #81	; 0x51
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10a      	bne.n	8001152 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800113c:	78fa      	ldrb	r2, [r7, #3]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	440b      	add	r3, r1
 800114a:	3342      	adds	r3, #66	; 0x42
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001150:	e0a1      	b.n	8001296 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	3342      	adds	r3, #66	; 0x42
 8001162:	2202      	movs	r2, #2
 8001164:	701a      	strb	r2, [r3, #0]
      break;
 8001166:	e096      	b.n	8001296 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001168:	78bb      	ldrb	r3, [r7, #2]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d120      	bne.n	80011b0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800116e:	78fa      	ldrb	r2, [r7, #3]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	440b      	add	r3, r1
 800117c:	3351      	adds	r3, #81	; 0x51
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10a      	bne.n	800119a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001184:	78fa      	ldrb	r2, [r7, #3]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	440b      	add	r3, r1
 8001192:	3342      	adds	r3, #66	; 0x42
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001198:	e07e      	b.n	8001298 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800119a:	78fa      	ldrb	r2, [r7, #3]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	3342      	adds	r3, #66	; 0x42
 80011aa:	2202      	movs	r2, #2
 80011ac:	701a      	strb	r2, [r3, #0]
      break;
 80011ae:	e073      	b.n	8001298 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80011b0:	78fa      	ldrb	r2, [r7, #3]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	440b      	add	r3, r1
 80011be:	3350      	adds	r3, #80	; 0x50
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10a      	bne.n	80011dc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80011c6:	78fa      	ldrb	r2, [r7, #3]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	440b      	add	r3, r1
 80011d4:	3342      	adds	r3, #66	; 0x42
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
      break;
 80011da:	e05d      	b.n	8001298 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011dc:	78fa      	ldrb	r2, [r7, #3]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	440b      	add	r3, r1
 80011ea:	3342      	adds	r3, #66	; 0x42
 80011ec:	2202      	movs	r2, #2
 80011ee:	701a      	strb	r2, [r3, #0]
      break;
 80011f0:	e052      	b.n	8001298 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80011f2:	78bb      	ldrb	r3, [r7, #2]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d120      	bne.n	800123a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80011f8:	78fa      	ldrb	r2, [r7, #3]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	3351      	adds	r3, #81	; 0x51
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10a      	bne.n	8001224 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	440b      	add	r3, r1
 800121c:	3342      	adds	r3, #66	; 0x42
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001222:	e039      	b.n	8001298 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001224:	78fa      	ldrb	r2, [r7, #3]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3342      	adds	r3, #66	; 0x42
 8001234:	2202      	movs	r2, #2
 8001236:	701a      	strb	r2, [r3, #0]
      break;
 8001238:	e02e      	b.n	8001298 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	3350      	adds	r3, #80	; 0x50
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10a      	bne.n	8001266 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001250:	78fa      	ldrb	r2, [r7, #3]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	3342      	adds	r3, #66	; 0x42
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
      break;
 8001264:	e018      	b.n	8001298 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001266:	78fa      	ldrb	r2, [r7, #3]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	440b      	add	r3, r1
 8001274:	3342      	adds	r3, #66	; 0x42
 8001276:	2202      	movs	r2, #2
 8001278:	701a      	strb	r2, [r3, #0]
      break;
 800127a:	e00d      	b.n	8001298 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800127c:	78fa      	ldrb	r2, [r7, #3]
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	3342      	adds	r3, #66	; 0x42
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
      break;
 8001290:	e002      	b.n	8001298 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001292:	bf00      	nop
 8001294:	e000      	b.n	8001298 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001296:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001298:	78fa      	ldrb	r2, [r7, #3]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	3344      	adds	r3, #68	; 0x44
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80012ac:	78fa      	ldrb	r2, [r7, #3]
 80012ae:	8b39      	ldrh	r1, [r7, #24]
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4403      	add	r3, r0
 80012bc:	3348      	adds	r3, #72	; 0x48
 80012be:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80012c0:	78fa      	ldrb	r2, [r7, #3]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	335c      	adds	r3, #92	; 0x5c
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80012d4:	78fa      	ldrb	r2, [r7, #3]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	440b      	add	r3, r1
 80012e2:	334c      	adds	r3, #76	; 0x4c
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80012e8:	78fa      	ldrb	r2, [r7, #3]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	3339      	adds	r3, #57	; 0x39
 80012f8:	78fa      	ldrb	r2, [r7, #3]
 80012fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80012fc:	78fa      	ldrb	r2, [r7, #3]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	335d      	adds	r3, #93	; 0x5d
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	78fa      	ldrb	r2, [r7, #3]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	3338      	adds	r3, #56	; 0x38
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	18d1      	adds	r1, r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	f001 fb8c 	bl	8002a48 <USB_HC_StartXfer>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop

0800133c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_HCD_Start+0x16>
 800134e:	2302      	movs	r3, #2
 8001350:	e013      	b.n	800137a <HAL_HCD_Start+0x3e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f001 f86a 	bl	8002438 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2101      	movs	r1, #1
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fa18 	bl	80027a0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	440b      	add	r3, r1
 800139c:	335c      	adds	r3, #92	; 0x5c
 800139e:	781b      	ldrb	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80013b8:	78fa      	ldrb	r2, [r7, #3]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	334c      	adds	r3, #76	; 0x4c
 80013c8:	681b      	ldr	r3, [r3, #0]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fa15 	bl	8002812 <USB_GetCurrentFrame>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80013fc:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_HSEM_FastTake+0x2c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3320      	adds	r3, #32
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_HSEM_FastTake+0x30>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d101      	bne.n	8001410 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	e000      	b.n	8001412 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	58026400 	.word	0x58026400
 8001424:	80000300 	.word	0x80000300

08001428 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001432:	4906      	ldr	r1, [pc, #24]	; (800144c <HAL_HSEM_Release+0x24>)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	58026400 	.word	0x58026400

08001450 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <HAL_PWREx_ConfigSupply+0xb0>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	2b06      	cmp	r3, #6
 8001462:	d00a      	beq.n	800147a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_PWREx_ConfigSupply+0xb0>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	429a      	cmp	r2, r3
 8001470:	d001      	beq.n	8001476 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e040      	b.n	80014f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e03e      	b.n	80014f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_PWREx_ConfigSupply+0xb0>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001482:	491f      	ldr	r1, [pc, #124]	; (8001500 <HAL_PWREx_ConfigSupply+0xb0>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4313      	orrs	r3, r2
 8001488:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800148a:	f7ff f9f9 	bl	8000880 <HAL_GetTick>
 800148e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001490:	e009      	b.n	80014a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001492:	f7ff f9f5 	bl	8000880 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a0:	d901      	bls.n	80014a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e028      	b.n	80014f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_PWREx_ConfigSupply+0xb0>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014b2:	d1ee      	bne.n	8001492 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b1e      	cmp	r3, #30
 80014b8:	d008      	beq.n	80014cc <HAL_PWREx_ConfigSupply+0x7c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b2e      	cmp	r3, #46	; 0x2e
 80014be:	d005      	beq.n	80014cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b1d      	cmp	r3, #29
 80014c4:	d002      	beq.n	80014cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b2d      	cmp	r3, #45	; 0x2d
 80014ca:	d114      	bne.n	80014f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014cc:	f7ff f9d8 	bl	8000880 <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014d2:	e009      	b.n	80014e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014d4:	f7ff f9d4 	bl	8000880 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014e2:	d901      	bls.n	80014e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e007      	b.n	80014f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d1ee      	bne.n	80014d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	58024800 	.word	0x58024800

08001504 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e3ff      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8087 	beq.w	8001632 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001524:	4b99      	ldr	r3, [pc, #612]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800152e:	4b97      	ldr	r3, [pc, #604]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	2b10      	cmp	r3, #16
 8001538:	d007      	beq.n	800154a <HAL_RCC_OscConfig+0x46>
 800153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153c:	2b18      	cmp	r3, #24
 800153e:	d110      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d10b      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154a:	4b90      	ldr	r3, [pc, #576]	; (800178c <HAL_RCC_OscConfig+0x288>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d06c      	beq.n	8001630 <HAL_RCC_OscConfig+0x12c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d168      	bne.n	8001630 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e3d9      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x76>
 800156c:	4b87      	ldr	r3, [pc, #540]	; (800178c <HAL_RCC_OscConfig+0x288>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a86      	ldr	r2, [pc, #536]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e02e      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x98>
 8001582:	4b82      	ldr	r3, [pc, #520]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a81      	ldr	r2, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b7f      	ldr	r3, [pc, #508]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a7e      	ldr	r2, [pc, #504]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0xbc>
 80015a6:	4b79      	ldr	r3, [pc, #484]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a78      	ldr	r2, [pc, #480]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b76      	ldr	r3, [pc, #472]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a75      	ldr	r2, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 80015c0:	4b72      	ldr	r3, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a71      	ldr	r2, [pc, #452]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b6f      	ldr	r3, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a6e      	ldr	r2, [pc, #440]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff f94e 	bl	8000880 <HAL_GetTick>
 80015e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff f94a 	bl	8000880 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e38d      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015fa:	4b64      	ldr	r3, [pc, #400]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe4>
 8001606:	e014      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff f93a 	bl	8000880 <HAL_GetTick>
 800160c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff f936 	bl	8000880 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e379      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001622:	4b5a      	ldr	r3, [pc, #360]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x10c>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80ae 	beq.w	800179c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001640:	4b52      	ldr	r3, [pc, #328]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001648:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800164a:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_RCC_OscConfig+0x288>)
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <HAL_RCC_OscConfig+0x162>
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	2b18      	cmp	r3, #24
 800165a:	d13a      	bne.n	80016d2 <HAL_RCC_OscConfig+0x1ce>
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d135      	bne.n	80016d2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001666:	4b49      	ldr	r3, [pc, #292]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x17a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e34b      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	f7ff f92d 	bl	80008dc <HAL_GetREVID>
 8001682:	4602      	mov	r2, r0
 8001684:	f241 0303 	movw	r3, #4099	; 0x1003
 8001688:	429a      	cmp	r2, r3
 800168a:	d817      	bhi.n	80016bc <HAL_RCC_OscConfig+0x1b8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2b40      	cmp	r3, #64	; 0x40
 8001692:	d108      	bne.n	80016a6 <HAL_RCC_OscConfig+0x1a2>
 8001694:	4b3d      	ldr	r3, [pc, #244]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800169c:	4a3b      	ldr	r2, [pc, #236]	; (800178c <HAL_RCC_OscConfig+0x288>)
 800169e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a4:	e07a      	b.n	800179c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	031b      	lsls	r3, r3, #12
 80016b4:	4935      	ldr	r1, [pc, #212]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ba:	e06f      	b.n	800179c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	4930      	ldr	r1, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d0:	e064      	b.n	800179c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d045      	beq.n	8001766 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016da:	4b2c      	ldr	r3, [pc, #176]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0219 	bic.w	r2, r3, #25
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	4929      	ldr	r1, [pc, #164]	; (800178c <HAL_RCC_OscConfig+0x288>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff f8c8 	bl	8000880 <HAL_GetTick>
 80016f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f4:	f7ff f8c4 	bl	8000880 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e307      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001712:	f7ff f8e3 	bl	80008dc <HAL_GetREVID>
 8001716:	4602      	mov	r2, r0
 8001718:	f241 0303 	movw	r3, #4099	; 0x1003
 800171c:	429a      	cmp	r2, r3
 800171e:	d817      	bhi.n	8001750 <HAL_RCC_OscConfig+0x24c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2b40      	cmp	r3, #64	; 0x40
 8001726:	d108      	bne.n	800173a <HAL_RCC_OscConfig+0x236>
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_RCC_OscConfig+0x288>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001730:	4a16      	ldr	r2, [pc, #88]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001736:	6053      	str	r3, [r2, #4]
 8001738:	e030      	b.n	800179c <HAL_RCC_OscConfig+0x298>
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_RCC_OscConfig+0x288>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	031b      	lsls	r3, r3, #12
 8001748:	4910      	ldr	r1, [pc, #64]	; (800178c <HAL_RCC_OscConfig+0x288>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
 800174e:	e025      	b.n	800179c <HAL_RCC_OscConfig+0x298>
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	490b      	ldr	r1, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
 8001764:	e01a      	b.n	800179c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_OscConfig+0x288>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_RCC_OscConfig+0x288>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff f885 	bl	8000880 <HAL_GetTick>
 8001776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff f881 	bl	8000880 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d903      	bls.n	8001790 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e2c4      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
 800178c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001790:	4ba4      	ldr	r3, [pc, #656]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1ee      	bne.n	800177a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a9 	beq.w	80018fc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017aa:	4b9e      	ldr	r3, [pc, #632]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017b4:	4b9b      	ldr	r3, [pc, #620]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d007      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2cc>
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b18      	cmp	r3, #24
 80017c4:	d13a      	bne.n	800183c <HAL_RCC_OscConfig+0x338>
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d135      	bne.n	800183c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017d0:	4b94      	ldr	r3, [pc, #592]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2e4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	2b80      	cmp	r3, #128	; 0x80
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e296      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017e8:	f7ff f878 	bl	80008dc <HAL_GetREVID>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d817      	bhi.n	8001826 <HAL_RCC_OscConfig+0x322>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	2b20      	cmp	r3, #32
 80017fc:	d108      	bne.n	8001810 <HAL_RCC_OscConfig+0x30c>
 80017fe:	4b89      	ldr	r3, [pc, #548]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001806:	4a87      	ldr	r2, [pc, #540]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001808:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800180c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800180e:	e075      	b.n	80018fc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001810:	4b84      	ldr	r3, [pc, #528]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	069b      	lsls	r3, r3, #26
 800181e:	4981      	ldr	r1, [pc, #516]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001824:	e06a      	b.n	80018fc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001826:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	061b      	lsls	r3, r3, #24
 8001834:	497b      	ldr	r1, [pc, #492]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001836:	4313      	orrs	r3, r2
 8001838:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800183a:	e05f      	b.n	80018fc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d042      	beq.n	80018ca <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001844:	4b77      	ldr	r3, [pc, #476]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a76      	ldr	r2, [pc, #472]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 800184a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff f816 	bl	8000880 <HAL_GetTick>
 8001854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001858:	f7ff f812 	bl	8000880 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e255      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800186a:	4b6e      	ldr	r3, [pc, #440]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001876:	f7ff f831 	bl	80008dc <HAL_GetREVID>
 800187a:	4602      	mov	r2, r0
 800187c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001880:	429a      	cmp	r2, r3
 8001882:	d817      	bhi.n	80018b4 <HAL_RCC_OscConfig+0x3b0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	2b20      	cmp	r3, #32
 800188a:	d108      	bne.n	800189e <HAL_RCC_OscConfig+0x39a>
 800188c:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001894:	4a63      	ldr	r2, [pc, #396]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001896:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800189a:	6053      	str	r3, [r2, #4]
 800189c:	e02e      	b.n	80018fc <HAL_RCC_OscConfig+0x3f8>
 800189e:	4b61      	ldr	r3, [pc, #388]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	069b      	lsls	r3, r3, #26
 80018ac:	495d      	ldr	r1, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
 80018b2:	e023      	b.n	80018fc <HAL_RCC_OscConfig+0x3f8>
 80018b4:	4b5b      	ldr	r3, [pc, #364]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	4958      	ldr	r1, [pc, #352]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
 80018c8:	e018      	b.n	80018fc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018ca:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a55      	ldr	r2, [pc, #340]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80018d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7fe ffd3 	bl	8000880 <HAL_GetTick>
 80018da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018de:	f7fe ffcf 	bl	8000880 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e212      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018f0:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d036      	beq.n	8001976 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d019      	beq.n	8001944 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7fe ffb0 	bl	8000880 <HAL_GetTick>
 8001920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001924:	f7fe ffac 	bl	8000880 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1ef      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x420>
 8001942:	e018      	b.n	8001976 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001944:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001948:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 800194a:	f023 0301 	bic.w	r3, r3, #1
 800194e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7fe ff96 	bl	8000880 <HAL_GetTick>
 8001954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001958:	f7fe ff92 	bl	8000880 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1d5      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800196a:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 800196c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	2b00      	cmp	r3, #0
 8001980:	d036      	beq.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d019      	beq.n	80019be <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800198a:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 8001990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001994:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001996:	f7fe ff73 	bl	8000880 <HAL_GetTick>
 800199a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800199e:	f7fe ff6f 	bl	8000880 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1b2      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x49a>
 80019bc:	e018      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80019c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019ca:	f7fe ff59 	bl	8000880 <HAL_GetTick>
 80019ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019d2:	f7fe ff55 	bl	8000880 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e198      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_RCC_OscConfig+0x520>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 8085 	beq.w	8001b08 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_RCC_OscConfig+0x524>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x524>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a0a:	f7fe ff39 	bl	8000880 <HAL_GetTick>
 8001a0e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a10:	e00c      	b.n	8001a2c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7fe ff35 	bl	8000880 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b64      	cmp	r3, #100	; 0x64
 8001a1e:	d905      	bls.n	8001a2c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e178      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
 8001a24:	58024400 	.word	0x58024400
 8001a28:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a2c:	4b96      	ldr	r3, [pc, #600]	; (8001c88 <HAL_RCC_OscConfig+0x784>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ec      	beq.n	8001a12 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x54a>
 8001a40:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	4a91      	ldr	r2, [pc, #580]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4c:	e02d      	b.n	8001aaa <HAL_RCC_OscConfig+0x5a6>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x56c>
 8001a56:	4b8d      	ldr	r3, [pc, #564]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	4a8c      	ldr	r2, [pc, #560]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6713      	str	r3, [r2, #112]	; 0x70
 8001a62:	4b8a      	ldr	r3, [pc, #552]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	4a89      	ldr	r2, [pc, #548]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6e:	e01c      	b.n	8001aaa <HAL_RCC_OscConfig+0x5a6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d10c      	bne.n	8001a92 <HAL_RCC_OscConfig+0x58e>
 8001a78:	4b84      	ldr	r3, [pc, #528]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	4a83      	ldr	r2, [pc, #524]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6713      	str	r3, [r2, #112]	; 0x70
 8001a84:	4b81      	ldr	r3, [pc, #516]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	4a80      	ldr	r2, [pc, #512]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a90:	e00b      	b.n	8001aaa <HAL_RCC_OscConfig+0x5a6>
 8001a92:	4b7e      	ldr	r3, [pc, #504]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	4a7d      	ldr	r2, [pc, #500]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9e:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa2:	4a7a      	ldr	r2, [pc, #488]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d015      	beq.n	8001ade <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7fe fee5 	bl	8000880 <HAL_GetTick>
 8001ab6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7fe fee1 	bl	8000880 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e122      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ad0:	4b6e      	ldr	r3, [pc, #440]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0ee      	beq.n	8001aba <HAL_RCC_OscConfig+0x5b6>
 8001adc:	e014      	b.n	8001b08 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7fe fecf 	bl	8000880 <HAL_GetTick>
 8001ae2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7fe fecb 	bl	8000880 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e10c      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001afc:	4b63      	ldr	r3, [pc, #396]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1ee      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 8101 	beq.w	8001d14 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b12:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b1a:	2b18      	cmp	r3, #24
 8001b1c:	f000 80bc 	beq.w	8001c98 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	f040 8095 	bne.w	8001c54 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b58      	ldr	r3, [pc, #352]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a57      	ldr	r2, [pc, #348]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7fe fea3 	bl	8000880 <HAL_GetTick>
 8001b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7fe fe9f 	bl	8000880 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0e2      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b50:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5c:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b60:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_RCC_OscConfig+0x78c>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b6c:	0112      	lsls	r2, r2, #4
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	4946      	ldr	r1, [pc, #280]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	628b      	str	r3, [r1, #40]	; 0x28
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b84:	3b01      	subs	r3, #1
 8001b86:	025b      	lsls	r3, r3, #9
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b90:	3b01      	subs	r3, #1
 8001b92:	041b      	lsls	r3, r3, #16
 8001b94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	061b      	lsls	r3, r3, #24
 8001ba2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ba6:	4939      	ldr	r1, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001bac:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	4a36      	ldr	r2, [pc, #216]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bb8:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <HAL_RCC_OscConfig+0x790>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bc4:	00d2      	lsls	r2, r2, #3
 8001bc6:	4931      	ldr	r1, [pc, #196]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	f023 020c 	bic.w	r2, r3, #12
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	492c      	ldr	r1, [pc, #176]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	f023 0202 	bic.w	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4928      	ldr	r1, [pc, #160]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bf0:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	4a22      	ldr	r2, [pc, #136]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001c0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7fe fe28 	bl	8000880 <HAL_GetTick>
 8001c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c34:	f7fe fe24 	bl	8000880 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e067      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x730>
 8001c52:	e05f      	b.n	8001d14 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7fe fe0e 	bl	8000880 <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c68:	f7fe fe0a 	bl	8000880 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e04d      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <HAL_RCC_OscConfig+0x788>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x764>
 8001c86:	e045      	b.n	8001d14 <HAL_RCC_OscConfig+0x810>
 8001c88:	58024800 	.word	0x58024800
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	fffffc0c 	.word	0xfffffc0c
 8001c94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_RCC_OscConfig+0x81c>)
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_RCC_OscConfig+0x81c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d031      	beq.n	8001d10 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f003 0203 	and.w	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d12a      	bne.n	8001d10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d122      	bne.n	8001d10 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d11a      	bne.n	8001d10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0a5b      	lsrs	r3, r3, #9
 8001cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d111      	bne.n	8001d10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	0c1b      	lsrs	r3, r3, #16
 8001cf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d108      	bne.n	8001d10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	0e1b      	lsrs	r3, r3, #24
 8001d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3730      	adds	r7, #48	; 0x30
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	58024400 	.word	0x58024400

08001d24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e19c      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b8a      	ldr	r3, [pc, #552]	; (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d910      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b87      	ldr	r3, [pc, #540]	; (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 020f 	bic.w	r2, r3, #15
 8001d4e:	4985      	ldr	r1, [pc, #532]	; (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b83      	ldr	r3, [pc, #524]	; (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e184      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d010      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	4b7b      	ldr	r3, [pc, #492]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d908      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d84:	4b78      	ldr	r3, [pc, #480]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	4975      	ldr	r1, [pc, #468]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d010      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	4b70      	ldr	r3, [pc, #448]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d908      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001db2:	4b6d      	ldr	r3, [pc, #436]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	496a      	ldr	r1, [pc, #424]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d010      	beq.n	8001df2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d908      	bls.n	8001df2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001de0:	4b61      	ldr	r3, [pc, #388]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	495e      	ldr	r1, [pc, #376]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d010      	beq.n	8001e20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	4b59      	ldr	r3, [pc, #356]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d908      	bls.n	8001e20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e0e:	4b56      	ldr	r3, [pc, #344]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4953      	ldr	r1, [pc, #332]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d908      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f023 020f 	bic.w	r2, r3, #15
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4947      	ldr	r1, [pc, #284]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d055      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e5a:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4940      	ldr	r1, [pc, #256]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e74:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d121      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0f6      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d115      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0ea      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ea4:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0de      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0d6      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec4:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f023 0207 	bic.w	r2, r3, #7
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4925      	ldr	r1, [pc, #148]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7fe fcd3 	bl	8000880 <HAL_GetTick>
 8001eda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ede:	f7fe fccf 	bl	8000880 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0be      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d1eb      	bne.n	8001ede <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d010      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d208      	bcs.n	8001f34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f023 020f 	bic.w	r2, r3, #15
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	490e      	ldr	r1, [pc, #56]	; (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d214      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 020f 	bic.w	r2, r3, #15
 8001f4a:	4906      	ldr	r1, [pc, #24]	; (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e086      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
 8001f64:	52002000 	.word	0x52002000
 8001f68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d010      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d208      	bcs.n	8001f9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f88:	4b3c      	ldr	r3, [pc, #240]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	4939      	ldr	r1, [pc, #228]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d010      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	4b34      	ldr	r3, [pc, #208]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d208      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	492e      	ldr	r1, [pc, #184]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d010      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	4b28      	ldr	r3, [pc, #160]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d208      	bcs.n	8001ff6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fe4:	4b25      	ldr	r3, [pc, #148]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4922      	ldr	r1, [pc, #136]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d010      	beq.n	8002024 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800200e:	429a      	cmp	r2, r3
 8002010:	d208      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4917      	ldr	r1, [pc, #92]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8002020:	4313      	orrs	r3, r2
 8002022:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002024:	f000 f834 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8002028:	4601      	mov	r1, r0
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_RCC_ClockConfig+0x35c>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	fa21 f303 	lsr.w	r3, r1, r3
 8002040:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <HAL_RCC_ClockConfig+0x358>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_RCC_ClockConfig+0x35c>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x360>)
 800205a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800205c:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <HAL_RCC_ClockConfig+0x364>)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x368>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fbc0 	bl	80007ec <HAL_InitTick>
 800206c:	4603      	mov	r3, r0
 800206e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	58024400 	.word	0x58024400
 8002080:	080050f8 	.word	0x080050f8
 8002084:	20000004 	.word	0x20000004
 8002088:	20000000 	.word	0x20000000
 800208c:	20000008 	.word	0x20000008

08002090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002096:	4baf      	ldr	r3, [pc, #700]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800209e:	2b18      	cmp	r3, #24
 80020a0:	f200 814e 	bhi.w	8002340 <HAL_RCC_GetSysClockFreq+0x2b0>
 80020a4:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80020a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020aa:	bf00      	nop
 80020ac:	08002111 	.word	0x08002111
 80020b0:	08002341 	.word	0x08002341
 80020b4:	08002341 	.word	0x08002341
 80020b8:	08002341 	.word	0x08002341
 80020bc:	08002341 	.word	0x08002341
 80020c0:	08002341 	.word	0x08002341
 80020c4:	08002341 	.word	0x08002341
 80020c8:	08002341 	.word	0x08002341
 80020cc:	08002137 	.word	0x08002137
 80020d0:	08002341 	.word	0x08002341
 80020d4:	08002341 	.word	0x08002341
 80020d8:	08002341 	.word	0x08002341
 80020dc:	08002341 	.word	0x08002341
 80020e0:	08002341 	.word	0x08002341
 80020e4:	08002341 	.word	0x08002341
 80020e8:	08002341 	.word	0x08002341
 80020ec:	0800213d 	.word	0x0800213d
 80020f0:	08002341 	.word	0x08002341
 80020f4:	08002341 	.word	0x08002341
 80020f8:	08002341 	.word	0x08002341
 80020fc:	08002341 	.word	0x08002341
 8002100:	08002341 	.word	0x08002341
 8002104:	08002341 	.word	0x08002341
 8002108:	08002341 	.word	0x08002341
 800210c:	08002143 	.word	0x08002143
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002110:	4b90      	ldr	r3, [pc, #576]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800211c:	4b8d      	ldr	r3, [pc, #564]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	4a8c      	ldr	r2, [pc, #560]	; (8002358 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800212e:	e10a      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002130:	4b89      	ldr	r3, [pc, #548]	; (8002358 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002132:	61bb      	str	r3, [r7, #24]
    break;
 8002134:	e107      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002136:	4b89      	ldr	r3, [pc, #548]	; (800235c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002138:	61bb      	str	r3, [r7, #24]
    break;
 800213a:	e104      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800213c:	4b88      	ldr	r3, [pc, #544]	; (8002360 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800213e:	61bb      	str	r3, [r7, #24]
    break;
 8002140:	e101      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002142:	4b84      	ldr	r3, [pc, #528]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800214c:	4b81      	ldr	r3, [pc, #516]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002156:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002158:	4b7e      	ldr	r3, [pc, #504]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002162:	4b7c      	ldr	r3, [pc, #496]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002166:	08db      	lsrs	r3, r3, #3
 8002168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80da 	beq.w	800233a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d05a      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x1b2>
 800218c:	2b01      	cmp	r3, #1
 800218e:	d302      	bcc.n	8002196 <HAL_RCC_GetSysClockFreq+0x106>
 8002190:	2b02      	cmp	r3, #2
 8002192:	d078      	beq.n	8002286 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002194:	e099      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002196:	4b6f      	ldr	r3, [pc, #444]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d02d      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021a2:	4b6c      	ldr	r3, [pc, #432]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	4a6a      	ldr	r2, [pc, #424]	; (8002358 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021cc:	4b61      	ldr	r3, [pc, #388]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d4:	ee07 3a90 	vmov	s15, r3
 80021d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80021e0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002364 <HAL_RCC_GetSysClockFreq+0x2d4>
 80021e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80021fc:	e087      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002208:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002368 <HAL_RCC_GetSysClockFreq+0x2d8>
 800220c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002210:	4b50      	ldr	r3, [pc, #320]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002218:	ee07 3a90 	vmov	s15, r3
 800221c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002220:	ed97 6a02 	vldr	s12, [r7, #8]
 8002224:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002364 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800222c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002240:	e065      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800236c <HAL_RCC_GetSysClockFreq+0x2dc>
 8002250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002254:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800225c:	ee07 3a90 	vmov	s15, r3
 8002260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002264:	ed97 6a02 	vldr	s12, [r7, #8]
 8002268:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002364 <HAL_RCC_GetSysClockFreq+0x2d4>
 800226c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800227c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002280:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002284:	e043      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002290:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002370 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002298:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ac:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002364 <HAL_RCC_GetSysClockFreq+0x2d4>
 80022b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022c8:	e021      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800236c <HAL_RCC_GetSysClockFreq+0x2dc>
 80022d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80022f0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002364 <HAL_RCC_GetSysClockFreq+0x2d4>
 80022f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002308:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800230c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	0a5b      	lsrs	r3, r3, #9
 8002314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002318:	3301      	adds	r3, #1
 800231a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	ee07 3a90 	vmov	s15, r3
 8002322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002326:	edd7 6a07 	vldr	s13, [r7, #28]
 800232a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800232e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002332:	ee17 3a90 	vmov	r3, s15
 8002336:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002338:	e005      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
    break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002342:	61bb      	str	r3, [r7, #24]
    break;
 8002344:	bf00      	nop
  }

  return sysclockfreq;
 8002346:	69bb      	ldr	r3, [r7, #24]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3724      	adds	r7, #36	; 0x24
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	58024400 	.word	0x58024400
 8002358:	03d09000 	.word	0x03d09000
 800235c:	003d0900 	.word	0x003d0900
 8002360:	017d7840 	.word	0x017d7840
 8002364:	46000000 	.word	0x46000000
 8002368:	4c742400 	.word	0x4c742400
 800236c:	4a742400 	.word	0x4a742400
 8002370:	4bbebc20 	.word	0x4bbebc20

08002374 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002374:	b084      	sub	sp, #16
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	f107 001c 	add.w	r0, r7, #28
 8002382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002388:	2b01      	cmp	r3, #1
 800238a:	d120      	bne.n	80023ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	4b25      	ldr	r3, [pc, #148]	; (8002434 <USB_CoreInit+0xc0>)
 800239e:	4013      	ands	r3, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80023b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d105      	bne.n	80023c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f902 	bl	80025cc <USB_CoreReset>
 80023c8:	4603      	mov	r3, r0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e01a      	b.n	8002404 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8f6 	bl	80025cc <USB_CoreReset>
 80023e0:	4603      	mov	r3, r0
 80023e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80023e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
 80023f6:	e005      	b.n	8002404 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	2b01      	cmp	r3, #1
 8002408:	d10b      	bne.n	8002422 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f043 0206 	orr.w	r2, r3, #6
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f043 0220 	orr.w	r2, r3, #32
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800242e:	b004      	add	sp, #16
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	ffbdffbf 	.word	0xffbdffbf

08002438 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f043 0201 	orr.w	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 0201 	bic.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d106      	bne.n	80024a8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	e00b      	b.n	80024c0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	e001      	b.n	80024c0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e003      	b.n	80024c8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80024c0:	2032      	movs	r0, #50	; 0x32
 80024c2:	f7fe f9e9 	bl	8000898 <HAL_Delay>

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	019b      	lsls	r3, r3, #6
 80024e2:	f043 0220 	orr.w	r2, r3, #32
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3301      	adds	r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <USB_FlushTxFifo+0x48>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e006      	b.n	800250a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b20      	cmp	r3, #32
 8002506:	d0f0      	beq.n	80024ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	00030d40 	.word	0x00030d40

0800251c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2210      	movs	r2, #16
 800252c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3301      	adds	r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <USB_FlushRxFifo+0x40>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e006      	b.n	800254e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b10      	cmp	r3, #16
 800254a:	d0f0      	beq.n	800252e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	00030d40 	.word	0x00030d40

08002560 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	4611      	mov	r1, r2
 800256c:	461a      	mov	r2, r3
 800256e:	460b      	mov	r3, r1
 8002570:	71fb      	strb	r3, [r7, #7]
 8002572:	4613      	mov	r3, r2
 8002574:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800257e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002582:	2b00      	cmp	r3, #0
 8002584:	d11a      	bne.n	80025bc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8002586:	88bb      	ldrh	r3, [r7, #4]
 8002588:	3303      	adds	r3, #3
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	e00f      	b.n	80025b4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	031a      	lsls	r2, r3, #12
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	4413      	add	r3, r2
 800259c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a0:	461a      	mov	r2, r3
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	3304      	adds	r3, #4
 80025ac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3eb      	bcc.n	8002594 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3301      	adds	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4a13      	ldr	r2, [pc, #76]	; (8002630 <USB_CoreReset+0x64>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e01b      	b.n	8002622 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	daf2      	bge.n	80025d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3301      	adds	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <USB_CoreReset+0x64>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e006      	b.n	8002622 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d0f0      	beq.n	8002602 <USB_CoreReset+0x36>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	00030d40 	.word	0x00030d40

08002634 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002634:	b084      	sub	sp, #16
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	f107 001c 	add.w	r0, r7, #28
 8002642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002650:	461a      	mov	r2, r3
 8002652:	2300      	movs	r3, #0
 8002654:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d018      	beq.n	80026ac <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	2b01      	cmp	r3, #1
 800267e:	d10a      	bne.n	8002696 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	e014      	b.n	80026c0 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e009      	b.n	80026c0 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ba:	f023 0304 	bic.w	r3, r3, #4
 80026be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80026c0:	2110      	movs	r1, #16
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ff04 	bl	80024d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff27 	bl	800251c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e015      	b.n	8002700 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	461a      	mov	r2, r3
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	461a      	mov	r2, r3
 80026f6:	2300      	movs	r3, #0
 80026f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3301      	adds	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	429a      	cmp	r2, r3
 8002706:	d3e5      	bcc.n	80026d4 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8002708:	2101      	movs	r1, #1
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f848 	bl	80027a0 <USB_DriveVbus>

  HAL_Delay(200U);
 8002710:	20c8      	movs	r0, #200	; 0xc8
 8002712:	f7fe f8c1 	bl	8000898 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f04f 32ff 	mov.w	r2, #4294967295
 8002722:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00b      	beq.n	8002748 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a14      	ldr	r2, [pc, #80]	; (800278c <USB_HostInit+0x158>)
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a13      	ldr	r2, [pc, #76]	; (8002790 <USB_HostInit+0x15c>)
 8002742:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8002746:	e009      	b.n	800275c <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a10      	ldr	r2, [pc, #64]	; (8002794 <USB_HostInit+0x160>)
 8002752:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a10      	ldr	r2, [pc, #64]	; (8002798 <USB_HostInit+0x164>)
 8002758:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	2b00      	cmp	r3, #0
 8002760:	d105      	bne.n	800276e <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f043 0210 	orr.w	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <USB_HostInit+0x168>)
 8002774:	4313      	orrs	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002786:	b004      	add	sp, #16
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	01000200 	.word	0x01000200
 8002790:	00e00300 	.word	0x00e00300
 8002794:	00600080 	.word	0x00600080
 8002798:	004000e0 	.word	0x004000e0
 800279c:	a3200008 	.word	0xa3200008

080027a0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80027c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <USB_DriveVbus+0x44>
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d106      	bne.n	80027e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80027de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ee:	d109      	bne.n	8002804 <USB_DriveVbus+0x64>
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80027fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002802:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	b29b      	uxth	r3, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	4608      	mov	r0, r1
 800283e:	4611      	mov	r1, r2
 8002840:	461a      	mov	r2, r3
 8002842:	4603      	mov	r3, r0
 8002844:	70fb      	strb	r3, [r7, #3]
 8002846:	460b      	mov	r3, r1
 8002848:	70bb      	strb	r3, [r7, #2]
 800284a:	4613      	mov	r3, r2
 800284c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800286a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800286e:	2b03      	cmp	r3, #3
 8002870:	d87e      	bhi.n	8002970 <USB_HC_Init+0x13c>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <USB_HC_Init+0x44>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002889 	.word	0x08002889
 800287c:	08002933 	.word	0x08002933
 8002880:	08002889 	.word	0x08002889
 8002884:	080028f5 	.word	0x080028f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	f240 439d 	movw	r3, #1181	; 0x49d
 800289a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800289c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da10      	bge.n	80028c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	0151      	lsls	r1, r2, #5
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	440a      	add	r2, r1
 80028ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80028c4:	e057      	b.n	8002976 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d051      	beq.n	8002976 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	0151      	lsls	r1, r2, #5
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	440a      	add	r2, r1
 80028e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028f0:	60d3      	str	r3, [r2, #12]
      break;
 80028f2:	e040      	b.n	8002976 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	461a      	mov	r2, r3
 8002902:	f240 639d 	movw	r3, #1693	; 0x69d
 8002906:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8002908:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800290c:	2b00      	cmp	r3, #0
 800290e:	da34      	bge.n	800297a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	0151      	lsls	r1, r2, #5
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	440a      	add	r2, r1
 8002926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8002930:	e023      	b.n	800297a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293e:	461a      	mov	r2, r3
 8002940:	f240 2325 	movw	r3, #549	; 0x225
 8002944:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8002946:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800294a:	2b00      	cmp	r3, #0
 800294c:	da17      	bge.n	800297e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	0151      	lsls	r1, r2, #5
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	440a      	add	r2, r1
 8002964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002968:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800296c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800296e:	e006      	b.n	800297e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	75fb      	strb	r3, [r7, #23]
      break;
 8002974:	e004      	b.n	8002980 <USB_HC_Init+0x14c>
      break;
 8002976:	bf00      	nop
 8002978:	e002      	b.n	8002980 <USB_HC_Init+0x14c>
      break;
 800297a:	bf00      	nop
 800297c:	e000      	b.n	8002980 <USB_HC_Init+0x14c>
      break;
 800297e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800299a:	4313      	orrs	r3, r2
 800299c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80029aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da03      	bge.n	80029ba <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80029b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	e001      	b.n	80029be <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80029be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d103      	bne.n	80029ce <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80029c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e001      	b.n	80029d2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80029d2:	787b      	ldrb	r3, [r7, #1]
 80029d4:	059b      	lsls	r3, r3, #22
 80029d6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80029da:	78bb      	ldrb	r3, [r7, #2]
 80029dc:	02db      	lsls	r3, r3, #11
 80029de:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80029e2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80029e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029e8:	049b      	lsls	r3, r3, #18
 80029ea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80029ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80029f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80029f6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	0159      	lsls	r1, r3, #5
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	440b      	add	r3, r1
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002a0e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8002a10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d10f      	bne.n	8002a38 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	0151      	lsls	r1, r2, #5
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	440a      	add	r2, r1
 8002a2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a36:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop

08002a48 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	; 0x30
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8002a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a64:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d028      	beq.n	8002ac4 <USB_HC_StartXfer+0x7c>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	791b      	ldrb	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d124      	bne.n	8002ac4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10b      	bne.n	8002a98 <USB_HC_StartXfer+0x50>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	795b      	ldrb	r3, [r3, #5]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	785b      	ldrb	r3, [r3, #1]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fa1e 	bl	8002ed0 <USB_DoPing>
      return HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e112      	b.n	8002cbe <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d112      	bne.n	8002ac4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	0151      	lsls	r1, r2, #5
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	440a      	add	r2, r1
 8002ab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ab8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002abc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d018      	beq.n	8002afe <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	8912      	ldrh	r2, [r2, #8]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	8912      	ldrh	r2, [r2, #8]
 8002adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ae0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8002ae2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ae4:	8b7b      	ldrh	r3, [r7, #26]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d90b      	bls.n	8002b02 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8002aea:	8b7b      	ldrh	r3, [r7, #26]
 8002aec:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002aee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	8912      	ldrh	r2, [r2, #8]
 8002af4:	fb02 f203 	mul.w	r2, r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	611a      	str	r2, [r3, #16]
 8002afc:	e001      	b.n	8002b02 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8002afe:	2301      	movs	r3, #1
 8002b00:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	78db      	ldrb	r3, [r3, #3]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002b0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	8912      	ldrh	r2, [r2, #8]
 8002b10:	fb02 f203 	mul.w	r2, r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002b20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b22:	04d9      	lsls	r1, r3, #19
 8002b24:	4b68      	ldr	r3, [pc, #416]	; (8002cc8 <USB_HC_StartXfer+0x280>)
 8002b26:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002b28:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	7a9b      	ldrb	r3, [r3, #10]
 8002b2e:	075b      	lsls	r3, r3, #29
 8002b30:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002b34:	69f9      	ldr	r1, [r7, #28]
 8002b36:	0148      	lsls	r0, r1, #5
 8002b38:	6a39      	ldr	r1, [r7, #32]
 8002b3a:	4401      	add	r1, r0
 8002b3c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002b40:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002b42:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	68d9      	ldr	r1, [r3, #12]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5a:	460a      	mov	r2, r1
 8002b5c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2301      	moveq	r3, #1
 8002b70:	2300      	movne	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	0151      	lsls	r1, r2, #5
 8002b88:	6a3a      	ldr	r2, [r7, #32]
 8002b8a:	440a      	add	r2, r1
 8002b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002b94:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	7e7b      	ldrb	r3, [r7, #25]
 8002ba6:	075b      	lsls	r3, r3, #29
 8002ba8:	69f9      	ldr	r1, [r7, #28]
 8002baa:	0148      	lsls	r0, r1, #5
 8002bac:	6a39      	ldr	r1, [r7, #32]
 8002bae:	4401      	add	r1, r0
 8002bb0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a41      	ldr	r2, [pc, #260]	; (8002ccc <USB_HC_StartXfer+0x284>)
 8002bc8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bca:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <USB_HC_StartXfer+0x284>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bd2:	4a3e      	ldr	r2, [pc, #248]	; (8002ccc <USB_HC_StartXfer+0x284>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	78db      	ldrb	r3, [r3, #3]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <USB_HC_StartXfer+0x284>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be6:	4a39      	ldr	r2, [pc, #228]	; (8002ccc <USB_HC_StartXfer+0x284>)
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e005      	b.n	8002bf8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002bec:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <USB_HC_StartXfer+0x284>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002bf4:	4a35      	ldr	r2, [pc, #212]	; (8002ccc <USB_HC_StartXfer+0x284>)
 8002bf6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bf8:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <USB_HC_StartXfer+0x284>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c00:	4a32      	ldr	r2, [pc, #200]	; (8002ccc <USB_HC_StartXfer+0x284>)
 8002c02:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <USB_HC_StartXfer+0x284>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d14e      	bne.n	8002cbc <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	78db      	ldrb	r3, [r3, #3]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d14a      	bne.n	8002cbc <USB_HC_StartXfer+0x274>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d046      	beq.n	8002cbc <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	79db      	ldrb	r3, [r3, #7]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d830      	bhi.n	8002c98 <USB_HC_StartXfer+0x250>
 8002c36:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <USB_HC_StartXfer+0x1f4>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c4d 	.word	0x08002c4d
 8002c40:	08002c71 	.word	0x08002c71
 8002c44:	08002c4d 	.word	0x08002c4d
 8002c48:	08002c71 	.word	0x08002c71
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	3303      	adds	r3, #3
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002c56:	8afa      	ldrh	r2, [r7, #22]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d91c      	bls.n	8002c9c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f043 0220 	orr.w	r2, r3, #32
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	619a      	str	r2, [r3, #24]
          }
          break;
 8002c6e:	e015      	b.n	8002c9c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	3303      	adds	r3, #3
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002c7a:	8afa      	ldrh	r2, [r7, #22]
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d90a      	bls.n	8002ca0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	619a      	str	r2, [r3, #24]
          }
          break;
 8002c96:	e003      	b.n	8002ca0 <USB_HC_StartXfer+0x258>

        default:
          break;
 8002c98:	bf00      	nop
 8002c9a:	e002      	b.n	8002ca2 <USB_HC_StartXfer+0x25a>
          break;
 8002c9c:	bf00      	nop
 8002c9e:	e000      	b.n	8002ca2 <USB_HC_StartXfer+0x25a>
          break;
 8002ca0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	68d9      	ldr	r1, [r3, #12]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	785a      	ldrb	r2, [r3, #1]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	b298      	uxth	r0, r3
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff fc52 	bl	8002560 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3728      	adds	r7, #40	; 0x28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	1ff80000 	.word	0x1ff80000
 8002ccc:	200000b4 	.word	0x200000b4

08002cd0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	0c9b      	lsrs	r3, r3, #18
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <USB_HC_Halt+0x3a>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d16c      	bne.n	8002de4 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	0151      	lsls	r1, r2, #5
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d28:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d143      	bne.n	8002dbe <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	0151      	lsls	r1, r2, #5
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	440a      	add	r2, r1
 8002d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d54:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	0151      	lsls	r1, r2, #5
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	440a      	add	r2, r1
 8002d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d74:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	0151      	lsls	r1, r2, #5
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	440a      	add	r2, r1
 8002d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d94:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002da2:	d81d      	bhi.n	8002de0 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dba:	d0ec      	beq.n	8002d96 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002dbc:	e080      	b.n	8002ec0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	0151      	lsls	r1, r2, #5
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	440a      	add	r2, r1
 8002dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ddc:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002dde:	e06f      	b.n	8002ec0 <USB_HC_Halt+0x1f0>
          break;
 8002de0:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002de2:	e06d      	b.n	8002ec0 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	0151      	lsls	r1, r2, #5
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	440a      	add	r2, r1
 8002dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e02:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d143      	bne.n	8002e9c <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	0151      	lsls	r1, r2, #5
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	440a      	add	r2, r1
 8002e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e32:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	0151      	lsls	r1, r2, #5
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	440a      	add	r2, r1
 8002e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	0151      	lsls	r1, r2, #5
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	440a      	add	r2, r1
 8002e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e72:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	3301      	adds	r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e80:	d81d      	bhi.n	8002ebe <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e98:	d0ec      	beq.n	8002e74 <USB_HC_Halt+0x1a4>
 8002e9a:	e011      	b.n	8002ec0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	0151      	lsls	r1, r2, #5
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	440a      	add	r2, r1
 8002eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	e000      	b.n	8002ec0 <USB_HC_Halt+0x1f0>
          break;
 8002ebe:	bf00      	nop
    }
  }

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	04da      	lsls	r2, r3, #19
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <USB_DoPing+0x74>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	0151      	lsls	r1, r2, #5
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	440a      	add	r2, r1
 8002ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	1ff80000 	.word	0x1ff80000

08002f48 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	4613      	mov	r3, r2
 8002f54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e029      	b.n	8002fb4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	79fa      	ldrb	r2, [r7, #7]
 8002f64:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f81f 	bl	8002fbc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f001 fdeb 	bl	8004b88 <USBH_LL_Init>

  return USBH_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	e009      	b.n	8002fe2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	33e0      	adds	r3, #224	; 0xe0
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	2200      	movs	r2, #0
 8002fda:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b0e      	cmp	r3, #14
 8002fe6:	d9f2      	bls.n	8002fce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e009      	b.n	8003002 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3301      	adds	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003008:	d3f1      	bcc.n	8002fee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2240      	movs	r2, #64	; 0x40
 800302e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d016      	beq.n	80030a6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10e      	bne.n	80030a0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	33de      	adds	r3, #222	; 0xde
 8003094:	6839      	ldr	r1, [r7, #0]
 8003096:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
 800309e:	e004      	b.n	80030aa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80030a0:	2302      	movs	r3, #2
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e001      	b.n	80030aa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80030a6:	2302      	movs	r3, #2
 80030a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d204      	bcs.n	80030de <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80030dc:	e001      	b.n	80030e2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80030de:	2302      	movs	r3, #2
 80030e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	461a      	mov	r2, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	70fb      	strb	r3, [r7, #3]
 8003102:	460b      	mov	r3, r1
 8003104:	70bb      	strb	r3, [r7, #2]
 8003106:	4613      	mov	r3, r2
 8003108:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8003118:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800311a:	e025      	b.n	8003168 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	221a      	movs	r2, #26
 8003120:	fb02 f303 	mul.w	r3, r2, r3
 8003124:	3308      	adds	r3, #8
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4413      	add	r3, r2
 800312a:	3302      	adds	r3, #2
 800312c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	795b      	ldrb	r3, [r3, #5]
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	429a      	cmp	r2, r3
 8003136:	d002      	beq.n	800313e <USBH_FindInterface+0x4e>
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	2bff      	cmp	r3, #255	; 0xff
 800313c:	d111      	bne.n	8003162 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8003142:	78ba      	ldrb	r2, [r7, #2]
 8003144:	429a      	cmp	r2, r3
 8003146:	d002      	beq.n	800314e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8003148:	78bb      	ldrb	r3, [r7, #2]
 800314a:	2bff      	cmp	r3, #255	; 0xff
 800314c:	d109      	bne.n	8003162 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8003152:	787a      	ldrb	r2, [r7, #1]
 8003154:	429a      	cmp	r2, r3
 8003156:	d002      	beq.n	800315e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	2bff      	cmp	r3, #255	; 0xff
 800315c:	d101      	bne.n	8003162 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	e006      	b.n	8003170 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	3301      	adds	r3, #1
 8003166:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d9d6      	bls.n	800311c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800316e:	23ff      	movs	r3, #255	; 0xff
}
 8003170:	4618      	mov	r0, r3
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f001 fd41 	bl	8004c0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800318a:	2101      	movs	r1, #1
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f001 fdfd 	bl	8004d8c <USBH_LL_DriverVBUS>

  return USBH_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	789b      	ldrb	r3, [r3, #2]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d10f      	bne.n	80031ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2100      	movs	r1, #0
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f805 	bl	8003202 <USBH_CtlReq>
 80031f8:	4603      	mov	r3, r0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	4613      	mov	r3, r2
 800320e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8003210:	2301      	movs	r3, #1
 8003212:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	789b      	ldrb	r3, [r3, #2]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d002      	beq.n	8003222 <USBH_CtlReq+0x20>
 800321c:	2b02      	cmp	r3, #2
 800321e:	d00f      	beq.n	8003240 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8003220:	e027      	b.n	8003272 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2202      	movs	r2, #2
 8003238:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
      break;
 800323e:	e018      	b.n	8003272 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f81b 	bl	800327c <USBH_HandleControl>
 8003246:	4603      	mov	r3, r0
 8003248:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <USBH_CtlReq+0x54>
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d106      	bne.n	8003264 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	761a      	strb	r2, [r3, #24]
      break;
 8003262:	e005      	b.n	8003270 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8003264:	7dfb      	ldrb	r3, [r7, #23]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d102      	bne.n	8003270 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	709a      	strb	r2, [r3, #2]
      break;
 8003270:	bf00      	nop
  }
  return status;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af02      	add	r7, sp, #8
 8003282:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8003288:	2300      	movs	r3, #0
 800328a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7e1b      	ldrb	r3, [r3, #24]
 8003290:	3b01      	subs	r3, #1
 8003292:	2b0a      	cmp	r3, #10
 8003294:	f200 8158 	bhi.w	8003548 <USBH_HandleControl+0x2cc>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <USBH_HandleControl+0x24>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032cd 	.word	0x080032cd
 80032a4:	080032e7 	.word	0x080032e7
 80032a8:	08003351 	.word	0x08003351
 80032ac:	08003377 	.word	0x08003377
 80032b0:	080033af 	.word	0x080033af
 80032b4:	080033db 	.word	0x080033db
 80032b8:	0800342d 	.word	0x0800342d
 80032bc:	0800344f 	.word	0x0800344f
 80032c0:	0800348b 	.word	0x0800348b
 80032c4:	080034b3 	.word	0x080034b3
 80032c8:	080034f1 	.word	0x080034f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f103 0110 	add.w	r1, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	795b      	ldrb	r3, [r3, #5]
 80032d6:	461a      	mov	r2, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f945 	bl	8003568 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	761a      	strb	r2, [r3, #24]
      break;
 80032e4:	e13b      	b.n	800355e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	795b      	ldrb	r3, [r3, #5]
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f001 fd3a 	bl	8004d66 <USBH_LL_GetURBState>
 80032f2:	4603      	mov	r3, r0
 80032f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80032f6:	7bbb      	ldrb	r3, [r7, #14]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d11e      	bne.n	800333a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	7c1b      	ldrb	r3, [r3, #16]
 8003300:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003304:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8adb      	ldrh	r3, [r3, #22]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800330e:	7b7b      	ldrb	r3, [r7, #13]
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d103      	bne.n	800331c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2203      	movs	r2, #3
 8003318:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800331a:	e117      	b.n	800354c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2205      	movs	r2, #5
 8003320:	761a      	strb	r2, [r3, #24]
      break;
 8003322:	e113      	b.n	800354c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8003324:	7b7b      	ldrb	r3, [r7, #13]
 8003326:	2b80      	cmp	r3, #128	; 0x80
 8003328:	d103      	bne.n	8003332 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2209      	movs	r2, #9
 800332e:	761a      	strb	r2, [r3, #24]
      break;
 8003330:	e10c      	b.n	800354c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2207      	movs	r2, #7
 8003336:	761a      	strb	r2, [r3, #24]
      break;
 8003338:	e108      	b.n	800354c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800333a:	7bbb      	ldrb	r3, [r7, #14]
 800333c:	2b04      	cmp	r3, #4
 800333e:	d003      	beq.n	8003348 <USBH_HandleControl+0xcc>
 8003340:	7bbb      	ldrb	r3, [r7, #14]
 8003342:	2b02      	cmp	r3, #2
 8003344:	f040 8102 	bne.w	800354c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	220b      	movs	r2, #11
 800334c:	761a      	strb	r2, [r3, #24]
      break;
 800334e:	e0fd      	b.n	800354c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8003356:	b29a      	uxth	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6899      	ldr	r1, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	899a      	ldrh	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	791b      	ldrb	r3, [r3, #4]
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f93c 	bl	80035e6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2204      	movs	r2, #4
 8003372:	761a      	strb	r2, [r3, #24]
      break;
 8003374:	e0f3      	b.n	800355e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	791b      	ldrb	r3, [r3, #4]
 800337a:	4619      	mov	r1, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f001 fcf2 	bl	8004d66 <USBH_LL_GetURBState>
 8003382:	4603      	mov	r3, r0
 8003384:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8003386:	7bbb      	ldrb	r3, [r7, #14]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d102      	bne.n	8003392 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2209      	movs	r2, #9
 8003390:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8003392:	7bbb      	ldrb	r3, [r7, #14]
 8003394:	2b05      	cmp	r3, #5
 8003396:	d102      	bne.n	800339e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8003398:	2303      	movs	r3, #3
 800339a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800339c:	e0d8      	b.n	8003550 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800339e:	7bbb      	ldrb	r3, [r7, #14]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	f040 80d5 	bne.w	8003550 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	220b      	movs	r2, #11
 80033aa:	761a      	strb	r2, [r3, #24]
      break;
 80033ac:	e0d0      	b.n	8003550 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6899      	ldr	r1, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	899a      	ldrh	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7958      	ldrb	r0, [r3, #5]
 80033ba:	2301      	movs	r3, #1
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	4603      	mov	r3, r0
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f8eb 	bl	800359c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2206      	movs	r2, #6
 80033d6:	761a      	strb	r2, [r3, #24]
      break;
 80033d8:	e0c1      	b.n	800355e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	795b      	ldrb	r3, [r3, #5]
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f001 fcc0 	bl	8004d66 <USBH_LL_GetURBState>
 80033e6:	4603      	mov	r3, r0
 80033e8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80033ea:	7bbb      	ldrb	r3, [r7, #14]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d103      	bne.n	80033f8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2207      	movs	r2, #7
 80033f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80033f6:	e0ad      	b.n	8003554 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80033f8:	7bbb      	ldrb	r3, [r7, #14]
 80033fa:	2b05      	cmp	r3, #5
 80033fc:	d105      	bne.n	800340a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	220c      	movs	r2, #12
 8003402:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8003404:	2303      	movs	r3, #3
 8003406:	73fb      	strb	r3, [r7, #15]
      break;
 8003408:	e0a4      	b.n	8003554 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800340a:	7bbb      	ldrb	r3, [r7, #14]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d103      	bne.n	8003418 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2205      	movs	r2, #5
 8003414:	761a      	strb	r2, [r3, #24]
      break;
 8003416:	e09d      	b.n	8003554 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8003418:	7bbb      	ldrb	r3, [r7, #14]
 800341a:	2b04      	cmp	r3, #4
 800341c:	f040 809a 	bne.w	8003554 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	220b      	movs	r2, #11
 8003424:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8003426:	2302      	movs	r3, #2
 8003428:	73fb      	strb	r3, [r7, #15]
      break;
 800342a:	e093      	b.n	8003554 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	791b      	ldrb	r3, [r3, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	2100      	movs	r1, #0
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8d6 	bl	80035e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8003440:	b29a      	uxth	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2208      	movs	r2, #8
 800344a:	761a      	strb	r2, [r3, #24]

      break;
 800344c:	e087      	b.n	800355e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	791b      	ldrb	r3, [r3, #4]
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f001 fc86 	bl	8004d66 <USBH_LL_GetURBState>
 800345a:	4603      	mov	r3, r0
 800345c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800345e:	7bbb      	ldrb	r3, [r7, #14]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	220d      	movs	r2, #13
 8003468:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800346e:	e073      	b.n	8003558 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8003470:	7bbb      	ldrb	r3, [r7, #14]
 8003472:	2b04      	cmp	r3, #4
 8003474:	d103      	bne.n	800347e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	220b      	movs	r2, #11
 800347a:	761a      	strb	r2, [r3, #24]
      break;
 800347c:	e06c      	b.n	8003558 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800347e:	7bbb      	ldrb	r3, [r7, #14]
 8003480:	2b05      	cmp	r3, #5
 8003482:	d169      	bne.n	8003558 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8003484:	2303      	movs	r3, #3
 8003486:	73fb      	strb	r3, [r7, #15]
      break;
 8003488:	e066      	b.n	8003558 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	795a      	ldrb	r2, [r3, #5]
 800348e:	2301      	movs	r3, #1
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	2200      	movs	r2, #0
 8003496:	2100      	movs	r1, #0
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f87f 	bl	800359c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	220a      	movs	r2, #10
 80034ae:	761a      	strb	r2, [r3, #24]
      break;
 80034b0:	e055      	b.n	800355e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	795b      	ldrb	r3, [r3, #5]
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f001 fc54 	bl	8004d66 <USBH_LL_GetURBState>
 80034be:	4603      	mov	r3, r0
 80034c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80034c2:	7bbb      	ldrb	r3, [r7, #14]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	220d      	movs	r2, #13
 80034d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80034d2:	e043      	b.n	800355c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80034d4:	7bbb      	ldrb	r3, [r7, #14]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d103      	bne.n	80034e2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2209      	movs	r2, #9
 80034de:	761a      	strb	r2, [r3, #24]
      break;
 80034e0:	e03c      	b.n	800355c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80034e2:	7bbb      	ldrb	r3, [r7, #14]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d139      	bne.n	800355c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	220b      	movs	r2, #11
 80034ec:	761a      	strb	r2, [r3, #24]
      break;
 80034ee:	e035      	b.n	800355c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	7e5b      	ldrb	r3, [r3, #25]
 80034f4:	3301      	adds	r3, #1
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	765a      	strb	r2, [r3, #25]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7e5b      	ldrb	r3, [r3, #25]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d806      	bhi.n	8003512 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8003510:	e025      	b.n	800355e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8003518:	2106      	movs	r1, #6
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	795b      	ldrb	r3, [r3, #5]
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f001 f9d8 	bl	80048e0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	791b      	ldrb	r3, [r3, #4]
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f001 f9d2 	bl	80048e0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8003542:	2302      	movs	r3, #2
 8003544:	73fb      	strb	r3, [r7, #15]
      break;
 8003546:	e00a      	b.n	800355e <USBH_HandleControl+0x2e2>

    default:
      break;
 8003548:	bf00      	nop
 800354a:	e008      	b.n	800355e <USBH_HandleControl+0x2e2>
      break;
 800354c:	bf00      	nop
 800354e:	e006      	b.n	800355e <USBH_HandleControl+0x2e2>
      break;
 8003550:	bf00      	nop
 8003552:	e004      	b.n	800355e <USBH_HandleControl+0x2e2>
      break;
 8003554:	bf00      	nop
 8003556:	e002      	b.n	800355e <USBH_HandleControl+0x2e2>
      break;
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <USBH_HandleControl+0x2e2>
      break;
 800355c:	bf00      	nop
  }

  return status;
 800355e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af04      	add	r7, sp, #16
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	4613      	mov	r3, r2
 8003574:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8003576:	79f9      	ldrb	r1, [r7, #7]
 8003578:	2300      	movs	r3, #0
 800357a:	9303      	str	r3, [sp, #12]
 800357c:	2308      	movs	r3, #8
 800357e:	9302      	str	r3, [sp, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	2300      	movs	r3, #0
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	2200      	movs	r2, #0
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f001 fbb9 	bl	8004d04 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af04      	add	r7, sp, #16
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	4611      	mov	r1, r2
 80035a8:	461a      	mov	r2, r3
 80035aa:	460b      	mov	r3, r1
 80035ac:	80fb      	strh	r3, [r7, #6]
 80035ae:	4613      	mov	r3, r2
 80035b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80035c0:	7979      	ldrb	r1, [r7, #5]
 80035c2:	7e3b      	ldrb	r3, [r7, #24]
 80035c4:	9303      	str	r3, [sp, #12]
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	9302      	str	r3, [sp, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	2301      	movs	r3, #1
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	2200      	movs	r2, #0
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f001 fb94 	bl	8004d04 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b088      	sub	sp, #32
 80035ea:	af04      	add	r7, sp, #16
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	4611      	mov	r1, r2
 80035f2:	461a      	mov	r2, r3
 80035f4:	460b      	mov	r3, r1
 80035f6:	80fb      	strh	r3, [r7, #6]
 80035f8:	4613      	mov	r3, r2
 80035fa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80035fc:	7979      	ldrb	r1, [r7, #5]
 80035fe:	2300      	movs	r3, #0
 8003600:	9303      	str	r3, [sp, #12]
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	9302      	str	r3, [sp, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	2301      	movs	r3, #1
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	2300      	movs	r3, #0
 8003610:	2201      	movs	r2, #1
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f001 fb76 	bl	8004d04 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8003618:	2300      	movs	r3, #0

}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b088      	sub	sp, #32
 8003626:	af04      	add	r7, sp, #16
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	4611      	mov	r1, r2
 800362e:	461a      	mov	r2, r3
 8003630:	460b      	mov	r3, r1
 8003632:	80fb      	strh	r3, [r7, #6]
 8003634:	4613      	mov	r3, r2
 8003636:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8003646:	7979      	ldrb	r1, [r7, #5]
 8003648:	7e3b      	ldrb	r3, [r7, #24]
 800364a:	9303      	str	r3, [sp, #12]
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	9302      	str	r3, [sp, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	2301      	movs	r3, #1
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2302      	movs	r3, #2
 800365a:	2200      	movs	r2, #0
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f001 fb51 	bl	8004d04 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af04      	add	r7, sp, #16
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	4611      	mov	r1, r2
 8003678:	461a      	mov	r2, r3
 800367a:	460b      	mov	r3, r1
 800367c:	80fb      	strh	r3, [r7, #6]
 800367e:	4613      	mov	r3, r2
 8003680:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8003682:	7979      	ldrb	r1, [r7, #5]
 8003684:	2300      	movs	r3, #0
 8003686:	9303      	str	r3, [sp, #12]
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	9302      	str	r3, [sp, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	2301      	movs	r3, #1
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2302      	movs	r3, #2
 8003696:	2201      	movs	r2, #1
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f001 fb33 	bl	8004d04 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b089      	sub	sp, #36	; 0x24
 80036ac:	af04      	add	r7, sp, #16
 80036ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80036b6:	7919      	ldrb	r1, [r3, #4]
 80036b8:	2350      	movs	r3, #80	; 0x50
 80036ba:	2206      	movs	r2, #6
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff fd17 	bl	80030f0 <USBH_FindInterface>
 80036c2:	4603      	mov	r3, r0
 80036c4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2bff      	cmp	r3, #255	; 0xff
 80036ca:	d002      	beq.n	80036d2 <USBH_MSC_InterfaceInit+0x2a>
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d901      	bls.n	80036d6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80036d2:	2302      	movs	r3, #2
 80036d4:	e0ef      	b.n	80038b6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	4619      	mov	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff fcec 	bl	80030b8 <USBH_SelectInterface>
 80036e0:	4603      	mov	r3, r0
 80036e2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80036e4:	7bbb      	ldrb	r3, [r7, #14]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0e3      	b.n	80038b6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80036f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80036f8:	f001 fc12 	bl	8004f20 <malloc>
 80036fc:	4603      	mov	r3, r0
 80036fe:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8003710:	2302      	movs	r3, #2
 8003712:	e0d0      	b.n	80038b6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8003714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003718:	2100      	movs	r1, #0
 800371a:	68b8      	ldr	r0, [r7, #8]
 800371c:	f001 fc1b 	bl	8004f56 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	211a      	movs	r1, #26
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	b25b      	sxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	da16      	bge.n	8003766 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	211a      	movs	r1, #26
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	211a      	movs	r1, #26
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	815a      	strh	r2, [r3, #10]
 8003764:	e015      	b.n	8003792 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	211a      	movs	r1, #26
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8003776:	781a      	ldrb	r2, [r3, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	211a      	movs	r1, #26
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800378c:	881a      	ldrh	r2, [r3, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	211a      	movs	r1, #26
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	b25b      	sxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	da16      	bge.n	80037d8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	211a      	movs	r1, #26
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80037ba:	781a      	ldrb	r2, [r3, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	211a      	movs	r1, #26
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80037d0:	881a      	ldrh	r2, [r3, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	815a      	strh	r2, [r3, #10]
 80037d6:	e015      	b.n	8003804 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	211a      	movs	r1, #26
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	211a      	movs	r1, #26
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2200      	movs	r2, #0
 800380e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	799b      	ldrb	r3, [r3, #6]
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f001 f83e 	bl	800489e <USBH_AllocPipe>
 8003822:	4603      	mov	r3, r0
 8003824:	461a      	mov	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	79db      	ldrb	r3, [r3, #7]
 800382e:	4619      	mov	r1, r3
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f001 f834 	bl	800489e <USBH_AllocPipe>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fbbe 	bl	8003fc0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	7959      	ldrb	r1, [r3, #5]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	7998      	ldrb	r0, [r3, #6]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	8912      	ldrh	r2, [r2, #8]
 800385c:	9202      	str	r2, [sp, #8]
 800385e:	2202      	movs	r2, #2
 8003860:	9201      	str	r2, [sp, #4]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	4623      	mov	r3, r4
 8003866:	4602      	mov	r2, r0
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 ffe9 	bl	8004840 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	7919      	ldrb	r1, [r3, #4]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	79d8      	ldrb	r0, [r3, #7]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	8952      	ldrh	r2, [r2, #10]
 8003886:	9202      	str	r2, [sp, #8]
 8003888:	2202      	movs	r2, #2
 800388a:	9201      	str	r2, [sp, #4]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4623      	mov	r3, r4
 8003890:	4602      	mov	r2, r0
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 ffd4 	bl	8004840 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	791b      	ldrb	r3, [r3, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f001 fa81 	bl	8004da8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	795b      	ldrb	r3, [r3, #5]
 80038aa:	2200      	movs	r2, #0
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f001 fa7a 	bl	8004da8 <USBH_LL_SetToggle>

  return USBH_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd90      	pop	{r4, r7, pc}

080038be <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	795b      	ldrb	r3, [r3, #5]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	795b      	ldrb	r3, [r3, #5]
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 ffcd 	bl	800487e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	795b      	ldrb	r3, [r3, #5]
 80038e8:	4619      	mov	r1, r3
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fff8 	bl	80048e0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	791b      	ldrb	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00e      	beq.n	800391c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	791b      	ldrb	r3, [r3, #4]
 8003902:	4619      	mov	r1, r3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 ffba 	bl	800487e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	791b      	ldrb	r3, [r3, #4]
 800390e:	4619      	mov	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 ffe5 	bl	80048e0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	4618      	mov	r0, r3
 8003932:	f001 fafd 	bl	8004f30 <free>
    phost->pActiveClass->pData = 0U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800393c:	2200      	movs	r2, #0
 800393e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	7b9b      	ldrb	r3, [r3, #14]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d004      	beq.n	8003972 <USBH_MSC_ClassRequest+0x28>
 8003968:	2b03      	cmp	r3, #3
 800396a:	d03e      	beq.n	80039ea <USBH_MSC_ClassRequest+0xa0>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d000      	beq.n	8003972 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8003970:	e04a      	b.n	8003a08 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fb04 	bl	8003f84 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800397c:	4603      	mov	r3, r0
 800397e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b03      	cmp	r3, #3
 8003984:	d104      	bne.n	8003990 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d135      	bne.n	8003a02 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d804      	bhi.n	80039a8 <USBH_MSC_ClassRequest+0x5e>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	3301      	adds	r3, #1
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	e000      	b.n	80039aa <USBH_MSC_ClassRequest+0x60>
 80039a8:	2202      	movs	r2, #2
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	73bb      	strb	r3, [r7, #14]
 80039b2:	e014      	b.n	80039de <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80039b4:	7bbb      	ldrb	r3, [r7, #14]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	2134      	movs	r1, #52	; 0x34
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3392      	adds	r3, #146	; 0x92
 80039c2:	2202      	movs	r2, #2
 80039c4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80039c6:	7bbb      	ldrb	r3, [r7, #14]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	2134      	movs	r1, #52	; 0x34
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	33c1      	adds	r3, #193	; 0xc1
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80039d8:	7bbb      	ldrb	r3, [r7, #14]
 80039da:	3301      	adds	r3, #1
 80039dc:	73bb      	strb	r3, [r7, #14]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	7bba      	ldrb	r2, [r7, #14]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d3e5      	bcc.n	80039b4 <USBH_MSC_ClassRequest+0x6a>
      break;
 80039e8:	e00b      	b.n	8003a02 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80039ea:	2100      	movs	r1, #0
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fbe4 	bl	80031ba <USBH_ClrFeature>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	7bda      	ldrb	r2, [r3, #15]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	739a      	strb	r2, [r3, #14]
      break;
 8003a00:	e001      	b.n	8003a06 <USBH_MSC_ClassRequest+0xbc>
      break;
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <USBH_MSC_ClassRequest+0xbe>
      break;
 8003a06:	bf00      	nop
  }

  return status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	7b1b      	ldrb	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <USBH_MSC_Process+0x2e>
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	f000 8271 	beq.w	8003f22 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8003a40:	e272      	b.n	8003f28 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	f080 824f 	bcs.w	8003ef2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	2334      	movs	r3, #52	; 0x34
 8003a60:	fb03 f301 	mul.w	r3, r3, r1
 8003a64:	4413      	add	r3, r2
 8003a66:	3391      	adds	r3, #145	; 0x91
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003a72:	4619      	mov	r1, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	2334      	movs	r3, #52	; 0x34
 8003a78:	fb03 f301 	mul.w	r3, r3, r1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3390      	adds	r3, #144	; 0x90
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	f200 8243 	bhi.w	8003f0e <USBH_MSC_Process+0x4fa>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <USBH_MSC_Process+0x7c>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003ab5 	.word	0x08003ab5
 8003a94:	08003f0f 	.word	0x08003f0f
 8003a98:	08003b7d 	.word	0x08003b7d
 8003a9c:	08003d01 	.word	0x08003d01
 8003aa0:	08003adb 	.word	0x08003adb
 8003aa4:	08003dcd 	.word	0x08003dcd
 8003aa8:	08003f0f 	.word	0x08003f0f
 8003aac:	08003f0f 	.word	0x08003f0f
 8003ab0:	08003ee1 	.word	0x08003ee1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003aba:	4619      	mov	r1, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	2334      	movs	r3, #52	; 0x34
 8003ac0:	fb03 f301 	mul.w	r3, r3, r1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3390      	adds	r3, #144	; 0x90
 8003ac8:	2204      	movs	r2, #4
 8003aca:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8003ad8:	e222      	b.n	8003f20 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003ae0:	b2d9      	uxtb	r1, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2334      	movs	r3, #52	; 0x34
 8003aec:	fb03 f302 	mul.w	r3, r3, r2
 8003af0:	3398      	adds	r3, #152	; 0x98
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4413      	add	r3, r2
 8003af6:	3307      	adds	r3, #7
 8003af8:	461a      	mov	r2, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fd82 	bl	8004604 <USBH_MSC_SCSI_Inquiry>
 8003b00:	4603      	mov	r3, r0
 8003b02:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003b10:	4619      	mov	r1, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	2334      	movs	r3, #52	; 0x34
 8003b16:	fb03 f301 	mul.w	r3, r3, r1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3390      	adds	r3, #144	; 0x90
 8003b1e:	2202      	movs	r2, #2
 8003b20:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d10c      	bne.n	8003b42 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003b2e:	4619      	mov	r1, r3
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	2334      	movs	r3, #52	; 0x34
 8003b34:	fb03 f301 	mul.w	r3, r3, r1
 8003b38:	4413      	add	r3, r2
 8003b3a:	3390      	adds	r3, #144	; 0x90
 8003b3c:	2205      	movs	r2, #5
 8003b3e:	701a      	strb	r2, [r3, #0]
            break;
 8003b40:	e1e7      	b.n	8003f12 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	f040 81e4 	bne.w	8003f12 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003b50:	4619      	mov	r1, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	2334      	movs	r3, #52	; 0x34
 8003b56:	fb03 f301 	mul.w	r3, r3, r1
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3390      	adds	r3, #144	; 0x90
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003b68:	4619      	mov	r1, r3
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	2334      	movs	r3, #52	; 0x34
 8003b6e:	fb03 f301 	mul.w	r3, r3, r1
 8003b72:	4413      	add	r3, r2
 8003b74:	3391      	adds	r3, #145	; 0x91
 8003b76:	2202      	movs	r2, #2
 8003b78:	701a      	strb	r2, [r3, #0]
            break;
 8003b7a:	e1ca      	b.n	8003f12 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fc7e 	bl	8004488 <USBH_MSC_SCSI_TestUnitReady>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8003b90:	7bbb      	ldrb	r3, [r7, #14]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d149      	bne.n	8003c2a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	2334      	movs	r3, #52	; 0x34
 8003ba2:	fb03 f301 	mul.w	r3, r3, r1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3392      	adds	r3, #146	; 0x92
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00c      	beq.n	8003bca <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	2334      	movs	r3, #52	; 0x34
 8003bbc:	fb03 f301 	mul.w	r3, r3, r1
 8003bc0:	4413      	add	r3, r2
 8003bc2:	33c1      	adds	r3, #193	; 0xc1
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e00b      	b.n	8003be2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	2334      	movs	r3, #52	; 0x34
 8003bd6:	fb03 f301 	mul.w	r3, r3, r1
 8003bda:	4413      	add	r3, r2
 8003bdc:	33c1      	adds	r3, #193	; 0xc1
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003be8:	4619      	mov	r1, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	2334      	movs	r3, #52	; 0x34
 8003bee:	fb03 f301 	mul.w	r3, r3, r1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3390      	adds	r3, #144	; 0x90
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003c00:	4619      	mov	r1, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	2334      	movs	r3, #52	; 0x34
 8003c06:	fb03 f301 	mul.w	r3, r3, r1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3391      	adds	r3, #145	; 0x91
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003c18:	4619      	mov	r1, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	2334      	movs	r3, #52	; 0x34
 8003c1e:	fb03 f301 	mul.w	r3, r3, r1
 8003c22:	4413      	add	r3, r2
 8003c24:	3392      	adds	r3, #146	; 0x92
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8003c2a:	7bbb      	ldrb	r3, [r7, #14]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d14a      	bne.n	8003cc6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003c36:	4619      	mov	r1, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	2334      	movs	r3, #52	; 0x34
 8003c3c:	fb03 f301 	mul.w	r3, r3, r1
 8003c40:	4413      	add	r3, r2
 8003c42:	3392      	adds	r3, #146	; 0x92
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d00c      	beq.n	8003c64 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003c50:	4619      	mov	r1, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	2334      	movs	r3, #52	; 0x34
 8003c56:	fb03 f301 	mul.w	r3, r3, r1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	33c1      	adds	r3, #193	; 0xc1
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e00b      	b.n	8003c7c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	2334      	movs	r3, #52	; 0x34
 8003c70:	fb03 f301 	mul.w	r3, r3, r1
 8003c74:	4413      	add	r3, r2
 8003c76:	33c1      	adds	r3, #193	; 0xc1
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003c82:	4619      	mov	r1, r3
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	2334      	movs	r3, #52	; 0x34
 8003c88:	fb03 f301 	mul.w	r3, r3, r1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3390      	adds	r3, #144	; 0x90
 8003c90:	2205      	movs	r2, #5
 8003c92:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	2334      	movs	r3, #52	; 0x34
 8003ca0:	fb03 f301 	mul.w	r3, r3, r1
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3391      	adds	r3, #145	; 0x91
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	2334      	movs	r3, #52	; 0x34
 8003cb8:	fb03 f301 	mul.w	r3, r3, r1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3392      	adds	r3, #146	; 0x92
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	701a      	strb	r2, [r3, #0]
            break;
 8003cc4:	e127      	b.n	8003f16 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8003cc6:	7bbb      	ldrb	r3, [r7, #14]
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	f040 8124 	bne.w	8003f16 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	2334      	movs	r3, #52	; 0x34
 8003cda:	fb03 f301 	mul.w	r3, r3, r1
 8003cde:	4413      	add	r3, r2
 8003ce0:	3390      	adds	r3, #144	; 0x90
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003cec:	4619      	mov	r1, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	2334      	movs	r3, #52	; 0x34
 8003cf2:	fb03 f301 	mul.w	r3, r3, r1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3391      	adds	r3, #145	; 0x91
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	701a      	strb	r2, [r3, #0]
            break;
 8003cfe:	e10a      	b.n	8003f16 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003d06:	b2d9      	uxtb	r1, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2334      	movs	r3, #52	; 0x34
 8003d12:	fb03 f302 	mul.w	r3, r3, r2
 8003d16:	3390      	adds	r3, #144	; 0x90
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	461a      	mov	r2, r3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fbf4 	bl	800450e <USBH_MSC_SCSI_ReadCapacity>
 8003d26:	4603      	mov	r3, r0
 8003d28:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d120      	bne.n	8003d72 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003d36:	4619      	mov	r1, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	2334      	movs	r3, #52	; 0x34
 8003d3c:	fb03 f301 	mul.w	r3, r3, r1
 8003d40:	4413      	add	r3, r2
 8003d42:	3390      	adds	r3, #144	; 0x90
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003d4e:	4619      	mov	r1, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	2334      	movs	r3, #52	; 0x34
 8003d54:	fb03 f301 	mul.w	r3, r3, r1
 8003d58:	4413      	add	r3, r2
 8003d5a:	3391      	adds	r3, #145	; 0x91
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003d66:	3301      	adds	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8003d70:	e0d3      	b.n	8003f1a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d10c      	bne.n	8003d92 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003d7e:	4619      	mov	r1, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	2334      	movs	r3, #52	; 0x34
 8003d84:	fb03 f301 	mul.w	r3, r3, r1
 8003d88:	4413      	add	r3, r2
 8003d8a:	3390      	adds	r3, #144	; 0x90
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	701a      	strb	r2, [r3, #0]
            break;
 8003d90:	e0c3      	b.n	8003f1a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	f040 80c0 	bne.w	8003f1a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003da0:	4619      	mov	r1, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	2334      	movs	r3, #52	; 0x34
 8003da6:	fb03 f301 	mul.w	r3, r3, r1
 8003daa:	4413      	add	r3, r2
 8003dac:	3390      	adds	r3, #144	; 0x90
 8003dae:	2201      	movs	r2, #1
 8003db0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003db8:	4619      	mov	r1, r3
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	2334      	movs	r3, #52	; 0x34
 8003dbe:	fb03 f301 	mul.w	r3, r3, r1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3391      	adds	r3, #145	; 0x91
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	701a      	strb	r2, [r3, #0]
            break;
 8003dca:	e0a6      	b.n	8003f1a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003dd2:	b2d9      	uxtb	r1, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2334      	movs	r3, #52	; 0x34
 8003dde:	fb03 f302 	mul.w	r3, r3, r2
 8003de2:	3398      	adds	r3, #152	; 0x98
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	3304      	adds	r3, #4
 8003dea:	461a      	mov	r2, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fcae 	bl	800474e <USBH_MSC_SCSI_RequestSense>
 8003df2:	4603      	mov	r3, r0
 8003df4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d145      	bne.n	8003e88 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003e02:	4619      	mov	r1, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	2334      	movs	r3, #52	; 0x34
 8003e08:	fb03 f301 	mul.w	r3, r3, r1
 8003e0c:	4413      	add	r3, r2
 8003e0e:	339c      	adds	r3, #156	; 0x9c
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b06      	cmp	r3, #6
 8003e14:	d00c      	beq.n	8003e30 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	2334      	movs	r3, #52	; 0x34
 8003e22:	fb03 f301 	mul.w	r3, r3, r1
 8003e26:	4413      	add	r3, r2
 8003e28:	339c      	adds	r3, #156	; 0x9c
 8003e2a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d117      	bne.n	8003e60 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d80c      	bhi.n	8003e60 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	2334      	movs	r3, #52	; 0x34
 8003e52:	fb03 f301 	mul.w	r3, r3, r1
 8003e56:	4413      	add	r3, r2
 8003e58:	3390      	adds	r3, #144	; 0x90
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	701a      	strb	r2, [r3, #0]
                  break;
 8003e5e:	e05f      	b.n	8003f20 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003e66:	4619      	mov	r1, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	2334      	movs	r3, #52	; 0x34
 8003e6c:	fb03 f301 	mul.w	r3, r3, r1
 8003e70:	4413      	add	r3, r2
 8003e72:	3390      	adds	r3, #144	; 0x90
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003e7e:	3301      	adds	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d10c      	bne.n	8003ea8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003e94:	4619      	mov	r1, r3
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	2334      	movs	r3, #52	; 0x34
 8003e9a:	fb03 f301 	mul.w	r3, r3, r1
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3390      	adds	r3, #144	; 0x90
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	701a      	strb	r2, [r3, #0]
            break;
 8003ea6:	e03a      	b.n	8003f1e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d137      	bne.n	8003f1e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	2334      	movs	r3, #52	; 0x34
 8003eba:	fb03 f301 	mul.w	r3, r3, r1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3390      	adds	r3, #144	; 0x90
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003ecc:	4619      	mov	r1, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	2334      	movs	r3, #52	; 0x34
 8003ed2:	fb03 f301 	mul.w	r3, r3, r1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3391      	adds	r3, #145	; 0x91
 8003eda:	2202      	movs	r2, #2
 8003edc:	701a      	strb	r2, [r3, #0]
            break;
 8003ede:	e01e      	b.n	8003f1e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8003ef0:	e016      	b.n	8003f20 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2201      	movs	r2, #1
 8003efe:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8003f06:	2102      	movs	r1, #2
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4798      	blx	r3
      break;
 8003f0c:	e00c      	b.n	8003f28 <USBH_MSC_Process+0x514>
            break;
 8003f0e:	bf00      	nop
 8003f10:	e00a      	b.n	8003f28 <USBH_MSC_Process+0x514>
            break;
 8003f12:	bf00      	nop
 8003f14:	e008      	b.n	8003f28 <USBH_MSC_Process+0x514>
            break;
 8003f16:	bf00      	nop
 8003f18:	e006      	b.n	8003f28 <USBH_MSC_Process+0x514>
            break;
 8003f1a:	bf00      	nop
 8003f1c:	e004      	b.n	8003f28 <USBH_MSC_Process+0x514>
            break;
 8003f1e:	bf00      	nop
      break;
 8003f20:	e002      	b.n	8003f28 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]
      break;
 8003f26:	bf00      	nop
  }
  return error;
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop

08003f34 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2221      	movs	r2, #33	; 0x21
 8003f56:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	22ff      	movs	r2, #255	; 0xff
 8003f5c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2100      	movs	r1, #0
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff f944 	bl	8003202 <USBH_CtlReq>
 8003f7a:	4603      	mov	r3, r0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	22a1      	movs	r2, #161	; 0xa1
 8003f92:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	22fe      	movs	r2, #254	; 0xfe
 8003f98:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8003fac:	2201      	movs	r2, #1
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff f926 	bl	8003202 <USBH_CtlReq>
 8003fb6:	4603      	mov	r3, r0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <USBH_MSC_BOT_Init+0x3c>)
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <USBH_MSC_BOT_Init+0x40>)
 8003fdc:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	43425355 	.word	0x43425355
 8004000:	20304050 	.word	0x20304050

08004004 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8004010:	2301      	movs	r3, #1
 8004012:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8004014:	2301      	movs	r3, #1
 8004016:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8004018:	2301      	movs	r3, #1
 800401a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800401c:	2300      	movs	r3, #0
 800401e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004034:	3b01      	subs	r3, #1
 8004036:	2b0a      	cmp	r3, #10
 8004038:	f200 81a1 	bhi.w	800437e <USBH_MSC_BOT_Process+0x37a>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <USBH_MSC_BOT_Process+0x40>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004071 	.word	0x08004071
 8004048:	0800409b 	.word	0x0800409b
 800404c:	08004105 	.word	0x08004105
 8004050:	08004123 	.word	0x08004123
 8004054:	080041a7 	.word	0x080041a7
 8004058:	080041cb 	.word	0x080041cb
 800405c:	08004265 	.word	0x08004265
 8004060:	08004281 	.word	0x08004281
 8004064:	080042d3 	.word	0x080042d3
 8004068:	08004303 	.word	0x08004303
 800406c:	08004365 	.word	0x08004365
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	795a      	ldrb	r2, [r3, #5]
 800408a:	2301      	movs	r3, #1
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	4613      	mov	r3, r2
 8004090:	221f      	movs	r2, #31
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff fac5 	bl	8003622 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8004098:	e180      	b.n	800439c <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	795b      	ldrb	r3, [r3, #5]
 800409e:	4619      	mov	r1, r3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fe60 	bl	8004d66 <USBH_LL_GetURBState>
 80040a6:	4603      	mov	r3, r0
 80040a8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80040aa:	7d3b      	ldrb	r3, [r7, #20]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d118      	bne.n	80040e2 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00f      	beq.n	80040d8 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80040be:	b25b      	sxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	da04      	bge.n	80040ce <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2203      	movs	r2, #3
 80040c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80040cc:	e159      	b.n	8004382 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2205      	movs	r2, #5
 80040d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80040d6:	e154      	b.n	8004382 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2207      	movs	r2, #7
 80040dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80040e0:	e14f      	b.n	8004382 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80040e2:	7d3b      	ldrb	r3, [r7, #20]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d104      	bne.n	80040f2 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80040f0:	e147      	b.n	8004382 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 80040f2:	7d3b      	ldrb	r3, [r7, #20]
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	f040 8144 	bne.w	8004382 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	220a      	movs	r2, #10
 80040fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8004102:	e13e      	b.n	8004382 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	895a      	ldrh	r2, [r3, #10]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	791b      	ldrb	r3, [r3, #4]
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff faaa 	bl	800366c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2204      	movs	r2, #4
 800411c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8004120:	e13c      	b.n	800439c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	791b      	ldrb	r3, [r3, #4]
 8004126:	4619      	mov	r1, r3
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fe1c 	bl	8004d66 <USBH_LL_GetURBState>
 800412e:	4603      	mov	r3, r0
 8004130:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8004132:	7d3b      	ldrb	r3, [r7, #20]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d12d      	bne.n	8004194 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	8952      	ldrh	r2, [r2, #10]
 8004140:	4293      	cmp	r3, r2
 8004142:	d910      	bls.n	8004166 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	8952      	ldrh	r2, [r2, #10]
 800414e:	441a      	add	r2, r3
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	8952      	ldrh	r2, [r2, #10]
 800415e:	1a9a      	subs	r2, r3, r2
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	65da      	str	r2, [r3, #92]	; 0x5c
 8004164:	e002      	b.n	800416c <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2200      	movs	r2, #0
 800416a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	895a      	ldrh	r2, [r3, #10]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	791b      	ldrb	r3, [r3, #4]
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff fa72 	bl	800366c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8004188:	e0fd      	b.n	8004386 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2207      	movs	r2, #7
 800418e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8004192:	e0f8      	b.n	8004386 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8004194:	7d3b      	ldrb	r3, [r7, #20]
 8004196:	2b05      	cmp	r3, #5
 8004198:	f040 80f5 	bne.w	8004386 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2209      	movs	r2, #9
 80041a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80041a4:	e0ef      	b.n	8004386 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	891a      	ldrh	r2, [r3, #8]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	7958      	ldrb	r0, [r3, #5]
 80041b4:	2301      	movs	r3, #1
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	4603      	mov	r3, r0
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fa31 	bl	8003622 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2206      	movs	r2, #6
 80041c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80041c8:	e0e8      	b.n	800439c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	795b      	ldrb	r3, [r3, #5]
 80041ce:	4619      	mov	r1, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fdc8 	bl	8004d66 <USBH_LL_GetURBState>
 80041d6:	4603      	mov	r3, r0
 80041d8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80041da:	7d3b      	ldrb	r3, [r7, #20]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d130      	bne.n	8004242 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	8912      	ldrh	r2, [r2, #8]
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d910      	bls.n	800420e <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	8912      	ldrh	r2, [r2, #8]
 80041f6:	441a      	add	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	8912      	ldrh	r2, [r2, #8]
 8004206:	1a9a      	subs	r2, r3, r2
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	65da      	str	r2, [r3, #92]	; 0x5c
 800420c:	e002      	b.n	8004214 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2200      	movs	r2, #0
 8004212:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	891a      	ldrh	r2, [r3, #8]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	7958      	ldrb	r0, [r3, #5]
 800422a:	2301      	movs	r3, #1
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	4603      	mov	r3, r0
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff f9f6 	bl	8003622 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8004236:	e0a8      	b.n	800438a <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2207      	movs	r2, #7
 800423c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8004240:	e0a3      	b.n	800438a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8004242:	7d3b      	ldrb	r3, [r7, #20]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d104      	bne.n	8004252 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2205      	movs	r2, #5
 800424c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8004250:	e09b      	b.n	800438a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8004252:	7d3b      	ldrb	r3, [r7, #20]
 8004254:	2b05      	cmp	r3, #5
 8004256:	f040 8098 	bne.w	800438a <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	220a      	movs	r2, #10
 800425e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8004262:	e092      	b.n	800438a <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	791b      	ldrb	r3, [r3, #4]
 800426e:	220d      	movs	r2, #13
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff f9fb 	bl	800366c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2208      	movs	r2, #8
 800427a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800427e:	e08d      	b.n	800439c <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	791b      	ldrb	r3, [r3, #4]
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fd6d 	bl	8004d66 <USBH_LL_GetURBState>
 800428c:	4603      	mov	r3, r0
 800428e:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8004290:	7d3b      	ldrb	r3, [r7, #20]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d115      	bne.n	80042c2 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8aa 	bl	8004400 <USBH_MSC_DecodeCSW>
 80042ac:	4603      	mov	r3, r0
 80042ae:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80042b0:	7d7b      	ldrb	r3, [r7, #21]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80042ba:	e068      	b.n	800438e <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 80042bc:	2302      	movs	r3, #2
 80042be:	75fb      	strb	r3, [r7, #23]
      break;
 80042c0:	e065      	b.n	800438e <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 80042c2:	7d3b      	ldrb	r3, [r7, #20]
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	d162      	bne.n	800438e <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2209      	movs	r2, #9
 80042cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80042d0:	e05d      	b.n	800438e <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	2200      	movs	r2, #0
 80042d6:	4619      	mov	r1, r3
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f865 	bl	80043a8 <USBH_MSC_BOT_Abort>
 80042de:	4603      	mov	r3, r0
 80042e0:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80042e2:	7dbb      	ldrb	r3, [r7, #22]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2207      	movs	r2, #7
 80042ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80042f0:	e04f      	b.n	8004392 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 80042f2:	7dbb      	ldrb	r3, [r7, #22]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d14c      	bne.n	8004392 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	220b      	movs	r2, #11
 80042fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8004300:	e047      	b.n	8004392 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	2201      	movs	r2, #1
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f84d 	bl	80043a8 <USBH_MSC_BOT_Abort>
 800430e:	4603      	mov	r3, r0
 8004310:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8004312:	7dbb      	ldrb	r3, [r7, #22]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d11d      	bne.n	8004354 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	795b      	ldrb	r3, [r3, #5]
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fd75 	bl	8004e0e <USBH_LL_GetToggle>
 8004324:	4603      	mov	r3, r0
 8004326:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	7959      	ldrb	r1, [r3, #5]
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	f1c3 0301 	rsb	r3, r3, #1
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fd36 	bl	8004da8 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	791b      	ldrb	r3, [r3, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	4619      	mov	r1, r3
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fd2f 	bl	8004da8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2209      	movs	r2, #9
 800434e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8004352:	e020      	b.n	8004396 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8004354:	7dbb      	ldrb	r3, [r7, #22]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d11d      	bne.n	8004396 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	220b      	movs	r2, #11
 800435e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8004362:	e018      	b.n	8004396 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fdf0 	bl	8003f4a <USBH_MSC_BOT_REQ_Reset>
 800436a:	4603      	mov	r3, r0
 800436c:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800436e:	7dfb      	ldrb	r3, [r7, #23]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d112      	bne.n	800439a <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800437c:	e00d      	b.n	800439a <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800437e:	bf00      	nop
 8004380:	e00c      	b.n	800439c <USBH_MSC_BOT_Process+0x398>
      break;
 8004382:	bf00      	nop
 8004384:	e00a      	b.n	800439c <USBH_MSC_BOT_Process+0x398>
      break;
 8004386:	bf00      	nop
 8004388:	e008      	b.n	800439c <USBH_MSC_BOT_Process+0x398>
      break;
 800438a:	bf00      	nop
 800438c:	e006      	b.n	800439c <USBH_MSC_BOT_Process+0x398>
      break;
 800438e:	bf00      	nop
 8004390:	e004      	b.n	800439c <USBH_MSC_BOT_Process+0x398>
      break;
 8004392:	bf00      	nop
 8004394:	e002      	b.n	800439c <USBH_MSC_BOT_Process+0x398>
      break;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <USBH_MSC_BOT_Process+0x398>
      break;
 800439a:	bf00      	nop
  }
  return status;
 800439c:	7dfb      	ldrb	r3, [r7, #23]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop

080043a8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
 80043b4:	4613      	mov	r3, r2
 80043b6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80043b8:	2302      	movs	r3, #2
 80043ba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80043c6:	78bb      	ldrb	r3, [r7, #2]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <USBH_MSC_BOT_Abort+0x2a>
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d009      	beq.n	80043e4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80043d0:	e011      	b.n	80043f6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	79db      	ldrb	r3, [r3, #7]
 80043d6:	4619      	mov	r1, r3
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fe feee 	bl	80031ba <USBH_ClrFeature>
 80043de:	4603      	mov	r3, r0
 80043e0:	73fb      	strb	r3, [r7, #15]
      break;
 80043e2:	e008      	b.n	80043f6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	799b      	ldrb	r3, [r3, #6]
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fe fee5 	bl	80031ba <USBH_ClrFeature>
 80043f0:	4603      	mov	r3, r0
 80043f2:	73fb      	strb	r3, [r7, #15]
      break;
 80043f4:	bf00      	nop
  }
  return status;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	791b      	ldrb	r3, [r3, #4]
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fc10 	bl	8004c42 <USBH_LL_GetLastXferSize>
 8004422:	4603      	mov	r3, r0
 8004424:	2b0d      	cmp	r3, #13
 8004426:	d002      	beq.n	800442e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8004428:	2302      	movs	r3, #2
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	e024      	b.n	8004478 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004432:	4a14      	ldr	r2, [pc, #80]	; (8004484 <USBH_MSC_DecodeCSW+0x84>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d11d      	bne.n	8004474 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	429a      	cmp	r2, r3
 8004442:	d119      	bne.n	8004478 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
 8004452:	e011      	b.n	8004478 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800445a:	2b01      	cmp	r3, #1
 800445c:	d102      	bne.n	8004464 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
 8004462:	e009      	b.n	8004478 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800446a:	2b02      	cmp	r3, #2
 800446c:	d104      	bne.n	8004478 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800446e:	2302      	movs	r3, #2
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	e001      	b.n	8004478 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8004474:	2302      	movs	r3, #2
 8004476:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	53425355 	.word	0x53425355

08004488 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8004494:	2302      	movs	r3, #2
 8004496:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d002      	beq.n	80044b2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d021      	beq.n	80044f4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80044b0:	e028      	b.n	8004504 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2200      	movs	r2, #0
 80044b6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	220a      	movs	r2, #10
 80044c4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	3363      	adds	r3, #99	; 0x63
 80044cc:	2210      	movs	r2, #16
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fd40 	bl	8004f56 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
      break;
 80044f2:	e007      	b.n	8004504 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff fd83 	bl	8004004 <USBH_MSC_BOT_Process>
 80044fe:	4603      	mov	r3, r0
 8004500:	73fb      	strb	r3, [r7, #15]
      break;
 8004502:	bf00      	nop
  }

  return error;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b086      	sub	sp, #24
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	460b      	mov	r3, r1
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800451c:	2301      	movs	r3, #1
 800451e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8004530:	2b01      	cmp	r3, #1
 8004532:	d002      	beq.n	800453a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8004534:	2b02      	cmp	r3, #2
 8004536:	d027      	beq.n	8004588 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8004538:	e05f      	b.n	80045fa <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2208      	movs	r2, #8
 800453e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2280      	movs	r2, #128	; 0x80
 8004544:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	220a      	movs	r2, #10
 800454c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	3363      	adds	r3, #99	; 0x63
 8004554:	2210      	movs	r2, #16
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fcfc 	bl	8004f56 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2225      	movs	r2, #37	; 0x25
 8004562:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2202      	movs	r2, #2
 8004572:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f103 0210 	add.w	r2, r3, #16
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
      break;
 8004586:	e038      	b.n	80045fa <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8004588:	7afb      	ldrb	r3, [r7, #11]
 800458a:	4619      	mov	r1, r3
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff fd39 	bl	8004004 <USBH_MSC_BOT_Process>
 8004592:	4603      	mov	r3, r0
 8004594:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d12d      	bne.n	80045f8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a2:	3303      	adds	r3, #3
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ae:	3302      	adds	r3, #2
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045bc:	3301      	adds	r3, #1
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80045c2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045da:	3307      	adds	r3, #7
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	b29a      	uxth	r2, r3
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e6:	3306      	adds	r3, #6
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4313      	orrs	r3, r2
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	809a      	strh	r2, [r3, #4]
      break;
 80045f8:	bf00      	nop
  }

  return error;
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	460b      	mov	r3, r1
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8004612:	2302      	movs	r3, #2
 8004614:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8004626:	2b01      	cmp	r3, #1
 8004628:	d002      	beq.n	8004630 <USBH_MSC_SCSI_Inquiry+0x2c>
 800462a:	2b02      	cmp	r3, #2
 800462c:	d03d      	beq.n	80046aa <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800462e:	e089      	b.n	8004744 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2224      	movs	r2, #36	; 0x24
 8004634:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2280      	movs	r2, #128	; 0x80
 800463a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	220a      	movs	r2, #10
 8004642:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3363      	adds	r3, #99	; 0x63
 800464a:	220a      	movs	r2, #10
 800464c:	2100      	movs	r1, #0
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fc81 	bl	8004f56 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2212      	movs	r2, #18
 8004658:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800465c:	7afb      	ldrb	r3, [r7, #11]
 800465e:	015b      	lsls	r3, r3, #5
 8004660:	b2da      	uxtb	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2224      	movs	r2, #36	; 0x24
 800467c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f103 0210 	add.w	r2, r3, #16
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80046a4:	2301      	movs	r3, #1
 80046a6:	75fb      	strb	r3, [r7, #23]
      break;
 80046a8:	e04c      	b.n	8004744 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80046aa:	7afb      	ldrb	r3, [r7, #11]
 80046ac:	4619      	mov	r1, r3
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f7ff fca8 	bl	8004004 <USBH_MSC_BOT_Process>
 80046b4:	4603      	mov	r3, r0
 80046b6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80046b8:	7dfb      	ldrb	r3, [r7, #23]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d141      	bne.n	8004742 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80046be:	2222      	movs	r2, #34	; 0x22
 80046c0:	2100      	movs	r1, #0
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fc47 	bl	8004f56 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f0:	3301      	adds	r3, #1
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	b25b      	sxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da03      	bge.n	8004702 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	709a      	strb	r2, [r3, #2]
 8004700:	e002      	b.n	8004708 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1cd8      	adds	r0, r3, #3
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004712:	3308      	adds	r3, #8
 8004714:	2208      	movs	r2, #8
 8004716:	4619      	mov	r1, r3
 8004718:	f000 fc12 	bl	8004f40 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f103 000c 	add.w	r0, r3, #12
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004728:	3310      	adds	r3, #16
 800472a:	2210      	movs	r2, #16
 800472c:	4619      	mov	r1, r3
 800472e:	f000 fc07 	bl	8004f40 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	331d      	adds	r3, #29
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800473c:	3220      	adds	r2, #32
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	601a      	str	r2, [r3, #0]
      break;
 8004742:	bf00      	nop
  }

  return error;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b086      	sub	sp, #24
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	460b      	mov	r3, r1
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800475c:	2302      	movs	r3, #2
 800475e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8004770:	2b01      	cmp	r3, #1
 8004772:	d002      	beq.n	800477a <USBH_MSC_SCSI_RequestSense+0x2c>
 8004774:	2b02      	cmp	r3, #2
 8004776:	d03d      	beq.n	80047f4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8004778:	e05d      	b.n	8004836 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	220e      	movs	r2, #14
 800477e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2280      	movs	r2, #128	; 0x80
 8004784:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	220a      	movs	r2, #10
 800478c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	3363      	adds	r3, #99	; 0x63
 8004794:	2210      	movs	r2, #16
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fbdc 	bl	8004f56 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2203      	movs	r2, #3
 80047a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80047a6:	7afb      	ldrb	r3, [r7, #11]
 80047a8:	015b      	lsls	r3, r3, #5
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	220e      	movs	r2, #14
 80047c6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f103 0210 	add.w	r2, r3, #16
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80047ee:	2301      	movs	r3, #1
 80047f0:	75fb      	strb	r3, [r7, #23]
      break;
 80047f2:	e020      	b.n	8004836 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80047f4:	7afb      	ldrb	r3, [r7, #11]
 80047f6:	4619      	mov	r1, r3
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7ff fc03 	bl	8004004 <USBH_MSC_BOT_Process>
 80047fe:	4603      	mov	r3, r0
 8004800:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8004802:	7dfb      	ldrb	r3, [r7, #23]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d115      	bne.n	8004834 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800480e:	3302      	adds	r3, #2
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	b2da      	uxtb	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004822:	7b1a      	ldrb	r2, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482e:	7b5a      	ldrb	r2, [r3, #13]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	709a      	strb	r2, [r3, #2]
      break;
 8004834:	bf00      	nop
  }

  return error;
 8004836:	7dfb      	ldrb	r3, [r7, #23]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af04      	add	r7, sp, #16
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	4608      	mov	r0, r1
 800484a:	4611      	mov	r1, r2
 800484c:	461a      	mov	r2, r3
 800484e:	4603      	mov	r3, r0
 8004850:	70fb      	strb	r3, [r7, #3]
 8004852:	460b      	mov	r3, r1
 8004854:	70bb      	strb	r3, [r7, #2]
 8004856:	4613      	mov	r3, r2
 8004858:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800485a:	7878      	ldrb	r0, [r7, #1]
 800485c:	78ba      	ldrb	r2, [r7, #2]
 800485e:	78f9      	ldrb	r1, [r7, #3]
 8004860:	8b3b      	ldrh	r3, [r7, #24]
 8004862:	9302      	str	r3, [sp, #8]
 8004864:	7d3b      	ldrb	r3, [r7, #20]
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	7c3b      	ldrb	r3, [r7, #16]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	4603      	mov	r3, r0
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f9fa 	bl	8004c68 <USBH_LL_OpenPipe>

  return USBH_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	460b      	mov	r3, r1
 8004888:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fa19 	bl	8004cc6 <USBH_LL_ClosePipe>

  return USBH_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f836 	bl	800491c <USBH_GetFreePipe>
 80048b0:	4603      	mov	r3, r0
 80048b2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80048b4:	89fb      	ldrh	r3, [r7, #14]
 80048b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00a      	beq.n	80048d4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	89fb      	ldrh	r3, [r7, #14]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	33e0      	adds	r3, #224	; 0xe0
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80048d4:	89fb      	ldrh	r3, [r7, #14]
 80048d6:	b2db      	uxtb	r3, r3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	2b0a      	cmp	r3, #10
 80048f0:	d80d      	bhi.n	800490e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	33e0      	adds	r3, #224	; 0xe0
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	33e0      	adds	r3, #224	; 0xe0
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]
 800492c:	e00f      	b.n	800494e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	33e0      	adds	r3, #224	; 0xe0
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	b29b      	uxth	r3, r3
 8004946:	e007      	b.n	8004958 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	3301      	adds	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	2b0a      	cmp	r3, #10
 8004952:	d9ec      	bls.n	800492e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8004954:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8004968:	2200      	movs	r2, #0
 800496a:	490e      	ldr	r1, [pc, #56]	; (80049a4 <MX_USB_HOST_Init+0x40>)
 800496c:	480e      	ldr	r0, [pc, #56]	; (80049a8 <MX_USB_HOST_Init+0x44>)
 800496e:	f7fe faeb 	bl	8002f48 <USBH_Init>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8004978:	f7fb fe54 	bl	8000624 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800497c:	490b      	ldr	r1, [pc, #44]	; (80049ac <MX_USB_HOST_Init+0x48>)
 800497e:	480a      	ldr	r0, [pc, #40]	; (80049a8 <MX_USB_HOST_Init+0x44>)
 8004980:	f7fe fb70 	bl	8003064 <USBH_RegisterClass>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800498a:	f7fb fe4b 	bl	8000624 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800498e:	4806      	ldr	r0, [pc, #24]	; (80049a8 <MX_USB_HOST_Init+0x44>)
 8004990:	f7fe fbf4 	bl	800317c <USBH_Start>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800499a:	f7fb fe43 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	080049b1 	.word	0x080049b1
 80049a8:	200000c8 	.word	0x200000c8
 80049ac:	20000010 	.word	0x20000010

080049b0 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	3b01      	subs	r3, #1
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d819      	bhi.n	80049f8 <USBH_UserProcess+0x48>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <USBH_UserProcess+0x1c>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	080049f9 	.word	0x080049f9
 80049d0:	080049e9 	.word	0x080049e9
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	080049f1 	.word	0x080049f1
 80049dc:	080049e1 	.word	0x080049e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80049e0:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <USBH_UserProcess+0x58>)
 80049e2:	2203      	movs	r2, #3
 80049e4:	701a      	strb	r2, [r3, #0]
  break;
 80049e6:	e008      	b.n	80049fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <USBH_UserProcess+0x58>)
 80049ea:	2202      	movs	r2, #2
 80049ec:	701a      	strb	r2, [r3, #0]
  break;
 80049ee:	e004      	b.n	80049fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <USBH_UserProcess+0x58>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
  break;
 80049f6:	e000      	b.n	80049fa <USBH_UserProcess+0x4a>

  default:
  break;
 80049f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	200000b8 	.word	0x200000b8

08004a0c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08e      	sub	sp, #56	; 0x38
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	609a      	str	r2, [r3, #8]
 8004a20:	60da      	str	r2, [r3, #12]
 8004a22:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a51      	ldr	r2, [pc, #324]	; (8004b70 <HAL_HCD_MspInit+0x164>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	f040 809c 	bne.w	8004b68 <HAL_HCD_MspInit+0x15c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a30:	4b50      	ldr	r3, [pc, #320]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a36:	4a4f      	ldr	r2, [pc, #316]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a38:	f043 0302 	orr.w	r3, r3, #2
 8004a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a40:	4b4c      	ldr	r3, [pc, #304]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	623b      	str	r3, [r7, #32]
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a4e:	4b49      	ldr	r3, [pc, #292]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a54:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a5e:	4b45      	ldr	r3, [pc, #276]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a6c:	4b41      	ldr	r3, [pc, #260]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a72:	4a40      	ldr	r2, [pc, #256]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a74:	f043 0304 	orr.w	r3, r3, #4
 8004a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a7c:	4b3d      	ldr	r3, [pc, #244]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a8a:	4b3a      	ldr	r3, [pc, #232]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a90:	4a38      	ldr	r2, [pc, #224]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a9a:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_1
 8004aa8:	f643 4323 	movw	r3, #15395	; 0x3c23
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8004aba:	230a      	movs	r3, #10
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	482c      	ldr	r0, [pc, #176]	; (8004b78 <HAL_HCD_MspInit+0x16c>)
 8004ac6:	f7fb fff9 	bl	8000abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8004adc:	230a      	movs	r3, #10
 8004ade:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4825      	ldr	r0, [pc, #148]	; (8004b7c <HAL_HCD_MspInit+0x170>)
 8004ae8:	f7fb ffe8 	bl	8000abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8004aec:	2309      	movs	r3, #9
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af0:	2302      	movs	r3, #2
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004af8:	2302      	movs	r3, #2
 8004afa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8004afc:	230a      	movs	r3, #10
 8004afe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b04:	4619      	mov	r1, r3
 8004b06:	481e      	ldr	r0, [pc, #120]	; (8004b80 <HAL_HCD_MspInit+0x174>)
 8004b08:	f7fb ffd8 	bl	8000abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8004b0c:	2328      	movs	r3, #40	; 0x28
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b10:	2302      	movs	r3, #2
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8004b1c:	230a      	movs	r3, #10
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b24:	4619      	mov	r1, r3
 8004b26:	4817      	ldr	r0, [pc, #92]	; (8004b84 <HAL_HCD_MspInit+0x178>)
 8004b28:	f7fb ffc8 	bl	8000abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004b2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b32:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004b34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004b3c:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004b3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004b4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b50:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004b52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_HCD_MspInit+0x168>)
 8004b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8004b68:	bf00      	nop
 8004b6a:	3738      	adds	r7, #56	; 0x38
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40040000 	.word	0x40040000
 8004b74:	58024400 	.word	0x58024400
 8004b78:	58020400 	.word	0x58020400
 8004b7c:	58022000 	.word	0x58022000
 8004b80:	58020800 	.word	0x58020800
 8004b84:	58020000 	.word	0x58020000

08004b88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d12f      	bne.n	8004bfa <USBH_LL_Init+0x72>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a17      	ldr	r2, [pc, #92]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004ba6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8004baa:	4b16      	ldr	r3, [pc, #88]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004bac:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <USBH_LL_Init+0x80>)
 8004bae:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8004bb0:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8004bc2:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8004bc8:	4b0e      	ldr	r3, [pc, #56]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8004bda:	480a      	ldr	r0, [pc, #40]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004bdc:	f7fc f91e 	bl	8000e1c <HAL_HCD_Init>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <USBH_LL_Init+0x62>
  {
    Error_Handler( );
 8004be6:	f7fb fd1d 	bl	8000624 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8004bea:	4806      	ldr	r0, [pc, #24]	; (8004c04 <USBH_LL_Init+0x7c>)
 8004bec:	f7fc fbf3 	bl	80013d6 <HAL_HCD_GetCurrentFrame>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fe fad1 	bl	800319c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	200004a0 	.word	0x200004a0
 8004c08:	40040000 	.word	0x40040000

08004c0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fc fb8a 	bl	800133c <HAL_HCD_Start>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f920 	bl	8004e74 <USBH_Get_USB_Status>
 8004c34:	4603      	mov	r3, r0
 8004c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fc fba7 	bl	80013ac <HAL_HCD_HC_GetXferCount>
 8004c5e:	4603      	mov	r3, r0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b089      	sub	sp, #36	; 0x24
 8004c6c:	af04      	add	r7, sp, #16
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	70fb      	strb	r3, [r7, #3]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	70bb      	strb	r3, [r7, #2]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8004c90:	787c      	ldrb	r4, [r7, #1]
 8004c92:	78ba      	ldrb	r2, [r7, #2]
 8004c94:	78f9      	ldrb	r1, [r7, #3]
 8004c96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c98:	9302      	str	r3, [sp, #8]
 8004c9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	f7fc f91a 	bl	8000ee0 <HAL_HCD_HC_Init>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f8de 	bl	8004e74 <USBH_Get_USB_Status>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004cbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd90      	pop	{r4, r7, pc}

08004cc6 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fc f993 	bl	8001010 <HAL_HCD_HC_Halt>
 8004cea:	4603      	mov	r3, r0
 8004cec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 f8bf 	bl	8004e74 <USBH_Get_USB_Status>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004cfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b089      	sub	sp, #36	; 0x24
 8004d08:	af04      	add	r7, sp, #16
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	461a      	mov	r2, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	70fb      	strb	r3, [r7, #3]
 8004d16:	460b      	mov	r3, r1
 8004d18:	70bb      	strb	r3, [r7, #2]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8004d2c:	787c      	ldrb	r4, [r7, #1]
 8004d2e:	78ba      	ldrb	r2, [r7, #2]
 8004d30:	78f9      	ldrb	r1, [r7, #3]
 8004d32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d36:	9303      	str	r3, [sp, #12]
 8004d38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d3a:	9302      	str	r3, [sp, #8]
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	4623      	mov	r3, r4
 8004d48:	f7fc f986 	bl	8001058 <HAL_HCD_HC_SubmitRequest>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 f88e 	bl	8004e74 <USBH_Get_USB_Status>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd90      	pop	{r4, r7, pc}

08004d66 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fc fb00 	bl	8001382 <HAL_HCD_HC_GetURBState>
 8004d82:	4603      	mov	r3, r0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 8004d98:	20c8      	movs	r0, #200	; 0xc8
 8004d9a:	f7fb fd7d 	bl	8000898 <HAL_Delay>
  return USBH_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
 8004db4:	4613      	mov	r3, r2
 8004db6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004dbe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	440b      	add	r3, r1
 8004dce:	333b      	adds	r3, #59	; 0x3b
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	68f9      	ldr	r1, [r7, #12]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	440b      	add	r3, r1
 8004de4:	3350      	adds	r3, #80	; 0x50
 8004de6:	78ba      	ldrb	r2, [r7, #2]
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	e009      	b.n	8004e00 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	68f9      	ldr	r1, [r7, #12]
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	440b      	add	r3, r1
 8004dfa:	3351      	adds	r3, #81	; 0x51
 8004dfc:	78ba      	ldrb	r2, [r7, #2]
 8004dfe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	460b      	mov	r3, r1
 8004e18:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004e24:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8004e26:	78fa      	ldrb	r2, [r7, #3]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	440b      	add	r3, r1
 8004e34:	333b      	adds	r3, #59	; 0x3b
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8004e3c:	78fa      	ldrb	r2, [r7, #3]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	440b      	add	r3, r1
 8004e4a:	3350      	adds	r3, #80	; 0x50
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	73fb      	strb	r3, [r7, #15]
 8004e50:	e009      	b.n	8004e66 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8004e52:	78fa      	ldrb	r2, [r7, #3]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	440b      	add	r3, r1
 8004e60:	3351      	adds	r3, #81	; 0x51
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d817      	bhi.n	8004eb8 <USBH_Get_USB_Status+0x44>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <USBH_Get_USB_Status+0x1c>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ea1 	.word	0x08004ea1
 8004e94:	08004ea7 	.word	0x08004ea7
 8004e98:	08004ead 	.word	0x08004ead
 8004e9c:	08004eb3 	.word	0x08004eb3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ea4:	e00b      	b.n	8004ebe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8004eaa:	e008      	b.n	8004ebe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
    break;
 8004eb0:	e005      	b.n	8004ebe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8004eb6:	e002      	b.n	8004ebe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	73fb      	strb	r3, [r7, #15]
    break;
 8004ebc:	bf00      	nop
  }
  return usb_status;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <__errno>:
 8004ecc:	4b01      	ldr	r3, [pc, #4]	; (8004ed4 <__errno+0x8>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000030 	.word	0x20000030

08004ed8 <__libc_init_array>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	4e0d      	ldr	r6, [pc, #52]	; (8004f10 <__libc_init_array+0x38>)
 8004edc:	4c0d      	ldr	r4, [pc, #52]	; (8004f14 <__libc_init_array+0x3c>)
 8004ede:	1ba4      	subs	r4, r4, r6
 8004ee0:	10a4      	asrs	r4, r4, #2
 8004ee2:	2500      	movs	r5, #0
 8004ee4:	42a5      	cmp	r5, r4
 8004ee6:	d109      	bne.n	8004efc <__libc_init_array+0x24>
 8004ee8:	4e0b      	ldr	r6, [pc, #44]	; (8004f18 <__libc_init_array+0x40>)
 8004eea:	4c0c      	ldr	r4, [pc, #48]	; (8004f1c <__libc_init_array+0x44>)
 8004eec:	f000 f8f6 	bl	80050dc <_init>
 8004ef0:	1ba4      	subs	r4, r4, r6
 8004ef2:	10a4      	asrs	r4, r4, #2
 8004ef4:	2500      	movs	r5, #0
 8004ef6:	42a5      	cmp	r5, r4
 8004ef8:	d105      	bne.n	8004f06 <__libc_init_array+0x2e>
 8004efa:	bd70      	pop	{r4, r5, r6, pc}
 8004efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f00:	4798      	blx	r3
 8004f02:	3501      	adds	r5, #1
 8004f04:	e7ee      	b.n	8004ee4 <__libc_init_array+0xc>
 8004f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f0a:	4798      	blx	r3
 8004f0c:	3501      	adds	r5, #1
 8004f0e:	e7f2      	b.n	8004ef6 <__libc_init_array+0x1e>
 8004f10:	08005108 	.word	0x08005108
 8004f14:	08005108 	.word	0x08005108
 8004f18:	08005108 	.word	0x08005108
 8004f1c:	0800510c 	.word	0x0800510c

08004f20 <malloc>:
 8004f20:	4b02      	ldr	r3, [pc, #8]	; (8004f2c <malloc+0xc>)
 8004f22:	4601      	mov	r1, r0
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	f000 b86d 	b.w	8005004 <_malloc_r>
 8004f2a:	bf00      	nop
 8004f2c:	20000030 	.word	0x20000030

08004f30 <free>:
 8004f30:	4b02      	ldr	r3, [pc, #8]	; (8004f3c <free+0xc>)
 8004f32:	4601      	mov	r1, r0
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	f000 b817 	b.w	8004f68 <_free_r>
 8004f3a:	bf00      	nop
 8004f3c:	20000030 	.word	0x20000030

08004f40 <memcpy>:
 8004f40:	b510      	push	{r4, lr}
 8004f42:	1e43      	subs	r3, r0, #1
 8004f44:	440a      	add	r2, r1
 8004f46:	4291      	cmp	r1, r2
 8004f48:	d100      	bne.n	8004f4c <memcpy+0xc>
 8004f4a:	bd10      	pop	{r4, pc}
 8004f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f54:	e7f7      	b.n	8004f46 <memcpy+0x6>

08004f56 <memset>:
 8004f56:	4402      	add	r2, r0
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d100      	bne.n	8004f60 <memset+0xa>
 8004f5e:	4770      	bx	lr
 8004f60:	f803 1b01 	strb.w	r1, [r3], #1
 8004f64:	e7f9      	b.n	8004f5a <memset+0x4>
	...

08004f68 <_free_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	d045      	beq.n	8004ffc <_free_r+0x94>
 8004f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f74:	1f0c      	subs	r4, r1, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfb8      	it	lt
 8004f7a:	18e4      	addlt	r4, r4, r3
 8004f7c:	f000 f8ac 	bl	80050d8 <__malloc_lock>
 8004f80:	4a1f      	ldr	r2, [pc, #124]	; (8005000 <_free_r+0x98>)
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	4610      	mov	r0, r2
 8004f86:	b933      	cbnz	r3, 8004f96 <_free_r+0x2e>
 8004f88:	6063      	str	r3, [r4, #4]
 8004f8a:	6014      	str	r4, [r2, #0]
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f92:	f000 b8a2 	b.w	80050da <__malloc_unlock>
 8004f96:	42a3      	cmp	r3, r4
 8004f98:	d90c      	bls.n	8004fb4 <_free_r+0x4c>
 8004f9a:	6821      	ldr	r1, [r4, #0]
 8004f9c:	1862      	adds	r2, r4, r1
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bf04      	itt	eq
 8004fa2:	681a      	ldreq	r2, [r3, #0]
 8004fa4:	685b      	ldreq	r3, [r3, #4]
 8004fa6:	6063      	str	r3, [r4, #4]
 8004fa8:	bf04      	itt	eq
 8004faa:	1852      	addeq	r2, r2, r1
 8004fac:	6022      	streq	r2, [r4, #0]
 8004fae:	6004      	str	r4, [r0, #0]
 8004fb0:	e7ec      	b.n	8004f8c <_free_r+0x24>
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	b10a      	cbz	r2, 8004fbc <_free_r+0x54>
 8004fb8:	42a2      	cmp	r2, r4
 8004fba:	d9fa      	bls.n	8004fb2 <_free_r+0x4a>
 8004fbc:	6819      	ldr	r1, [r3, #0]
 8004fbe:	1858      	adds	r0, r3, r1
 8004fc0:	42a0      	cmp	r0, r4
 8004fc2:	d10b      	bne.n	8004fdc <_free_r+0x74>
 8004fc4:	6820      	ldr	r0, [r4, #0]
 8004fc6:	4401      	add	r1, r0
 8004fc8:	1858      	adds	r0, r3, r1
 8004fca:	4282      	cmp	r2, r0
 8004fcc:	6019      	str	r1, [r3, #0]
 8004fce:	d1dd      	bne.n	8004f8c <_free_r+0x24>
 8004fd0:	6810      	ldr	r0, [r2, #0]
 8004fd2:	6852      	ldr	r2, [r2, #4]
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	4401      	add	r1, r0
 8004fd8:	6019      	str	r1, [r3, #0]
 8004fda:	e7d7      	b.n	8004f8c <_free_r+0x24>
 8004fdc:	d902      	bls.n	8004fe4 <_free_r+0x7c>
 8004fde:	230c      	movs	r3, #12
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	e7d3      	b.n	8004f8c <_free_r+0x24>
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	1821      	adds	r1, r4, r0
 8004fe8:	428a      	cmp	r2, r1
 8004fea:	bf04      	itt	eq
 8004fec:	6811      	ldreq	r1, [r2, #0]
 8004fee:	6852      	ldreq	r2, [r2, #4]
 8004ff0:	6062      	str	r2, [r4, #4]
 8004ff2:	bf04      	itt	eq
 8004ff4:	1809      	addeq	r1, r1, r0
 8004ff6:	6021      	streq	r1, [r4, #0]
 8004ff8:	605c      	str	r4, [r3, #4]
 8004ffa:	e7c7      	b.n	8004f8c <_free_r+0x24>
 8004ffc:	bd38      	pop	{r3, r4, r5, pc}
 8004ffe:	bf00      	nop
 8005000:	200000bc 	.word	0x200000bc

08005004 <_malloc_r>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	1ccd      	adds	r5, r1, #3
 8005008:	f025 0503 	bic.w	r5, r5, #3
 800500c:	3508      	adds	r5, #8
 800500e:	2d0c      	cmp	r5, #12
 8005010:	bf38      	it	cc
 8005012:	250c      	movcc	r5, #12
 8005014:	2d00      	cmp	r5, #0
 8005016:	4606      	mov	r6, r0
 8005018:	db01      	blt.n	800501e <_malloc_r+0x1a>
 800501a:	42a9      	cmp	r1, r5
 800501c:	d903      	bls.n	8005026 <_malloc_r+0x22>
 800501e:	230c      	movs	r3, #12
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	2000      	movs	r0, #0
 8005024:	bd70      	pop	{r4, r5, r6, pc}
 8005026:	f000 f857 	bl	80050d8 <__malloc_lock>
 800502a:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <_malloc_r+0xac>)
 800502c:	6814      	ldr	r4, [r2, #0]
 800502e:	4621      	mov	r1, r4
 8005030:	b991      	cbnz	r1, 8005058 <_malloc_r+0x54>
 8005032:	4c20      	ldr	r4, [pc, #128]	; (80050b4 <_malloc_r+0xb0>)
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	b91b      	cbnz	r3, 8005040 <_malloc_r+0x3c>
 8005038:	4630      	mov	r0, r6
 800503a:	f000 f83d 	bl	80050b8 <_sbrk_r>
 800503e:	6020      	str	r0, [r4, #0]
 8005040:	4629      	mov	r1, r5
 8005042:	4630      	mov	r0, r6
 8005044:	f000 f838 	bl	80050b8 <_sbrk_r>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d124      	bne.n	8005096 <_malloc_r+0x92>
 800504c:	230c      	movs	r3, #12
 800504e:	6033      	str	r3, [r6, #0]
 8005050:	4630      	mov	r0, r6
 8005052:	f000 f842 	bl	80050da <__malloc_unlock>
 8005056:	e7e4      	b.n	8005022 <_malloc_r+0x1e>
 8005058:	680b      	ldr	r3, [r1, #0]
 800505a:	1b5b      	subs	r3, r3, r5
 800505c:	d418      	bmi.n	8005090 <_malloc_r+0x8c>
 800505e:	2b0b      	cmp	r3, #11
 8005060:	d90f      	bls.n	8005082 <_malloc_r+0x7e>
 8005062:	600b      	str	r3, [r1, #0]
 8005064:	50cd      	str	r5, [r1, r3]
 8005066:	18cc      	adds	r4, r1, r3
 8005068:	4630      	mov	r0, r6
 800506a:	f000 f836 	bl	80050da <__malloc_unlock>
 800506e:	f104 000b 	add.w	r0, r4, #11
 8005072:	1d23      	adds	r3, r4, #4
 8005074:	f020 0007 	bic.w	r0, r0, #7
 8005078:	1ac3      	subs	r3, r0, r3
 800507a:	d0d3      	beq.n	8005024 <_malloc_r+0x20>
 800507c:	425a      	negs	r2, r3
 800507e:	50e2      	str	r2, [r4, r3]
 8005080:	e7d0      	b.n	8005024 <_malloc_r+0x20>
 8005082:	428c      	cmp	r4, r1
 8005084:	684b      	ldr	r3, [r1, #4]
 8005086:	bf16      	itet	ne
 8005088:	6063      	strne	r3, [r4, #4]
 800508a:	6013      	streq	r3, [r2, #0]
 800508c:	460c      	movne	r4, r1
 800508e:	e7eb      	b.n	8005068 <_malloc_r+0x64>
 8005090:	460c      	mov	r4, r1
 8005092:	6849      	ldr	r1, [r1, #4]
 8005094:	e7cc      	b.n	8005030 <_malloc_r+0x2c>
 8005096:	1cc4      	adds	r4, r0, #3
 8005098:	f024 0403 	bic.w	r4, r4, #3
 800509c:	42a0      	cmp	r0, r4
 800509e:	d005      	beq.n	80050ac <_malloc_r+0xa8>
 80050a0:	1a21      	subs	r1, r4, r0
 80050a2:	4630      	mov	r0, r6
 80050a4:	f000 f808 	bl	80050b8 <_sbrk_r>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d0cf      	beq.n	800504c <_malloc_r+0x48>
 80050ac:	6025      	str	r5, [r4, #0]
 80050ae:	e7db      	b.n	8005068 <_malloc_r+0x64>
 80050b0:	200000bc 	.word	0x200000bc
 80050b4:	200000c0 	.word	0x200000c0

080050b8 <_sbrk_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4c06      	ldr	r4, [pc, #24]	; (80050d4 <_sbrk_r+0x1c>)
 80050bc:	2300      	movs	r3, #0
 80050be:	4605      	mov	r5, r0
 80050c0:	4608      	mov	r0, r1
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	f7fb faf6 	bl	80006b4 <_sbrk>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <_sbrk_r+0x1a>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	b103      	cbz	r3, 80050d2 <_sbrk_r+0x1a>
 80050d0:	602b      	str	r3, [r5, #0]
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	20000764 	.word	0x20000764

080050d8 <__malloc_lock>:
 80050d8:	4770      	bx	lr

080050da <__malloc_unlock>:
 80050da:	4770      	bx	lr

080050dc <_init>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr

080050e8 <_fini>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr
