
SPI2_5_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003500  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080037b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a8  20000010  080037c0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001b8  080037c0  000201b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000128a4  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000204b  00000000  00000000  000328e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000990  00000000  00000000  00034930  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008c8  00000000  00000000  000352c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d52c  00000000  00000000  00035b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000097c2  00000000  00000000  000730b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018e5cf  00000000  00000000  0007c876  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0020ae45  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002618  00000000  00000000  0020aec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003780 	.word	0x08003780

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08003780 	.word	0x08003780

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;

  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <main+0xc4>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 f991 	bl	800075c <Error_Handler>
  }

  HAL_Init();
 800043a:	f000 fa27 	bl	800088c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f867 	bl	8000510 <SystemClock_Config>

  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000442:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <main+0xc4>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	4a21      	ldr	r2, [pc, #132]	; (80004d0 <main+0xc4>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000452:	4b1f      	ldr	r3, [pc, #124]	; (80004d0 <main+0xc4>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f001 feef 	bl	8002244 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000466:	2100      	movs	r1, #0
 8000468:	2000      	movs	r0, #0
 800046a:	f001 ff05 	bl	8002278 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <main+0xc4>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x80>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x6a>
  if ( timeout < 0 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x8a>
  {
	  Error_Handler();
 8000492:	f000 f963 	bl	800075c <Error_Handler>
  }

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f8b9 	bl	800060c <MX_GPIO_Init>

  while (1)
  {
	  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12 , GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <main+0xc8>)
 80004a2:	f001 feb5 	bl	8002210 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3 , GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	210c      	movs	r1, #12
 80004aa:	480b      	ldr	r0, [pc, #44]	; (80004d8 <main+0xcc>)
 80004ac:	f001 feb0 	bl	8002210 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 , GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80004b6:	4809      	ldr	r0, [pc, #36]	; (80004dc <main+0xd0>)
 80004b8:	f001 feaa 	bl	8002210 <HAL_GPIO_WritePin>
//	  spi_enable;
//	  HAL_SPI_Transmit_IT(&hspi2, &send_data, 1);
	  HAL_Delay(500);
 80004bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c0:	f000 fa76 	bl	80009b0 <HAL_Delay>
	  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12 , GPIO_PIN_SET);
	//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3 , GPIO_PIN_SET);
	//  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 , GPIO_PIN_SET);
	  HAL_Delay(500);
 80004c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c8:	f000 fa72 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12 , GPIO_PIN_RESET);
 80004cc:	e7e5      	b.n	800049a <main+0x8e>
 80004ce:	bf00      	nop
 80004d0:	58024400 	.word	0x58024400
 80004d4:	58020000 	.word	0x58020000
 80004d8:	58020800 	.word	0x58020800
 80004dc:	58022000 	.word	0x58022000

080004e0 <HAL_SPI_TxCpltCallback>:
  }
}


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi2.Instance)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_SPI_TxCpltCallback+0x28>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d104      	bne.n	80004fe <HAL_SPI_TxCpltCallback+0x1e>
	{
		spi_disable;
 80004f4:	2201      	movs	r2, #1
 80004f6:	2101      	movs	r1, #1
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <HAL_SPI_TxCpltCallback+0x2c>)
 80004fa:	f001 fe89 	bl	8002210 <HAL_GPIO_WritePin>
	}
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	2000002c 	.word	0x2000002c
 800050c:	58020000 	.word	0x58020000

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b09e      	sub	sp, #120	; 0x78
 8000514:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000516:	2300      	movs	r3, #0
 8000518:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800051c:	2004      	movs	r0, #4
 800051e:	f001 febf 	bl	80022a0 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <SystemClock_Config+0xf4>)
 8000528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052a:	4a36      	ldr	r2, [pc, #216]	; (8000604 <SystemClock_Config+0xf4>)
 800052c:	f023 0301 	bic.w	r3, r3, #1
 8000530:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000532:	4b34      	ldr	r3, [pc, #208]	; (8000604 <SystemClock_Config+0xf4>)
 8000534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b32      	ldr	r3, [pc, #200]	; (8000608 <SystemClock_Config+0xf8>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a31      	ldr	r2, [pc, #196]	; (8000608 <SystemClock_Config+0xf8>)
 8000542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <SystemClock_Config+0xf8>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000554:	bf00      	nop
 8000556:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <SystemClock_Config+0xf8>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800055e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000562:	d1f8      	bne.n	8000556 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000572:	2300      	movs	r3, #0
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	2302      	movs	r3, #2
 800057c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800057e:	2305      	movs	r3, #5
 8000580:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000582:	23a0      	movs	r3, #160	; 0xa0
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800058a:	2302      	movs	r3, #2
 800058c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800058e:	2302      	movs	r3, #2
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000592:	2304      	movs	r3, #4
 8000594:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000596:	2300      	movs	r3, #0
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800059a:	2308      	movs	r3, #8
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fed6 	bl	8002354 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80005ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005b6:	f000 f8d1 	bl	800075c <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80005ba:	233f      	movs	r3, #63	; 0x3f
 80005bc:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005c6:	2308      	movs	r3, #8
 80005c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005ca:	2340      	movs	r3, #64	; 0x40
 80005cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005ce:	2340      	movs	r3, #64	; 0x40
 80005d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005d8:	2340      	movs	r3, #64	; 0x40
 80005da:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80005dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fac6 	bl	8002b74 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80005ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80005f6:	f000 f8b1 	bl	800075c <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3778      	adds	r7, #120	; 0x78
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	58000400 	.word	0x58000400
 8000608:	58024800 	.word	0x58024800

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b4a      	ldr	r3, [pc, #296]	; (800074c <MX_GPIO_Init+0x140>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000628:	4a48      	ldr	r2, [pc, #288]	; (800074c <MX_GPIO_Init+0x140>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000632:	4b46      	ldr	r3, [pc, #280]	; (800074c <MX_GPIO_Init+0x140>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
 800063e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000640:	4b42      	ldr	r3, [pc, #264]	; (800074c <MX_GPIO_Init+0x140>)
 8000642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000646:	4a41      	ldr	r2, [pc, #260]	; (800074c <MX_GPIO_Init+0x140>)
 8000648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800064c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000650:	4b3e      	ldr	r3, [pc, #248]	; (800074c <MX_GPIO_Init+0x140>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800065e:	4b3b      	ldr	r3, [pc, #236]	; (800074c <MX_GPIO_Init+0x140>)
 8000660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000664:	4a39      	ldr	r2, [pc, #228]	; (800074c <MX_GPIO_Init+0x140>)
 8000666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800066a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800066e:	4b37      	ldr	r3, [pc, #220]	; (800074c <MX_GPIO_Init+0x140>)
 8000670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067c:	4b33      	ldr	r3, [pc, #204]	; (800074c <MX_GPIO_Init+0x140>)
 800067e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000682:	4a32      	ldr	r2, [pc, #200]	; (800074c <MX_GPIO_Init+0x140>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800068c:	4b2f      	ldr	r3, [pc, #188]	; (800074c <MX_GPIO_Init+0x140>)
 800068e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <MX_GPIO_Init+0x140>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	4a2a      	ldr	r2, [pc, #168]	; (800074c <MX_GPIO_Init+0x140>)
 80006a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <MX_GPIO_Init+0x140>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <MX_GPIO_Init+0x140>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006be:	4a23      	ldr	r2, [pc, #140]	; (800074c <MX_GPIO_Init+0x140>)
 80006c0:	f043 0308 	orr.w	r3, r3, #8
 80006c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_GPIO_Init+0x140>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2101      	movs	r1, #1
 80006da:	481d      	ldr	r0, [pc, #116]	; (8000750 <MX_GPIO_Init+0x144>)
 80006dc:	f001 fd98 	bl	8002210 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 , GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006e6:	481b      	ldr	r0, [pc, #108]	; (8000754 <MX_GPIO_Init+0x148>)
 80006e8:	f001 fd92 	bl	8002210 <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	4812      	ldr	r0, [pc, #72]	; (8000750 <MX_GPIO_Init+0x144>)
 8000706:	f001 fbd3 	bl	8001eb0 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800070a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_GPIO_Init+0x148>)
 8000724:	f001 fbc4 	bl	8001eb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000728:	230c      	movs	r3, #12
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_GPIO_Init+0x14c>)
 8000740:	f001 fbb6 	bl	8001eb0 <HAL_GPIO_Init>
}
 8000744:	bf00      	nop
 8000746:	3730      	adds	r7, #48	; 0x30
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	58024400 	.word	0x58024400
 8000750:	58020000 	.word	0x58020000
 8000754:	58022000 	.word	0x58022000
 8000758:	58020800 	.word	0x58020800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <HAL_MspInit+0x30>)
 8000774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000778:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x30>)
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x30>)
 8000784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	58024400 	.word	0x58024400

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f8bc 	bl	8000970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <DMA1_Stream0_IRQHandler+0x10>)
 8000802:	f000 fc2b 	bl	800105c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000013c 	.word	0x2000013c

08000810 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <SPI2_IRQHandler+0x10>)
 8000816:	f002 fcd5 	bl	80031c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000002c 	.word	0x2000002c

08000824 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <SPI5_IRQHandler+0x10>)
 800082a:	f002 fccb 	bl	80031c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000b4 	.word	0x200000b4

08000838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000870 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800083c:	f7ff fd4c 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000840:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000842:	e003      	b.n	800084c <LoopCopyDataInit>

08000844 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000846:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000848:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800084a:	3104      	adds	r1, #4

0800084c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000850:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000852:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000854:	d3f6      	bcc.n	8000844 <CopyDataInit>
  ldr  r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000858:	e002      	b.n	8000860 <LoopFillZerobss>

0800085a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800085a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800085c:	f842 3b04 	str.w	r3, [r2], #4

08000860 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000862:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000864:	d3f9      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000866:	f002 ff67 	bl	8003738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086a:	f7ff fdcf 	bl	800040c <main>
  bx  lr    
 800086e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000870:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000874:	080037b0 	.word	0x080037b0
  ldr  r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800087c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000880:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000884:	200001b8 	.word	0x200001b8

08000888 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC3_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000892:	2003      	movs	r0, #3
 8000894:	f000 f96c 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000898:	f002 fb22 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 800089c:	4601      	mov	r1, r0
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_Init+0x68>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	f003 030f 	and.w	r3, r3, #15
 80008a8:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <HAL_Init+0x6c>)
 80008aa:	5cd3      	ldrb	r3, [r2, r3]
 80008ac:	f003 031f 	and.w	r3, r3, #31
 80008b0:	fa21 f303 	lsr.w	r3, r1, r3
 80008b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_Init+0x68>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_Init+0x6c>)
 80008c0:	5cd3      	ldrb	r3, [r2, r3]
 80008c2:	f003 031f 	and.w	r3, r3, #31
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	fa22 f303 	lsr.w	r3, r2, r3
 80008cc:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <HAL_Init+0x70>)
 80008ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <HAL_Init+0x74>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 f814 	bl	8000904 <HAL_InitTick>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e002      	b.n	80008ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008e6:	f7ff ff41 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	58024400 	.word	0x58024400
 80008f8:	08003798 	.word	0x08003798
 80008fc:	20000004 	.word	0x20000004
 8000900:	20000000 	.word	0x20000000

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_InitTick+0x60>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	e021      	b.n	800095c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <HAL_InitTick+0x64>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_InitTick+0x60>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	fbb3 f3f1 	udiv	r3, r3, r1
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f943 	bl	8000bba <HAL_SYSTICK_Config>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e00e      	b.n	800095c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d80a      	bhi.n	800095a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000944:	2200      	movs	r2, #0
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f000 f91b 	bl	8000b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <HAL_InitTick+0x68>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000000c 	.word	0x2000000c
 8000968:	20000000 	.word	0x20000000
 800096c:	20000008 	.word	0x20000008

08000970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x20>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x24>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_IncTick+0x24>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	2000000c 	.word	0x2000000c
 8000994:	200001b4 	.word	0x200001b4

08000998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_GetTick+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200001b4 	.word	0x200001b4

080009b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f7ff ffee 	bl	8000998 <HAL_GetTick>
 80009bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c8:	d005      	beq.n	80009d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_Delay+0x40>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d6:	bf00      	nop
 80009d8:	f7ff ffde 	bl	8000998 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d8f7      	bhi.n	80009d8 <HAL_Delay+0x28>
  {
  }
}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000000c 	.word	0x2000000c

080009f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <HAL_GetREVID+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0c1b      	lsrs	r3, r3, #16
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	5c001000 	.word	0x5c001000

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <__NVIC_SetPriorityGrouping+0x40>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	4313      	orrs	r3, r2
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <__NVIC_SetPriorityGrouping+0x40>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00
 8000a50:	05fa0000 	.word	0x05fa0000

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f7ff ff8e 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff47 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff5e 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff90 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffb2 	bl	8000b2c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e205      	b.n	8000ff2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d004      	beq.n	8000bfc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e1fa      	b.n	8000ff2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a8c      	ldr	r2, [pc, #560]	; (8000e34 <HAL_DMA_Abort_IT+0x260>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d04a      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a8b      	ldr	r2, [pc, #556]	; (8000e38 <HAL_DMA_Abort_IT+0x264>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d045      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a89      	ldr	r2, [pc, #548]	; (8000e3c <HAL_DMA_Abort_IT+0x268>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d040      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a88      	ldr	r2, [pc, #544]	; (8000e40 <HAL_DMA_Abort_IT+0x26c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d03b      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a86      	ldr	r2, [pc, #536]	; (8000e44 <HAL_DMA_Abort_IT+0x270>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d036      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a85      	ldr	r2, [pc, #532]	; (8000e48 <HAL_DMA_Abort_IT+0x274>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d031      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a83      	ldr	r2, [pc, #524]	; (8000e4c <HAL_DMA_Abort_IT+0x278>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d02c      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a82      	ldr	r2, [pc, #520]	; (8000e50 <HAL_DMA_Abort_IT+0x27c>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d027      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a80      	ldr	r2, [pc, #512]	; (8000e54 <HAL_DMA_Abort_IT+0x280>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d022      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a7f      	ldr	r2, [pc, #508]	; (8000e58 <HAL_DMA_Abort_IT+0x284>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d01d      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a7d      	ldr	r2, [pc, #500]	; (8000e5c <HAL_DMA_Abort_IT+0x288>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d018      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a7c      	ldr	r2, [pc, #496]	; (8000e60 <HAL_DMA_Abort_IT+0x28c>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d013      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a7a      	ldr	r2, [pc, #488]	; (8000e64 <HAL_DMA_Abort_IT+0x290>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d00e      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a79      	ldr	r2, [pc, #484]	; (8000e68 <HAL_DMA_Abort_IT+0x294>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d009      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a77      	ldr	r2, [pc, #476]	; (8000e6c <HAL_DMA_Abort_IT+0x298>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d004      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a76      	ldr	r2, [pc, #472]	; (8000e70 <HAL_DMA_Abort_IT+0x29c>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d101      	bne.n	8000ca0 <HAL_DMA_Abort_IT+0xcc>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e000      	b.n	8000ca2 <HAL_DMA_Abort_IT+0xce>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d065      	beq.n	8000d72 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2204      	movs	r2, #4
 8000caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a60      	ldr	r2, [pc, #384]	; (8000e34 <HAL_DMA_Abort_IT+0x260>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d04a      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a5e      	ldr	r2, [pc, #376]	; (8000e38 <HAL_DMA_Abort_IT+0x264>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d045      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a5d      	ldr	r2, [pc, #372]	; (8000e3c <HAL_DMA_Abort_IT+0x268>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d040      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a5b      	ldr	r2, [pc, #364]	; (8000e40 <HAL_DMA_Abort_IT+0x26c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d03b      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a5a      	ldr	r2, [pc, #360]	; (8000e44 <HAL_DMA_Abort_IT+0x270>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d036      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a58      	ldr	r2, [pc, #352]	; (8000e48 <HAL_DMA_Abort_IT+0x274>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d031      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a57      	ldr	r2, [pc, #348]	; (8000e4c <HAL_DMA_Abort_IT+0x278>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d02c      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a55      	ldr	r2, [pc, #340]	; (8000e50 <HAL_DMA_Abort_IT+0x27c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d027      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a54      	ldr	r2, [pc, #336]	; (8000e54 <HAL_DMA_Abort_IT+0x280>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d022      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a52      	ldr	r2, [pc, #328]	; (8000e58 <HAL_DMA_Abort_IT+0x284>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d01d      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a51      	ldr	r2, [pc, #324]	; (8000e5c <HAL_DMA_Abort_IT+0x288>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d018      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a4f      	ldr	r2, [pc, #316]	; (8000e60 <HAL_DMA_Abort_IT+0x28c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d013      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a4e      	ldr	r2, [pc, #312]	; (8000e64 <HAL_DMA_Abort_IT+0x290>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d00e      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a4c      	ldr	r2, [pc, #304]	; (8000e68 <HAL_DMA_Abort_IT+0x294>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d009      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a4b      	ldr	r2, [pc, #300]	; (8000e6c <HAL_DMA_Abort_IT+0x298>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d004      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a49      	ldr	r2, [pc, #292]	; (8000e70 <HAL_DMA_Abort_IT+0x29c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d108      	bne.n	8000d60 <HAL_DMA_Abort_IT+0x18c>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e147      	b.n	8000ff0 <HAL_DMA_Abort_IT+0x41c>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0201 	bic.w	r2, r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	e13e      	b.n	8000ff0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 020e 	bic.w	r2, r2, #14
 8000d80:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a2b      	ldr	r2, [pc, #172]	; (8000e34 <HAL_DMA_Abort_IT+0x260>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d04a      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a29      	ldr	r2, [pc, #164]	; (8000e38 <HAL_DMA_Abort_IT+0x264>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d045      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <HAL_DMA_Abort_IT+0x268>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d040      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <HAL_DMA_Abort_IT+0x26c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d03b      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a25      	ldr	r2, [pc, #148]	; (8000e44 <HAL_DMA_Abort_IT+0x270>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d036      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <HAL_DMA_Abort_IT+0x274>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d031      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <HAL_DMA_Abort_IT+0x278>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d02c      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <HAL_DMA_Abort_IT+0x27c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d027      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a1f      	ldr	r2, [pc, #124]	; (8000e54 <HAL_DMA_Abort_IT+0x280>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d022      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_DMA_Abort_IT+0x284>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d01d      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <HAL_DMA_Abort_IT+0x288>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d018      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <HAL_DMA_Abort_IT+0x28c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d013      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_DMA_Abort_IT+0x290>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d00e      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_DMA_Abort_IT+0x294>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d009      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <HAL_DMA_Abort_IT+0x298>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d004      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24e>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <HAL_DMA_Abort_IT+0x29c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d128      	bne.n	8000e74 <HAL_DMA_Abort_IT+0x2a0>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0201 	bic.w	r2, r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e027      	b.n	8000e84 <HAL_DMA_Abort_IT+0x2b0>
 8000e34:	40020010 	.word	0x40020010
 8000e38:	40020028 	.word	0x40020028
 8000e3c:	40020040 	.word	0x40020040
 8000e40:	40020058 	.word	0x40020058
 8000e44:	40020070 	.word	0x40020070
 8000e48:	40020088 	.word	0x40020088
 8000e4c:	400200a0 	.word	0x400200a0
 8000e50:	400200b8 	.word	0x400200b8
 8000e54:	40020410 	.word	0x40020410
 8000e58:	40020428 	.word	0x40020428
 8000e5c:	40020440 	.word	0x40020440
 8000e60:	40020458 	.word	0x40020458
 8000e64:	40020470 	.word	0x40020470
 8000e68:	40020488 	.word	0x40020488
 8000e6c:	400204a0 	.word	0x400204a0
 8000e70:	400204b8 	.word	0x400204b8
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a5c      	ldr	r2, [pc, #368]	; (8000ffc <HAL_DMA_Abort_IT+0x428>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d072      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a5b      	ldr	r2, [pc, #364]	; (8001000 <HAL_DMA_Abort_IT+0x42c>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d06d      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a59      	ldr	r2, [pc, #356]	; (8001004 <HAL_DMA_Abort_IT+0x430>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d068      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a58      	ldr	r2, [pc, #352]	; (8001008 <HAL_DMA_Abort_IT+0x434>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d063      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a56      	ldr	r2, [pc, #344]	; (800100c <HAL_DMA_Abort_IT+0x438>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d05e      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a55      	ldr	r2, [pc, #340]	; (8001010 <HAL_DMA_Abort_IT+0x43c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d059      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a53      	ldr	r2, [pc, #332]	; (8001014 <HAL_DMA_Abort_IT+0x440>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d054      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a52      	ldr	r2, [pc, #328]	; (8001018 <HAL_DMA_Abort_IT+0x444>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d04f      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a50      	ldr	r2, [pc, #320]	; (800101c <HAL_DMA_Abort_IT+0x448>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d04a      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a4f      	ldr	r2, [pc, #316]	; (8001020 <HAL_DMA_Abort_IT+0x44c>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d045      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a4d      	ldr	r2, [pc, #308]	; (8001024 <HAL_DMA_Abort_IT+0x450>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d040      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a4c      	ldr	r2, [pc, #304]	; (8001028 <HAL_DMA_Abort_IT+0x454>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d03b      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a4a      	ldr	r2, [pc, #296]	; (800102c <HAL_DMA_Abort_IT+0x458>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d036      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a49      	ldr	r2, [pc, #292]	; (8001030 <HAL_DMA_Abort_IT+0x45c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d031      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a47      	ldr	r2, [pc, #284]	; (8001034 <HAL_DMA_Abort_IT+0x460>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d02c      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a46      	ldr	r2, [pc, #280]	; (8001038 <HAL_DMA_Abort_IT+0x464>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d027      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a44      	ldr	r2, [pc, #272]	; (800103c <HAL_DMA_Abort_IT+0x468>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d022      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a43      	ldr	r2, [pc, #268]	; (8001040 <HAL_DMA_Abort_IT+0x46c>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d01d      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a41      	ldr	r2, [pc, #260]	; (8001044 <HAL_DMA_Abort_IT+0x470>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d018      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a40      	ldr	r2, [pc, #256]	; (8001048 <HAL_DMA_Abort_IT+0x474>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d013      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a3e      	ldr	r2, [pc, #248]	; (800104c <HAL_DMA_Abort_IT+0x478>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00e      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a3d      	ldr	r2, [pc, #244]	; (8001050 <HAL_DMA_Abort_IT+0x47c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d009      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a3b      	ldr	r2, [pc, #236]	; (8001054 <HAL_DMA_Abort_IT+0x480>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d004      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x3a0>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a3a      	ldr	r2, [pc, #232]	; (8001058 <HAL_DMA_Abort_IT+0x484>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d101      	bne.n	8000f78 <HAL_DMA_Abort_IT+0x3a4>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <HAL_DMA_Abort_IT+0x3a6>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d028      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000fac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00c      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fc4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000fce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020010 	.word	0x40020010
 8001000:	40020028 	.word	0x40020028
 8001004:	40020040 	.word	0x40020040
 8001008:	40020058 	.word	0x40020058
 800100c:	40020070 	.word	0x40020070
 8001010:	40020088 	.word	0x40020088
 8001014:	400200a0 	.word	0x400200a0
 8001018:	400200b8 	.word	0x400200b8
 800101c:	40020410 	.word	0x40020410
 8001020:	40020428 	.word	0x40020428
 8001024:	40020440 	.word	0x40020440
 8001028:	40020458 	.word	0x40020458
 800102c:	40020470 	.word	0x40020470
 8001030:	40020488 	.word	0x40020488
 8001034:	400204a0 	.word	0x400204a0
 8001038:	400204b8 	.word	0x400204b8
 800103c:	58025408 	.word	0x58025408
 8001040:	5802541c 	.word	0x5802541c
 8001044:	58025430 	.word	0x58025430
 8001048:	58025444 	.word	0x58025444
 800104c:	58025458 	.word	0x58025458
 8001050:	5802546c 	.word	0x5802546c
 8001054:	58025480 	.word	0x58025480
 8001058:	58025494 	.word	0x58025494

0800105c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001068:	4b67      	ldr	r3, [pc, #412]	; (8001208 <HAL_DMA_IRQHandler+0x1ac>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a67      	ldr	r2, [pc, #412]	; (800120c <HAL_DMA_IRQHandler+0x1b0>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0a9b      	lsrs	r3, r3, #10
 8001074:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001080:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a5f      	ldr	r2, [pc, #380]	; (8001210 <HAL_DMA_IRQHandler+0x1b4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d04a      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a5d      	ldr	r2, [pc, #372]	; (8001214 <HAL_DMA_IRQHandler+0x1b8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d045      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a5c      	ldr	r2, [pc, #368]	; (8001218 <HAL_DMA_IRQHandler+0x1bc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d040      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a5a      	ldr	r2, [pc, #360]	; (800121c <HAL_DMA_IRQHandler+0x1c0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d03b      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a59      	ldr	r2, [pc, #356]	; (8001220 <HAL_DMA_IRQHandler+0x1c4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d036      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a57      	ldr	r2, [pc, #348]	; (8001224 <HAL_DMA_IRQHandler+0x1c8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d031      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a56      	ldr	r2, [pc, #344]	; (8001228 <HAL_DMA_IRQHandler+0x1cc>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d02c      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a54      	ldr	r2, [pc, #336]	; (800122c <HAL_DMA_IRQHandler+0x1d0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d027      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a53      	ldr	r2, [pc, #332]	; (8001230 <HAL_DMA_IRQHandler+0x1d4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d022      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a51      	ldr	r2, [pc, #324]	; (8001234 <HAL_DMA_IRQHandler+0x1d8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01d      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a50      	ldr	r2, [pc, #320]	; (8001238 <HAL_DMA_IRQHandler+0x1dc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d018      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a4e      	ldr	r2, [pc, #312]	; (800123c <HAL_DMA_IRQHandler+0x1e0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a4d      	ldr	r2, [pc, #308]	; (8001240 <HAL_DMA_IRQHandler+0x1e4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d00e      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a4b      	ldr	r2, [pc, #300]	; (8001244 <HAL_DMA_IRQHandler+0x1e8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d009      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a4a      	ldr	r2, [pc, #296]	; (8001248 <HAL_DMA_IRQHandler+0x1ec>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d004      	beq.n	800112e <HAL_DMA_IRQHandler+0xd2>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a48      	ldr	r2, [pc, #288]	; (800124c <HAL_DMA_IRQHandler+0x1f0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_DMA_IRQHandler+0xd6>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_DMA_IRQHandler+0xd8>
 8001132:	2300      	movs	r3, #0
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 842b 	beq.w	8001990 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	2208      	movs	r2, #8
 8001144:	409a      	lsls	r2, r3
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80a2 	beq.w	8001294 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <HAL_DMA_IRQHandler+0x1b4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d04a      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a2d      	ldr	r2, [pc, #180]	; (8001214 <HAL_DMA_IRQHandler+0x1b8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d045      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a2b      	ldr	r2, [pc, #172]	; (8001218 <HAL_DMA_IRQHandler+0x1bc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d040      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a2a      	ldr	r2, [pc, #168]	; (800121c <HAL_DMA_IRQHandler+0x1c0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d03b      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a28      	ldr	r2, [pc, #160]	; (8001220 <HAL_DMA_IRQHandler+0x1c4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d036      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a27      	ldr	r2, [pc, #156]	; (8001224 <HAL_DMA_IRQHandler+0x1c8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d031      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a25      	ldr	r2, [pc, #148]	; (8001228 <HAL_DMA_IRQHandler+0x1cc>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d02c      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a24      	ldr	r2, [pc, #144]	; (800122c <HAL_DMA_IRQHandler+0x1d0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d027      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a22      	ldr	r2, [pc, #136]	; (8001230 <HAL_DMA_IRQHandler+0x1d4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d022      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a21      	ldr	r2, [pc, #132]	; (8001234 <HAL_DMA_IRQHandler+0x1d8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d01d      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <HAL_DMA_IRQHandler+0x1dc>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d018      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <HAL_DMA_IRQHandler+0x1e0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d013      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <HAL_DMA_IRQHandler+0x1e4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00e      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a1b      	ldr	r2, [pc, #108]	; (8001244 <HAL_DMA_IRQHandler+0x1e8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d009      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <HAL_DMA_IRQHandler+0x1ec>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d004      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x194>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <HAL_DMA_IRQHandler+0x1f0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d12f      	bne.n	8001250 <HAL_DMA_IRQHandler+0x1f4>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf14      	ite	ne
 80011fe:	2301      	movne	r3, #1
 8001200:	2300      	moveq	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	e02e      	b.n	8001264 <HAL_DMA_IRQHandler+0x208>
 8001206:	bf00      	nop
 8001208:	20000000 	.word	0x20000000
 800120c:	1b4e81b5 	.word	0x1b4e81b5
 8001210:	40020010 	.word	0x40020010
 8001214:	40020028 	.word	0x40020028
 8001218:	40020040 	.word	0x40020040
 800121c:	40020058 	.word	0x40020058
 8001220:	40020070 	.word	0x40020070
 8001224:	40020088 	.word	0x40020088
 8001228:	400200a0 	.word	0x400200a0
 800122c:	400200b8 	.word	0x400200b8
 8001230:	40020410 	.word	0x40020410
 8001234:	40020428 	.word	0x40020428
 8001238:	40020440 	.word	0x40020440
 800123c:	40020458 	.word	0x40020458
 8001240:	40020470 	.word	0x40020470
 8001244:	40020488 	.word	0x40020488
 8001248:	400204a0 	.word	0x400204a0
 800124c:	400204b8 	.word	0x400204b8
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	bf14      	ite	ne
 800125e:	2301      	movne	r3, #1
 8001260:	2300      	moveq	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d015      	beq.n	8001294 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0204 	bic.w	r2, r2, #4
 8001276:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127c:	f003 031f 	and.w	r3, r3, #31
 8001280:	2208      	movs	r2, #8
 8001282:	409a      	lsls	r2, r3
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	fa22 f303 	lsr.w	r3, r2, r3
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d06e      	beq.n	8001388 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a69      	ldr	r2, [pc, #420]	; (8001454 <HAL_DMA_IRQHandler+0x3f8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d04a      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a67      	ldr	r2, [pc, #412]	; (8001458 <HAL_DMA_IRQHandler+0x3fc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d045      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a66      	ldr	r2, [pc, #408]	; (800145c <HAL_DMA_IRQHandler+0x400>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d040      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a64      	ldr	r2, [pc, #400]	; (8001460 <HAL_DMA_IRQHandler+0x404>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d03b      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a63      	ldr	r2, [pc, #396]	; (8001464 <HAL_DMA_IRQHandler+0x408>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d036      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a61      	ldr	r2, [pc, #388]	; (8001468 <HAL_DMA_IRQHandler+0x40c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d031      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a60      	ldr	r2, [pc, #384]	; (800146c <HAL_DMA_IRQHandler+0x410>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d02c      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a5e      	ldr	r2, [pc, #376]	; (8001470 <HAL_DMA_IRQHandler+0x414>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d027      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a5d      	ldr	r2, [pc, #372]	; (8001474 <HAL_DMA_IRQHandler+0x418>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d022      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a5b      	ldr	r2, [pc, #364]	; (8001478 <HAL_DMA_IRQHandler+0x41c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01d      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a5a      	ldr	r2, [pc, #360]	; (800147c <HAL_DMA_IRQHandler+0x420>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d018      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a58      	ldr	r2, [pc, #352]	; (8001480 <HAL_DMA_IRQHandler+0x424>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a57      	ldr	r2, [pc, #348]	; (8001484 <HAL_DMA_IRQHandler+0x428>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00e      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a55      	ldr	r2, [pc, #340]	; (8001488 <HAL_DMA_IRQHandler+0x42c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d009      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a54      	ldr	r2, [pc, #336]	; (800148c <HAL_DMA_IRQHandler+0x430>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d004      	beq.n	800134a <HAL_DMA_IRQHandler+0x2ee>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_DMA_IRQHandler+0x434>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d10a      	bne.n	8001360 <HAL_DMA_IRQHandler+0x304>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001354:	2b00      	cmp	r3, #0
 8001356:	bf14      	ite	ne
 8001358:	2301      	movne	r3, #1
 800135a:	2300      	moveq	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	e003      	b.n	8001368 <HAL_DMA_IRQHandler+0x30c>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00d      	beq.n	8001388 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	2201      	movs	r2, #1
 8001376:	409a      	lsls	r2, r3
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001380:	f043 0202 	orr.w	r2, r3, #2
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	2204      	movs	r2, #4
 8001392:	409a      	lsls	r2, r3
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 808f 	beq.w	80014bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a2c      	ldr	r2, [pc, #176]	; (8001454 <HAL_DMA_IRQHandler+0x3f8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d04a      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a2a      	ldr	r2, [pc, #168]	; (8001458 <HAL_DMA_IRQHandler+0x3fc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d045      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a29      	ldr	r2, [pc, #164]	; (800145c <HAL_DMA_IRQHandler+0x400>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d040      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a27      	ldr	r2, [pc, #156]	; (8001460 <HAL_DMA_IRQHandler+0x404>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d03b      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a26      	ldr	r2, [pc, #152]	; (8001464 <HAL_DMA_IRQHandler+0x408>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d036      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a24      	ldr	r2, [pc, #144]	; (8001468 <HAL_DMA_IRQHandler+0x40c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d031      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_DMA_IRQHandler+0x410>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d02c      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a21      	ldr	r2, [pc, #132]	; (8001470 <HAL_DMA_IRQHandler+0x414>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d027      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a20      	ldr	r2, [pc, #128]	; (8001474 <HAL_DMA_IRQHandler+0x418>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d022      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <HAL_DMA_IRQHandler+0x41c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d01d      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a1d      	ldr	r2, [pc, #116]	; (800147c <HAL_DMA_IRQHandler+0x420>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d018      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <HAL_DMA_IRQHandler+0x424>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <HAL_DMA_IRQHandler+0x428>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00e      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a18      	ldr	r2, [pc, #96]	; (8001488 <HAL_DMA_IRQHandler+0x42c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d009      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_DMA_IRQHandler+0x430>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d004      	beq.n	800143e <HAL_DMA_IRQHandler+0x3e2>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a15      	ldr	r2, [pc, #84]	; (8001490 <HAL_DMA_IRQHandler+0x434>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12a      	bne.n	8001494 <HAL_DMA_IRQHandler+0x438>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf14      	ite	ne
 800144c:	2301      	movne	r3, #1
 800144e:	2300      	moveq	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	e023      	b.n	800149c <HAL_DMA_IRQHandler+0x440>
 8001454:	40020010 	.word	0x40020010
 8001458:	40020028 	.word	0x40020028
 800145c:	40020040 	.word	0x40020040
 8001460:	40020058 	.word	0x40020058
 8001464:	40020070 	.word	0x40020070
 8001468:	40020088 	.word	0x40020088
 800146c:	400200a0 	.word	0x400200a0
 8001470:	400200b8 	.word	0x400200b8
 8001474:	40020410 	.word	0x40020410
 8001478:	40020428 	.word	0x40020428
 800147c:	40020440 	.word	0x40020440
 8001480:	40020458 	.word	0x40020458
 8001484:	40020470 	.word	0x40020470
 8001488:	40020488 	.word	0x40020488
 800148c:	400204a0 	.word	0x400204a0
 8001490:	400204b8 	.word	0x400204b8
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00d      	beq.n	80014bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	2204      	movs	r2, #4
 80014aa:	409a      	lsls	r2, r3
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f043 0204 	orr.w	r2, r3, #4
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	2210      	movs	r2, #16
 80014c6:	409a      	lsls	r2, r3
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80a6 	beq.w	800161e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a85      	ldr	r2, [pc, #532]	; (80016ec <HAL_DMA_IRQHandler+0x690>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d04a      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a83      	ldr	r2, [pc, #524]	; (80016f0 <HAL_DMA_IRQHandler+0x694>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d045      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a82      	ldr	r2, [pc, #520]	; (80016f4 <HAL_DMA_IRQHandler+0x698>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d040      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a80      	ldr	r2, [pc, #512]	; (80016f8 <HAL_DMA_IRQHandler+0x69c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d03b      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a7f      	ldr	r2, [pc, #508]	; (80016fc <HAL_DMA_IRQHandler+0x6a0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d036      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a7d      	ldr	r2, [pc, #500]	; (8001700 <HAL_DMA_IRQHandler+0x6a4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d031      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a7c      	ldr	r2, [pc, #496]	; (8001704 <HAL_DMA_IRQHandler+0x6a8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d02c      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <HAL_DMA_IRQHandler+0x6ac>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d027      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a79      	ldr	r2, [pc, #484]	; (800170c <HAL_DMA_IRQHandler+0x6b0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d022      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a77      	ldr	r2, [pc, #476]	; (8001710 <HAL_DMA_IRQHandler+0x6b4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d01d      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a76      	ldr	r2, [pc, #472]	; (8001714 <HAL_DMA_IRQHandler+0x6b8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d018      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a74      	ldr	r2, [pc, #464]	; (8001718 <HAL_DMA_IRQHandler+0x6bc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a73      	ldr	r2, [pc, #460]	; (800171c <HAL_DMA_IRQHandler+0x6c0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d00e      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a71      	ldr	r2, [pc, #452]	; (8001720 <HAL_DMA_IRQHandler+0x6c4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d009      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a70      	ldr	r2, [pc, #448]	; (8001724 <HAL_DMA_IRQHandler+0x6c8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d004      	beq.n	8001572 <HAL_DMA_IRQHandler+0x516>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a6e      	ldr	r2, [pc, #440]	; (8001728 <HAL_DMA_IRQHandler+0x6cc>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d10a      	bne.n	8001588 <HAL_DMA_IRQHandler+0x52c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf14      	ite	ne
 8001580:	2301      	movne	r3, #1
 8001582:	2300      	moveq	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	e009      	b.n	800159c <HAL_DMA_IRQHandler+0x540>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf14      	ite	ne
 8001596:	2301      	movne	r3, #1
 8001598:	2300      	moveq	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d03e      	beq.n	800161e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	2210      	movs	r2, #16
 80015aa:	409a      	lsls	r2, r3
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d018      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d108      	bne.n	80015de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d024      	beq.n	800161e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
 80015dc:	e01f      	b.n	800161e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01b      	beq.n	800161e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	4798      	blx	r3
 80015ee:	e016      	b.n	800161e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d107      	bne.n	800160e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0208 	bic.w	r2, r2, #8
 800160c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	2220      	movs	r2, #32
 8001628:	409a      	lsls	r2, r3
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8110 	beq.w	8001854 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a2c      	ldr	r2, [pc, #176]	; (80016ec <HAL_DMA_IRQHandler+0x690>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d04a      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <HAL_DMA_IRQHandler+0x694>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d045      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a29      	ldr	r2, [pc, #164]	; (80016f4 <HAL_DMA_IRQHandler+0x698>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d040      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a28      	ldr	r2, [pc, #160]	; (80016f8 <HAL_DMA_IRQHandler+0x69c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d03b      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a26      	ldr	r2, [pc, #152]	; (80016fc <HAL_DMA_IRQHandler+0x6a0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d036      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a25      	ldr	r2, [pc, #148]	; (8001700 <HAL_DMA_IRQHandler+0x6a4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d031      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a23      	ldr	r2, [pc, #140]	; (8001704 <HAL_DMA_IRQHandler+0x6a8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d02c      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a22      	ldr	r2, [pc, #136]	; (8001708 <HAL_DMA_IRQHandler+0x6ac>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d027      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a20      	ldr	r2, [pc, #128]	; (800170c <HAL_DMA_IRQHandler+0x6b0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d022      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <HAL_DMA_IRQHandler+0x6b4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d01d      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_DMA_IRQHandler+0x6b8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d018      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_DMA_IRQHandler+0x6bc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d013      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <HAL_DMA_IRQHandler+0x6c0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00e      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_DMA_IRQHandler+0x6c4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d009      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_DMA_IRQHandler+0x6c8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d004      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x678>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a16      	ldr	r2, [pc, #88]	; (8001728 <HAL_DMA_IRQHandler+0x6cc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d12b      	bne.n	800172c <HAL_DMA_IRQHandler+0x6d0>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf14      	ite	ne
 80016e2:	2301      	movne	r3, #1
 80016e4:	2300      	moveq	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	e02a      	b.n	8001740 <HAL_DMA_IRQHandler+0x6e4>
 80016ea:	bf00      	nop
 80016ec:	40020010 	.word	0x40020010
 80016f0:	40020028 	.word	0x40020028
 80016f4:	40020040 	.word	0x40020040
 80016f8:	40020058 	.word	0x40020058
 80016fc:	40020070 	.word	0x40020070
 8001700:	40020088 	.word	0x40020088
 8001704:	400200a0 	.word	0x400200a0
 8001708:	400200b8 	.word	0x400200b8
 800170c:	40020410 	.word	0x40020410
 8001710:	40020428 	.word	0x40020428
 8001714:	40020440 	.word	0x40020440
 8001718:	40020458 	.word	0x40020458
 800171c:	40020470 	.word	0x40020470
 8001720:	40020488 	.word	0x40020488
 8001724:	400204a0 	.word	0x400204a0
 8001728:	400204b8 	.word	0x400204b8
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 8087 	beq.w	8001854 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2220      	movs	r2, #32
 8001750:	409a      	lsls	r2, r3
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b04      	cmp	r3, #4
 8001760:	d139      	bne.n	80017d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0216 	bic.w	r2, r2, #22
 8001770:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001780:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <HAL_DMA_IRQHandler+0x736>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0208 	bic.w	r2, r2, #8
 80017a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	223f      	movs	r2, #63	; 0x3f
 80017ac:	409a      	lsls	r2, r3
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 834a 	beq.w	8001e60 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
          }
          return;
 80017d4:	e344      	b.n	8001e60 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d018      	beq.n	8001816 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d02c      	beq.n	8001854 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
 8001802:	e027      	b.n	8001854 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	2b00      	cmp	r3, #0
 800180a:	d023      	beq.n	8001854 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4798      	blx	r3
 8001814:	e01e      	b.n	8001854 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10f      	bne.n	8001844 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0210 	bic.w	r2, r2, #16
 8001832:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8306 	beq.w	8001e6a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8088 	beq.w	800197c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2204      	movs	r2, #4
 8001870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a7a      	ldr	r2, [pc, #488]	; (8001a64 <HAL_DMA_IRQHandler+0xa08>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d04a      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a79      	ldr	r2, [pc, #484]	; (8001a68 <HAL_DMA_IRQHandler+0xa0c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d045      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a77      	ldr	r2, [pc, #476]	; (8001a6c <HAL_DMA_IRQHandler+0xa10>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d040      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a76      	ldr	r2, [pc, #472]	; (8001a70 <HAL_DMA_IRQHandler+0xa14>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d03b      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a74      	ldr	r2, [pc, #464]	; (8001a74 <HAL_DMA_IRQHandler+0xa18>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d036      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a73      	ldr	r2, [pc, #460]	; (8001a78 <HAL_DMA_IRQHandler+0xa1c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d031      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a71      	ldr	r2, [pc, #452]	; (8001a7c <HAL_DMA_IRQHandler+0xa20>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d02c      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a70      	ldr	r2, [pc, #448]	; (8001a80 <HAL_DMA_IRQHandler+0xa24>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d027      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6e      	ldr	r2, [pc, #440]	; (8001a84 <HAL_DMA_IRQHandler+0xa28>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d022      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6d      	ldr	r2, [pc, #436]	; (8001a88 <HAL_DMA_IRQHandler+0xa2c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d01d      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a6b      	ldr	r2, [pc, #428]	; (8001a8c <HAL_DMA_IRQHandler+0xa30>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d018      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a6a      	ldr	r2, [pc, #424]	; (8001a90 <HAL_DMA_IRQHandler+0xa34>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d013      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a68      	ldr	r2, [pc, #416]	; (8001a94 <HAL_DMA_IRQHandler+0xa38>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00e      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <HAL_DMA_IRQHandler+0xa3c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d009      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a65      	ldr	r2, [pc, #404]	; (8001a9c <HAL_DMA_IRQHandler+0xa40>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d004      	beq.n	8001914 <HAL_DMA_IRQHandler+0x8b8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a64      	ldr	r2, [pc, #400]	; (8001aa0 <HAL_DMA_IRQHandler+0xa44>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d108      	bne.n	8001926 <HAL_DMA_IRQHandler+0x8ca>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e007      	b.n	8001936 <HAL_DMA_IRQHandler+0x8da>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3301      	adds	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193e:	429a      	cmp	r2, r3
 8001940:	d307      	bcc.n	8001952 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f2      	bne.n	8001936 <HAL_DMA_IRQHandler+0x8da>
 8001950:	e000      	b.n	8001954 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001952:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2203      	movs	r2, #3
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001972:	e003      	b.n	800197c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8272 	beq.w	8001e6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
 800198e:	e26c      	b.n	8001e6a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <HAL_DMA_IRQHandler+0xa48>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d022      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x984>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a42      	ldr	r2, [pc, #264]	; (8001aa8 <HAL_DMA_IRQHandler+0xa4c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d01d      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x984>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a40      	ldr	r2, [pc, #256]	; (8001aac <HAL_DMA_IRQHandler+0xa50>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d018      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x984>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a3f      	ldr	r2, [pc, #252]	; (8001ab0 <HAL_DMA_IRQHandler+0xa54>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d013      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x984>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a3d      	ldr	r2, [pc, #244]	; (8001ab4 <HAL_DMA_IRQHandler+0xa58>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00e      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x984>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a3c      	ldr	r2, [pc, #240]	; (8001ab8 <HAL_DMA_IRQHandler+0xa5c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d009      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x984>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a3a      	ldr	r2, [pc, #232]	; (8001abc <HAL_DMA_IRQHandler+0xa60>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d004      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x984>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a39      	ldr	r2, [pc, #228]	; (8001ac0 <HAL_DMA_IRQHandler+0xa64>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_DMA_IRQHandler+0x988>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_DMA_IRQHandler+0x98a>
 80019e4:	2300      	movs	r3, #0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 823f 	beq.w	8001e6a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	2204      	movs	r2, #4
 80019fe:	409a      	lsls	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80cd 	beq.w	8001ba4 <HAL_DMA_IRQHandler+0xb48>
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80c7 	beq.w	8001ba4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	2204      	movs	r2, #4
 8001a20:	409a      	lsls	r2, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d049      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8210 	beq.w	8001e64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001a4c:	e20a      	b.n	8001e64 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8206 	beq.w	8001e64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001a60:	e200      	b.n	8001e64 <HAL_DMA_IRQHandler+0xe08>
 8001a62:	bf00      	nop
 8001a64:	40020010 	.word	0x40020010
 8001a68:	40020028 	.word	0x40020028
 8001a6c:	40020040 	.word	0x40020040
 8001a70:	40020058 	.word	0x40020058
 8001a74:	40020070 	.word	0x40020070
 8001a78:	40020088 	.word	0x40020088
 8001a7c:	400200a0 	.word	0x400200a0
 8001a80:	400200b8 	.word	0x400200b8
 8001a84:	40020410 	.word	0x40020410
 8001a88:	40020428 	.word	0x40020428
 8001a8c:	40020440 	.word	0x40020440
 8001a90:	40020458 	.word	0x40020458
 8001a94:	40020470 	.word	0x40020470
 8001a98:	40020488 	.word	0x40020488
 8001a9c:	400204a0 	.word	0x400204a0
 8001aa0:	400204b8 	.word	0x400204b8
 8001aa4:	58025408 	.word	0x58025408
 8001aa8:	5802541c 	.word	0x5802541c
 8001aac:	58025430 	.word	0x58025430
 8001ab0:	58025444 	.word	0x58025444
 8001ab4:	58025458 	.word	0x58025458
 8001ab8:	5802546c 	.word	0x5802546c
 8001abc:	58025480 	.word	0x58025480
 8001ac0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d160      	bne.n	8001b90 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a8c      	ldr	r2, [pc, #560]	; (8001d04 <HAL_DMA_IRQHandler+0xca8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d04a      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a8a      	ldr	r2, [pc, #552]	; (8001d08 <HAL_DMA_IRQHandler+0xcac>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d045      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a89      	ldr	r2, [pc, #548]	; (8001d0c <HAL_DMA_IRQHandler+0xcb0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d040      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a87      	ldr	r2, [pc, #540]	; (8001d10 <HAL_DMA_IRQHandler+0xcb4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d03b      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a86      	ldr	r2, [pc, #536]	; (8001d14 <HAL_DMA_IRQHandler+0xcb8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d036      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a84      	ldr	r2, [pc, #528]	; (8001d18 <HAL_DMA_IRQHandler+0xcbc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d031      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a83      	ldr	r2, [pc, #524]	; (8001d1c <HAL_DMA_IRQHandler+0xcc0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d02c      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a81      	ldr	r2, [pc, #516]	; (8001d20 <HAL_DMA_IRQHandler+0xcc4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d027      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a80      	ldr	r2, [pc, #512]	; (8001d24 <HAL_DMA_IRQHandler+0xcc8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d022      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a7e      	ldr	r2, [pc, #504]	; (8001d28 <HAL_DMA_IRQHandler+0xccc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d01d      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7d      	ldr	r2, [pc, #500]	; (8001d2c <HAL_DMA_IRQHandler+0xcd0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d018      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a7b      	ldr	r2, [pc, #492]	; (8001d30 <HAL_DMA_IRQHandler+0xcd4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_DMA_IRQHandler+0xcd8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00e      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a78      	ldr	r2, [pc, #480]	; (8001d38 <HAL_DMA_IRQHandler+0xcdc>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d009      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <HAL_DMA_IRQHandler+0xce0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d004      	beq.n	8001b6e <HAL_DMA_IRQHandler+0xb12>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a75      	ldr	r2, [pc, #468]	; (8001d40 <HAL_DMA_IRQHandler+0xce4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d108      	bne.n	8001b80 <HAL_DMA_IRQHandler+0xb24>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0208 	bic.w	r2, r2, #8
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e007      	b.n	8001b90 <HAL_DMA_IRQHandler+0xb34>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0204 	bic.w	r2, r2, #4
 8001b8e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8165 	beq.w	8001e64 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ba2:	e15f      	b.n	8001e64 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	2202      	movs	r2, #2
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80c5 	beq.w	8001d44 <HAL_DMA_IRQHandler+0xce8>
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80bf 	beq.w	8001d44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	2202      	movs	r2, #2
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d018      	beq.n	8001c12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 813a 	beq.w	8001e68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001bfc:	e134      	b.n	8001e68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8130 	beq.w	8001e68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001c10:	e12a      	b.n	8001e68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d168      	bne.n	8001cee <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a38      	ldr	r2, [pc, #224]	; (8001d04 <HAL_DMA_IRQHandler+0xca8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d04a      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a37      	ldr	r2, [pc, #220]	; (8001d08 <HAL_DMA_IRQHandler+0xcac>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d045      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a35      	ldr	r2, [pc, #212]	; (8001d0c <HAL_DMA_IRQHandler+0xcb0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d040      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a34      	ldr	r2, [pc, #208]	; (8001d10 <HAL_DMA_IRQHandler+0xcb4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d03b      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <HAL_DMA_IRQHandler+0xcb8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d036      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a31      	ldr	r2, [pc, #196]	; (8001d18 <HAL_DMA_IRQHandler+0xcbc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d031      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a2f      	ldr	r2, [pc, #188]	; (8001d1c <HAL_DMA_IRQHandler+0xcc0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d02c      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a2e      	ldr	r2, [pc, #184]	; (8001d20 <HAL_DMA_IRQHandler+0xcc4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d027      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2c      	ldr	r2, [pc, #176]	; (8001d24 <HAL_DMA_IRQHandler+0xcc8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d022      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2b      	ldr	r2, [pc, #172]	; (8001d28 <HAL_DMA_IRQHandler+0xccc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d01d      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a29      	ldr	r2, [pc, #164]	; (8001d2c <HAL_DMA_IRQHandler+0xcd0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d018      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a28      	ldr	r2, [pc, #160]	; (8001d30 <HAL_DMA_IRQHandler+0xcd4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d013      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <HAL_DMA_IRQHandler+0xcd8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00e      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <HAL_DMA_IRQHandler+0xcdc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d009      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <HAL_DMA_IRQHandler+0xce0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xc60>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a22      	ldr	r2, [pc, #136]	; (8001d40 <HAL_DMA_IRQHandler+0xce4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d108      	bne.n	8001cce <HAL_DMA_IRQHandler+0xc72>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0214 	bic.w	r2, r2, #20
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e007      	b.n	8001cde <HAL_DMA_IRQHandler+0xc82>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 020a 	bic.w	r2, r2, #10
 8001cdc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80b8 	beq.w	8001e68 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001d00:	e0b2      	b.n	8001e68 <HAL_DMA_IRQHandler+0xe0c>
 8001d02:	bf00      	nop
 8001d04:	40020010 	.word	0x40020010
 8001d08:	40020028 	.word	0x40020028
 8001d0c:	40020040 	.word	0x40020040
 8001d10:	40020058 	.word	0x40020058
 8001d14:	40020070 	.word	0x40020070
 8001d18:	40020088 	.word	0x40020088
 8001d1c:	400200a0 	.word	0x400200a0
 8001d20:	400200b8 	.word	0x400200b8
 8001d24:	40020410 	.word	0x40020410
 8001d28:	40020428 	.word	0x40020428
 8001d2c:	40020440 	.word	0x40020440
 8001d30:	40020458 	.word	0x40020458
 8001d34:	40020470 	.word	0x40020470
 8001d38:	40020488 	.word	0x40020488
 8001d3c:	400204a0 	.word	0x400204a0
 8001d40:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8088 	beq.w	8001e6a <HAL_DMA_IRQHandler+0xe0e>
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8082 	beq.w	8001e6a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a41      	ldr	r2, [pc, #260]	; (8001e70 <HAL_DMA_IRQHandler+0xe14>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04a      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a3f      	ldr	r2, [pc, #252]	; (8001e74 <HAL_DMA_IRQHandler+0xe18>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d045      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a3e      	ldr	r2, [pc, #248]	; (8001e78 <HAL_DMA_IRQHandler+0xe1c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d040      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a3c      	ldr	r2, [pc, #240]	; (8001e7c <HAL_DMA_IRQHandler+0xe20>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d03b      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a3b      	ldr	r2, [pc, #236]	; (8001e80 <HAL_DMA_IRQHandler+0xe24>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d036      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a39      	ldr	r2, [pc, #228]	; (8001e84 <HAL_DMA_IRQHandler+0xe28>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d031      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a38      	ldr	r2, [pc, #224]	; (8001e88 <HAL_DMA_IRQHandler+0xe2c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d02c      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a36      	ldr	r2, [pc, #216]	; (8001e8c <HAL_DMA_IRQHandler+0xe30>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d027      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a35      	ldr	r2, [pc, #212]	; (8001e90 <HAL_DMA_IRQHandler+0xe34>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d022      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <HAL_DMA_IRQHandler+0xe38>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01d      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <HAL_DMA_IRQHandler+0xe3c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d018      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a30      	ldr	r2, [pc, #192]	; (8001e9c <HAL_DMA_IRQHandler+0xe40>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <HAL_DMA_IRQHandler+0xe44>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d00e      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a2d      	ldr	r2, [pc, #180]	; (8001ea4 <HAL_DMA_IRQHandler+0xe48>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d009      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a2c      	ldr	r2, [pc, #176]	; (8001ea8 <HAL_DMA_IRQHandler+0xe4c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d004      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xdaa>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a2a      	ldr	r2, [pc, #168]	; (8001eac <HAL_DMA_IRQHandler+0xe50>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d108      	bne.n	8001e18 <HAL_DMA_IRQHandler+0xdbc>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 021c 	bic.w	r2, r2, #28
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e007      	b.n	8001e28 <HAL_DMA_IRQHandler+0xdcc>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 020e 	bic.w	r2, r2, #14
 8001e26:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2201      	movs	r2, #1
 8001e32:	409a      	lsls	r2, r3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
 8001e5e:	e004      	b.n	8001e6a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8001e60:	bf00      	nop
 8001e62:	e002      	b.n	8001e6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e68:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40020010 	.word	0x40020010
 8001e74:	40020028 	.word	0x40020028
 8001e78:	40020040 	.word	0x40020040
 8001e7c:	40020058 	.word	0x40020058
 8001e80:	40020070 	.word	0x40020070
 8001e84:	40020088 	.word	0x40020088
 8001e88:	400200a0 	.word	0x400200a0
 8001e8c:	400200b8 	.word	0x400200b8
 8001e90:	40020410 	.word	0x40020410
 8001e94:	40020428 	.word	0x40020428
 8001e98:	40020440 	.word	0x40020440
 8001e9c:	40020458 	.word	0x40020458
 8001ea0:	40020470 	.word	0x40020470
 8001ea4:	40020488 	.word	0x40020488
 8001ea8:	400204a0 	.word	0x400204a0
 8001eac:	400204b8 	.word	0x400204b8

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_GPIO_Init+0x234>)
 8001ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ec2:	e194      	b.n	80021ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8186 	beq.w	80021e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d00b      	beq.n	8001efc <HAL_GPIO_Init+0x4c>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d007      	beq.n	8001efc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef0:	2b11      	cmp	r3, #17
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b12      	cmp	r3, #18
 8001efa:	d130      	bne.n	8001f5e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f32:	2201      	movs	r2, #1
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 0201 	and.w	r2, r3, #1
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0xee>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b12      	cmp	r3, #18
 8001f9c:	d123      	bne.n	8001fe6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	08da      	lsrs	r2, r3, #3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3208      	adds	r2, #8
 8001fe0:	69b9      	ldr	r1, [r7, #24]
 8001fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0203 	and.w	r2, r3, #3
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80e0 	beq.w	80021e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002028:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <HAL_GPIO_Init+0x238>)
 800202a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800202e:	4a2e      	ldr	r2, [pc, #184]	; (80020e8 <HAL_GPIO_Init+0x238>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_GPIO_Init+0x238>)
 800203a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002046:	4a29      	ldr	r2, [pc, #164]	; (80020ec <HAL_GPIO_Init+0x23c>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a20      	ldr	r2, [pc, #128]	; (80020f0 <HAL_GPIO_Init+0x240>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d052      	beq.n	8002118 <HAL_GPIO_Init+0x268>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <HAL_GPIO_Init+0x244>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d031      	beq.n	80020de <HAL_GPIO_Init+0x22e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <HAL_GPIO_Init+0x248>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <HAL_GPIO_Init+0x22a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_GPIO_Init+0x24c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d025      	beq.n	80020d6 <HAL_GPIO_Init+0x226>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <HAL_GPIO_Init+0x250>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_GPIO_Init+0x222>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_GPIO_Init+0x254>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <HAL_GPIO_Init+0x21e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <HAL_GPIO_Init+0x258>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x21a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a19      	ldr	r2, [pc, #100]	; (800210c <HAL_GPIO_Init+0x25c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x216>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_GPIO_Init+0x260>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x212>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_GPIO_Init+0x264>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x20e>
 80020ba:	2309      	movs	r3, #9
 80020bc:	e02d      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020be:	230a      	movs	r3, #10
 80020c0:	e02b      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020c2:	2308      	movs	r3, #8
 80020c4:	e029      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020c6:	2307      	movs	r3, #7
 80020c8:	e027      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020ca:	2306      	movs	r3, #6
 80020cc:	e025      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e023      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020d2:	2304      	movs	r3, #4
 80020d4:	e021      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e01f      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020da:	2302      	movs	r3, #2
 80020dc:	e01d      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020de:	2301      	movs	r3, #1
 80020e0:	e01b      	b.n	800211a <HAL_GPIO_Init+0x26a>
 80020e2:	bf00      	nop
 80020e4:	58000080 	.word	0x58000080
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58000400 	.word	0x58000400
 80020f0:	58020000 	.word	0x58020000
 80020f4:	58020400 	.word	0x58020400
 80020f8:	58020800 	.word	0x58020800
 80020fc:	58020c00 	.word	0x58020c00
 8002100:	58021000 	.word	0x58021000
 8002104:	58021400 	.word	0x58021400
 8002108:	58021800 	.word	0x58021800
 800210c:	58021c00 	.word	0x58021c00
 8002110:	58022000 	.word	0x58022000
 8002114:	58022400 	.word	0x58022400
 8002118:	2300      	movs	r3, #0
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4093      	lsls	r3, r2
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800212a:	4938      	ldr	r1, [pc, #224]	; (800220c <HAL_GPIO_Init+0x35c>)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	3301      	adds	r3, #1
 80021ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f47f ae63 	bne.w	8001ec4 <HAL_GPIO_Init+0x14>
  }
}
 80021fe:	bf00      	nop
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	58000400 	.word	0x58000400

08002210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
 800221c:	4613      	mov	r3, r2
 800221e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002220:	787b      	ldrb	r3, [r7, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800222c:	e003      	b.n	8002236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	041a      	lsls	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	619a      	str	r2, [r3, #24]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800224c:	4a08      	ldr	r2, [pc, #32]	; (8002270 <HAL_HSEM_FastTake+0x2c>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3320      	adds	r3, #32
 8002252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_HSEM_FastTake+0x30>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e000      	b.n	8002262 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	58026400 	.word	0x58026400
 8002274:	80000300 	.word	0x80000300

08002278 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002282:	4906      	ldr	r1, [pc, #24]	; (800229c <HAL_HSEM_Release+0x24>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	58026400 	.word	0x58026400

080022a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022a8:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_PWREx_ConfigSupply+0xb0>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	2b06      	cmp	r3, #6
 80022b2:	d00a      	beq.n	80022ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_PWREx_ConfigSupply+0xb0>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d001      	beq.n	80022c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e040      	b.n	8002348 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e03e      	b.n	8002348 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <HAL_PWREx_ConfigSupply+0xb0>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80022d2:	491f      	ldr	r1, [pc, #124]	; (8002350 <HAL_PWREx_ConfigSupply+0xb0>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022da:	f7fe fb5d 	bl	8000998 <HAL_GetTick>
 80022de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022e0:	e009      	b.n	80022f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022e2:	f7fe fb59 	bl	8000998 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f0:	d901      	bls.n	80022f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e028      	b.n	8002348 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_PWREx_ConfigSupply+0xb0>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002302:	d1ee      	bne.n	80022e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b1e      	cmp	r3, #30
 8002308:	d008      	beq.n	800231c <HAL_PWREx_ConfigSupply+0x7c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b2e      	cmp	r3, #46	; 0x2e
 800230e:	d005      	beq.n	800231c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b1d      	cmp	r3, #29
 8002314:	d002      	beq.n	800231c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b2d      	cmp	r3, #45	; 0x2d
 800231a:	d114      	bne.n	8002346 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800231c:	f7fe fb3c 	bl	8000998 <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002322:	e009      	b.n	8002338 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002324:	f7fe fb38 	bl	8000998 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002332:	d901      	bls.n	8002338 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e007      	b.n	8002348 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_PWREx_ConfigSupply+0xb0>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d1ee      	bne.n	8002324 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	58024800 	.word	0x58024800

08002354 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08c      	sub	sp, #48	; 0x30
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e3ff      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8087 	beq.w	8002482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002374:	4b99      	ldr	r3, [pc, #612]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800237e:	4b97      	ldr	r3, [pc, #604]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	2b10      	cmp	r3, #16
 8002388:	d007      	beq.n	800239a <HAL_RCC_OscConfig+0x46>
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	2b18      	cmp	r3, #24
 800238e:	d110      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5e>
 8002390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d10b      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	4b90      	ldr	r3, [pc, #576]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d06c      	beq.n	8002480 <HAL_RCC_OscConfig+0x12c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d168      	bne.n	8002480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e3d9      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x76>
 80023bc:	4b87      	ldr	r3, [pc, #540]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a86      	ldr	r2, [pc, #536]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e02e      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x98>
 80023d2:	4b82      	ldr	r3, [pc, #520]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a81      	ldr	r2, [pc, #516]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b7f      	ldr	r3, [pc, #508]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7e      	ldr	r2, [pc, #504]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80023e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0xbc>
 80023f6:	4b79      	ldr	r3, [pc, #484]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a78      	ldr	r2, [pc, #480]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a75      	ldr	r2, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 8002410:	4b72      	ldr	r3, [pc, #456]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a71      	ldr	r2, [pc, #452]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b6f      	ldr	r3, [pc, #444]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a6e      	ldr	r2, [pc, #440]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fab2 	bl	8000998 <HAL_GetTick>
 8002434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7fe faae 	bl	8000998 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e38d      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800244a:	4b64      	ldr	r3, [pc, #400]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xe4>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fa9e 	bl	8000998 <HAL_GetTick>
 800245c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002460:	f7fe fa9a 	bl	8000998 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e379      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002472:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x10c>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80ae 	beq.w	80025ec <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002490:	4b52      	ldr	r3, [pc, #328]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002498:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800249a:	4b50      	ldr	r3, [pc, #320]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_RCC_OscConfig+0x162>
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	2b18      	cmp	r3, #24
 80024aa:	d13a      	bne.n	8002522 <HAL_RCC_OscConfig+0x1ce>
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d135      	bne.n	8002522 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b6:	4b49      	ldr	r3, [pc, #292]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_RCC_OscConfig+0x17a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e34b      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ce:	f7fe fa91 	bl	80009f4 <HAL_GetREVID>
 80024d2:	4602      	mov	r2, r0
 80024d4:	f241 0303 	movw	r3, #4099	; 0x1003
 80024d8:	429a      	cmp	r2, r3
 80024da:	d817      	bhi.n	800250c <HAL_RCC_OscConfig+0x1b8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2b40      	cmp	r3, #64	; 0x40
 80024e2:	d108      	bne.n	80024f6 <HAL_RCC_OscConfig+0x1a2>
 80024e4:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024ec:	4a3b      	ldr	r2, [pc, #236]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80024ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f4:	e07a      	b.n	80025ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	031b      	lsls	r3, r3, #12
 8002504:	4935      	ldr	r1, [pc, #212]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800250a:	e06f      	b.n	80025ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250c:	4b33      	ldr	r3, [pc, #204]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	4930      	ldr	r1, [pc, #192]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002520:	e064      	b.n	80025ec <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d045      	beq.n	80025b6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 0219 	bic.w	r2, r3, #25
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4929      	ldr	r1, [pc, #164]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fa2c 	bl	8000998 <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002544:	f7fe fa28 	bl	8000998 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e307      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002556:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	f7fe fa47 	bl	80009f4 <HAL_GetREVID>
 8002566:	4602      	mov	r2, r0
 8002568:	f241 0303 	movw	r3, #4099	; 0x1003
 800256c:	429a      	cmp	r2, r3
 800256e:	d817      	bhi.n	80025a0 <HAL_RCC_OscConfig+0x24c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	d108      	bne.n	800258a <HAL_RCC_OscConfig+0x236>
 8002578:	4b18      	ldr	r3, [pc, #96]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002580:	4a16      	ldr	r2, [pc, #88]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 8002582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002586:	6053      	str	r3, [r2, #4]
 8002588:	e030      	b.n	80025ec <HAL_RCC_OscConfig+0x298>
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	031b      	lsls	r3, r3, #12
 8002598:	4910      	ldr	r1, [pc, #64]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
 800259e:	e025      	b.n	80025ec <HAL_RCC_OscConfig+0x298>
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	490b      	ldr	r1, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
 80025b4:	e01a      	b.n	80025ec <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a08      	ldr	r2, [pc, #32]	; (80025dc <HAL_RCC_OscConfig+0x288>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe f9e9 	bl	8000998 <HAL_GetTick>
 80025c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ca:	f7fe f9e5 	bl	8000998 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d903      	bls.n	80025e0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e2c4      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
 80025dc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025e0:	4ba4      	ldr	r3, [pc, #656]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ee      	bne.n	80025ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80a9 	beq.w	800274c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fa:	4b9e      	ldr	r3, [pc, #632]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002602:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002604:	4b9b      	ldr	r3, [pc, #620]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d007      	beq.n	8002620 <HAL_RCC_OscConfig+0x2cc>
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b18      	cmp	r3, #24
 8002614:	d13a      	bne.n	800268c <HAL_RCC_OscConfig+0x338>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d135      	bne.n	800268c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002620:	4b94      	ldr	r3, [pc, #592]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_OscConfig+0x2e4>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d001      	beq.n	8002638 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e296      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002638:	f7fe f9dc 	bl	80009f4 <HAL_GetREVID>
 800263c:	4602      	mov	r2, r0
 800263e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002642:	429a      	cmp	r2, r3
 8002644:	d817      	bhi.n	8002676 <HAL_RCC_OscConfig+0x322>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	2b20      	cmp	r3, #32
 800264c:	d108      	bne.n	8002660 <HAL_RCC_OscConfig+0x30c>
 800264e:	4b89      	ldr	r3, [pc, #548]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002656:	4a87      	ldr	r2, [pc, #540]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002658:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800265c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800265e:	e075      	b.n	800274c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002660:	4b84      	ldr	r3, [pc, #528]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	069b      	lsls	r3, r3, #26
 800266e:	4981      	ldr	r1, [pc, #516]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002674:	e06a      	b.n	800274c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002676:	4b7f      	ldr	r3, [pc, #508]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	061b      	lsls	r3, r3, #24
 8002684:	497b      	ldr	r1, [pc, #492]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002686:	4313      	orrs	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800268a:	e05f      	b.n	800274c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d042      	beq.n	800271a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002694:	4b77      	ldr	r3, [pc, #476]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a76      	ldr	r2, [pc, #472]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 800269a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe f97a 	bl	8000998 <HAL_GetTick>
 80026a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80026a8:	f7fe f976 	bl	8000998 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e255      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ba:	4b6e      	ldr	r3, [pc, #440]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026c6:	f7fe f995 	bl	80009f4 <HAL_GetREVID>
 80026ca:	4602      	mov	r2, r0
 80026cc:	f241 0303 	movw	r3, #4099	; 0x1003
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d817      	bhi.n	8002704 <HAL_RCC_OscConfig+0x3b0>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d108      	bne.n	80026ee <HAL_RCC_OscConfig+0x39a>
 80026dc:	4b65      	ldr	r3, [pc, #404]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026e4:	4a63      	ldr	r2, [pc, #396]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 80026e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026ea:	6053      	str	r3, [r2, #4]
 80026ec:	e02e      	b.n	800274c <HAL_RCC_OscConfig+0x3f8>
 80026ee:	4b61      	ldr	r3, [pc, #388]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	069b      	lsls	r3, r3, #26
 80026fc:	495d      	ldr	r1, [pc, #372]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
 8002702:	e023      	b.n	800274c <HAL_RCC_OscConfig+0x3f8>
 8002704:	4b5b      	ldr	r3, [pc, #364]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	4958      	ldr	r1, [pc, #352]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002714:	4313      	orrs	r3, r2
 8002716:	60cb      	str	r3, [r1, #12]
 8002718:	e018      	b.n	800274c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800271a:	4b56      	ldr	r3, [pc, #344]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a55      	ldr	r2, [pc, #340]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe f937 	bl	8000998 <HAL_GetTick>
 800272a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800272e:	f7fe f933 	bl	8000998 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e212      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002740:	4b4c      	ldr	r3, [pc, #304]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d036      	beq.n	80027c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d019      	beq.n	8002794 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002760:	4b44      	ldr	r3, [pc, #272]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002764:	4a43      	ldr	r2, [pc, #268]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7fe f914 	bl	8000998 <HAL_GetTick>
 8002770:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002774:	f7fe f910 	bl	8000998 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1ef      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002786:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x420>
 8002792:	e018      	b.n	80027c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002794:	4b37      	ldr	r3, [pc, #220]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002798:	4a36      	ldr	r2, [pc, #216]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe f8fa 	bl	8000998 <HAL_GetTick>
 80027a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a8:	f7fe f8f6 	bl	8000998 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e1d5      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ba:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 80027bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d036      	beq.n	8002840 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d019      	beq.n	800280e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a25      	ldr	r2, [pc, #148]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 80027e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027e6:	f7fe f8d7 	bl	8000998 <HAL_GetTick>
 80027ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80027ee:	f7fe f8d3 	bl	8000998 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1b2      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002800:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x49a>
 800280c:	e018      	b.n	8002840 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a18      	ldr	r2, [pc, #96]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002818:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800281a:	f7fe f8bd 	bl	8000998 <HAL_GetTick>
 800281e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002822:	f7fe f8b9 	bl	8000998 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e198      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_RCC_OscConfig+0x520>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8085 	beq.w	8002958 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_OscConfig+0x524>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a09      	ldr	r2, [pc, #36]	; (8002878 <HAL_RCC_OscConfig+0x524>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800285a:	f7fe f89d 	bl	8000998 <HAL_GetTick>
 800285e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002860:	e00c      	b.n	800287c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002862:	f7fe f899 	bl	8000998 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b64      	cmp	r3, #100	; 0x64
 800286e:	d905      	bls.n	800287c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e178      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
 8002874:	58024400 	.word	0x58024400
 8002878:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287c:	4b96      	ldr	r3, [pc, #600]	; (8002ad8 <HAL_RCC_OscConfig+0x784>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ec      	beq.n	8002862 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x54a>
 8002890:	4b92      	ldr	r3, [pc, #584]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	4a91      	ldr	r2, [pc, #580]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6713      	str	r3, [r2, #112]	; 0x70
 800289c:	e02d      	b.n	80028fa <HAL_RCC_OscConfig+0x5a6>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x56c>
 80028a6:	4b8d      	ldr	r3, [pc, #564]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	4a8c      	ldr	r2, [pc, #560]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	6713      	str	r3, [r2, #112]	; 0x70
 80028b2:	4b8a      	ldr	r3, [pc, #552]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	4a89      	ldr	r2, [pc, #548]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028b8:	f023 0304 	bic.w	r3, r3, #4
 80028bc:	6713      	str	r3, [r2, #112]	; 0x70
 80028be:	e01c      	b.n	80028fa <HAL_RCC_OscConfig+0x5a6>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d10c      	bne.n	80028e2 <HAL_RCC_OscConfig+0x58e>
 80028c8:	4b84      	ldr	r3, [pc, #528]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	4a83      	ldr	r2, [pc, #524]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	6713      	str	r3, [r2, #112]	; 0x70
 80028d4:	4b81      	ldr	r3, [pc, #516]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a80      	ldr	r2, [pc, #512]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
 80028e0:	e00b      	b.n	80028fa <HAL_RCC_OscConfig+0x5a6>
 80028e2:	4b7e      	ldr	r3, [pc, #504]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a7d      	ldr	r2, [pc, #500]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
 80028ee:	4b7b      	ldr	r3, [pc, #492]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	4a7a      	ldr	r2, [pc, #488]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80028f4:	f023 0304 	bic.w	r3, r3, #4
 80028f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d015      	beq.n	800292e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7fe f849 	bl	8000998 <HAL_GetTick>
 8002906:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe f845 	bl	8000998 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e122      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002920:	4b6e      	ldr	r3, [pc, #440]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ee      	beq.n	800290a <HAL_RCC_OscConfig+0x5b6>
 800292c:	e014      	b.n	8002958 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe f833 	bl	8000998 <HAL_GetTick>
 8002932:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe f82f 	bl	8000998 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e10c      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800294c:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ee      	bne.n	8002936 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8101 	beq.w	8002b64 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002962:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800296a:	2b18      	cmp	r3, #24
 800296c:	f000 80bc 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2b02      	cmp	r3, #2
 8002976:	f040 8095 	bne.w	8002aa4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b58      	ldr	r3, [pc, #352]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe f807 	bl	8000998 <HAL_GetTick>
 800298a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298e:	f7fe f803 	bl	8000998 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0e2      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a0:	4b4e      	ldr	r3, [pc, #312]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80029ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b0:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_OscConfig+0x78c>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	430a      	orrs	r2, r1
 80029c0:	4946      	ldr	r1, [pc, #280]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	628b      	str	r3, [r1, #40]	; 0x28
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	3b01      	subs	r3, #1
 80029cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	3b01      	subs	r3, #1
 80029d6:	025b      	lsls	r3, r3, #9
 80029d8:	b29b      	uxth	r3, r3
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	3b01      	subs	r3, #1
 80029e2:	041b      	lsls	r3, r3, #16
 80029e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	3b01      	subs	r3, #1
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80029f6:	4939      	ldr	r1, [pc, #228]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80029fc:	4b37      	ldr	r3, [pc, #220]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	4a36      	ldr	r2, [pc, #216]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a08:	4b34      	ldr	r3, [pc, #208]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0c:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <HAL_RCC_OscConfig+0x790>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a14:	00d2      	lsls	r2, r2, #3
 8002a16:	4931      	ldr	r1, [pc, #196]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a1c:	4b2f      	ldr	r3, [pc, #188]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	f023 020c 	bic.w	r2, r3, #12
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	492c      	ldr	r1, [pc, #176]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	f023 0202 	bic.w	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4928      	ldr	r1, [pc, #160]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a40:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	4a25      	ldr	r2, [pc, #148]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	4a22      	ldr	r2, [pc, #136]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	4a1c      	ldr	r2, [pc, #112]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a70:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a19      	ldr	r2, [pc, #100]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fd ff8c 	bl	8000998 <HAL_GetTick>
 8002a80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fd ff88 	bl	8000998 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e067      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x730>
 8002aa2:	e05f      	b.n	8002b64 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0c      	ldr	r2, [pc, #48]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fd ff72 	bl	8000998 <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fd ff6e 	bl	8000998 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04d      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <HAL_RCC_OscConfig+0x788>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x764>
 8002ad6:	e045      	b.n	8002b64 <HAL_RCC_OscConfig+0x810>
 8002ad8:	58024800 	.word	0x58024800
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	fffffc0c 	.word	0xfffffc0c
 8002ae4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ae8:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_RCC_OscConfig+0x81c>)
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_RCC_OscConfig+0x81c>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d031      	beq.n	8002b60 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0203 	and.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d12a      	bne.n	8002b60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d122      	bne.n	8002b60 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d11a      	bne.n	8002b60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	0a5b      	lsrs	r3, r3, #9
 8002b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b36:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d111      	bne.n	8002b60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d108      	bne.n	8002b60 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	0e1b      	lsrs	r3, r3, #24
 8002b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3730      	adds	r7, #48	; 0x30
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	58024400 	.word	0x58024400

08002b74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e19c      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b8a      	ldr	r3, [pc, #552]	; (8002db4 <HAL_RCC_ClockConfig+0x240>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d910      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b87      	ldr	r3, [pc, #540]	; (8002db4 <HAL_RCC_ClockConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 020f 	bic.w	r2, r3, #15
 8002b9e:	4985      	ldr	r1, [pc, #532]	; (8002db4 <HAL_RCC_ClockConfig+0x240>)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b83      	ldr	r3, [pc, #524]	; (8002db4 <HAL_RCC_ClockConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e184      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d010      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	4b7b      	ldr	r3, [pc, #492]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d908      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bd4:	4b78      	ldr	r3, [pc, #480]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	4975      	ldr	r1, [pc, #468]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d010      	beq.n	8002c14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	4b70      	ldr	r3, [pc, #448]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d908      	bls.n	8002c14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c02:	4b6d      	ldr	r3, [pc, #436]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	496a      	ldr	r1, [pc, #424]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d010      	beq.n	8002c42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d908      	bls.n	8002c42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c30:	4b61      	ldr	r3, [pc, #388]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	495e      	ldr	r1, [pc, #376]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d010      	beq.n	8002c70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	4b59      	ldr	r3, [pc, #356]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d908      	bls.n	8002c70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c5e:	4b56      	ldr	r3, [pc, #344]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4953      	ldr	r1, [pc, #332]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	4b4d      	ldr	r3, [pc, #308]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d908      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8c:	4b4a      	ldr	r3, [pc, #296]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f023 020f 	bic.w	r2, r3, #15
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4947      	ldr	r1, [pc, #284]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d055      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002caa:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	4940      	ldr	r1, [pc, #256]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cc4:	4b3c      	ldr	r3, [pc, #240]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d121      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0f6      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cdc:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d115      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0ea      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0de      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d04:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0d6      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d14:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f023 0207 	bic.w	r2, r3, #7
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4925      	ldr	r1, [pc, #148]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d26:	f7fd fe37 	bl	8000998 <HAL_GetTick>
 8002d2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2e:	f7fd fe33 	bl	8000998 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0be      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d44:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d1eb      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d010      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d208      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f023 020f 	bic.w	r2, r3, #15
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	490e      	ldr	r1, [pc, #56]	; (8002db8 <HAL_RCC_ClockConfig+0x244>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_ClockConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d214      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_RCC_ClockConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 020f 	bic.w	r2, r3, #15
 8002d9a:	4906      	ldr	r1, [pc, #24]	; (8002db4 <HAL_RCC_ClockConfig+0x240>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <HAL_RCC_ClockConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e086      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x34e>
 8002db4:	52002000 	.word	0x52002000
 8002db8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d010      	beq.n	8002dea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d208      	bcs.n	8002dea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dd8:	4b3c      	ldr	r3, [pc, #240]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	4939      	ldr	r1, [pc, #228]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d010      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d208      	bcs.n	8002e18 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e06:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	492e      	ldr	r1, [pc, #184]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d208      	bcs.n	8002e46 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e34:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4922      	ldr	r1, [pc, #136]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d010      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d208      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4917      	ldr	r1, [pc, #92]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e74:	f000 f834 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e78:	4601      	mov	r1, r0
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <HAL_RCC_ClockConfig+0x35c>)
 8002e86:	5cd3      	ldrb	r3, [r2, r3]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8002e90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <HAL_RCC_ClockConfig+0x358>)
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <HAL_RCC_ClockConfig+0x35c>)
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <HAL_RCC_ClockConfig+0x360>)
 8002eaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002eac:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <HAL_RCC_ClockConfig+0x364>)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_RCC_ClockConfig+0x368>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fd24 	bl	8000904 <HAL_InitTick>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	58024400 	.word	0x58024400
 8002ed0:	08003798 	.word	0x08003798
 8002ed4:	20000004 	.word	0x20000004
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	20000008 	.word	0x20000008

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee6:	4baf      	ldr	r3, [pc, #700]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eee:	2b18      	cmp	r3, #24
 8002ef0:	f200 814e 	bhi.w	8003190 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002ef4:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f61 	.word	0x08002f61
 8002f00:	08003191 	.word	0x08003191
 8002f04:	08003191 	.word	0x08003191
 8002f08:	08003191 	.word	0x08003191
 8002f0c:	08003191 	.word	0x08003191
 8002f10:	08003191 	.word	0x08003191
 8002f14:	08003191 	.word	0x08003191
 8002f18:	08003191 	.word	0x08003191
 8002f1c:	08002f87 	.word	0x08002f87
 8002f20:	08003191 	.word	0x08003191
 8002f24:	08003191 	.word	0x08003191
 8002f28:	08003191 	.word	0x08003191
 8002f2c:	08003191 	.word	0x08003191
 8002f30:	08003191 	.word	0x08003191
 8002f34:	08003191 	.word	0x08003191
 8002f38:	08003191 	.word	0x08003191
 8002f3c:	08002f8d 	.word	0x08002f8d
 8002f40:	08003191 	.word	0x08003191
 8002f44:	08003191 	.word	0x08003191
 8002f48:	08003191 	.word	0x08003191
 8002f4c:	08003191 	.word	0x08003191
 8002f50:	08003191 	.word	0x08003191
 8002f54:	08003191 	.word	0x08003191
 8002f58:	08003191 	.word	0x08003191
 8002f5c:	08002f93 	.word	0x08002f93
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f60:	4b90      	ldr	r3, [pc, #576]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f6c:	4b8d      	ldr	r3, [pc, #564]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	08db      	lsrs	r3, r3, #3
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	4a8c      	ldr	r2, [pc, #560]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002f7e:	e10a      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f80:	4b89      	ldr	r3, [pc, #548]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002f82:	61bb      	str	r3, [r7, #24]
    break;
 8002f84:	e107      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002f86:	4b89      	ldr	r3, [pc, #548]	; (80031ac <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002f88:	61bb      	str	r3, [r7, #24]
    break;
 8002f8a:	e104      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002f8c:	4b88      	ldr	r3, [pc, #544]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002f8e:	61bb      	str	r3, [r7, #24]
    break;
 8002f90:	e101      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f92:	4b84      	ldr	r3, [pc, #528]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002f9c:	4b81      	ldr	r3, [pc, #516]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fa8:	4b7e      	ldr	r3, [pc, #504]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002fb2:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	08db      	lsrs	r3, r3, #3
 8002fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	ee07 3a90 	vmov	s15, r3
 8002fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80da 	beq.w	800318a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d05a      	beq.n	8003092 <HAL_RCC_GetSysClockFreq+0x1b2>
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d302      	bcc.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x106>
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d078      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002fe4:	e099      	b.n	800311a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fe6:	4b6f      	ldr	r3, [pc, #444]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d02d      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ff2:	4b6c      	ldr	r3, [pc, #432]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	08db      	lsrs	r3, r3, #3
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	4a6a      	ldr	r2, [pc, #424]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8003002:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301c:	4b61      	ldr	r3, [pc, #388]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003030:	eddf 5a60 	vldr	s11, [pc, #384]	; 80031b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003048:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800304c:	e087      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003058:	eddf 6a57 	vldr	s13, [pc, #348]	; 80031b8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800305c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003068:	ee07 3a90 	vmov	s15, r3
 800306c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003070:	ed97 6a02 	vldr	s12, [r7, #8]
 8003074:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80031b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800307c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003090:	e065      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309c:	eddf 6a47 	vldr	s13, [pc, #284]	; 80031bc <HAL_RCC_GetSysClockFreq+0x2dc>
 80030a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a4:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ac:	ee07 3a90 	vmov	s15, r3
 80030b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80031b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80030bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030d4:	e043      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80031c0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80030e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e8:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f0:	ee07 3a90 	vmov	s15, r3
 80030f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80030fc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80031b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800310c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003114:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003118:	e021      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003124:	eddf 6a25 	vldr	s13, [pc, #148]	; 80031bc <HAL_RCC_GetSysClockFreq+0x2dc>
 8003128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003134:	ee07 3a90 	vmov	s15, r3
 8003138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800313c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003140:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80031b4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800314c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003158:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800315c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	0a5b      	lsrs	r3, r3, #9
 8003164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003168:	3301      	adds	r3, #1
 800316a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003176:	edd7 6a07 	vldr	s13, [r7, #28]
 800317a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800317e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003182:	ee17 3a90 	vmov	r3, s15
 8003186:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003188:	e005      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
    break;
 800318e:	e002      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003192:	61bb      	str	r3, [r7, #24]
    break;
 8003194:	bf00      	nop
  }

  return sysclockfreq;
 8003196:	69bb      	ldr	r3, [r7, #24]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3724      	adds	r7, #36	; 0x24
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	58024400 	.word	0x58024400
 80031a8:	03d09000 	.word	0x03d09000
 80031ac:	003d0900 	.word	0x003d0900
 80031b0:	017d7840 	.word	0x017d7840
 80031b4:	46000000 	.word	0x46000000
 80031b8:	4c742400 	.word	0x4c742400
 80031bc:	4a742400 	.word	0x4a742400
 80031c0:	4bbebc20 	.word	0x4bbebc20

080031c4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80031dc:	6a3a      	ldr	r2, [r7, #32]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80031f6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3330      	adds	r3, #48	; 0x30
 80031fe:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d113      	bne.n	8003232 <HAL_SPI_IRQHandler+0x6e>
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10e      	bne.n	8003232 <HAL_SPI_IRQHandler+0x6e>
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
    hspi->RxISR(hspi);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
    handled = 1UL;
 800322e:	2301      	movs	r3, #1
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10f      	bne.n	800325c <HAL_SPI_IRQHandler+0x98>
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_SPI_IRQHandler+0x98>
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
    handled = 1UL;
 8003258:	2301      	movs	r3, #1
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10f      	bne.n	8003286 <HAL_SPI_IRQHandler+0xc2>
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_SPI_IRQHandler+0xc2>
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
    handled = 1UL;
 8003282:	2301      	movs	r3, #1
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 8170 	bne.w	800356e <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80a0 	beq.w	80033da <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699a      	ldr	r2, [r3, #24]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0208 	orr.w	r2, r2, #8
 80032a8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0210 	orr.w	r2, r2, #16
 80032b8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0208 	bic.w	r2, r2, #8
 80032d8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00f      	beq.n	8003304 <HAL_SPI_IRQHandler+0x140>
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d004      	beq.n	80032f4 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <HAL_SPI_IRQHandler+0x140>
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d059      	beq.n	80033ae <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d154      	bne.n	80033ae <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d13d      	bne.n	800338e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8003312:	e036      	b.n	8003382 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b0f      	cmp	r3, #15
 800331a:	d90b      	bls.n	8003334 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003324:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003326:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800332c:	1d1a      	adds	r2, r3, #4
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	665a      	str	r2, [r3, #100]	; 0x64
 8003332:	e01d      	b.n	8003370 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b07      	cmp	r3, #7
 800333a:	d90b      	bls.n	8003354 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	8812      	ldrh	r2, [r2, #0]
 8003344:	b292      	uxth	r2, r2
 8003346:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334c:	1c9a      	adds	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	665a      	str	r2, [r3, #100]	; 0x64
 8003352:	e00d      	b.n	8003370 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003360:	7812      	ldrb	r2, [r2, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1c2      	bne.n	8003314 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f932 	bl	80035f8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f902 	bl	80035b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80033ac:	e0e4      	b.n	8003578 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80033ae:	7cfb      	ldrb	r3, [r7, #19]
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	d103      	bne.n	80033bc <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f8f1 	bl	800359c <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 80033ba:	e0da      	b.n	8003572 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d103      	bne.n	80033ca <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8e0 	bl	8003588 <HAL_SPI_RxCpltCallback>
    return;
 80033c8:	e0d3      	b.n	8003572 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	f040 80d0 	bne.w	8003572 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd f884 	bl	80004e0 <HAL_SPI_TxCpltCallback>
    return;
 80033d8:	e0cb      	b.n	8003572 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <HAL_SPI_IRQHandler+0x23c>
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fc:	619a      	str	r2, [r3, #24]

    return;
 80033fe:	e0bb      	b.n	8003578 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80b6 	beq.w	8003578 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00f      	beq.n	8003436 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341c:	f043 0204 	orr.w	r2, r3, #4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699a      	ldr	r2, [r3, #24]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003434:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00f      	beq.n	8003460 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00f      	beq.n	800348a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003470:	f043 0208 	orr.w	r2, r3, #8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699a      	ldr	r2, [r3, #24]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003488:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00f      	beq.n	80034b4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0220 	orr.w	r2, r2, #32
 80034b2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d05b      	beq.n	8003576 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6919      	ldr	r1, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b29      	ldr	r3, [pc, #164]	; (8003580 <HAL_SPI_IRQHandler+0x3bc>)
 80034da:	400b      	ands	r3, r1
 80034dc:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034e8:	d138      	bne.n	800355c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80034f8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d013      	beq.n	800352a <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003506:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <HAL_SPI_IRQHandler+0x3c0>)
 8003508:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd fb60 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003520:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800352e:	2b00      	cmp	r3, #0
 8003530:	d021      	beq.n	8003576 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003536:	4a13      	ldr	r2, [pc, #76]	; (8003584 <HAL_SPI_IRQHandler+0x3c0>)
 8003538:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fb48 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d015      	beq.n	8003576 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003550:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800355a:	e00c      	b.n	8003576 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f823 	bl	80035b0 <HAL_SPI_ErrorCallback>
    return;
 800356a:	bf00      	nop
 800356c:	e003      	b.n	8003576 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8003576:	bf00      	nop
  }
}
 8003578:	3728      	adds	r7, #40	; 0x28
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	fffffc94 	.word	0xfffffc94
 8003584:	080035c5 	.word	0x080035c5

08003588 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f7ff ffe0 	bl	80035b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0208 	orr.w	r2, r2, #8
 8003616:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0210 	orr.w	r2, r2, #16
 8003626:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6919      	ldr	r1, [r3, #16]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4b3c      	ldr	r3, [pc, #240]	; (8003734 <SPI_CloseTransfer+0x13c>)
 8003644:	400b      	ands	r3, r1
 8003646:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003656:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b04      	cmp	r3, #4
 8003662:	d014      	beq.n	800368e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00f      	beq.n	800368e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003674:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0220 	orr.w	r2, r2, #32
 800368c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b03      	cmp	r3, #3
 8003698:	d014      	beq.n	80036c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00f      	beq.n	80036c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036aa:	f043 0204 	orr.w	r2, r3, #4
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00f      	beq.n	80036ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00f      	beq.n	8003718 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fe:	f043 0208 	orr.w	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003716:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	fffffc90 	.word	0xfffffc90

08003738 <__libc_init_array>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	4e0d      	ldr	r6, [pc, #52]	; (8003770 <__libc_init_array+0x38>)
 800373c:	4c0d      	ldr	r4, [pc, #52]	; (8003774 <__libc_init_array+0x3c>)
 800373e:	1ba4      	subs	r4, r4, r6
 8003740:	10a4      	asrs	r4, r4, #2
 8003742:	2500      	movs	r5, #0
 8003744:	42a5      	cmp	r5, r4
 8003746:	d109      	bne.n	800375c <__libc_init_array+0x24>
 8003748:	4e0b      	ldr	r6, [pc, #44]	; (8003778 <__libc_init_array+0x40>)
 800374a:	4c0c      	ldr	r4, [pc, #48]	; (800377c <__libc_init_array+0x44>)
 800374c:	f000 f818 	bl	8003780 <_init>
 8003750:	1ba4      	subs	r4, r4, r6
 8003752:	10a4      	asrs	r4, r4, #2
 8003754:	2500      	movs	r5, #0
 8003756:	42a5      	cmp	r5, r4
 8003758:	d105      	bne.n	8003766 <__libc_init_array+0x2e>
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003760:	4798      	blx	r3
 8003762:	3501      	adds	r5, #1
 8003764:	e7ee      	b.n	8003744 <__libc_init_array+0xc>
 8003766:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800376a:	4798      	blx	r3
 800376c:	3501      	adds	r5, #1
 800376e:	e7f2      	b.n	8003756 <__libc_init_array+0x1e>
 8003770:	080037a8 	.word	0x080037a8
 8003774:	080037a8 	.word	0x080037a8
 8003778:	080037a8 	.word	0x080037a8
 800377c:	080037ac 	.word	0x080037ac

08003780 <_init>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	bf00      	nop
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr

0800378c <_fini>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	bf00      	nop
 8003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003792:	bc08      	pop	{r3}
 8003794:	469e      	mov	lr, r3
 8003796:	4770      	bx	lr
