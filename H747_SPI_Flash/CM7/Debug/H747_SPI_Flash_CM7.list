
H747_SPI_Flash_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007628  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f0  080079f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f8  080079f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08007a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  24000074  08007a74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400018c  08007a74  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfa1  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003306  00000000  00000000  0003d043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00040350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00041198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fd5c  00000000  00000000  00041ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011288  00000000  00000000  00081c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00197649  00000000  00000000  00092ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022a515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004294  00000000  00000000  0022a568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080078b0 	.word	0x080078b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	080078b0 	.word	0x080078b0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <__io_putchar>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_UART8_Init(void);

int __io_putchar (int ch) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, HAL_MAX_DELAY);
 80007ba:	f107 010f 	add.w	r1, r7, #15
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	2201      	movs	r2, #1
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <__io_putchar+0x28>)
 80007c6:	f005 f80f 	bl	80057e8 <HAL_UART_Transmit>
	return ch;
 80007ca:	687b      	ldr	r3, [r7, #4]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2400009c 	.word	0x2400009c

080007d8 <main>:

int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
	int32_t timeout;

	timeout = 0xFFFF;
 80007e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e6:	f241 020c 	movw	r2, #4108	; 0x100c
 80007ea:	443a      	add	r2, r7
 80007ec:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007ee:	bf00      	nop
 80007f0:	4b79      	ldr	r3, [pc, #484]	; (80009d8 <main+0x200>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00a      	beq.n	8000812 <main+0x3a>
 80007fc:	f241 030c 	movw	r3, #4108	; 0x100c
 8000800:	443b      	add	r3, r7
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	1e5a      	subs	r2, r3, #1
 8000806:	f241 010c 	movw	r1, #4108	; 0x100c
 800080a:	4439      	add	r1, r7
 800080c:	600a      	str	r2, [r1, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	dcee      	bgt.n	80007f0 <main+0x18>
	if ( timeout < 0 )
 8000812:	f241 030c 	movw	r3, #4108	; 0x100c
 8000816:	443b      	add	r3, r7
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	da01      	bge.n	8000822 <main+0x4a>
	{
		Error_Handler();
 800081e:	f000 fa8d 	bl	8000d3c <Error_Handler>
	}

	HAL_Init();
 8000822:	f000 ffe7 	bl	80017f4 <HAL_Init>

	SystemClock_Config();
 8000826:	f000 f8e9 	bl	80009fc <SystemClock_Config>

	__HAL_RCC_HSEM_CLK_ENABLE();
 800082a:	4b6b      	ldr	r3, [pc, #428]	; (80009d8 <main+0x200>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	4a69      	ldr	r2, [pc, #420]	; (80009d8 <main+0x200>)
 8000832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083a:	4b67      	ldr	r3, [pc, #412]	; (80009d8 <main+0x200>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000840:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000844:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x204>)
 8000846:	f241 0110 	movw	r1, #4112	; 0x1010
 800084a:	4439      	add	r1, r7
 800084c:	440b      	add	r3, r1
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	4b62      	ldr	r3, [pc, #392]	; (80009dc <main+0x204>)
 8000852:	f241 0210 	movw	r2, #4112	; 0x1010
 8000856:	443a      	add	r2, r7
 8000858:	4413      	add	r3, r2
 800085a:	681b      	ldr	r3, [r3, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800085c:	2000      	movs	r0, #0
 800085e:	f001 fc29 	bl	80020b4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f001 fc3f 	bl	80020e8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800086a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086e:	f241 020c 	movw	r2, #4108	; 0x100c
 8000872:	443a      	add	r2, r7
 8000874:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000876:	bf00      	nop
 8000878:	4b57      	ldr	r3, [pc, #348]	; (80009d8 <main+0x200>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10a      	bne.n	800089a <main+0xc2>
 8000884:	f241 030c 	movw	r3, #4108	; 0x100c
 8000888:	443b      	add	r3, r7
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1e5a      	subs	r2, r3, #1
 800088e:	f241 010c 	movw	r1, #4108	; 0x100c
 8000892:	4439      	add	r1, r7
 8000894:	600a      	str	r2, [r1, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	dcee      	bgt.n	8000878 <main+0xa0>
	if ( timeout < 0 )
 800089a:	f241 030c 	movw	r3, #4108	; 0x100c
 800089e:	443b      	add	r3, r7
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	da01      	bge.n	80008aa <main+0xd2>
	{
		Error_Handler();
 80008a6:	f000 fa49 	bl	8000d3c <Error_Handler>
	}

	MX_GPIO_Init();
 80008aa:	f000 f9f1 	bl	8000c90 <MX_GPIO_Init>
	MX_QUADSPI_Init();
 80008ae:	f000 fa4d 	bl	8000d4c <MX_QUADSPI_Init>
	MX_UART8_Init();
 80008b2:	f000 f9a1 	bl	8000bf8 <MX_UART8_Init>

	uint8_t buffer_test[MEMORY_SECTOR_SIZE];
    uint32_t var = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f241 0208 	movw	r2, #4104	; 0x1008
 80008bc:	443a      	add	r2, r7
 80008be:	6013      	str	r3, [r2, #0]

    printf("OKKKKK\r\n");
 80008c0:	4847      	ldr	r0, [pc, #284]	; (80009e0 <main+0x208>)
 80008c2:	f006 f8af 	bl	8006a24 <puts>

  	//CSP_QUADSPI_Init();

  	if (CSP_QUADSPI_Init() == HAL_OK)
 80008c6:	f000 fb99 	bl	8000ffc <CSP_QUADSPI_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <main+0xfe>
	{
  		printf("==Init Success==\r\n");
 80008d0:	4844      	ldr	r0, [pc, #272]	; (80009e4 <main+0x20c>)
 80008d2:	f006 f8a7 	bl	8006a24 <puts>
	}

  	for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	f241 0208 	movw	r2, #4104	; 0x1008
 80008dc:	443a      	add	r2, r7
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	e014      	b.n	800090c <main+0x134>
  		//buffer_test[var] = (var & 0xff);
  		buffer_test[var] = 15;
 80008e2:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <main+0x210>)
 80008e4:	f241 0210 	movw	r2, #4112	; 0x1010
 80008e8:	443a      	add	r2, r7
 80008ea:	4413      	add	r3, r2
 80008ec:	f241 0208 	movw	r2, #4104	; 0x1008
 80008f0:	443a      	add	r2, r7
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	4413      	add	r3, r2
 80008f6:	220f      	movs	r2, #15
 80008f8:	701a      	strb	r2, [r3, #0]
  	for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
 80008fa:	f241 0308 	movw	r3, #4104	; 0x1008
 80008fe:	443b      	add	r3, r7
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	f241 0208 	movw	r2, #4104	; 0x1008
 8000908:	443a      	add	r2, r7
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	f241 0308 	movw	r3, #4104	; 0x1008
 8000910:	443b      	add	r3, r7
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000918:	d3e3      	bcc.n	80008e2 <main+0x10a>
  	}

  	for (var = 0; var < SECTORS_COUNT; var++) {
 800091a:	2300      	movs	r3, #0
 800091c:	f241 0208 	movw	r2, #4104	; 0x1008
 8000920:	443a      	add	r2, r7
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	e01e      	b.n	8000964 <main+0x18c>
  		if (CSP_QSPI_WriteMemory(buffer_test, var * MEMORY_SECTOR_SIZE, sizeof(buffer_test)) != HAL_OK) {
 8000926:	f241 0308 	movw	r3, #4104	; 0x1008
 800092a:	443b      	add	r3, r7
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	0319      	lsls	r1, r3, #12
 8000930:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <main+0x210>)
 8000932:	f241 0210 	movw	r2, #4112	; 0x1010
 8000936:	443a      	add	r2, r7
 8000938:	4413      	add	r3, r2
 800093a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fcb8 	bl	80012b4 <CSP_QSPI_WriteMemory>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <main+0x17a>
  			printf("==False 2==\r\n");
 800094a:	4828      	ldr	r0, [pc, #160]	; (80009ec <main+0x214>)
 800094c:	f006 f86a 	bl	8006a24 <puts>
  			while (1);
 8000950:	e7fe      	b.n	8000950 <main+0x178>
  	for (var = 0; var < SECTORS_COUNT; var++) {
 8000952:	f241 0308 	movw	r3, #4104	; 0x1008
 8000956:	443b      	add	r3, r7
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	f241 0208 	movw	r2, #4104	; 0x1008
 8000960:	443a      	add	r2, r7
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	f241 0308 	movw	r3, #4104	; 0x1008
 8000968:	443b      	add	r3, r7
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b63      	cmp	r3, #99	; 0x63
 800096e:	d9da      	bls.n	8000926 <main+0x14e>
  		}
  	}

  	if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000970:	f000 fd2c 	bl	80013cc <CSP_QSPI_EnableMemoryMappedMode>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <main+0x1aa>
  		printf("==False 3==\r\n");
 800097a:	481d      	ldr	r0, [pc, #116]	; (80009f0 <main+0x218>)
 800097c:	f006 f852 	bl	8006a24 <puts>
  		while (1);
 8000980:	e7fe      	b.n	8000980 <main+0x1a8>
//  			printf("==False 4==\r\n");
//  			while (1);
//  		}
//  	}

  	for (var = 0; var < SECTORS_COUNT; var++) {
 8000982:	2300      	movs	r3, #0
 8000984:	f241 0208 	movw	r2, #4104	; 0x1008
 8000988:	443a      	add	r2, r7
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e016      	b.n	80009bc <main+0x1e4>
  			printf("==Value %d==\r\n",*(((uint8_t*)(0x90000000 + var * MEMORY_SECTOR_SIZE)) + var));
 800098e:	f241 0308 	movw	r3, #4104	; 0x1008
 8000992:	443b      	add	r3, r7
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4613      	mov	r3, r2
 8000998:	031b      	lsls	r3, r3, #12
 800099a:	4413      	add	r3, r2
 800099c:	f103 4310 	add.w	r3, r3, #2415919104	; 0x90000000
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	4619      	mov	r1, r3
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <main+0x21c>)
 80009a6:	f005 ffb7 	bl	8006918 <iprintf>
  	for (var = 0; var < SECTORS_COUNT; var++) {
 80009aa:	f241 0308 	movw	r3, #4104	; 0x1008
 80009ae:	443b      	add	r3, r7
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	f241 0208 	movw	r2, #4104	; 0x1008
 80009b8:	443a      	add	r2, r7
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	f241 0308 	movw	r3, #4104	; 0x1008
 80009c0:	443b      	add	r3, r7
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b63      	cmp	r3, #99	; 0x63
 80009c6:	d9e2      	bls.n	800098e <main+0x1b6>
  	}

	while (1)
	{
		printf("DHCP IP\r\n");
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <main+0x220>)
 80009ca:	f006 f82b 	bl	8006a24 <puts>
		HAL_Delay(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d2:	f000 ffa1 	bl	8001918 <HAL_Delay>
		printf("DHCP IP\r\n");
 80009d6:	e7f7      	b.n	80009c8 <main+0x1f0>
 80009d8:	58024400 	.word	0x58024400
 80009dc:	ffffeff4 	.word	0xffffeff4
 80009e0:	080078c8 	.word	0x080078c8
 80009e4:	080078d0 	.word	0x080078d0
 80009e8:	ffffeff8 	.word	0xffffeff8
 80009ec:	080078e4 	.word	0x080078e4
 80009f0:	080078f4 	.word	0x080078f4
 80009f4:	08007904 	.word	0x08007904
 80009f8:	08007914 	.word	0x08007914

080009fc <SystemClock_Config>:
//    Error_Handler();
//  }
//}

void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0cc      	sub	sp, #304	; 0x130
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a06:	224c      	movs	r2, #76	; 0x4c
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f005 ff7c 	bl	8006908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a14:	2220      	movs	r2, #32
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f005 ff75 	bl	8006908 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4618      	mov	r0, r3
 8000a22:	23c0      	movs	r3, #192	; 0xc0
 8000a24:	461a      	mov	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f005 ff6e 	bl	8006908 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a2c:	2004      	movs	r0, #4
 8000a2e:	f001 fb97 	bl	8002160 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	4b6b      	ldr	r3, [pc, #428]	; (8000be8 <SystemClock_Config+0x1ec>)
 8000a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3c:	4a6a      	ldr	r2, [pc, #424]	; (8000be8 <SystemClock_Config+0x1ec>)
 8000a3e:	f023 0301 	bic.w	r3, r3, #1
 8000a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a44:	4b68      	ldr	r3, [pc, #416]	; (8000be8 <SystemClock_Config+0x1ec>)
 8000a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a48:	f003 0201 	and.w	r2, r3, #1
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	4b66      	ldr	r3, [pc, #408]	; (8000bec <SystemClock_Config+0x1f0>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a65      	ldr	r2, [pc, #404]	; (8000bec <SystemClock_Config+0x1f0>)
 8000a56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b63      	ldr	r3, [pc, #396]	; (8000bec <SystemClock_Config+0x1f0>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a64:	463b      	mov	r3, r7
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	463b      	mov	r3, r7
 8000a6a:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a6c:	bf00      	nop
 8000a6e:	4b5f      	ldr	r3, [pc, #380]	; (8000bec <SystemClock_Config+0x1f0>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a7a:	d1f8      	bne.n	8000a6e <SystemClock_Config+0x72>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000a7c:	4b5c      	ldr	r3, [pc, #368]	; (8000bf0 <SystemClock_Config+0x1f4>)
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a80:	4a5b      	ldr	r2, [pc, #364]	; (8000bf0 <SystemClock_Config+0x1f4>)
 8000a82:	f023 0303 	bic.w	r3, r3, #3
 8000a86:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a88:	230a      	movs	r3, #10
 8000a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2340      	movs	r3, #64	; 0x40
 8000a96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000aac:	2320      	movs	r3, #32
 8000aae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000ab2:	2381      	movs	r3, #129	; 0x81
 8000ab4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000aca:	2304      	movs	r3, #4
 8000acc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fa99 	bl	8003018 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000aec:	f000 f926 	bl	8000d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	233f      	movs	r3, #63	; 0x3f
 8000af2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 fe86 	bl	8003838 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000b32:	f000 f903 	bl	8000d3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4a2e      	ldr	r2, [pc, #184]	; (8000bf4 <SystemClock_Config+0x1f8>)
 8000b3a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPDIFRX
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CEC
                              |RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2220      	movs	r2, #32
 8000b40:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2281      	movs	r2, #129	; 0x81
 8000b46:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2202      	movs	r2, #2
 8000b52:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2202      	movs	r2, #2
 8000b58:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2240      	movs	r2, #64	; 0x40
 8000b5e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2200      	movs	r2, #0
 8000b76:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	665a      	str	r2, [r3, #100]	; 0x64
  PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2200      	movs	r2, #0
 8000b94:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 fa2f 	bl	8004024 <HAL_RCCEx_PeriphCLKConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x1d4>
  {
    Error_Handler();
 8000bcc:	f000 f8b6 	bl	8000d3c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000bd0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f002 ffe4 	bl	8003ba4 <HAL_RCC_MCOConfig>
}
 8000bdc:	bf00      	nop
 8000bde:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	58000400 	.word	0x58000400
 8000bec:	58024800 	.word	0x58024800
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	0bc93103 	.word	0x0bc93103

08000bf8 <MX_UART8_Init>:

static void MX_UART8_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  huart8.Instance = UART8;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_UART8_Init+0x90>)
 8000bfe:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <MX_UART8_Init+0x94>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000c40:	4811      	ldr	r0, [pc, #68]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c42:	f004 fd81 	bl	8005748 <HAL_UART_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000c4c:	f000 f876 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c54:	f005 fd64 	bl	8006720 <HAL_UARTEx_SetTxFifoThreshold>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000c5e:	f000 f86d 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4808      	ldr	r0, [pc, #32]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c66:	f005 fd99 	bl	800679c <HAL_UARTEx_SetRxFifoThreshold>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000c70:	f000 f864 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_UART8_Init+0x90>)
 8000c76:	f005 fd1a 	bl	80066ae <HAL_UARTEx_DisableFifoMode>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000c80:	f000 f85c 	bl	8000d3c <Error_Handler>
  }
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2400009c 	.word	0x2400009c
 8000c8c:	40007c00 	.word	0x40007c00

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b087      	sub	sp, #28
 8000c94:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	4a26      	ldr	r2, [pc, #152]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000cbc:	f043 0320 	orr.w	r3, r3, #32
 8000cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	f003 0320 	and.w	r3, r3, #32
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_GPIO_Init+0xa8>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]

}
 8000d2c:	bf00      	nop
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	58024400 	.word	0x58024400

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <MX_QUADSPI_Init>:

volatile uint8_t rx_complete = 0;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	hqspi.Instance = QUADSPI;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_QUADSPI_Init+0x50>)
 8000d52:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <MX_QUADSPI_Init+0x54>)
 8000d54:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 2;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_QUADSPI_Init+0x50>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_QUADSPI_Init+0x50>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_QUADSPI_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 25;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_QUADSPI_Init+0x50>)
 8000d6a:	2219      	movs	r2, #25
 8000d6c:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_QUADSPI_Init+0x50>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_QUADSPI_Init+0x50>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_QUADSPI_Init+0x50>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_QUADSPI_Init+0x50>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_QUADSPI_Init+0x50>)
 8000d88:	f001 fa44 	bl	8002214 <HAL_QSPI_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_QUADSPI_Init+0x4a>
	{
	  Error_Handler();
 8000d92:	f7ff ffd3 	bl	8000d3c <Error_Handler>
	}
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2400012c 	.word	0x2400012c
 8000da0:	52005000 	.word	0x52005000

08000da4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a6a      	ldr	r2, [pc, #424]	; (8000f6c <HAL_QSPI_MspInit+0x1c8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f040 80cd 	bne.w	8000f62 <HAL_QSPI_MspInit+0x1be>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000dc8:	4b69      	ldr	r3, [pc, #420]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000dca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000dce:	4a68      	ldr	r2, [pc, #416]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000dd8:	4b65      	ldr	r3, [pc, #404]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000dda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	623b      	str	r3, [r7, #32]
 8000de4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de6:	4b62      	ldr	r3, [pc, #392]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	4a60      	ldr	r2, [pc, #384]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df6:	4b5e      	ldr	r3, [pc, #376]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e04:	4b5a      	ldr	r3, [pc, #360]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	4a59      	ldr	r2, [pc, #356]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e0c:	f043 0320 	orr.w	r3, r3, #32
 8000e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e14:	4b56      	ldr	r3, [pc, #344]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	f003 0320 	and.w	r3, r3, #32
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e22:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	4a51      	ldr	r2, [pc, #324]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e32:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	4a4a      	ldr	r2, [pc, #296]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e50:	4b47      	ldr	r3, [pc, #284]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	4b44      	ldr	r3, [pc, #272]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	4a42      	ldr	r2, [pc, #264]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6e:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <HAL_QSPI_MspInit+0x1cc>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8000e7c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e8e:	2309      	movs	r3, #9
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	4836      	ldr	r0, [pc, #216]	; (8000f74 <HAL_QSPI_MspInit+0x1d0>)
 8000e9a:	f000 fe51 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000e9e:	2340      	movs	r3, #64	; 0x40
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000eae:	230a      	movs	r3, #10
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	482e      	ldr	r0, [pc, #184]	; (8000f74 <HAL_QSPI_MspInit+0x1d0>)
 8000eba:	f000 fe41 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8000ebe:	23c0      	movs	r3, #192	; 0xc0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ece:	2309      	movs	r3, #9
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4827      	ldr	r0, [pc, #156]	; (8000f78 <HAL_QSPI_MspInit+0x1d4>)
 8000eda:	f000 fe31 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8000ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481f      	ldr	r0, [pc, #124]	; (8000f78 <HAL_QSPI_MspInit+0x1d4>)
 8000efc:	f000 fe20 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8000f00:	230c      	movs	r3, #12
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f10:	2309      	movs	r3, #9
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4818      	ldr	r0, [pc, #96]	; (8000f7c <HAL_QSPI_MspInit+0x1d8>)
 8000f1c:	f000 fe10 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000f20:	2304      	movs	r3, #4
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f30:	2309      	movs	r3, #9
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4811      	ldr	r0, [pc, #68]	; (8000f80 <HAL_QSPI_MspInit+0x1dc>)
 8000f3c:	f000 fe00 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8000f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f52:	2309      	movs	r3, #9
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <HAL_QSPI_MspInit+0x1e0>)
 8000f5e:	f000 fdef 	bl	8001b40 <HAL_GPIO_Init>

  }
}
 8000f62:	bf00      	nop
 8000f64:	3738      	adds	r7, #56	; 0x38
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	52005000 	.word	0x52005000
 8000f70:	58024400 	.word	0x58024400
 8000f74:	58021800 	.word	0x58021800
 8000f78:	58021400 	.word	0x58021400
 8000f7c:	58021c00 	.word	0x58021c00
 8000f80:	58020400 	.word	0x58020400
 8000f84:	58020c00 	.word	0x58020c00

08000f88 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <HAL_QSPI_MspDeInit+0x58>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d11e      	bne.n	8000fd8 <HAL_QSPI_MspDeInit+0x50>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_QSPI_MspDeInit+0x5c>)
 8000f9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fa0:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_QSPI_MspDeInit+0x5c>)
 8000fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fa6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOG, QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin|QSPI_BK1_NCS_Pin);
 8000faa:	f244 2140 	movw	r1, #16960	; 0x4240
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <HAL_QSPI_MspDeInit+0x60>)
 8000fb0:	f000 ff76 	bl	8001ea0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin|QSPI_BK1_IO1_Pin);
 8000fb4:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <HAL_QSPI_MspDeInit+0x64>)
 8000fba:	f000 ff71 	bl	8001ea0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin);
 8000fbe:	210c      	movs	r1, #12
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <HAL_QSPI_MspDeInit+0x68>)
 8000fc2:	f000 ff6d 	bl	8001ea0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_CLK_GPIO_Port, QSPI_CLK_Pin);
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <HAL_QSPI_MspDeInit+0x6c>)
 8000fca:	f000 ff69 	bl	8001ea0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_BK1_IO0_GPIO_Port, QSPI_BK1_IO0_Pin);
 8000fce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <HAL_QSPI_MspDeInit+0x70>)
 8000fd4:	f000 ff64 	bl	8001ea0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	52005000 	.word	0x52005000
 8000fe4:	58024400 	.word	0x58024400
 8000fe8:	58021800 	.word	0x58021800
 8000fec:	58021400 	.word	0x58021400
 8000ff0:	58021c00 	.word	0x58021c00
 8000ff4:	58020400 	.word	0x58020400
 8000ff8:	58020c00 	.word	0x58020c00

08000ffc <CSP_QUADSPI_Init>:

uint8_t CSP_QUADSPI_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8001000:	4815      	ldr	r0, [pc, #84]	; (8001058 <CSP_QUADSPI_Init+0x5c>)
 8001002:	f001 f97b 	bl	80022fc <HAL_QSPI_DeInit>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <CSP_QUADSPI_Init+0x14>
		return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e021      	b.n	8001054 <CSP_QUADSPI_Init+0x58>
	}

	MX_QUADSPI_Init();
 8001010:	f7ff fe9c 	bl	8000d4c <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 8001014:	f000 fa0e 	bl	8001434 <QSPI_ResetChip>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <CSP_QUADSPI_Init+0x26>
		return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e018      	b.n	8001054 <CSP_QUADSPI_Init+0x58>
	}

	HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f000 fc78 	bl	8001918 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001028:	f000 f818 	bl	800105c <QSPI_AutoPollingMemReady>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <CSP_QUADSPI_Init+0x3a>
		return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <CSP_QUADSPI_Init+0x58>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 8001036:	f000 f849 	bl	80010cc <QSPI_WriteEnable>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <CSP_QUADSPI_Init+0x48>
		return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e007      	b.n	8001054 <CSP_QUADSPI_Init+0x58>

	}

	if (QSPI_Configuration() != HAL_OK) {
 8001044:	f000 f88c 	bl	8001160 <QSPI_Configuration>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <CSP_QUADSPI_Init+0x56>
		return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <CSP_QUADSPI_Init+0x58>
	}

	return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2400012c 	.word	0x2400012c

0800105c <QSPI_AutoPollingMemReady>:
			}

	return HAL_OK;
}

uint8_t QSPI_AutoPollingMemReady(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	 QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8001068:	2305      	movs	r3, #5
 800106a:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001078:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001082:	2300      	movs	r3, #0
 8001084:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001086:	2300      	movs	r3, #0
 8001088:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x01;
 800108e:	2301      	movs	r3, #1
 8001090:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 800109a:	2310      	movs	r3, #16
 800109c:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800109e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a2:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80010a4:	463a      	mov	r2, r7
 80010a6:	f107 0118 	add.w	r1, r7, #24
 80010aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <QSPI_AutoPollingMemReady+0x6c>)
 80010b0:	f001 fc8b 	bl	80029ca <HAL_QSPI_AutoPolling>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3750      	adds	r7, #80	; 0x50
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2400012c 	.word	0x2400012c

080010cc <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	; 0x50
 80010d0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = WRITE_ENABLE_CMD;
 80010d8:	2306      	movs	r3, #6
 80010da:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80010f0:	2300      	movs	r3, #0
 80010f2:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80010f4:	2300      	movs	r3, #0
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001100:	4619      	mov	r1, r3
 8001102:	4816      	ldr	r0, [pc, #88]	; (800115c <QSPI_WriteEnable+0x90>)
 8001104:	f001 fad4 	bl	80026b0 <HAL_QSPI_Command>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e01f      	b.n	8001152 <QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8001112:	2302      	movs	r3, #2
 8001114:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8001116:	2302      	movs	r3, #2
 8001118:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800111e:	2301      	movs	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8001122:	2310      	movs	r3, #16
 8001124:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001126:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800112a:	617b      	str	r3, [r7, #20]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 800112c:	2305      	movs	r3, #5
 800112e:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001134:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001136:	463a      	mov	r2, r7
 8001138:	f107 0118 	add.w	r1, r7, #24
 800113c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <QSPI_WriteEnable+0x90>)
 8001142:	f001 fc42 	bl	80029ca <HAL_QSPI_AutoPolling>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3750      	adds	r7, #80	; 0x50
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2400012c 	.word	0x2400012c

08001160 <QSPI_Configuration>:

uint8_t QSPI_Configuration(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b090      	sub	sp, #64	; 0x40
 8001164:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t test_buffer[4] = { 0 };
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
	/*read status register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800116a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116e:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8001170:	2305      	movs	r3, #5
 8001172:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800117c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800118a:	2300      	movs	r3, #0
 800118c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800118e:	2300      	movs	r3, #0
 8001190:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	f241 3288 	movw	r2, #5000	; 0x1388
 800119e:	4619      	mov	r1, r3
 80011a0:	4843      	ldr	r0, [pc, #268]	; (80012b0 <QSPI_Configuration+0x150>)
 80011a2:	f001 fa85 	bl	80026b0 <HAL_QSPI_Command>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <QSPI_Configuration+0x50>
			!= HAL_OK) {
		return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e07a      	b.n	80012a6 <QSPI_Configuration+0x146>
	}
	if (HAL_QSPI_Receive(&hqspi, test_buffer,
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b6:	4619      	mov	r1, r3
 80011b8:	483d      	ldr	r0, [pc, #244]	; (80012b0 <QSPI_Configuration+0x150>)
 80011ba:	f001 fb69 	bl	8002890 <HAL_QSPI_Receive>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <QSPI_Configuration+0x68>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e06e      	b.n	80012a6 <QSPI_Configuration+0x146>
	}
	/*read configuration register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80011c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011cc:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_CONFIGURATION_REG_CMD;
 80011ce:	2315      	movs	r3, #21
 80011d0:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80011da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fc:	4619      	mov	r1, r3
 80011fe:	482c      	ldr	r0, [pc, #176]	; (80012b0 <QSPI_Configuration+0x150>)
 8001200:	f001 fa56 	bl	80026b0 <HAL_QSPI_Command>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <QSPI_Configuration+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e04b      	b.n	80012a6 <QSPI_Configuration+0x146>
	}
	if (HAL_QSPI_Receive(&hqspi, &(test_buffer[1]),
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	3301      	adds	r3, #1
 8001212:	f241 3288 	movw	r2, #5000	; 0x1388
 8001216:	4619      	mov	r1, r3
 8001218:	4825      	ldr	r0, [pc, #148]	; (80012b0 <QSPI_Configuration+0x150>)
 800121a:	f001 fb39 	bl	8002890 <HAL_QSPI_Receive>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <QSPI_Configuration+0xc8>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e03e      	b.n	80012a6 <QSPI_Configuration+0x146>
	}
	/*modify buffer to enable quad mode*/
	test_buffer[0] |= 0x40;
 8001228:	793b      	ldrb	r3, [r7, #4]
 800122a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122e:	b2db      	uxtb	r3, r3
 8001230:	713b      	strb	r3, [r7, #4]

	/*set dummy cycles*/
	test_buffer[1] |= 0xC0;
 8001232:	797b      	ldrb	r3, [r7, #5]
 8001234:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001238:	b2db      	uxtb	r3, r3
 800123a:	717b      	strb	r3, [r7, #5]

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800123c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001240:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001246:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001250:	2300      	movs	r3, #0
 8001252:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001254:	2300      	movs	r3, #0
 8001256:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = WRITE_STATUS_REG_CMD;
 8001258:	2301      	movs	r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 2;
 800126a:	2302      	movs	r3, #2
 800126c:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	f241 3288 	movw	r2, #5000	; 0x1388
 8001276:	4619      	mov	r1, r3
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <QSPI_Configuration+0x150>)
 800127a:	f001 fa19 	bl	80026b0 <HAL_QSPI_Command>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <QSPI_Configuration+0x128>
			!= HAL_OK) {
		return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e00e      	b.n	80012a6 <QSPI_Configuration+0x146>
	}

	if (HAL_QSPI_Transmit(&hqspi, test_buffer,
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	f241 3288 	movw	r2, #5000	; 0x1388
 800128e:	4619      	mov	r1, r3
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <QSPI_Configuration+0x150>)
 8001292:	f001 fa6b 	bl	800276c <HAL_QSPI_Transmit>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <QSPI_Configuration+0x144>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 800129c:	f7ff fd4e 	bl	8000d3c <Error_Handler>
		return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <QSPI_Configuration+0x146>
	}
	return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3740      	adds	r7, #64	; 0x40
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2400012c 	.word	0x2400012c

080012b4 <CSP_QSPI_WriteMemory>:
	}

	return HAL_OK;
}

uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address,uint32_t buffer_size) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b096      	sub	sp, #88	; 0x58
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	653b      	str	r3, [r7, #80]	; 0x50


	//
	while (current_addr <= address) {
 80012c4:	e003      	b.n	80012ce <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
 80012c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012cc:	653b      	str	r3, [r7, #80]	; 0x50
	while (current_addr <= address) {
 80012ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d9f7      	bls.n	80012c6 <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
 80012d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
 80012de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d901      	bls.n	80012ea <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = address + buffer_size;
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80012f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80012fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001300:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001302:	2300      	movs	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800130a:	2300      	movs	r3, #0
 800130c:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800130e:	2300      	movs	r3, #0
 8001310:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 8001312:	2338      	movs	r3, #56	; 0x38
 8001314:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8001316:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode = QSPI_DATA_4_LINES;
 800131c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = buffer_size;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address = address;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
 800132e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001330:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
 8001332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001334:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (current_size == 0) {
 8001336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	e03f      	b.n	80013c0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
 8001340:	f7ff fec4 	bl	80010cc <QSPI_WriteEnable>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e038      	b.n	80013c0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4619      	mov	r1, r3
 8001358:	481b      	ldr	r0, [pc, #108]	; (80013c8 <CSP_QSPI_WriteMemory+0x114>)
 800135a:	f001 f9a9 	bl	80026b0 <HAL_QSPI_Command>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e02b      	b.n	80013c0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	68f9      	ldr	r1, [r7, #12]
 800136e:	4816      	ldr	r0, [pc, #88]	; (80013c8 <CSP_QSPI_WriteMemory+0x114>)
 8001370:	f001 f9fc 	bl	800276c <HAL_QSPI_Transmit>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <CSP_QSPI_WriteMemory+0xca>

			return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e020      	b.n	80013c0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 800137e:	f7ff fe6d 	bl	800105c <QSPI_AutoPollingMemReady>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <CSP_QSPI_WriteMemory+0xd8>
			return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e019      	b.n	80013c0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 800138c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800138e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001390:	4413      	add	r3, r2
 8001392:	653b      	str	r3, [r7, #80]	; 0x50
		buffer += current_size;
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001398:	4413      	add	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 800139c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800139e:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 80013a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d203      	bcs.n	80013b0 <CSP_QSPI_WriteMemory+0xfc>
 80013a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	e001      	b.n	80013b4 <CSP_QSPI_WriteMemory+0x100>
 80013b0:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
 80013b4:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr <= end_addr);
 80013b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80013b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d9b7      	bls.n	800132e <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
 80013be:	2300      	movs	r3, #0

}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3758      	adds	r7, #88	; 0x58
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2400012c 	.word	0x2400012c

080013cc <CSP_QSPI_EnableMemoryMappedMode>:
     while(!rx_complete);

     return HAL_OK;
}

uint8_t CSP_QSPI_EnableMemoryMappedMode(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b090      	sub	sp, #64	; 0x40
 80013d0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80013d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d6:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80013d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013dc:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80013ea:	2300      	movs	r3, #0
 80013ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80013ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_4_LINES;
 80013f4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.NbData = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
	sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 8001402:	236b      	movs	r3, #107	; 0x6b
 8001404:	60bb      	str	r3, [r7, #8]
	sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ_QUAD;
 8001406:	230a      	movs	r3, #10
 8001408:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
 800140e:	463a      	mov	r2, r7
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <CSP_QSPI_EnableMemoryMappedMode+0x64>)
 8001418:	f001 fb4e 	bl	8002ab8 <HAL_QSPI_MemoryMapped>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <CSP_QSPI_EnableMemoryMappedMode+0x5a>
		return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <CSP_QSPI_EnableMemoryMappedMode+0x5c>
	}
	return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3740      	adds	r7, #64	; 0x40
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2400012c 	.word	0x2400012c

08001434 <QSPI_ResetChip>:

uint8_t QSPI_ResetChip() {
 8001434:	b580      	push	{r7, lr}
 8001436:	b090      	sub	sp, #64	; 0x40
 8001438:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800143e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001442:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001448:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001452:	2300      	movs	r3, #0
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001456:	2300      	movs	r3, #0
 8001458:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 800145a:	2366      	movs	r3, #102	; 0x66
 800145c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	f241 3288 	movw	r2, #5000	; 0x1388
 8001474:	4619      	mov	r1, r3
 8001476:	481d      	ldr	r0, [pc, #116]	; (80014ec <QSPI_ResetChip+0xb8>)
 8001478:	f001 f91a 	bl	80026b0 <HAL_QSPI_Command>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e02e      	b.n	80014e4 <QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8001486:	2300      	movs	r3, #0
 8001488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800148a:	e003      	b.n	8001494 <QSPI_ResetChip+0x60>
		__NOP();
 800148c:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 800148e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001490:	3301      	adds	r3, #1
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001496:	2b2e      	cmp	r3, #46	; 0x2e
 8001498:	d9f8      	bls.n	800148c <QSPI_ResetChip+0x58>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800149a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014ae:	2300      	movs	r3, #0
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80014b2:	2300      	movs	r3, #0
 80014b4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 80014b6:	2399      	movs	r3, #153	; 0x99
 80014b8:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <QSPI_ResetChip+0xb8>)
 80014d4:	f001 f8ec 	bl	80026b0 <HAL_QSPI_Command>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3740      	adds	r7, #64	; 0x40
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2400012c 	.word	0x2400012c

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_MspInit+0x30>)
 80014f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_MspInit+0x30>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_MspInit+0x30>)
 8001508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	58024400 	.word	0x58024400

08001524 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b0ba      	sub	sp, #232	; 0xe8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	22c0      	movs	r2, #192	; 0xc0
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f005 f9df 	bl	8006908 <memset>
  if(huart->Instance==UART8)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a25      	ldr	r2, [pc, #148]	; (80015e4 <HAL_UART_MspInit+0xc0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d142      	bne.n	80015da <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001554:	2302      	movs	r3, #2
 8001556:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fd5e 	bl	8004024 <HAL_RCCEx_PeriphCLKConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800156e:	f7ff fbe5 	bl	8000d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_UART_MspInit+0xc4>)
 8001574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001578:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <HAL_UART_MspInit+0xc4>)
 800157a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800157e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_UART_MspInit+0xc4>)
 8001584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_UART_MspInit+0xc4>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_UART_MspInit+0xc4>)
 8001598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_UART_MspInit+0xc4>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80015ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80015c8:	2308      	movs	r3, #8
 80015ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <HAL_UART_MspInit+0xc8>)
 80015d6:	f000 fab3 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	37e8      	adds	r7, #232	; 0xe8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40007c00 	.word	0x40007c00
 80015e8:	58024400 	.word	0x58024400
 80015ec:	58022400 	.word	0x58022400

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 f94c 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <QUADSPI_IRQHandler+0x10>)
 800164a:	f000 fe77 	bl	800233c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2400012c 	.word	0x2400012c

08001658 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e00a      	b.n	8001680 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800166a:	f3af 8000 	nop.w
 800166e:	4601      	mov	r1, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbf0      	blt.n	800166a <_read+0x12>
	}

return len;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e009      	b.n	80016b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff f87d 	bl	80007ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dbf1      	blt.n	80016a4 <_write+0x12>
	}
	return len;
 80016c0:	687b      	ldr	r3, [r7, #4]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_close>:

int _close(int file)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
	return -1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f2:	605a      	str	r2, [r3, #4]
	return 0;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_isatty>:

int _isatty(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f005 f8a6 	bl	80068b4 <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	24040000 	.word	0x24040000
 8001794:	00000400 	.word	0x00000400
 8001798:	24000090 	.word	0x24000090
 800179c:	24000190 	.word	0x24000190

080017a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a4:	f7fe ff68 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a8:	480c      	ldr	r0, [pc, #48]	; (80017dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017aa:	490d      	ldr	r1, [pc, #52]	; (80017e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ac:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c0:	4c0a      	ldr	r4, [pc, #40]	; (80017ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ce:	f005 f877 	bl	80068c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d2:	f7ff f801 	bl	80007d8 <main>
  bx  lr
 80017d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80017dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017e0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80017e4:	08007a00 	.word	0x08007a00
  ldr r2, =_sbss
 80017e8:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80017ec:	2400018c 	.word	0x2400018c

080017f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC3_IRQHandler>
	...

080017f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fa:	2003      	movs	r0, #3
 80017fc:	f000 f96e 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001800:	f002 fa3a 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8001804:	4602      	mov	r2, r0
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_Init+0x68>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	4913      	ldr	r1, [pc, #76]	; (8001860 <HAL_Init+0x6c>)
 8001812:	5ccb      	ldrb	r3, [r1, r3]
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
 800181c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_Init+0x68>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_Init+0x6c>)
 8001828:	5cd3      	ldrb	r3, [r2, r3]
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
 8001834:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <HAL_Init+0x70>)
 8001836:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001838:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_Init+0x74>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183e:	2000      	movs	r0, #0
 8001840:	f000 f814 	bl	800186c <HAL_InitTick>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e002      	b.n	8001854 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800184e:	f7ff fe4f 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	58024400 	.word	0x58024400
 8001860:	08007920 	.word	0x08007920
 8001864:	24000004 	.word	0x24000004
 8001868:	24000000 	.word	0x24000000

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_InitTick+0x60>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e021      	b.n	80018c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_InitTick+0x64>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_InitTick+0x60>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f945 	bl	8001b26 <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00e      	b.n	80018c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d80a      	bhi.n	80018c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f91d 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <HAL_InitTick+0x68>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2400000c 	.word	0x2400000c
 80018d0:	24000000 	.word	0x24000000
 80018d4:	24000008 	.word	0x24000008

080018d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x20>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x24>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_IncTick+0x24>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	2400000c 	.word	0x2400000c
 80018fc:	24000178 	.word	0x24000178

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	24000178 	.word	0x24000178

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff ffee 	bl	8001900 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffde 	bl	8001900 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2400000c 	.word	0x2400000c

08001960 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetREVID+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0c1b      	lsrs	r3, r3, #16
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	5c001000 	.word	0x5c001000

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <__NVIC_SetPriorityGrouping+0x40>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x40>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00
 80019bc:	05fa0000 	.word	0x05fa0000

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff47 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff5e 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff90 	bl	8001a30 <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5f 	bl	80019dc <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffb2 	bl	8001a98 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b4e:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <HAL_GPIO_Init+0x234>)
 8001b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b52:	e194      	b.n	8001e7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8186 	beq.w	8001e78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d00b      	beq.n	8001b8c <HAL_GPIO_Init+0x4c>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d007      	beq.n	8001b8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b80:	2b11      	cmp	r3, #17
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b12      	cmp	r3, #18
 8001b8a:	d130      	bne.n	8001bee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 0201 	and.w	r2, r3, #1
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0xee>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d123      	bne.n	8001c76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	69b9      	ldr	r1, [r7, #24]
 8001c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0203 	and.w	r2, r3, #3
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80e0 	beq.w	8001e78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <HAL_GPIO_Init+0x238>)
 8001cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cbe:	4a2e      	ldr	r2, [pc, #184]	; (8001d78 <HAL_GPIO_Init+0x238>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_GPIO_Init+0x238>)
 8001cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a29      	ldr	r2, [pc, #164]	; (8001d7c <HAL_GPIO_Init+0x23c>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <HAL_GPIO_Init+0x240>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d052      	beq.n	8001da8 <HAL_GPIO_Init+0x268>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <HAL_GPIO_Init+0x244>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d031      	beq.n	8001d6e <HAL_GPIO_Init+0x22e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_GPIO_Init+0x248>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d02b      	beq.n	8001d6a <HAL_GPIO_Init+0x22a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_GPIO_Init+0x24c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d025      	beq.n	8001d66 <HAL_GPIO_Init+0x226>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_GPIO_Init+0x250>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <HAL_GPIO_Init+0x222>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <HAL_GPIO_Init+0x254>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x21e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1a      	ldr	r2, [pc, #104]	; (8001d98 <HAL_GPIO_Init+0x258>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x21a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_GPIO_Init+0x25c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x216>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_GPIO_Init+0x260>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_GPIO_Init+0x264>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x20e>
 8001d4a:	2309      	movs	r3, #9
 8001d4c:	e02d      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d4e:	230a      	movs	r3, #10
 8001d50:	e02b      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d52:	2308      	movs	r3, #8
 8001d54:	e029      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e027      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e025      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e023      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e021      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e01f      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e01d      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e01b      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d72:	bf00      	nop
 8001d74:	58000080 	.word	0x58000080
 8001d78:	58024400 	.word	0x58024400
 8001d7c:	58000400 	.word	0x58000400
 8001d80:	58020000 	.word	0x58020000
 8001d84:	58020400 	.word	0x58020400
 8001d88:	58020800 	.word	0x58020800
 8001d8c:	58020c00 	.word	0x58020c00
 8001d90:	58021000 	.word	0x58021000
 8001d94:	58021400 	.word	0x58021400
 8001d98:	58021800 	.word	0x58021800
 8001d9c:	58021c00 	.word	0x58021c00
 8001da0:	58022000 	.word	0x58022000
 8001da4:	58022400 	.word	0x58022400
 8001da8:	2300      	movs	r3, #0
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	f002 0203 	and.w	r2, r2, #3
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	4093      	lsls	r3, r2
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dba:	4938      	ldr	r1, [pc, #224]	; (8001e9c <HAL_GPIO_Init+0x35c>)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f47f ae63 	bne.w	8001b54 <HAL_GPIO_Init+0x14>
  }
}
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
 8001e92:	3724      	adds	r7, #36	; 0x24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	58000400 	.word	0x58000400

08001ea0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001eae:	4b75      	ldr	r3, [pc, #468]	; (8002084 <HAL_GPIO_DeInit+0x1e4>)
 8001eb0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8001eb2:	e0d9      	b.n	8002068 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80cc 	beq.w	8002062 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001eca:	4a6f      	ldr	r2, [pc, #444]	; (8002088 <HAL_GPIO_DeInit+0x1e8>)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a67      	ldr	r2, [pc, #412]	; (800208c <HAL_GPIO_DeInit+0x1ec>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d037      	beq.n	8001f64 <HAL_GPIO_DeInit+0xc4>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a66      	ldr	r2, [pc, #408]	; (8002090 <HAL_GPIO_DeInit+0x1f0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d031      	beq.n	8001f60 <HAL_GPIO_DeInit+0xc0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a65      	ldr	r2, [pc, #404]	; (8002094 <HAL_GPIO_DeInit+0x1f4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d02b      	beq.n	8001f5c <HAL_GPIO_DeInit+0xbc>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a64      	ldr	r2, [pc, #400]	; (8002098 <HAL_GPIO_DeInit+0x1f8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d025      	beq.n	8001f58 <HAL_GPIO_DeInit+0xb8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a63      	ldr	r2, [pc, #396]	; (800209c <HAL_GPIO_DeInit+0x1fc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d01f      	beq.n	8001f54 <HAL_GPIO_DeInit+0xb4>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a62      	ldr	r2, [pc, #392]	; (80020a0 <HAL_GPIO_DeInit+0x200>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d019      	beq.n	8001f50 <HAL_GPIO_DeInit+0xb0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a61      	ldr	r2, [pc, #388]	; (80020a4 <HAL_GPIO_DeInit+0x204>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d013      	beq.n	8001f4c <HAL_GPIO_DeInit+0xac>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_GPIO_DeInit+0x208>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00d      	beq.n	8001f48 <HAL_GPIO_DeInit+0xa8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a5f      	ldr	r2, [pc, #380]	; (80020ac <HAL_GPIO_DeInit+0x20c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d007      	beq.n	8001f44 <HAL_GPIO_DeInit+0xa4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a5e      	ldr	r2, [pc, #376]	; (80020b0 <HAL_GPIO_DeInit+0x210>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_GPIO_DeInit+0xa0>
 8001f3c:	2309      	movs	r3, #9
 8001f3e:	e012      	b.n	8001f66 <HAL_GPIO_DeInit+0xc6>
 8001f40:	230a      	movs	r3, #10
 8001f42:	e010      	b.n	8001f66 <HAL_GPIO_DeInit+0xc6>
 8001f44:	2308      	movs	r3, #8
 8001f46:	e00e      	b.n	8001f66 <HAL_GPIO_DeInit+0xc6>
 8001f48:	2307      	movs	r3, #7
 8001f4a:	e00c      	b.n	8001f66 <HAL_GPIO_DeInit+0xc6>
 8001f4c:	2306      	movs	r3, #6
 8001f4e:	e00a      	b.n	8001f66 <HAL_GPIO_DeInit+0xc6>
 8001f50:	2305      	movs	r3, #5
 8001f52:	e008      	b.n	8001f66 <HAL_GPIO_DeInit+0xc6>
 8001f54:	2304      	movs	r3, #4
 8001f56:	e006      	b.n	8001f66 <HAL_GPIO_DeInit+0xc6>
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e004      	b.n	8001f66 <HAL_GPIO_DeInit+0xc6>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_DeInit+0xc6>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_GPIO_DeInit+0xc6>
 8001f64:	2300      	movs	r3, #0
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	f002 0203 	and.w	r2, r2, #3
 8001f6c:	0092      	lsls	r2, r2, #2
 8001f6e:	4093      	lsls	r3, r2
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d136      	bne.n	8001fe4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001fc6:	4a30      	ldr	r2, [pc, #192]	; (8002088 <HAL_GPIO_DeInit+0x1e8>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	482c      	ldr	r0, [pc, #176]	; (8002088 <HAL_GPIO_DeInit+0x1e8>)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	400a      	ands	r2, r1
 8001fde:	3302      	adds	r3, #2
 8001fe0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2103      	movs	r1, #3
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	08da      	lsrs	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3208      	adds	r2, #8
 8002000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	08d2      	lsrs	r2, r2, #3
 8002018:	4019      	ands	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3208      	adds	r2, #8
 800201e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2103      	movs	r1, #3
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	401a      	ands	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	2101      	movs	r1, #1
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	401a      	ands	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2103      	movs	r1, #3
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	401a      	ands	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	f47f af1f 	bne.w	8001eb4 <HAL_GPIO_DeInit+0x14>
  }
}
 8002076:	bf00      	nop
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	58000080 	.word	0x58000080
 8002088:	58000400 	.word	0x58000400
 800208c:	58020000 	.word	0x58020000
 8002090:	58020400 	.word	0x58020400
 8002094:	58020800 	.word	0x58020800
 8002098:	58020c00 	.word	0x58020c00
 800209c:	58021000 	.word	0x58021000
 80020a0:	58021400 	.word	0x58021400
 80020a4:	58021800 	.word	0x58021800
 80020a8:	58021c00 	.word	0x58021c00
 80020ac:	58022000 	.word	0x58022000
 80020b0:	58022400 	.word	0x58022400

080020b4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80020bc:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_HSEM_FastTake+0x2c>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3320      	adds	r3, #32
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_HSEM_FastTake+0x30>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e000      	b.n	80020d2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	58026400 	.word	0x58026400
 80020e4:	80000300 	.word	0x80000300

080020e8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80020f2:	4906      	ldr	r1, [pc, #24]	; (800210c <HAL_HSEM_Release+0x24>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	58026400 	.word	0x58026400

08002110 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e017      	b.n	8002152 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d004      	beq.n	8002138 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2280      	movs	r2, #128	; 0x80
 8002132:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e00c      	b.n	8002152 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2204      	movs	r2, #4
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002168:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_PWREx_ConfigSupply+0xb0>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	2b06      	cmp	r3, #6
 8002172:	d00a      	beq.n	800218a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002174:	4b26      	ldr	r3, [pc, #152]	; (8002210 <HAL_PWREx_ConfigSupply+0xb0>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e040      	b.n	8002208 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e03e      	b.n	8002208 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_PWREx_ConfigSupply+0xb0>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002192:	491f      	ldr	r1, [pc, #124]	; (8002210 <HAL_PWREx_ConfigSupply+0xb0>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800219a:	f7ff fbb1 	bl	8001900 <HAL_GetTick>
 800219e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021a0:	e009      	b.n	80021b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021a2:	f7ff fbad 	bl	8001900 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b0:	d901      	bls.n	80021b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e028      	b.n	8002208 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_PWREx_ConfigSupply+0xb0>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c2:	d1ee      	bne.n	80021a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b1e      	cmp	r3, #30
 80021c8:	d008      	beq.n	80021dc <HAL_PWREx_ConfigSupply+0x7c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b2e      	cmp	r3, #46	; 0x2e
 80021ce:	d005      	beq.n	80021dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b1d      	cmp	r3, #29
 80021d4:	d002      	beq.n	80021dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b2d      	cmp	r3, #45	; 0x2d
 80021da:	d114      	bne.n	8002206 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80021dc:	f7ff fb90 	bl	8001900 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021e2:	e009      	b.n	80021f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021e4:	f7ff fb8c 	bl	8001900 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021f2:	d901      	bls.n	80021f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e007      	b.n	8002208 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_PWREx_ConfigSupply+0xb0>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d1ee      	bne.n	80021e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	58024800 	.word	0x58024800

08002214 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af02      	add	r7, sp, #8
 800221a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff fb70 	bl	8001900 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e05f      	b.n	80022ec <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d107      	bne.n	8002248 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe fdb3 	bl	8000da4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800223e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fcea 	bl	8002c1c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	3b01      	subs	r3, #1
 8002258:	021a      	lsls	r2, r3, #8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	2120      	movs	r1, #32
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fd15 	bl	8002c9e <QSPI_WaitFlagStateUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002278:	7afb      	ldrb	r3, [r7, #11]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d135      	bne.n	80022ea <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_QSPI_Init+0xe0>)
 8002286:	4013      	ands	r3, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6852      	ldr	r2, [r2, #4]
 800228c:	0611      	lsls	r1, r2, #24
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68d2      	ldr	r2, [r2, #12]
 8002292:	4311      	orrs	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	69d2      	ldr	r2, [r2, #28]
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6a12      	ldr	r2, [r2, #32]
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_QSPI_Init+0xe4>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6912      	ldr	r2, [r2, #16]
 80022b6:	0411      	lsls	r1, r2, #16
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6952      	ldr	r2, [r2, #20]
 80022bc:	4311      	orrs	r1, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6992      	ldr	r2, [r2, #24]
 80022c2:	4311      	orrs	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80022ea:	7afb      	ldrb	r3, [r7, #11]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	00ffff2f 	.word	0x00ffff2f
 80022f8:	ffe0f8fe 	.word	0xffe0f8fe

080022fc <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e012      	b.n	8002334 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fe32 	bl	8000f88 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d064      	beq.n	8002428 <HAL_QSPI_IRQHandler+0xec>
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d05f      	beq.n	8002428 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3320      	adds	r3, #32
 800236e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b12      	cmp	r3, #18
 800237a:	d125      	bne.n	80023c8 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800237c:	e01c      	b.n	80023b8 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00f      	beq.n	80023a6 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	1e5a      	subs	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80023a4:	e008      	b.n	80023b8 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023b4:	601a      	str	r2, [r3, #0]
          break;
 80023b6:	e033      	b.n	8002420 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1db      	bne.n	800237e <HAL_QSPI_IRQHandler+0x42>
 80023c6:	e02b      	b.n	8002420 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b22      	cmp	r3, #34	; 0x22
 80023d2:	d125      	bne.n	8002420 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80023d4:	e01d      	b.n	8002412 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d010      	beq.n	8002400 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	7812      	ldrb	r2, [r2, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
 80023fe:	e008      	b.n	8002412 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800240e:	601a      	str	r2, [r3, #0]
          break;
 8002410:	e006      	b.n	8002420 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1da      	bne.n	80023d6 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fbdd 	bl	8002be0 <HAL_QSPI_FifoThresholdCallback>
 8002426:	e13c      	b.n	80026a2 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80b0 	beq.w	8002594 <HAL_QSPI_IRQHandler+0x258>
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80aa 	beq.w	8002594 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2202      	movs	r2, #2
 8002446:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8002456:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b12      	cmp	r3, #18
 8002462:	d120      	bne.n	80024a6 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d011      	beq.n	8002496 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0204 	bic.w	r2, r2, #4
 8002480:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fb94 	bl	8002bcc <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80024a4:	e0fa      	b.n	800269c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b22      	cmp	r3, #34	; 0x22
 80024b0:	d143      	bne.n	800253a <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d012      	beq.n	80024e6 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0204 	bic.w	r2, r2, #4
 80024ce:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	e021      	b.n	800252a <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3320      	adds	r3, #32
 80024ec:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80024ee:	e013      	b.n	8002518 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d017      	beq.n	8002528 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	7812      	ldrb	r2, [r2, #0]
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	1e5a      	subs	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1e4      	bne.n	80024f0 <HAL_QSPI_IRQHandler+0x1b4>
 8002526:	e000      	b.n	800252a <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8002528:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fb40 	bl	8002bb8 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002538:	e0b0      	b.n	800269c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d107      	bne.n	8002556 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fb28 	bl	8002ba4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002554:	e0a2      	b.n	800269c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b08      	cmp	r3, #8
 8002560:	f040 809c 	bne.w	800269c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002572:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fb03 	bl	8002b90 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800258a:	e087      	b.n	800269c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 faf5 	bl	8002b7c <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002592:	e083      	b.n	800269c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d01f      	beq.n	80025de <HAL_QSPI_IRQHandler+0x2a2>
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01a      	beq.n	80025de <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2208      	movs	r2, #8
 80025ae:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80025cc:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fb0c 	bl	8002bf4 <HAL_QSPI_StatusMatchCallback>
 80025dc:	e061      	b.n	80026a2 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d047      	beq.n	8002678 <HAL_QSPI_IRQHandler+0x33c>
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d042      	beq.n	8002678 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002608:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f043 0202 	orr.w	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d021      	beq.n	8002668 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0204 	bic.w	r2, r2, #4
 8002632:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <HAL_QSPI_IRQHandler+0x370>)
 800263a:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fd65 	bl	8002110 <HAL_MDMA_Abort_IT>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d029      	beq.n	80026a0 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fa8b 	bl	8002b7c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002666:	e01b      	b.n	80026a0 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fa83 	bl	8002b7c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002676:	e013      	b.n	80026a0 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00f      	beq.n	80026a2 <HAL_QSPI_IRQHandler+0x366>
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2210      	movs	r2, #16
 8002692:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fab7 	bl	8002c08 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800269a:	e002      	b.n	80026a2 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800269c:	bf00      	nop
 800269e:	e000      	b.n	80026a2 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80026a0:	bf00      	nop
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	08002c39 	.word	0x08002c39

080026b0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff f920 	bl	8001900 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_QSPI_Command+0x22>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e048      	b.n	8002764 <HAL_QSPI_Command+0xb4>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d137      	bne.n	8002756 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2120      	movs	r1, #32
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 facd 	bl	8002c9e <QSPI_WaitFlagStateUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d125      	bne.n	800275a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800270e:	2200      	movs	r2, #0
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fafa 	bl	8002d0c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	2b00      	cmp	r3, #0
 800271e:	d115      	bne.n	800274c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2201      	movs	r2, #1
 8002728:	2102      	movs	r1, #2
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fab7 	bl	8002c9e <QSPI_WaitFlagStateUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2202      	movs	r2, #2
 8002740:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800274a:	e006      	b.n	800275a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002754:	e001      	b.n	800275a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002756:	2302      	movs	r3, #2
 8002758:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002762:	7dfb      	ldrb	r3, [r7, #23]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800277c:	f7ff f8c0 	bl	8001900 <HAL_GetTick>
 8002780:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3320      	adds	r3, #32
 8002788:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_QSPI_Transmit+0x2e>
 8002796:	2302      	movs	r3, #2
 8002798:	e076      	b.n	8002888 <HAL_QSPI_Transmit+0x11c>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d165      	bne.n	800287a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d056      	beq.n	8002868 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2212      	movs	r2, #18
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80027ee:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80027f0:	e01b      	b.n	800282a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2201      	movs	r2, #1
 80027fa:	2104      	movs	r1, #4
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fa4e 	bl	8002c9e <QSPI_WaitFlagStateUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002806:	7ffb      	ldrb	r3, [r7, #31]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d113      	bne.n	8002834 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1df      	bne.n	80027f2 <HAL_QSPI_Transmit+0x86>
 8002832:	e000      	b.n	8002836 <HAL_QSPI_Transmit+0xca>
          break;
 8002834:	bf00      	nop
      }

      if (status == HAL_OK)
 8002836:	7ffb      	ldrb	r3, [r7, #31]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d110      	bne.n	800285e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2201      	movs	r2, #1
 8002844:	2102      	movs	r1, #2
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fa29 	bl	8002c9e <QSPI_WaitFlagStateUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002850:	7ffb      	ldrb	r3, [r7, #31]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2202      	movs	r2, #2
 800285c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002866:	e00a      	b.n	800287e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	f043 0208 	orr.w	r2, r3, #8
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e001      	b.n	800287e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800287a:	2302      	movs	r3, #2
 800287c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8002886:	7ffb      	ldrb	r3, [r7, #31]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80028a0:	f7ff f82e 	bl	8001900 <HAL_GetTick>
 80028a4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3320      	adds	r3, #32
 80028b4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_QSPI_Receive+0x36>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e07d      	b.n	80029c2 <HAL_QSPI_Receive+0x132>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d16c      	bne.n	80029b4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d05d      	beq.n	80029a2 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2222      	movs	r2, #34	; 0x22
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800291e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002928:	e01c      	b.n	8002964 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2201      	movs	r2, #1
 8002932:	2106      	movs	r1, #6
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f9b2 	bl	8002c9e <QSPI_WaitFlagStateUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800293e:	7ffb      	ldrb	r3, [r7, #31]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d114      	bne.n	800296e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	7812      	ldrb	r2, [r2, #0]
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	1e5a      	subs	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1de      	bne.n	800292a <HAL_QSPI_Receive+0x9a>
 800296c:	e000      	b.n	8002970 <HAL_QSPI_Receive+0xe0>
          break;
 800296e:	bf00      	nop
      }

      if (status == HAL_OK)
 8002970:	7ffb      	ldrb	r3, [r7, #31]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d110      	bne.n	8002998 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2201      	movs	r2, #1
 800297e:	2102      	movs	r1, #2
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f98c 	bl	8002c9e <QSPI_WaitFlagStateUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800298a:	7ffb      	ldrb	r3, [r7, #31]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2202      	movs	r2, #2
 8002996:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029a0:	e00a      	b.n	80029b8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f043 0208 	orr.w	r2, r3, #8
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	77fb      	strb	r3, [r7, #31]
 80029b2:	e001      	b.n	80029b8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
 80029b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80029c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b088      	sub	sp, #32
 80029ce:	af02      	add	r7, sp, #8
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7fe ff92 	bl	8001900 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_QSPI_AutoPolling+0x24>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e060      	b.n	8002ab0 <HAL_QSPI_AutoPolling+0xe6>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d14f      	bne.n	8002aa2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2242      	movs	r2, #66	; 0x42
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2200      	movs	r2, #0
 8002a18:	2120      	movs	r1, #32
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f93f 	bl	8002c9e <QSPI_WaitFlagStateUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d13d      	bne.n	8002aa6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6852      	ldr	r2, [r2, #4]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6892      	ldr	r2, [r2, #8]
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002a60:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f94b 	bl	8002d0c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	2108      	movs	r1, #8
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f90c 	bl	8002c9e <QSPI_WaitFlagStateUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2208      	movs	r2, #8
 8002a96:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002aa0:	e001      	b.n	8002aa6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7fe ff1c 	bl	8001900 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_QSPI_MemoryMapped+0x22>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e04c      	b.n	8002b74 <HAL_QSPI_MemoryMapped+0xbc>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d13b      	bne.n	8002b66 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2282      	movs	r2, #130	; 0x82
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2200      	movs	r2, #0
 8002b06:	2120      	movs	r1, #32
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f8c8 	bl	8002c9e <QSPI_WaitFlagStateUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d128      	bne.n	8002b6a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0108 	bic.w	r1, r3, #8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d110      	bne.n	8002b58 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2210      	movs	r2, #16
 8002b46:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b56:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8002b58:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f8d4 	bl	8002d0c <QSPI_Config>
 8002b64:	e001      	b.n	8002b6a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
 8002b68:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d114      	bne.n	8002c88 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2202      	movs	r2, #2
 8002c64:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c74:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0202 	orr.w	r2, r2, #2
 8002c84:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8002c86:	e006      	b.n	8002c96 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7ff ff73 	bl	8002b7c <HAL_QSPI_ErrorCallback>
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002cae:	e01a      	b.n	8002ce6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d016      	beq.n	8002ce6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb8:	f7fe fe22 	bl	8001900 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d302      	bcc.n	8002cce <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10b      	bne.n	8002ce6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00e      	b.n	8002d04 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d1d6      	bne.n	8002cb0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <QSPI_Config+0x28>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002d26:	d005      	beq.n	8002d34 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3a01      	subs	r2, #1
 8002d32:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80b9 	beq.w	8002eb0 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d05f      	beq.n	8002e06 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	6892      	ldr	r2, [r2, #8]
 8002d4e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d031      	beq.n	8002dbc <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d66:	431a      	orrs	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	049b      	lsls	r3, r3, #18
 8002d74:	431a      	orrs	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	ea42 0103 	orr.w	r1, r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002dac:	f000 812e 	beq.w	800300c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	6852      	ldr	r2, [r2, #4]
 8002db8:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002dba:	e127      	b.n	800300c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	049b      	lsls	r3, r3, #18
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	ea42 0103 	orr.w	r1, r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	615a      	str	r2, [r3, #20]
}
 8002e04:	e102      	b.n	800300c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d02e      	beq.n	8002e6c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	431a      	orrs	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	431a      	orrs	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	049b      	lsls	r3, r3, #18
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	ea42 0103 	orr.w	r1, r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002e5c:	f000 80d6 	beq.w	800300c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	6852      	ldr	r2, [r2, #4]
 8002e68:	619a      	str	r2, [r3, #24]
}
 8002e6a:	e0cf      	b.n	800300c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	049b      	lsls	r3, r3, #18
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	ea42 0103 	orr.w	r1, r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	615a      	str	r2, [r3, #20]
}
 8002eae:	e0ad      	b.n	800300c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d058      	beq.n	8002f6a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d02d      	beq.n	8002f26 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	049b      	lsls	r3, r3, #18
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	ea42 0103 	orr.w	r1, r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002f18:	d078      	beq.n	800300c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	6852      	ldr	r2, [r2, #4]
 8002f22:	619a      	str	r2, [r3, #24]
}
 8002f24:	e072      	b.n	800300c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	049b      	lsls	r3, r3, #18
 8002f42:	431a      	orrs	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	ea42 0103 	orr.w	r1, r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	615a      	str	r2, [r3, #20]
}
 8002f68:	e050      	b.n	800300c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d02a      	beq.n	8002fc8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	431a      	orrs	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	049b      	lsls	r3, r3, #18
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	ea42 0103 	orr.w	r1, r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002fba:	d027      	beq.n	800300c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	6852      	ldr	r2, [r2, #4]
 8002fc4:	619a      	str	r2, [r3, #24]
}
 8002fc6:	e021      	b.n	800300c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01d      	beq.n	800300c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	049b      	lsls	r3, r3, #18
 8002fec:	431a      	orrs	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	ea42 0103 	orr.w	r1, r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	430a      	orrs	r2, r1
 800300a:	615a      	str	r2, [r3, #20]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	; 0x30
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e3ff      	b.n	800382a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8087 	beq.w	8003146 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003038:	4b99      	ldr	r3, [pc, #612]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003042:	4b97      	ldr	r3, [pc, #604]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	2b10      	cmp	r3, #16
 800304c:	d007      	beq.n	800305e <HAL_RCC_OscConfig+0x46>
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	2b18      	cmp	r3, #24
 8003052:	d110      	bne.n	8003076 <HAL_RCC_OscConfig+0x5e>
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d10b      	bne.n	8003076 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305e:	4b90      	ldr	r3, [pc, #576]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d06c      	beq.n	8003144 <HAL_RCC_OscConfig+0x12c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d168      	bne.n	8003144 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e3d9      	b.n	800382a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x76>
 8003080:	4b87      	ldr	r3, [pc, #540]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a86      	ldr	r2, [pc, #536]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	e02e      	b.n	80030ec <HAL_RCC_OscConfig+0xd4>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x98>
 8003096:	4b82      	ldr	r3, [pc, #520]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a81      	ldr	r2, [pc, #516]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 800309c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b7f      	ldr	r3, [pc, #508]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a7e      	ldr	r2, [pc, #504]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e01d      	b.n	80030ec <HAL_RCC_OscConfig+0xd4>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0xbc>
 80030ba:	4b79      	ldr	r3, [pc, #484]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a78      	ldr	r2, [pc, #480]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	4b76      	ldr	r3, [pc, #472]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a75      	ldr	r2, [pc, #468]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e00b      	b.n	80030ec <HAL_RCC_OscConfig+0xd4>
 80030d4:	4b72      	ldr	r3, [pc, #456]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a71      	ldr	r2, [pc, #452]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	4b6f      	ldr	r3, [pc, #444]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a6e      	ldr	r2, [pc, #440]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80030e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d013      	beq.n	800311c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fc04 	bl	8001900 <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030fc:	f7fe fc00 	bl	8001900 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	; 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e38d      	b.n	800382a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800310e:	4b64      	ldr	r3, [pc, #400]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0xe4>
 800311a:	e014      	b.n	8003146 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe fbf0 	bl	8001900 <HAL_GetTick>
 8003120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003124:	f7fe fbec 	bl	8001900 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	; 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e379      	b.n	800382a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003136:	4b5a      	ldr	r3, [pc, #360]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x10c>
 8003142:	e000      	b.n	8003146 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80ae 	beq.w	80032b0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003154:	4b52      	ldr	r3, [pc, #328]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800315c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800315e:	4b50      	ldr	r3, [pc, #320]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <HAL_RCC_OscConfig+0x162>
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	2b18      	cmp	r3, #24
 800316e:	d13a      	bne.n	80031e6 <HAL_RCC_OscConfig+0x1ce>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d135      	bne.n	80031e6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800317a:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x17a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e34b      	b.n	800382a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	f7fe fbe5 	bl	8001960 <HAL_GetREVID>
 8003196:	4603      	mov	r3, r0
 8003198:	f241 0203 	movw	r2, #4099	; 0x1003
 800319c:	4293      	cmp	r3, r2
 800319e:	d817      	bhi.n	80031d0 <HAL_RCC_OscConfig+0x1b8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d108      	bne.n	80031ba <HAL_RCC_OscConfig+0x1a2>
 80031a8:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031b0:	4a3b      	ldr	r2, [pc, #236]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b8:	e07a      	b.n	80032b0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ba:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	031b      	lsls	r3, r3, #12
 80031c8:	4935      	ldr	r1, [pc, #212]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ce:	e06f      	b.n	80032b0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d0:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	4930      	ldr	r1, [pc, #192]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e4:	e064      	b.n	80032b0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d045      	beq.n	800327a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031ee:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 0219 	bic.w	r2, r3, #25
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	4929      	ldr	r1, [pc, #164]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fb7e 	bl	8001900 <HAL_GetTick>
 8003204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003208:	f7fe fb7a 	bl	8001900 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e307      	b.n	800382a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800321a:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003226:	f7fe fb9b 	bl	8001960 <HAL_GetREVID>
 800322a:	4603      	mov	r3, r0
 800322c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003230:	4293      	cmp	r3, r2
 8003232:	d817      	bhi.n	8003264 <HAL_RCC_OscConfig+0x24c>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d108      	bne.n	800324e <HAL_RCC_OscConfig+0x236>
 800323c:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003244:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324a:	6053      	str	r3, [r2, #4]
 800324c:	e030      	b.n	80032b0 <HAL_RCC_OscConfig+0x298>
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	031b      	lsls	r3, r3, #12
 800325c:	4910      	ldr	r1, [pc, #64]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
 8003262:	e025      	b.n	80032b0 <HAL_RCC_OscConfig+0x298>
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	490b      	ldr	r1, [pc, #44]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	e01a      	b.n	80032b0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a08      	ldr	r2, [pc, #32]	; (80032a0 <HAL_RCC_OscConfig+0x288>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fe fb3b 	bl	8001900 <HAL_GetTick>
 800328a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328e:	f7fe fb37 	bl	8001900 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d903      	bls.n	80032a4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e2c4      	b.n	800382a <HAL_RCC_OscConfig+0x812>
 80032a0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032a4:	4ba4      	ldr	r3, [pc, #656]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ee      	bne.n	800328e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a9 	beq.w	8003410 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032be:	4b9e      	ldr	r3, [pc, #632]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032c8:	4b9b      	ldr	r3, [pc, #620]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d007      	beq.n	80032e4 <HAL_RCC_OscConfig+0x2cc>
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2b18      	cmp	r3, #24
 80032d8:	d13a      	bne.n	8003350 <HAL_RCC_OscConfig+0x338>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d135      	bne.n	8003350 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032e4:	4b94      	ldr	r3, [pc, #592]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_OscConfig+0x2e4>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e296      	b.n	800382a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032fc:	f7fe fb30 	bl	8001960 <HAL_GetREVID>
 8003300:	4603      	mov	r3, r0
 8003302:	f241 0203 	movw	r2, #4099	; 0x1003
 8003306:	4293      	cmp	r3, r2
 8003308:	d817      	bhi.n	800333a <HAL_RCC_OscConfig+0x322>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	2b20      	cmp	r3, #32
 8003310:	d108      	bne.n	8003324 <HAL_RCC_OscConfig+0x30c>
 8003312:	4b89      	ldr	r3, [pc, #548]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800331a:	4a87      	ldr	r2, [pc, #540]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 800331c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003320:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003322:	e075      	b.n	8003410 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003324:	4b84      	ldr	r3, [pc, #528]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	069b      	lsls	r3, r3, #26
 8003332:	4981      	ldr	r1, [pc, #516]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003338:	e06a      	b.n	8003410 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800333a:	4b7f      	ldr	r3, [pc, #508]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	061b      	lsls	r3, r3, #24
 8003348:	497b      	ldr	r1, [pc, #492]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 800334a:	4313      	orrs	r3, r2
 800334c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800334e:	e05f      	b.n	8003410 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d042      	beq.n	80033de <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003358:	4b77      	ldr	r3, [pc, #476]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a76      	ldr	r2, [pc, #472]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 800335e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe facc 	bl	8001900 <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800336c:	f7fe fac8 	bl	8001900 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e255      	b.n	800382a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800337e:	4b6e      	ldr	r3, [pc, #440]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800338a:	f7fe fae9 	bl	8001960 <HAL_GetREVID>
 800338e:	4603      	mov	r3, r0
 8003390:	f241 0203 	movw	r2, #4099	; 0x1003
 8003394:	4293      	cmp	r3, r2
 8003396:	d817      	bhi.n	80033c8 <HAL_RCC_OscConfig+0x3b0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	2b20      	cmp	r3, #32
 800339e:	d108      	bne.n	80033b2 <HAL_RCC_OscConfig+0x39a>
 80033a0:	4b65      	ldr	r3, [pc, #404]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80033a8:	4a63      	ldr	r2, [pc, #396]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80033aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033ae:	6053      	str	r3, [r2, #4]
 80033b0:	e02e      	b.n	8003410 <HAL_RCC_OscConfig+0x3f8>
 80033b2:	4b61      	ldr	r3, [pc, #388]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	069b      	lsls	r3, r3, #26
 80033c0:	495d      	ldr	r1, [pc, #372]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
 80033c6:	e023      	b.n	8003410 <HAL_RCC_OscConfig+0x3f8>
 80033c8:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	4958      	ldr	r1, [pc, #352]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	60cb      	str	r3, [r1, #12]
 80033dc:	e018      	b.n	8003410 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80033de:	4b56      	ldr	r3, [pc, #344]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a55      	ldr	r2, [pc, #340]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80033e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe fa89 	bl	8001900 <HAL_GetTick>
 80033ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80033f2:	f7fe fa85 	bl	8001900 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e212      	b.n	800382a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003404:	4b4c      	ldr	r3, [pc, #304]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f0      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d036      	beq.n	800348a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d019      	beq.n	8003458 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003424:	4b44      	ldr	r3, [pc, #272]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	4a43      	ldr	r2, [pc, #268]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003430:	f7fe fa66 	bl	8001900 <HAL_GetTick>
 8003434:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003438:	f7fe fa62 	bl	8001900 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1ef      	b.n	800382a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800344a:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 800344c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0x420>
 8003456:	e018      	b.n	800348a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003458:	4b37      	ldr	r3, [pc, #220]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 800345a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345c:	4a36      	ldr	r2, [pc, #216]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fe fa4c 	bl	8001900 <HAL_GetTick>
 8003468:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800346c:	f7fe fa48 	bl	8001900 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e1d5      	b.n	800382a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800347e:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 8003480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d036      	beq.n	8003504 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d019      	beq.n	80034d2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800349e:	4b26      	ldr	r3, [pc, #152]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a25      	ldr	r2, [pc, #148]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80034a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034aa:	f7fe fa29 	bl	8001900 <HAL_GetTick>
 80034ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80034b2:	f7fe fa25 	bl	8001900 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e1b2      	b.n	800382a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034c4:	4b1c      	ldr	r3, [pc, #112]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x49a>
 80034d0:	e018      	b.n	8003504 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80034d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034de:	f7fe fa0f 	bl	8001900 <HAL_GetTick>
 80034e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80034e6:	f7fe fa0b 	bl	8001900 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e198      	b.n	800382a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_RCC_OscConfig+0x520>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f0      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8085 	beq.w	800361c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCC_OscConfig+0x524>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_RCC_OscConfig+0x524>)
 8003518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800351e:	f7fe f9ef 	bl	8001900 <HAL_GetTick>
 8003522:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003524:	e00c      	b.n	8003540 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003526:	f7fe f9eb 	bl	8001900 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b64      	cmp	r3, #100	; 0x64
 8003532:	d905      	bls.n	8003540 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e178      	b.n	800382a <HAL_RCC_OscConfig+0x812>
 8003538:	58024400 	.word	0x58024400
 800353c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003540:	4b96      	ldr	r3, [pc, #600]	; (800379c <HAL_RCC_OscConfig+0x784>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ec      	beq.n	8003526 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x54a>
 8003554:	4b92      	ldr	r3, [pc, #584]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4a91      	ldr	r2, [pc, #580]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6713      	str	r3, [r2, #112]	; 0x70
 8003560:	e02d      	b.n	80035be <HAL_RCC_OscConfig+0x5a6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x56c>
 800356a:	4b8d      	ldr	r3, [pc, #564]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	4a8c      	ldr	r2, [pc, #560]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	6713      	str	r3, [r2, #112]	; 0x70
 8003576:	4b8a      	ldr	r3, [pc, #552]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	4a89      	ldr	r2, [pc, #548]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	6713      	str	r3, [r2, #112]	; 0x70
 8003582:	e01c      	b.n	80035be <HAL_RCC_OscConfig+0x5a6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b05      	cmp	r3, #5
 800358a:	d10c      	bne.n	80035a6 <HAL_RCC_OscConfig+0x58e>
 800358c:	4b84      	ldr	r3, [pc, #528]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a83      	ldr	r2, [pc, #524]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
 8003598:	4b81      	ldr	r3, [pc, #516]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a80      	ldr	r2, [pc, #512]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	e00b      	b.n	80035be <HAL_RCC_OscConfig+0x5a6>
 80035a6:	4b7e      	ldr	r3, [pc, #504]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a7d      	ldr	r2, [pc, #500]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
 80035b2:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a7a      	ldr	r2, [pc, #488]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d015      	beq.n	80035f2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c6:	f7fe f99b 	bl	8001900 <HAL_GetTick>
 80035ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fe f997 	bl	8001900 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e122      	b.n	800382a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035e4:	4b6e      	ldr	r3, [pc, #440]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ee      	beq.n	80035ce <HAL_RCC_OscConfig+0x5b6>
 80035f0:	e014      	b.n	800361c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fe f985 	bl	8001900 <HAL_GetTick>
 80035f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe f981 	bl	8001900 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e10c      	b.n	800382a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003610:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ee      	bne.n	80035fa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8101 	beq.w	8003828 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003626:	4b5e      	ldr	r3, [pc, #376]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800362e:	2b18      	cmp	r3, #24
 8003630:	f000 80bc 	beq.w	80037ac <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	2b02      	cmp	r3, #2
 800363a:	f040 8095 	bne.w	8003768 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b58      	ldr	r3, [pc, #352]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a57      	ldr	r2, [pc, #348]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fe f959 	bl	8001900 <HAL_GetTick>
 800364e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003652:	f7fe f955 	bl	8001900 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0e2      	b.n	800382a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003664:	4b4e      	ldr	r3, [pc, #312]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f0      	bne.n	8003652 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_RCC_OscConfig+0x78c>)
 8003676:	4013      	ands	r3, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003680:	0112      	lsls	r2, r2, #4
 8003682:	430a      	orrs	r2, r1
 8003684:	4946      	ldr	r1, [pc, #280]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003686:	4313      	orrs	r3, r2
 8003688:	628b      	str	r3, [r1, #40]	; 0x28
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	3b01      	subs	r3, #1
 8003690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	3b01      	subs	r3, #1
 800369a:	025b      	lsls	r3, r3, #9
 800369c:	b29b      	uxth	r3, r3
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	3b01      	subs	r3, #1
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036ba:	4939      	ldr	r1, [pc, #228]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80036c0:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	4a36      	ldr	r2, [pc, #216]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80036ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d0:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <HAL_RCC_OscConfig+0x790>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036d8:	00d2      	lsls	r2, r2, #3
 80036da:	4931      	ldr	r1, [pc, #196]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036e0:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f023 020c 	bic.w	r2, r3, #12
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	492c      	ldr	r1, [pc, #176]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036f2:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f023 0202 	bic.w	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	4928      	ldr	r1, [pc, #160]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003700:	4313      	orrs	r3, r2
 8003702:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003704:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003710:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	4a22      	ldr	r2, [pc, #136]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800371c:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003734:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800373a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe f8de 	bl	8001900 <HAL_GetTick>
 8003744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe f8da 	bl	8001900 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e067      	b.n	800382a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x730>
 8003766:	e05f      	b.n	8003828 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003768:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 800376e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fe f8c4 	bl	8001900 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377c:	f7fe f8c0 	bl	8001900 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e04d      	b.n	800382a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_RCC_OscConfig+0x788>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x764>
 800379a:	e045      	b.n	8003828 <HAL_RCC_OscConfig+0x810>
 800379c:	58024800 	.word	0x58024800
 80037a0:	58024400 	.word	0x58024400
 80037a4:	fffffc0c 	.word	0xfffffc0c
 80037a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037ac:	4b21      	ldr	r3, [pc, #132]	; (8003834 <HAL_RCC_OscConfig+0x81c>)
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_RCC_OscConfig+0x81c>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d031      	beq.n	8003824 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f003 0203 	and.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d12a      	bne.n	8003824 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d122      	bne.n	8003824 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d11a      	bne.n	8003824 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	0a5b      	lsrs	r3, r3, #9
 80037f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d111      	bne.n	8003824 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	0c1b      	lsrs	r3, r3, #16
 8003804:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d108      	bne.n	8003824 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	0e1b      	lsrs	r3, r3, #24
 8003816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3730      	adds	r7, #48	; 0x30
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	58024400 	.word	0x58024400

08003838 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e19c      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b8a      	ldr	r3, [pc, #552]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d910      	bls.n	800387c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b87      	ldr	r3, [pc, #540]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 020f 	bic.w	r2, r3, #15
 8003862:	4985      	ldr	r1, [pc, #532]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b83      	ldr	r3, [pc, #524]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e184      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d010      	beq.n	80038aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003894:	429a      	cmp	r2, r3
 8003896:	d908      	bls.n	80038aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003898:	4b78      	ldr	r3, [pc, #480]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	4975      	ldr	r1, [pc, #468]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d010      	beq.n	80038d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	4b70      	ldr	r3, [pc, #448]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d908      	bls.n	80038d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038c6:	4b6d      	ldr	r3, [pc, #436]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	496a      	ldr	r1, [pc, #424]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d010      	beq.n	8003906 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	4b64      	ldr	r3, [pc, #400]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d908      	bls.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038f4:	4b61      	ldr	r3, [pc, #388]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	495e      	ldr	r1, [pc, #376]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003902:	4313      	orrs	r3, r2
 8003904:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d010      	beq.n	8003934 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800391e:	429a      	cmp	r2, r3
 8003920:	d908      	bls.n	8003934 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003922:	4b56      	ldr	r3, [pc, #344]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	4953      	ldr	r1, [pc, #332]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003930:	4313      	orrs	r3, r2
 8003932:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d010      	beq.n	8003962 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	4b4d      	ldr	r3, [pc, #308]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	429a      	cmp	r2, r3
 800394e:	d908      	bls.n	8003962 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b4a      	ldr	r3, [pc, #296]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f023 020f 	bic.w	r2, r3, #15
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4947      	ldr	r1, [pc, #284]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 800395e:	4313      	orrs	r3, r2
 8003960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d055      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800396e:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	4940      	ldr	r1, [pc, #256]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 800397c:	4313      	orrs	r3, r2
 800397e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d107      	bne.n	8003998 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003988:	4b3c      	ldr	r3, [pc, #240]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d121      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0f6      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039a0:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d115      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0ea      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039b8:	4b30      	ldr	r3, [pc, #192]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0de      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039c8:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0d6      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039d8:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f023 0207 	bic.w	r2, r3, #7
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4925      	ldr	r1, [pc, #148]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ea:	f7fd ff89 	bl	8001900 <HAL_GetTick>
 80039ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f0:	e00a      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f2:	f7fd ff85 	bl	8001900 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e0be      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a08:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d1eb      	bne.n	80039f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d010      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d208      	bcs.n	8003a48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f023 020f 	bic.w	r2, r3, #15
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	490e      	ldr	r1, [pc, #56]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d214      	bcs.n	8003a80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 020f 	bic.w	r2, r3, #15
 8003a5e:	4906      	ldr	r1, [pc, #24]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e086      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
 8003a78:	52002000 	.word	0x52002000
 8003a7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d010      	beq.n	8003aae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d208      	bcs.n	8003aae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a9c:	4b3c      	ldr	r3, [pc, #240]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	4939      	ldr	r1, [pc, #228]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d010      	beq.n	8003adc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	4b34      	ldr	r3, [pc, #208]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d208      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003aca:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	492e      	ldr	r1, [pc, #184]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d010      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d208      	bcs.n	8003b0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	4922      	ldr	r1, [pc, #136]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d010      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d208      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b26:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4917      	ldr	r1, [pc, #92]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b38:	f000 f89e 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	4912      	ldr	r1, [pc, #72]	; (8003b94 <HAL_RCC_ClockConfig+0x35c>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
 8003b54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <HAL_RCC_ClockConfig+0x35c>)
 8003b60:	5cd3      	ldrb	r3, [r2, r3]
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6c:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <HAL_RCC_ClockConfig+0x360>)
 8003b6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b70:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <HAL_RCC_ClockConfig+0x364>)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_RCC_ClockConfig+0x368>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd fe76 	bl	800186c <HAL_InitTick>
 8003b80:	4603      	mov	r3, r0
 8003b82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	58024400 	.word	0x58024400
 8003b94:	08007920 	.word	0x08007920
 8003b98:	24000004 	.word	0x24000004
 8003b9c:	24000000 	.word	0x24000000
 8003ba0:	24000008 	.word	0x24000008

08003ba4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08c      	sub	sp, #48	; 0x30
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d12a      	bne.n	8003c0c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <HAL_RCC_MCOConfig+0xc8>)
 8003bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bbc:	4a2b      	ldr	r2, [pc, #172]	; (8003c6c <HAL_RCC_MCOConfig+0xc8>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bc6:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <HAL_RCC_MCOConfig+0xc8>)
 8003bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bde:	2303      	movs	r3, #3
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003be6:	2300      	movs	r3, #0
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003bea:	f107 031c 	add.w	r3, r7, #28
 8003bee:	4619      	mov	r1, r3
 8003bf0:	481f      	ldr	r0, [pc, #124]	; (8003c70 <HAL_RCC_MCOConfig+0xcc>)
 8003bf2:	f7fd ffa5 	bl	8001b40 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_RCC_MCOConfig+0xc8>)
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	430b      	orrs	r3, r1
 8003c04:	4919      	ldr	r1, [pc, #100]	; (8003c6c <HAL_RCC_MCOConfig+0xc8>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003c0a:	e02a      	b.n	8003c62 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <HAL_RCC_MCOConfig+0xc8>)
 8003c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c12:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <HAL_RCC_MCOConfig+0xc8>)
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_RCC_MCOConfig+0xc8>)
 8003c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c30:	2302      	movs	r3, #2
 8003c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c34:	2303      	movs	r3, #3
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003c40:	f107 031c 	add.w	r3, r7, #28
 8003c44:	4619      	mov	r1, r3
 8003c46:	480b      	ldr	r0, [pc, #44]	; (8003c74 <HAL_RCC_MCOConfig+0xd0>)
 8003c48:	f7fd ff7a 	bl	8001b40 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003c4c:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <HAL_RCC_MCOConfig+0xc8>)
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	01d9      	lsls	r1, r3, #7
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	4903      	ldr	r1, [pc, #12]	; (8003c6c <HAL_RCC_MCOConfig+0xc8>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	610b      	str	r3, [r1, #16]
}
 8003c62:	bf00      	nop
 8003c64:	3730      	adds	r7, #48	; 0x30
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	58020000 	.word	0x58020000
 8003c74:	58020800 	.word	0x58020800

08003c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	; 0x24
 8003c7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c7e:	4bb3      	ldr	r3, [pc, #716]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c86:	2b18      	cmp	r3, #24
 8003c88:	f200 8155 	bhi.w	8003f36 <HAL_RCC_GetSysClockFreq+0x2be>
 8003c8c:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003cf9 	.word	0x08003cf9
 8003c98:	08003f37 	.word	0x08003f37
 8003c9c:	08003f37 	.word	0x08003f37
 8003ca0:	08003f37 	.word	0x08003f37
 8003ca4:	08003f37 	.word	0x08003f37
 8003ca8:	08003f37 	.word	0x08003f37
 8003cac:	08003f37 	.word	0x08003f37
 8003cb0:	08003f37 	.word	0x08003f37
 8003cb4:	08003d1f 	.word	0x08003d1f
 8003cb8:	08003f37 	.word	0x08003f37
 8003cbc:	08003f37 	.word	0x08003f37
 8003cc0:	08003f37 	.word	0x08003f37
 8003cc4:	08003f37 	.word	0x08003f37
 8003cc8:	08003f37 	.word	0x08003f37
 8003ccc:	08003f37 	.word	0x08003f37
 8003cd0:	08003f37 	.word	0x08003f37
 8003cd4:	08003d25 	.word	0x08003d25
 8003cd8:	08003f37 	.word	0x08003f37
 8003cdc:	08003f37 	.word	0x08003f37
 8003ce0:	08003f37 	.word	0x08003f37
 8003ce4:	08003f37 	.word	0x08003f37
 8003ce8:	08003f37 	.word	0x08003f37
 8003cec:	08003f37 	.word	0x08003f37
 8003cf0:	08003f37 	.word	0x08003f37
 8003cf4:	08003d2b 	.word	0x08003d2b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cf8:	4b94      	ldr	r3, [pc, #592]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d04:	4b91      	ldr	r3, [pc, #580]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	08db      	lsrs	r3, r3, #3
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	4a90      	ldr	r2, [pc, #576]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
 8003d14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d16:	e111      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d18:	4b8d      	ldr	r3, [pc, #564]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d1a:	61bb      	str	r3, [r7, #24]
    break;
 8003d1c:	e10e      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d1e:	4b8d      	ldr	r3, [pc, #564]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d20:	61bb      	str	r3, [r7, #24]
    break;
 8003d22:	e10b      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003d24:	4b8c      	ldr	r3, [pc, #560]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d26:	61bb      	str	r3, [r7, #24]
    break;
 8003d28:	e108      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d2a:	4b88      	ldr	r3, [pc, #544]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003d34:	4b85      	ldr	r3, [pc, #532]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d40:	4b82      	ldr	r3, [pc, #520]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d4a:	4b80      	ldr	r3, [pc, #512]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	08db      	lsrs	r3, r3, #3
 8003d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d62:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80e1 	beq.w	8003f30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	f000 8083 	beq.w	8003e7c <HAL_RCC_GetSysClockFreq+0x204>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	f200 80a1 	bhi.w	8003ec0 <HAL_RCC_GetSysClockFreq+0x248>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x114>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d056      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d8a:	e099      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d8c:	4b6f      	ldr	r3, [pc, #444]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02d      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d98:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	08db      	lsrs	r3, r3, #3
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	4a6b      	ldr	r2, [pc, #428]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
 8003da8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	ee07 3a90 	vmov	s15, r3
 8003db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc2:	4b62      	ldr	r3, [pc, #392]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dd6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003df2:	e087      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e06:	4b51      	ldr	r3, [pc, #324]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e36:	e065      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4a:	4b40      	ldr	r3, [pc, #256]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e7a:	e043      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e86:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e8e:	4b2f      	ldr	r3, [pc, #188]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ea2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ebe:	e021      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ee6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f02:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f04:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	0a5b      	lsrs	r3, r3, #9
 8003f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f0e:	3301      	adds	r3, #1
 8003f10:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f28:	ee17 3a90 	vmov	r3, s15
 8003f2c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f2e:	e005      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
    break;
 8003f34:	e002      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f38:	61bb      	str	r3, [r7, #24]
    break;
 8003f3a:	bf00      	nop
  }

  return sysclockfreq;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3724      	adds	r7, #36	; 0x24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	58024400 	.word	0x58024400
 8003f50:	03d09000 	.word	0x03d09000
 8003f54:	003d0900 	.word	0x003d0900
 8003f58:	017d7840 	.word	0x017d7840
 8003f5c:	46000000 	.word	0x46000000
 8003f60:	4c742400 	.word	0x4c742400
 8003f64:	4a742400 	.word	0x4a742400
 8003f68:	4bbebc20 	.word	0x4bbebc20

08003f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f72:	f7ff fe81 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8003f76:	4602      	mov	r2, r0
 8003f78:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x50>)
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	490f      	ldr	r1, [pc, #60]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f84:	5ccb      	ldrb	r3, [r1, r3]
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x50>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f9a:	5cd3      	ldrb	r3, [r2, r3]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fa8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003faa:	4a07      	ldr	r2, [pc, #28]	; (8003fc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003fb0:	4b04      	ldr	r3, [pc, #16]	; (8003fc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	58024400 	.word	0x58024400
 8003fc0:	08007920 	.word	0x08007920
 8003fc4:	24000004 	.word	0x24000004
 8003fc8:	24000000 	.word	0x24000000

08003fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003fd0:	f7ff ffcc 	bl	8003f6c <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	091b      	lsrs	r3, r3, #4
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4904      	ldr	r1, [pc, #16]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	08007920 	.word	0x08007920

08003ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ffc:	f7ff ffb6 	bl	8003f6c <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4904      	ldr	r1, [pc, #16]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x28>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	58024400 	.word	0x58024400
 8004020:	08007920 	.word	0x08007920

08004024 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800402c:	2300      	movs	r3, #0
 800402e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004030:	2300      	movs	r3, #0
 8004032:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d03f      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004044:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004048:	d02a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800404a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800404e:	d824      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004054:	d018      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800405a:	d81e      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004064:	d007      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004066:	e018      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004068:	4bab      	ldr	r3, [pc, #684]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	4aaa      	ldr	r2, [pc, #680]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800406e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004072:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004074:	e015      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	2102      	movs	r1, #2
 800407c:	4618      	mov	r0, r3
 800407e:	f001 f9ff 	bl	8005480 <RCCEx_PLL2_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004086:	e00c      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3324      	adds	r3, #36	; 0x24
 800408c:	2102      	movs	r1, #2
 800408e:	4618      	mov	r0, r3
 8004090:	f001 faa8 	bl	80055e4 <RCCEx_PLL3_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004098:	e003      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
      break;
 800409e:	e000      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80040a8:	4b9b      	ldr	r3, [pc, #620]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040b4:	4998      	ldr	r1, [pc, #608]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	650b      	str	r3, [r1, #80]	; 0x50
 80040ba:	e001      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d03d      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d826      	bhi.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	080040f1 	.word	0x080040f1
 80040e0:	080040ff 	.word	0x080040ff
 80040e4:	08004111 	.word	0x08004111
 80040e8:	08004129 	.word	0x08004129
 80040ec:	08004129 	.word	0x08004129
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f0:	4b89      	ldr	r3, [pc, #548]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	4a88      	ldr	r2, [pc, #544]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040fc:	e015      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f001 f9bb 	bl	8005480 <RCCEx_PLL2_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800410e:	e00c      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3324      	adds	r3, #36	; 0x24
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f001 fa64 	bl	80055e4 <RCCEx_PLL3_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004120:	e003      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	75fb      	strb	r3, [r7, #23]
      break;
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800412a:	7dfb      	ldrb	r3, [r7, #23]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d109      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004130:	4b79      	ldr	r3, [pc, #484]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004134:	f023 0207 	bic.w	r2, r3, #7
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	4976      	ldr	r1, [pc, #472]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	650b      	str	r3, [r1, #80]	; 0x50
 8004142:	e001      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	7dfb      	ldrb	r3, [r7, #23]
 8004146:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004150:	2b00      	cmp	r3, #0
 8004152:	d042      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415c:	d02b      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800415e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004162:	d825      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004164:	2bc0      	cmp	r3, #192	; 0xc0
 8004166:	d028      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004168:	2bc0      	cmp	r3, #192	; 0xc0
 800416a:	d821      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800416c:	2b80      	cmp	r3, #128	; 0x80
 800416e:	d016      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004170:	2b80      	cmp	r3, #128	; 0x80
 8004172:	d81d      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004178:	2b40      	cmp	r3, #64	; 0x40
 800417a:	d007      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800417c:	e018      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417e:	4b66      	ldr	r3, [pc, #408]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	4a65      	ldr	r2, [pc, #404]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800418a:	e017      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f001 f974 	bl	8005480 <RCCEx_PLL2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800419c:	e00e      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3324      	adds	r3, #36	; 0x24
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 fa1d 	bl	80055e4 <RCCEx_PLL3_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80041ae:	e005      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	75fb      	strb	r3, [r7, #23]
      break;
 80041b4:	e002      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80041ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80041c2:	4b55      	ldr	r3, [pc, #340]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ce:	4952      	ldr	r1, [pc, #328]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	650b      	str	r3, [r1, #80]	; 0x50
 80041d4:	e001      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
 80041d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d049      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f0:	d030      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80041f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f6:	d82a      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80041f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041fc:	d02c      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80041fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004202:	d824      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004208:	d018      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800420a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420e:	d81e      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004218:	d007      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800421a:	e018      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421c:	4b3e      	ldr	r3, [pc, #248]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	4a3d      	ldr	r2, [pc, #244]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004226:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004228:	e017      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f001 f925 	bl	8005480 <RCCEx_PLL2_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800423a:	e00e      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3324      	adds	r3, #36	; 0x24
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f001 f9ce 	bl	80055e4 <RCCEx_PLL3_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800424c:	e005      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	75fb      	strb	r3, [r7, #23]
      break;
 8004252:	e002      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004260:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800426e:	492a      	ldr	r1, [pc, #168]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004270:	4313      	orrs	r3, r2
 8004272:	658b      	str	r3, [r1, #88]	; 0x58
 8004274:	e001      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004276:	7dfb      	ldrb	r3, [r7, #23]
 8004278:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004282:	2b00      	cmp	r3, #0
 8004284:	d04c      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800428c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004290:	d030      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004296:	d82a      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004298:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800429c:	d02c      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800429e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042a2:	d824      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80042a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042a8:	d018      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80042aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ae:	d81e      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80042b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042b8:	d007      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80042ba:	e018      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042bc:	4b16      	ldr	r3, [pc, #88]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	4a15      	ldr	r2, [pc, #84]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042c8:	e017      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 f8d5 	bl	8005480 <RCCEx_PLL2_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042da:	e00e      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3324      	adds	r3, #36	; 0x24
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f001 f97e 	bl	80055e4 <RCCEx_PLL3_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042ec:	e005      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	75fb      	strb	r3, [r7, #23]
      break;
 80042f2:	e002      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80042f4:	bf00      	nop
 80042f6:	e000      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80042f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10d      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800430e:	4902      	ldr	r1, [pc, #8]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004310:	4313      	orrs	r3, r2
 8004312:	658b      	str	r3, [r1, #88]	; 0x58
 8004314:	e004      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004316:	bf00      	nop
 8004318:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d032      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004330:	2b30      	cmp	r3, #48	; 0x30
 8004332:	d01c      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004334:	2b30      	cmp	r3, #48	; 0x30
 8004336:	d817      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004338:	2b20      	cmp	r3, #32
 800433a:	d00c      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800433c:	2b20      	cmp	r3, #32
 800433e:	d813      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d016      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004344:	2b10      	cmp	r3, #16
 8004346:	d10f      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004348:	4bb1      	ldr	r3, [pc, #708]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	4ab0      	ldr	r2, [pc, #704]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800434e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004354:	e00e      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3304      	adds	r3, #4
 800435a:	2102      	movs	r1, #2
 800435c:	4618      	mov	r0, r3
 800435e:	f001 f88f 	bl	8005480 <RCCEx_PLL2_Config>
 8004362:	4603      	mov	r3, r0
 8004364:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004366:	e005      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	75fb      	strb	r3, [r7, #23]
      break;
 800436c:	e002      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800436e:	bf00      	nop
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800437a:	4ba5      	ldr	r3, [pc, #660]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004386:	49a2      	ldr	r1, [pc, #648]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004388:	4313      	orrs	r3, r2
 800438a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800438c:	e001      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438e:	7dfb      	ldrb	r3, [r7, #23]
 8004390:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d047      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043a6:	d030      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80043a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ac:	d82a      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80043ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043b2:	d02c      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80043b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043b8:	d824      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80043ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043be:	d018      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80043c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c4:	d81e      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ce:	d007      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80043d0:	e018      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d2:	4b8f      	ldr	r3, [pc, #572]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	4a8e      	ldr	r2, [pc, #568]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80043d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043de:	e017      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	2100      	movs	r1, #0
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 f84a 	bl	8005480 <RCCEx_PLL2_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043f0:	e00e      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3324      	adds	r3, #36	; 0x24
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 f8f3 	bl	80055e4 <RCCEx_PLL3_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004402:	e005      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	75fb      	strb	r3, [r7, #23]
      break;
 8004408:	e002      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800440a:	bf00      	nop
 800440c:	e000      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800440e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004416:	4b7e      	ldr	r3, [pc, #504]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004422:	497b      	ldr	r1, [pc, #492]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004424:	4313      	orrs	r3, r2
 8004426:	650b      	str	r3, [r1, #80]	; 0x50
 8004428:	e001      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d049      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800443e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004442:	d02e      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004448:	d828      	bhi.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800444a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800444e:	d02a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004450:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004454:	d822      	bhi.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800445a:	d026      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x486>
 800445c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004460:	d81c      	bhi.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004466:	d010      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800446c:	d816      	bhi.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d01d      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004476:	d111      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3304      	adds	r3, #4
 800447c:	2101      	movs	r1, #1
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fffe 	bl	8005480 <RCCEx_PLL2_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004488:	e012      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3324      	adds	r3, #36	; 0x24
 800448e:	2101      	movs	r1, #1
 8004490:	4618      	mov	r0, r3
 8004492:	f001 f8a7 	bl	80055e4 <RCCEx_PLL3_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800449a:	e009      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	75fb      	strb	r3, [r7, #23]
      break;
 80044a0:	e006      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80044a2:	bf00      	nop
 80044a4:	e004      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80044a6:	bf00      	nop
 80044a8:	e002      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80044aa:	bf00      	nop
 80044ac:	e000      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80044ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80044b6:	4b56      	ldr	r3, [pc, #344]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044c2:	4953      	ldr	r1, [pc, #332]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	650b      	str	r3, [r1, #80]	; 0x50
 80044c8:	e001      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d04b      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e4:	d02e      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80044e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ea:	d828      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f0:	d02a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f6:	d822      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80044f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044fc:	d026      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80044fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004502:	d81c      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004508:	d010      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800450a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800450e:	d816      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01d      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004518:	d111      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3304      	adds	r3, #4
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f000 ffad 	bl	8005480 <RCCEx_PLL2_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800452a:	e012      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3324      	adds	r3, #36	; 0x24
 8004530:	2101      	movs	r1, #1
 8004532:	4618      	mov	r0, r3
 8004534:	f001 f856 	bl	80055e4 <RCCEx_PLL3_Config>
 8004538:	4603      	mov	r3, r0
 800453a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800453c:	e009      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	75fb      	strb	r3, [r7, #23]
      break;
 8004542:	e006      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004544:	bf00      	nop
 8004546:	e004      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004548:	bf00      	nop
 800454a:	e002      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800454c:	bf00      	nop
 800454e:	e000      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004558:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004566:	492a      	ldr	r1, [pc, #168]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004568:	4313      	orrs	r3, r2
 800456a:	658b      	str	r3, [r1, #88]	; 0x58
 800456c:	e001      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456e:	7dfb      	ldrb	r3, [r7, #23]
 8004570:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d022      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00e      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8004586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458a:	d108      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f000 ff74 	bl	8005480 <RCCEx_PLL2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 800459c:	e003      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
      break;
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 80045a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80045ac:	4b18      	ldr	r3, [pc, #96]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80045ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b8:	4915      	ldr	r1, [pc, #84]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045be:	e001      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d031      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d8:	d00e      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80045da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045de:	d814      	bhi.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d017      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80045e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e8:	d10f      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	4a08      	ldr	r2, [pc, #32]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80045f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80045f6:	e00e      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 ff3e 	bl	8005480 <RCCEx_PLL2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004608:	e005      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
      break;
 800460e:	e002      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004610:	58024400 	.word	0x58024400
      break;
 8004614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004616:	7dfb      	ldrb	r3, [r7, #23]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800461c:	4bbc      	ldr	r3, [pc, #752]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800461e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004620:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	49b9      	ldr	r1, [pc, #740]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800462a:	4313      	orrs	r3, r2
 800462c:	650b      	str	r3, [r1, #80]	; 0x50
 800462e:	e001      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d032      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	2b03      	cmp	r3, #3
 8004646:	d81b      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004648:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	08004687 	.word	0x08004687
 8004654:	08004661 	.word	0x08004661
 8004658:	0800466f 	.word	0x0800466f
 800465c:	08004687 	.word	0x08004687
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004660:	4bab      	ldr	r3, [pc, #684]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	4aaa      	ldr	r2, [pc, #680]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800466a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800466c:	e00c      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3304      	adds	r3, #4
 8004672:	2102      	movs	r1, #2
 8004674:	4618      	mov	r0, r3
 8004676:	f000 ff03 	bl	8005480 <RCCEx_PLL2_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800467e:	e003      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	75fb      	strb	r3, [r7, #23]
      break;
 8004684:	e000      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8004686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800468e:	4ba0      	ldr	r3, [pc, #640]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004692:	f023 0203 	bic.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	499d      	ldr	r1, [pc, #628]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800469c:	4313      	orrs	r3, r2
 800469e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80046a0:	e001      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8086 	beq.w	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046b4:	4b97      	ldr	r3, [pc, #604]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a96      	ldr	r2, [pc, #600]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80046ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046c0:	f7fd f91e 	bl	8001900 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c6:	e009      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c8:	f7fd f91a 	bl	8001900 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b64      	cmp	r3, #100	; 0x64
 80046d4:	d902      	bls.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	75fb      	strb	r3, [r7, #23]
        break;
 80046da:	e005      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046dc:	4b8d      	ldr	r3, [pc, #564]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0ef      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d166      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046ee:	4b88      	ldr	r3, [pc, #544]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80046f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046f8:	4053      	eors	r3, r2
 80046fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d013      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004702:	4b83      	ldr	r3, [pc, #524]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800470c:	4b80      	ldr	r3, [pc, #512]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	4a7f      	ldr	r2, [pc, #508]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004716:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004718:	4b7d      	ldr	r3, [pc, #500]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	4a7c      	ldr	r2, [pc, #496]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800471e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004722:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004724:	4a7a      	ldr	r2, [pc, #488]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004734:	d115      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fd f8e3 	bl	8001900 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800473c:	e00b      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473e:	f7fd f8df 	bl	8001900 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f241 3288 	movw	r2, #5000	; 0x1388
 800474c:	4293      	cmp	r3, r2
 800474e:	d902      	bls.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	75fb      	strb	r3, [r7, #23]
            break;
 8004754:	e005      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004756:	4b6e      	ldr	r3, [pc, #440]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0ed      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d126      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800476e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004776:	d10d      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8004778:	4b65      	ldr	r3, [pc, #404]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004786:	0919      	lsrs	r1, r3, #4
 8004788:	4b63      	ldr	r3, [pc, #396]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 800478a:	400b      	ands	r3, r1
 800478c:	4960      	ldr	r1, [pc, #384]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800478e:	4313      	orrs	r3, r2
 8004790:	610b      	str	r3, [r1, #16]
 8004792:	e005      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8004794:	4b5e      	ldr	r3, [pc, #376]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	4a5d      	ldr	r2, [pc, #372]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800479a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800479e:	6113      	str	r3, [r2, #16]
 80047a0:	4b5b      	ldr	r3, [pc, #364]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ae:	4958      	ldr	r1, [pc, #352]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	670b      	str	r3, [r1, #112]	; 0x70
 80047b4:	e004      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
 80047b8:	75bb      	strb	r3, [r7, #22]
 80047ba:	e001      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
 80047be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d07e      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d0:	2b28      	cmp	r3, #40	; 0x28
 80047d2:	d867      	bhi.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x880>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	080048ab 	.word	0x080048ab
 80047e0:	080048a5 	.word	0x080048a5
 80047e4:	080048a5 	.word	0x080048a5
 80047e8:	080048a5 	.word	0x080048a5
 80047ec:	080048a5 	.word	0x080048a5
 80047f0:	080048a5 	.word	0x080048a5
 80047f4:	080048a5 	.word	0x080048a5
 80047f8:	080048a5 	.word	0x080048a5
 80047fc:	08004881 	.word	0x08004881
 8004800:	080048a5 	.word	0x080048a5
 8004804:	080048a5 	.word	0x080048a5
 8004808:	080048a5 	.word	0x080048a5
 800480c:	080048a5 	.word	0x080048a5
 8004810:	080048a5 	.word	0x080048a5
 8004814:	080048a5 	.word	0x080048a5
 8004818:	080048a5 	.word	0x080048a5
 800481c:	08004893 	.word	0x08004893
 8004820:	080048a5 	.word	0x080048a5
 8004824:	080048a5 	.word	0x080048a5
 8004828:	080048a5 	.word	0x080048a5
 800482c:	080048a5 	.word	0x080048a5
 8004830:	080048a5 	.word	0x080048a5
 8004834:	080048a5 	.word	0x080048a5
 8004838:	080048a5 	.word	0x080048a5
 800483c:	080048ab 	.word	0x080048ab
 8004840:	080048a5 	.word	0x080048a5
 8004844:	080048a5 	.word	0x080048a5
 8004848:	080048a5 	.word	0x080048a5
 800484c:	080048a5 	.word	0x080048a5
 8004850:	080048a5 	.word	0x080048a5
 8004854:	080048a5 	.word	0x080048a5
 8004858:	080048a5 	.word	0x080048a5
 800485c:	080048ab 	.word	0x080048ab
 8004860:	080048a5 	.word	0x080048a5
 8004864:	080048a5 	.word	0x080048a5
 8004868:	080048a5 	.word	0x080048a5
 800486c:	080048a5 	.word	0x080048a5
 8004870:	080048a5 	.word	0x080048a5
 8004874:	080048a5 	.word	0x080048a5
 8004878:	080048a5 	.word	0x080048a5
 800487c:	080048ab 	.word	0x080048ab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	2101      	movs	r1, #1
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fdfa 	bl	8005480 <RCCEx_PLL2_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004890:	e00c      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3324      	adds	r3, #36	; 0x24
 8004896:	2101      	movs	r1, #1
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fea3 	bl	80055e4 <RCCEx_PLL3_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80048a2:	e003      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	75fb      	strb	r3, [r7, #23]
      break;
 80048a8:	e000      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 80048aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048b2:	4b17      	ldr	r3, [pc, #92]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048be:	4914      	ldr	r1, [pc, #80]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	654b      	str	r3, [r1, #84]	; 0x54
 80048c4:	e001      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
 80048c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d03e      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d827      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	08004935 	.word	0x08004935
 80048e8:	080048fd 	.word	0x080048fd
 80048ec:	0800491d 	.word	0x0800491d
 80048f0:	08004935 	.word	0x08004935
 80048f4:	08004935 	.word	0x08004935
 80048f8:	08004935 	.word	0x08004935
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fdbc 	bl	8005480 <RCCEx_PLL2_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800490c:	e013      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800490e:	bf00      	nop
 8004910:	58024400 	.word	0x58024400
 8004914:	58024800 	.word	0x58024800
 8004918:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3324      	adds	r3, #36	; 0x24
 8004920:	2101      	movs	r1, #1
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fe5e 	bl	80055e4 <RCCEx_PLL3_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
      break;
 8004932:	e000      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8004934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d109      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800493c:	4b9f      	ldr	r3, [pc, #636]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800493e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004940:	f023 0207 	bic.w	r2, r3, #7
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004948:	499c      	ldr	r1, [pc, #624]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800494a:	4313      	orrs	r3, r2
 800494c:	654b      	str	r3, [r1, #84]	; 0x54
 800494e:	e001      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d039      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004966:	2b05      	cmp	r3, #5
 8004968:	d820      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x988>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	080049b3 	.word	0x080049b3
 8004974:	08004989 	.word	0x08004989
 8004978:	0800499b 	.word	0x0800499b
 800497c:	080049b3 	.word	0x080049b3
 8004980:	080049b3 	.word	0x080049b3
 8004984:	080049b3 	.word	0x080049b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	2101      	movs	r1, #1
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fd76 	bl	8005480 <RCCEx_PLL2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004998:	e00c      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3324      	adds	r3, #36	; 0x24
 800499e:	2101      	movs	r1, #1
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fe1f 	bl	80055e4 <RCCEx_PLL3_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80049aa:	e003      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	75fb      	strb	r3, [r7, #23]
      break;
 80049b0:	e000      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 80049b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049ba:	4b80      	ldr	r3, [pc, #512]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	f023 0207 	bic.w	r2, r3, #7
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049c8:	497c      	ldr	r1, [pc, #496]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	658b      	str	r3, [r1, #88]	; 0x58
 80049ce:	e001      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d04b      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049ea:	d02e      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80049ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049f0:	d828      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f6:	d02a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fc:	d822      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80049fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a02:	d026      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8004a04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a08:	d81c      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a0e:	d010      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a14:	d816      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01d      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a1e:	d111      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fd2a 	bl	8005480 <RCCEx_PLL2_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a30:	e012      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3324      	adds	r3, #36	; 0x24
 8004a36:	2102      	movs	r1, #2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fdd3 	bl	80055e4 <RCCEx_PLL3_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a42:	e009      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	75fb      	strb	r3, [r7, #23]
      break;
 8004a48:	e006      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e004      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e002      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a5e:	4b57      	ldr	r3, [pc, #348]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6c:	4953      	ldr	r1, [pc, #332]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	654b      	str	r3, [r1, #84]	; 0x54
 8004a72:	e001      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d04b      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a8e:	d02e      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004a90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a94:	d828      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9a:	d02a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8004a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa0:	d822      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004aa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aa6:	d026      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8004aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aac:	d81c      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab2:	d010      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab8:	d816      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01d      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8004abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac2:	d111      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	2100      	movs	r1, #0
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fcd8 	bl	8005480 <RCCEx_PLL2_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ad4:	e012      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3324      	adds	r3, #36	; 0x24
 8004ada:	2102      	movs	r1, #2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fd81 	bl	80055e4 <RCCEx_PLL3_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ae6:	e009      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	75fb      	strb	r3, [r7, #23]
      break;
 8004aec:	e006      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004aee:	bf00      	nop
 8004af0:	e004      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004af2:	bf00      	nop
 8004af4:	e002      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004af6:	bf00      	nop
 8004af8:	e000      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b02:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b10:	492a      	ldr	r1, [pc, #168]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	658b      	str	r3, [r1, #88]	; 0x58
 8004b16:	e001      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
 8004b1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d04d      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b32:	d02e      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8004b34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b38:	d828      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b3e:	d02a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8004b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b44:	d822      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004b46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b4a:	d026      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8004b4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b50:	d81c      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b56:	d010      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8004b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b5c:	d816      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01d      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8004b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b66:	d111      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fc86 	bl	8005480 <RCCEx_PLL2_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b78:	e012      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3324      	adds	r3, #36	; 0x24
 8004b7e:	2102      	movs	r1, #2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fd2f 	bl	80055e4 <RCCEx_PLL3_Config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b8a:	e009      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b90:	e006      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004b92:	bf00      	nop
 8004b94:	e004      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004b96:	bf00      	nop
 8004b98:	e002      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e000      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bb4:	4901      	ldr	r1, [pc, #4]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	658b      	str	r3, [r1, #88]	; 0x58
 8004bba:	e003      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004bbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01a      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bda:	d10a      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3324      	adds	r3, #36	; 0x24
 8004be0:	2102      	movs	r1, #2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fcfe 	bl	80055e4 <RCCEx_PLL3_Config>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004bf2:	4b8c      	ldr	r3, [pc, #560]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c00:	4988      	ldr	r1, [pc, #544]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1c:	d10a      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3324      	adds	r3, #36	; 0x24
 8004c22:	2102      	movs	r1, #2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fcdd 	bl	80055e4 <RCCEx_PLL3_Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c34:	4b7b      	ldr	r3, [pc, #492]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c42:	4978      	ldr	r1, [pc, #480]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d034      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c5e:	d01d      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c64:	d817      	bhi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6e:	d009      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8004c70:	e011      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fc01 	bl	8005480 <RCCEx_PLL2_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c82:	e00c      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3324      	adds	r3, #36	; 0x24
 8004c88:	2102      	movs	r1, #2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fcaa 	bl	80055e4 <RCCEx_PLL3_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c94:	e003      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9a:	e000      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8004c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ca4:	4b5f      	ldr	r3, [pc, #380]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cb2:	495c      	ldr	r1, [pc, #368]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	658b      	str	r3, [r1, #88]	; 0x58
 8004cb8:	e001      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cba:	7dfb      	ldrb	r3, [r7, #23]
 8004cbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d033      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cd4:	d01c      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004cd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cda:	d816      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8004cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce0:	d003      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce6:	d007      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8004ce8:	e00f      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cea:	4b4e      	ldr	r3, [pc, #312]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	4a4d      	ldr	r2, [pc, #308]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004cf6:	e00c      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3324      	adds	r3, #36	; 0x24
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fc70 	bl	80055e4 <RCCEx_PLL3_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d08:	e003      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d0e:	e000      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8004d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d18:	4b42      	ldr	r3, [pc, #264]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	493f      	ldr	r1, [pc, #252]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	654b      	str	r3, [r1, #84]	; 0x54
 8004d2c:	e001      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d029      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4a:	d007      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8004d4c:	e00f      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d4e:	4b35      	ldr	r3, [pc, #212]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	4a34      	ldr	r2, [pc, #208]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	2102      	movs	r1, #2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fb8c 	bl	8005480 <RCCEx_PLL2_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d6c:	e002      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
      break;
 8004d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d7a:	4b2a      	ldr	r3, [pc, #168]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d86:	4927      	ldr	r1, [pc, #156]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d8c:	e001      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3324      	adds	r3, #36	; 0x24
 8004da2:	2102      	movs	r1, #2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fc1d 	bl	80055e4 <RCCEx_PLL3_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d035      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dca:	d017      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8004dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd0:	d811      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd6:	d013      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ddc:	d80b      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d010      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8004de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de6:	d106      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de8:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	4a0d      	ldr	r2, [pc, #52]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004df4:	e007      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dfa:	e004      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004dfc:	bf00      	nop
 8004dfe:	e002      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004e00:	bf00      	nop
 8004e02:	e000      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e06:	7dfb      	ldrb	r3, [r7, #23]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10d      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e1a:	4902      	ldr	r1, [pc, #8]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	654b      	str	r3, [r1, #84]	; 0x54
 8004e20:	e004      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8004e22:	bf00      	nop
 8004e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e38:	4b31      	ldr	r3, [pc, #196]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e44:	492e      	ldr	r1, [pc, #184]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004e56:	4b2a      	ldr	r3, [pc, #168]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e64:	4926      	ldr	r1, [pc, #152]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e76:	4b22      	ldr	r3, [pc, #136]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e82:	491f      	ldr	r1, [pc, #124]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00d      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e94:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e9e:	6113      	str	r3, [r2, #16]
 8004ea0:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004eaa:	4915      	ldr	r1, [pc, #84]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	da08      	bge.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	490e      	ldr	r1, [pc, #56]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee4:	4906      	ldr	r1, [pc, #24]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004eea:	7dbb      	ldrb	r3, [r7, #22]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	58024400 	.word	0x58024400

08004f04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f08:	f7ff f830 	bl	8003f6c <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	091b      	lsrs	r3, r3, #4
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4904      	ldr	r1, [pc, #16]	; (8004f2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	f003 031f 	and.w	r3, r3, #31
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	08007920 	.word	0x08007920

08004f30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b089      	sub	sp, #36	; 0x24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f38:	4ba1      	ldr	r3, [pc, #644]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004f42:	4b9f      	ldr	r3, [pc, #636]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f46:	0b1b      	lsrs	r3, r3, #12
 8004f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f4e:	4b9c      	ldr	r3, [pc, #624]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004f5a:	4b99      	ldr	r3, [pc, #612]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	08db      	lsrs	r3, r3, #3
 8004f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	fb02 f303 	mul.w	r3, r2, r3
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8111 	beq.w	80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	f000 8083 	beq.w	800508c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	f200 80a1 	bhi.w	80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d056      	beq.n	8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f9a:	e099      	b.n	80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f9c:	4b88      	ldr	r3, [pc, #544]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d02d      	beq.n	8005004 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fa8:	4b85      	ldr	r3, [pc, #532]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	08db      	lsrs	r3, r3, #3
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	4a84      	ldr	r2, [pc, #528]	; (80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	ee07 3a90 	vmov	s15, r3
 8004fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd2:	4b7b      	ldr	r3, [pc, #492]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fe6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005002:	e087      	b.n	8005114 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005016:	4b6a      	ldr	r3, [pc, #424]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005026:	ed97 6a03 	vldr	s12, [r7, #12]
 800502a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800502e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800503a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005042:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005046:	e065      	b.n	8005114 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005052:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505a:	4b59      	ldr	r3, [pc, #356]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506a:	ed97 6a03 	vldr	s12, [r7, #12]
 800506e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800507e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800508a:	e043      	b.n	8005114 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800509a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509e:	4b48      	ldr	r3, [pc, #288]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80050b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050ce:	e021      	b.n	8005114 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e2:	4b37      	ldr	r3, [pc, #220]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005112:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005114:	4b2a      	ldr	r3, [pc, #168]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	0a5b      	lsrs	r3, r3, #9
 800511a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800512a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800512e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800513a:	ee17 2a90 	vmov	r2, s15
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005142:	4b1f      	ldr	r3, [pc, #124]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	0c1b      	lsrs	r3, r3, #16
 8005148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005158:	ee37 7a87 	vadd.f32	s14, s15, s14
 800515c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005168:	ee17 2a90 	vmov	r2, s15
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005170:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	0e1b      	lsrs	r3, r3, #24
 8005176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800518a:	edd7 6a07 	vldr	s13, [r7, #28]
 800518e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005196:	ee17 2a90 	vmov	r2, s15
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800519e:	e008      	b.n	80051b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	609a      	str	r2, [r3, #8]
}
 80051b2:	bf00      	nop
 80051b4:	3724      	adds	r7, #36	; 0x24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	58024400 	.word	0x58024400
 80051c4:	03d09000 	.word	0x03d09000
 80051c8:	46000000 	.word	0x46000000
 80051cc:	4c742400 	.word	0x4c742400
 80051d0:	4a742400 	.word	0x4a742400
 80051d4:	4bbebc20 	.word	0x4bbebc20

080051d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80051d8:	b480      	push	{r7}
 80051da:	b089      	sub	sp, #36	; 0x24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051e0:	4ba1      	ldr	r3, [pc, #644]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80051ea:	4b9f      	ldr	r3, [pc, #636]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	0d1b      	lsrs	r3, r3, #20
 80051f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80051f6:	4b9c      	ldr	r3, [pc, #624]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	0a1b      	lsrs	r3, r3, #8
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005202:	4b99      	ldr	r3, [pc, #612]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005206:	08db      	lsrs	r3, r3, #3
 8005208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8111 	beq.w	8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	2b02      	cmp	r3, #2
 800522a:	f000 8083 	beq.w	8005334 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b02      	cmp	r3, #2
 8005232:	f200 80a1 	bhi.w	8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d056      	beq.n	80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005242:	e099      	b.n	8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005244:	4b88      	ldr	r3, [pc, #544]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d02d      	beq.n	80052ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005250:	4b85      	ldr	r3, [pc, #532]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	08db      	lsrs	r3, r3, #3
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	4a84      	ldr	r2, [pc, #528]	; (800546c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
 8005260:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	ee07 3a90 	vmov	s15, r3
 8005268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527a:	4b7b      	ldr	r3, [pc, #492]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528a:	ed97 6a03 	vldr	s12, [r7, #12]
 800528e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005470 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800529e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80052aa:	e087      	b.n	80053bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80052ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052be:	4b6a      	ldr	r3, [pc, #424]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80052d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005470 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052ee:	e065      	b.n	80053bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005302:	4b59      	ldr	r3, [pc, #356]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005312:	ed97 6a03 	vldr	s12, [r7, #12]
 8005316:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005470 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800531a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005332:	e043      	b.n	80053bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005346:	4b48      	ldr	r3, [pc, #288]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005356:	ed97 6a03 	vldr	s12, [r7, #12]
 800535a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005470 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800535e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005372:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005376:	e021      	b.n	80053bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538a:	4b37      	ldr	r3, [pc, #220]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539a:	ed97 6a03 	vldr	s12, [r7, #12]
 800539e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005470 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80053bc:	4b2a      	ldr	r3, [pc, #168]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	0a5b      	lsrs	r3, r3, #9
 80053c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e2:	ee17 2a90 	vmov	r2, s15
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80053ea:	4b1f      	ldr	r3, [pc, #124]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005400:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005404:	edd7 6a07 	vldr	s13, [r7, #28]
 8005408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800540c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005410:	ee17 2a90 	vmov	r2, s15
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005418:	4b13      	ldr	r3, [pc, #76]	; (8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	0e1b      	lsrs	r3, r3, #24
 800541e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800542e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005432:	edd7 6a07 	vldr	s13, [r7, #28]
 8005436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800543a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800543e:	ee17 2a90 	vmov	r2, s15
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005446:	e008      	b.n	800545a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	609a      	str	r2, [r3, #8]
}
 800545a:	bf00      	nop
 800545c:	3724      	adds	r7, #36	; 0x24
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	58024400 	.word	0x58024400
 800546c:	03d09000 	.word	0x03d09000
 8005470:	46000000 	.word	0x46000000
 8005474:	4c742400 	.word	0x4c742400
 8005478:	4a742400 	.word	0x4a742400
 800547c:	4bbebc20 	.word	0x4bbebc20

08005480 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800548e:	4b53      	ldr	r3, [pc, #332]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b03      	cmp	r3, #3
 8005498:	d101      	bne.n	800549e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e099      	b.n	80055d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800549e:	4b4f      	ldr	r3, [pc, #316]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a4e      	ldr	r2, [pc, #312]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 80054a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054aa:	f7fc fa29 	bl	8001900 <HAL_GetTick>
 80054ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054b0:	e008      	b.n	80054c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80054b2:	f7fc fa25 	bl	8001900 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e086      	b.n	80055d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054c4:	4b45      	ldr	r3, [pc, #276]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f0      	bne.n	80054b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80054d0:	4b42      	ldr	r3, [pc, #264]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	031b      	lsls	r3, r3, #12
 80054de:	493f      	ldr	r1, [pc, #252]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	628b      	str	r3, [r1, #40]	; 0x28
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	025b      	lsls	r3, r3, #9
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	3b01      	subs	r3, #1
 8005500:	041b      	lsls	r3, r3, #16
 8005502:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	3b01      	subs	r3, #1
 800550e:	061b      	lsls	r3, r3, #24
 8005510:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005514:	4931      	ldr	r1, [pc, #196]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005516:	4313      	orrs	r3, r2
 8005518:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800551a:	4b30      	ldr	r3, [pc, #192]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	492d      	ldr	r1, [pc, #180]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005528:	4313      	orrs	r3, r2
 800552a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800552c:	4b2b      	ldr	r3, [pc, #172]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	f023 0220 	bic.w	r2, r3, #32
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	4928      	ldr	r1, [pc, #160]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 800553a:	4313      	orrs	r3, r2
 800553c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800553e:	4b27      	ldr	r3, [pc, #156]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	4a26      	ldr	r2, [pc, #152]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005544:	f023 0310 	bic.w	r3, r3, #16
 8005548:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800554a:	4b24      	ldr	r3, [pc, #144]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 800554c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800554e:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <RCCEx_PLL2_Config+0x160>)
 8005550:	4013      	ands	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	69d2      	ldr	r2, [r2, #28]
 8005556:	00d2      	lsls	r2, r2, #3
 8005558:	4920      	ldr	r1, [pc, #128]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800555e:	4b1f      	ldr	r3, [pc, #124]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005564:	f043 0310 	orr.w	r3, r3, #16
 8005568:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005570:	4b1a      	ldr	r3, [pc, #104]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800557a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800557c:	e00f      	b.n	800559e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d106      	bne.n	8005592 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005584:	4b15      	ldr	r3, [pc, #84]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	4a14      	ldr	r2, [pc, #80]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 800558a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800558e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005590:	e005      	b.n	800559e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005592:	4b12      	ldr	r3, [pc, #72]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	4a11      	ldr	r2, [pc, #68]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 8005598:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800559c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800559e:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a0e      	ldr	r2, [pc, #56]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 80055a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055aa:	f7fc f9a9 	bl	8001900 <HAL_GetTick>
 80055ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055b0:	e008      	b.n	80055c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80055b2:	f7fc f9a5 	bl	8001900 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e006      	b.n	80055d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <RCCEx_PLL2_Config+0x15c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	58024400 	.word	0x58024400
 80055e0:	ffff0007 	.word	0xffff0007

080055e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055f2:	4b53      	ldr	r3, [pc, #332]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d101      	bne.n	8005602 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e099      	b.n	8005736 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005602:	4b4f      	ldr	r3, [pc, #316]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a4e      	ldr	r2, [pc, #312]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 8005608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800560e:	f7fc f977 	bl	8001900 <HAL_GetTick>
 8005612:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005614:	e008      	b.n	8005628 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005616:	f7fc f973 	bl	8001900 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e086      	b.n	8005736 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005628:	4b45      	ldr	r3, [pc, #276]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1f0      	bne.n	8005616 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005634:	4b42      	ldr	r3, [pc, #264]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	051b      	lsls	r3, r3, #20
 8005642:	493f      	ldr	r1, [pc, #252]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 8005644:	4313      	orrs	r3, r2
 8005646:	628b      	str	r3, [r1, #40]	; 0x28
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	3b01      	subs	r3, #1
 800564e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	3b01      	subs	r3, #1
 8005658:	025b      	lsls	r3, r3, #9
 800565a:	b29b      	uxth	r3, r3
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	3b01      	subs	r3, #1
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	3b01      	subs	r3, #1
 8005672:	061b      	lsls	r3, r3, #24
 8005674:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005678:	4931      	ldr	r1, [pc, #196]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 800567a:	4313      	orrs	r3, r2
 800567c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800567e:	4b30      	ldr	r3, [pc, #192]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	492d      	ldr	r1, [pc, #180]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 800568c:	4313      	orrs	r3, r2
 800568e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005690:	4b2b      	ldr	r3, [pc, #172]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	4928      	ldr	r1, [pc, #160]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80056a2:	4b27      	ldr	r3, [pc, #156]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	4a26      	ldr	r2, [pc, #152]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80056ae:	4b24      	ldr	r3, [pc, #144]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056b2:	4b24      	ldr	r3, [pc, #144]	; (8005744 <RCCEx_PLL3_Config+0x160>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	69d2      	ldr	r2, [r2, #28]
 80056ba:	00d2      	lsls	r2, r2, #3
 80056bc:	4920      	ldr	r1, [pc, #128]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80056c2:	4b1f      	ldr	r3, [pc, #124]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80056d4:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	4a19      	ldr	r2, [pc, #100]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056e0:	e00f      	b.n	8005702 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d106      	bne.n	80056f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80056e8:	4b15      	ldr	r3, [pc, #84]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	4a14      	ldr	r2, [pc, #80]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056f4:	e005      	b.n	8005702 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	4a11      	ldr	r2, [pc, #68]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005700:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005702:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a0e      	ldr	r2, [pc, #56]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 8005708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800570e:	f7fc f8f7 	bl	8001900 <HAL_GetTick>
 8005712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005714:	e008      	b.n	8005728 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005716:	f7fc f8f3 	bl	8001900 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e006      	b.n	8005736 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <RCCEx_PLL3_Config+0x15c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0f0      	beq.n	8005716 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	58024400 	.word	0x58024400
 8005744:	ffff0007 	.word	0xffff0007

08005748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e042      	b.n	80057e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fb fed9 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2224      	movs	r2, #36	; 0x24
 8005776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f8c2 	bl	8005914 <UART_SetConfig>
 8005790:	4603      	mov	r3, r0
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e022      	b.n	80057e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fe16 	bl	80063d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fe9d 	bl	8006518 <UART_CheckIdleState>
 80057de:	4603      	mov	r3, r0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	; 0x28
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057fe:	2b20      	cmp	r3, #32
 8005800:	f040 8083 	bne.w	800590a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_UART_Transmit+0x28>
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e07b      	b.n	800590c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_UART_Transmit+0x3a>
 800581e:	2302      	movs	r3, #2
 8005820:	e074      	b.n	800590c <HAL_UART_Transmit+0x124>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2221      	movs	r2, #33	; 0x21
 8005836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800583a:	f7fc f861 	bl	8001900 <HAL_GetTick>
 800583e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005858:	d108      	bne.n	800586c <HAL_UART_Transmit+0x84>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	e003      	b.n	8005874 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005870:	2300      	movs	r3, #0
 8005872:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800587c:	e02c      	b.n	80058d8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2200      	movs	r2, #0
 8005886:	2180      	movs	r1, #128	; 0x80
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 fe90 	bl	80065ae <UART_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e039      	b.n	800590c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10b      	bne.n	80058b6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	3302      	adds	r3, #2
 80058b2:	61bb      	str	r3, [r7, #24]
 80058b4:	e007      	b.n	80058c6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3301      	adds	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1cc      	bne.n	800587e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	2140      	movs	r1, #64	; 0x40
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fe5d 	bl	80065ae <UART_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e006      	b.n	800590c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e000      	b.n	800590c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800590a:	2302      	movs	r3, #2
  }
}
 800590c:	4618      	mov	r0, r3
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005914:	b5b0      	push	{r4, r5, r7, lr}
 8005916:	b08e      	sub	sp, #56	; 0x38
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	4313      	orrs	r3, r2
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	4bbf      	ldr	r3, [pc, #764]	; (8005c40 <UART_SetConfig+0x32c>)
 8005942:	4013      	ands	r3, r2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800594a:	430b      	orrs	r3, r1
 800594c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4ab5      	ldr	r2, [pc, #724]	; (8005c44 <UART_SetConfig+0x330>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800597a:	4313      	orrs	r3, r2
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	4bb0      	ldr	r3, [pc, #704]	; (8005c48 <UART_SetConfig+0x334>)
 8005986:	4013      	ands	r3, r2
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800598e:	430b      	orrs	r3, r1
 8005990:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	f023 010f 	bic.w	r1, r3, #15
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4aa7      	ldr	r2, [pc, #668]	; (8005c4c <UART_SetConfig+0x338>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d176      	bne.n	8005aa0 <UART_SetConfig+0x18c>
 80059b2:	4ba7      	ldr	r3, [pc, #668]	; (8005c50 <UART_SetConfig+0x33c>)
 80059b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ba:	2b28      	cmp	r3, #40	; 0x28
 80059bc:	d86c      	bhi.n	8005a98 <UART_SetConfig+0x184>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <UART_SetConfig+0xb0>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	08005a69 	.word	0x08005a69
 80059c8:	08005a99 	.word	0x08005a99
 80059cc:	08005a99 	.word	0x08005a99
 80059d0:	08005a99 	.word	0x08005a99
 80059d4:	08005a99 	.word	0x08005a99
 80059d8:	08005a99 	.word	0x08005a99
 80059dc:	08005a99 	.word	0x08005a99
 80059e0:	08005a99 	.word	0x08005a99
 80059e4:	08005a71 	.word	0x08005a71
 80059e8:	08005a99 	.word	0x08005a99
 80059ec:	08005a99 	.word	0x08005a99
 80059f0:	08005a99 	.word	0x08005a99
 80059f4:	08005a99 	.word	0x08005a99
 80059f8:	08005a99 	.word	0x08005a99
 80059fc:	08005a99 	.word	0x08005a99
 8005a00:	08005a99 	.word	0x08005a99
 8005a04:	08005a79 	.word	0x08005a79
 8005a08:	08005a99 	.word	0x08005a99
 8005a0c:	08005a99 	.word	0x08005a99
 8005a10:	08005a99 	.word	0x08005a99
 8005a14:	08005a99 	.word	0x08005a99
 8005a18:	08005a99 	.word	0x08005a99
 8005a1c:	08005a99 	.word	0x08005a99
 8005a20:	08005a99 	.word	0x08005a99
 8005a24:	08005a81 	.word	0x08005a81
 8005a28:	08005a99 	.word	0x08005a99
 8005a2c:	08005a99 	.word	0x08005a99
 8005a30:	08005a99 	.word	0x08005a99
 8005a34:	08005a99 	.word	0x08005a99
 8005a38:	08005a99 	.word	0x08005a99
 8005a3c:	08005a99 	.word	0x08005a99
 8005a40:	08005a99 	.word	0x08005a99
 8005a44:	08005a89 	.word	0x08005a89
 8005a48:	08005a99 	.word	0x08005a99
 8005a4c:	08005a99 	.word	0x08005a99
 8005a50:	08005a99 	.word	0x08005a99
 8005a54:	08005a99 	.word	0x08005a99
 8005a58:	08005a99 	.word	0x08005a99
 8005a5c:	08005a99 	.word	0x08005a99
 8005a60:	08005a99 	.word	0x08005a99
 8005a64:	08005a91 	.word	0x08005a91
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6e:	e222      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005a70:	2304      	movs	r3, #4
 8005a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a76:	e21e      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005a78:	2308      	movs	r3, #8
 8005a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7e:	e21a      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005a80:	2310      	movs	r3, #16
 8005a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a86:	e216      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005a88:	2320      	movs	r3, #32
 8005a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8e:	e212      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005a90:	2340      	movs	r3, #64	; 0x40
 8005a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a96:	e20e      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a9e:	e20a      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a6b      	ldr	r2, [pc, #428]	; (8005c54 <UART_SetConfig+0x340>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d130      	bne.n	8005b0c <UART_SetConfig+0x1f8>
 8005aaa:	4b69      	ldr	r3, [pc, #420]	; (8005c50 <UART_SetConfig+0x33c>)
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	2b05      	cmp	r3, #5
 8005ab4:	d826      	bhi.n	8005b04 <UART_SetConfig+0x1f0>
 8005ab6:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <UART_SetConfig+0x1a8>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005ad5 	.word	0x08005ad5
 8005ac0:	08005add 	.word	0x08005add
 8005ac4:	08005ae5 	.word	0x08005ae5
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005af5 	.word	0x08005af5
 8005ad0:	08005afd 	.word	0x08005afd
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ada:	e1ec      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005adc:	2304      	movs	r3, #4
 8005ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae2:	e1e8      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005ae4:	2308      	movs	r3, #8
 8005ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aea:	e1e4      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005aec:	2310      	movs	r3, #16
 8005aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af2:	e1e0      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005af4:	2320      	movs	r3, #32
 8005af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005afa:	e1dc      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005afc:	2340      	movs	r3, #64	; 0x40
 8005afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b02:	e1d8      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005b04:	2380      	movs	r3, #128	; 0x80
 8005b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b0a:	e1d4      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a51      	ldr	r2, [pc, #324]	; (8005c58 <UART_SetConfig+0x344>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d130      	bne.n	8005b78 <UART_SetConfig+0x264>
 8005b16:	4b4e      	ldr	r3, [pc, #312]	; (8005c50 <UART_SetConfig+0x33c>)
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	2b05      	cmp	r3, #5
 8005b20:	d826      	bhi.n	8005b70 <UART_SetConfig+0x25c>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <UART_SetConfig+0x214>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b41 	.word	0x08005b41
 8005b2c:	08005b49 	.word	0x08005b49
 8005b30:	08005b51 	.word	0x08005b51
 8005b34:	08005b59 	.word	0x08005b59
 8005b38:	08005b61 	.word	0x08005b61
 8005b3c:	08005b69 	.word	0x08005b69
 8005b40:	2300      	movs	r3, #0
 8005b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b46:	e1b6      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005b48:	2304      	movs	r3, #4
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e1b2      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005b50:	2308      	movs	r3, #8
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	e1ae      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005b58:	2310      	movs	r3, #16
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5e:	e1aa      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005b60:	2320      	movs	r3, #32
 8005b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b66:	e1a6      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005b68:	2340      	movs	r3, #64	; 0x40
 8005b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6e:	e1a2      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b76:	e19e      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a37      	ldr	r2, [pc, #220]	; (8005c5c <UART_SetConfig+0x348>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d130      	bne.n	8005be4 <UART_SetConfig+0x2d0>
 8005b82:	4b33      	ldr	r3, [pc, #204]	; (8005c50 <UART_SetConfig+0x33c>)
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b05      	cmp	r3, #5
 8005b8c:	d826      	bhi.n	8005bdc <UART_SetConfig+0x2c8>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <UART_SetConfig+0x280>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005bad 	.word	0x08005bad
 8005b98:	08005bb5 	.word	0x08005bb5
 8005b9c:	08005bbd 	.word	0x08005bbd
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005bcd 	.word	0x08005bcd
 8005ba8:	08005bd5 	.word	0x08005bd5
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb2:	e180      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bba:	e17c      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc2:	e178      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bca:	e174      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005bcc:	2320      	movs	r3, #32
 8005bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd2:	e170      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005bd4:	2340      	movs	r3, #64	; 0x40
 8005bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bda:	e16c      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be2:	e168      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1d      	ldr	r2, [pc, #116]	; (8005c60 <UART_SetConfig+0x34c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d142      	bne.n	8005c74 <UART_SetConfig+0x360>
 8005bee:	4b18      	ldr	r3, [pc, #96]	; (8005c50 <UART_SetConfig+0x33c>)
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	2b05      	cmp	r3, #5
 8005bf8:	d838      	bhi.n	8005c6c <UART_SetConfig+0x358>
 8005bfa:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <UART_SetConfig+0x2ec>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c19 	.word	0x08005c19
 8005c04:	08005c21 	.word	0x08005c21
 8005c08:	08005c29 	.word	0x08005c29
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c65 	.word	0x08005c65
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1e:	e14a      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005c20:	2304      	movs	r3, #4
 8005c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c26:	e146      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2e:	e142      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005c30:	2310      	movs	r3, #16
 8005c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c36:	e13e      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005c38:	2320      	movs	r3, #32
 8005c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3e:	e13a      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005c40:	cfff69f3 	.word	0xcfff69f3
 8005c44:	58000c00 	.word	0x58000c00
 8005c48:	11fff4ff 	.word	0x11fff4ff
 8005c4c:	40011000 	.word	0x40011000
 8005c50:	58024400 	.word	0x58024400
 8005c54:	40004400 	.word	0x40004400
 8005c58:	40004800 	.word	0x40004800
 8005c5c:	40004c00 	.word	0x40004c00
 8005c60:	40005000 	.word	0x40005000
 8005c64:	2340      	movs	r3, #64	; 0x40
 8005c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c6a:	e124      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c72:	e120      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4acc      	ldr	r2, [pc, #816]	; (8005fac <UART_SetConfig+0x698>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d176      	bne.n	8005d6c <UART_SetConfig+0x458>
 8005c7e:	4bcc      	ldr	r3, [pc, #816]	; (8005fb0 <UART_SetConfig+0x69c>)
 8005c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c86:	2b28      	cmp	r3, #40	; 0x28
 8005c88:	d86c      	bhi.n	8005d64 <UART_SetConfig+0x450>
 8005c8a:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <UART_SetConfig+0x37c>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005d35 	.word	0x08005d35
 8005c94:	08005d65 	.word	0x08005d65
 8005c98:	08005d65 	.word	0x08005d65
 8005c9c:	08005d65 	.word	0x08005d65
 8005ca0:	08005d65 	.word	0x08005d65
 8005ca4:	08005d65 	.word	0x08005d65
 8005ca8:	08005d65 	.word	0x08005d65
 8005cac:	08005d65 	.word	0x08005d65
 8005cb0:	08005d3d 	.word	0x08005d3d
 8005cb4:	08005d65 	.word	0x08005d65
 8005cb8:	08005d65 	.word	0x08005d65
 8005cbc:	08005d65 	.word	0x08005d65
 8005cc0:	08005d65 	.word	0x08005d65
 8005cc4:	08005d65 	.word	0x08005d65
 8005cc8:	08005d65 	.word	0x08005d65
 8005ccc:	08005d65 	.word	0x08005d65
 8005cd0:	08005d45 	.word	0x08005d45
 8005cd4:	08005d65 	.word	0x08005d65
 8005cd8:	08005d65 	.word	0x08005d65
 8005cdc:	08005d65 	.word	0x08005d65
 8005ce0:	08005d65 	.word	0x08005d65
 8005ce4:	08005d65 	.word	0x08005d65
 8005ce8:	08005d65 	.word	0x08005d65
 8005cec:	08005d65 	.word	0x08005d65
 8005cf0:	08005d4d 	.word	0x08005d4d
 8005cf4:	08005d65 	.word	0x08005d65
 8005cf8:	08005d65 	.word	0x08005d65
 8005cfc:	08005d65 	.word	0x08005d65
 8005d00:	08005d65 	.word	0x08005d65
 8005d04:	08005d65 	.word	0x08005d65
 8005d08:	08005d65 	.word	0x08005d65
 8005d0c:	08005d65 	.word	0x08005d65
 8005d10:	08005d55 	.word	0x08005d55
 8005d14:	08005d65 	.word	0x08005d65
 8005d18:	08005d65 	.word	0x08005d65
 8005d1c:	08005d65 	.word	0x08005d65
 8005d20:	08005d65 	.word	0x08005d65
 8005d24:	08005d65 	.word	0x08005d65
 8005d28:	08005d65 	.word	0x08005d65
 8005d2c:	08005d65 	.word	0x08005d65
 8005d30:	08005d5d 	.word	0x08005d5d
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3a:	e0bc      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d42:	e0b8      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005d44:	2308      	movs	r3, #8
 8005d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4a:	e0b4      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e0b0      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005d54:	2320      	movs	r3, #32
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5a:	e0ac      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005d5c:	2340      	movs	r3, #64	; 0x40
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d62:	e0a8      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6a:	e0a4      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a90      	ldr	r2, [pc, #576]	; (8005fb4 <UART_SetConfig+0x6a0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d130      	bne.n	8005dd8 <UART_SetConfig+0x4c4>
 8005d76:	4b8e      	ldr	r3, [pc, #568]	; (8005fb0 <UART_SetConfig+0x69c>)
 8005d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	2b05      	cmp	r3, #5
 8005d80:	d826      	bhi.n	8005dd0 <UART_SetConfig+0x4bc>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <UART_SetConfig+0x474>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005da1 	.word	0x08005da1
 8005d8c:	08005da9 	.word	0x08005da9
 8005d90:	08005db1 	.word	0x08005db1
 8005d94:	08005db9 	.word	0x08005db9
 8005d98:	08005dc1 	.word	0x08005dc1
 8005d9c:	08005dc9 	.word	0x08005dc9
 8005da0:	2300      	movs	r3, #0
 8005da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005da6:	e086      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005da8:	2304      	movs	r3, #4
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e082      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005db0:	2308      	movs	r3, #8
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db6:	e07e      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005db8:	2310      	movs	r3, #16
 8005dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dbe:	e07a      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc6:	e076      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005dc8:	2340      	movs	r3, #64	; 0x40
 8005dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dce:	e072      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005dd0:	2380      	movs	r3, #128	; 0x80
 8005dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd6:	e06e      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a76      	ldr	r2, [pc, #472]	; (8005fb8 <UART_SetConfig+0x6a4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d130      	bne.n	8005e44 <UART_SetConfig+0x530>
 8005de2:	4b73      	ldr	r3, [pc, #460]	; (8005fb0 <UART_SetConfig+0x69c>)
 8005de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d826      	bhi.n	8005e3c <UART_SetConfig+0x528>
 8005dee:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <UART_SetConfig+0x4e0>)
 8005df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df4:	08005e0d 	.word	0x08005e0d
 8005df8:	08005e15 	.word	0x08005e15
 8005dfc:	08005e1d 	.word	0x08005e1d
 8005e00:	08005e25 	.word	0x08005e25
 8005e04:	08005e2d 	.word	0x08005e2d
 8005e08:	08005e35 	.word	0x08005e35
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e12:	e050      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005e14:	2304      	movs	r3, #4
 8005e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1a:	e04c      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e22:	e048      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005e24:	2310      	movs	r3, #16
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e044      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005e2c:	2320      	movs	r3, #32
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e32:	e040      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005e34:	2340      	movs	r3, #64	; 0x40
 8005e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3a:	e03c      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e42:	e038      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a5c      	ldr	r2, [pc, #368]	; (8005fbc <UART_SetConfig+0x6a8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d130      	bne.n	8005eb0 <UART_SetConfig+0x59c>
 8005e4e:	4b58      	ldr	r3, [pc, #352]	; (8005fb0 <UART_SetConfig+0x69c>)
 8005e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	2b05      	cmp	r3, #5
 8005e58:	d826      	bhi.n	8005ea8 <UART_SetConfig+0x594>
 8005e5a:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <UART_SetConfig+0x54c>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005e79 	.word	0x08005e79
 8005e64:	08005e81 	.word	0x08005e81
 8005e68:	08005e89 	.word	0x08005e89
 8005e6c:	08005e91 	.word	0x08005e91
 8005e70:	08005e99 	.word	0x08005e99
 8005e74:	08005ea1 	.word	0x08005ea1
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7e:	e01a      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e016      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e012      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e00e      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005e98:	2320      	movs	r3, #32
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e00a      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005ea0:	2340      	movs	r3, #64	; 0x40
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e006      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eae:	e002      	b.n	8005eb6 <UART_SetConfig+0x5a2>
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a40      	ldr	r2, [pc, #256]	; (8005fbc <UART_SetConfig+0x6a8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	f040 80ef 	bne.w	80060a0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ec2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	dc46      	bgt.n	8005f58 <UART_SetConfig+0x644>
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	f2c0 8081 	blt.w	8005fd2 <UART_SetConfig+0x6be>
 8005ed0:	3b02      	subs	r3, #2
 8005ed2:	2b1e      	cmp	r3, #30
 8005ed4:	d87d      	bhi.n	8005fd2 <UART_SetConfig+0x6be>
 8005ed6:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <UART_SetConfig+0x5c8>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005f5f 	.word	0x08005f5f
 8005ee0:	08005fd3 	.word	0x08005fd3
 8005ee4:	08005f67 	.word	0x08005f67
 8005ee8:	08005fd3 	.word	0x08005fd3
 8005eec:	08005fd3 	.word	0x08005fd3
 8005ef0:	08005fd3 	.word	0x08005fd3
 8005ef4:	08005f77 	.word	0x08005f77
 8005ef8:	08005fd3 	.word	0x08005fd3
 8005efc:	08005fd3 	.word	0x08005fd3
 8005f00:	08005fd3 	.word	0x08005fd3
 8005f04:	08005fd3 	.word	0x08005fd3
 8005f08:	08005fd3 	.word	0x08005fd3
 8005f0c:	08005fd3 	.word	0x08005fd3
 8005f10:	08005fd3 	.word	0x08005fd3
 8005f14:	08005f87 	.word	0x08005f87
 8005f18:	08005fd3 	.word	0x08005fd3
 8005f1c:	08005fd3 	.word	0x08005fd3
 8005f20:	08005fd3 	.word	0x08005fd3
 8005f24:	08005fd3 	.word	0x08005fd3
 8005f28:	08005fd3 	.word	0x08005fd3
 8005f2c:	08005fd3 	.word	0x08005fd3
 8005f30:	08005fd3 	.word	0x08005fd3
 8005f34:	08005fd3 	.word	0x08005fd3
 8005f38:	08005fd3 	.word	0x08005fd3
 8005f3c:	08005fd3 	.word	0x08005fd3
 8005f40:	08005fd3 	.word	0x08005fd3
 8005f44:	08005fd3 	.word	0x08005fd3
 8005f48:	08005fd3 	.word	0x08005fd3
 8005f4c:	08005fd3 	.word	0x08005fd3
 8005f50:	08005fd3 	.word	0x08005fd3
 8005f54:	08005fc5 	.word	0x08005fc5
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	d036      	beq.n	8005fca <UART_SetConfig+0x6b6>
 8005f5c:	e039      	b.n	8005fd2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f5e:	f7fe ffd1 	bl	8004f04 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f64:	e03b      	b.n	8005fde <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f66:	f107 0314 	add.w	r3, r7, #20
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe ffe0 	bl	8004f30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f74:	e033      	b.n	8005fde <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f76:	f107 0308 	add.w	r3, r7, #8
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff f92c 	bl	80051d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f84:	e02b      	b.n	8005fde <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <UART_SetConfig+0x69c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f92:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <UART_SetConfig+0x69c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	08db      	lsrs	r3, r3, #3
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <UART_SetConfig+0x6ac>)
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fa4:	e01b      	b.n	8005fde <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005fa6:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <UART_SetConfig+0x6ac>)
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005faa:	e018      	b.n	8005fde <UART_SetConfig+0x6ca>
 8005fac:	40011400 	.word	0x40011400
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	40007800 	.word	0x40007800
 8005fb8:	40007c00 	.word	0x40007c00
 8005fbc:	58000c00 	.word	0x58000c00
 8005fc0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fc4:	4bc4      	ldr	r3, [pc, #784]	; (80062d8 <UART_SetConfig+0x9c4>)
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fc8:	e009      	b.n	8005fde <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fd0:	e005      	b.n	8005fde <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005fdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 81da 	beq.w	800639a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	4abc      	ldr	r2, [pc, #752]	; (80062dc <UART_SetConfig+0x9c8>)
 8005fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ff8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	4613      	mov	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4413      	add	r3, r2
 8006004:	6a3a      	ldr	r2, [r7, #32]
 8006006:	429a      	cmp	r2, r3
 8006008:	d305      	bcc.n	8006016 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006010:	6a3a      	ldr	r2, [r7, #32]
 8006012:	429a      	cmp	r2, r3
 8006014:	d903      	bls.n	800601e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800601c:	e1bd      	b.n	800639a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	4618      	mov	r0, r3
 8006022:	f04f 0100 	mov.w	r1, #0
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	4aac      	ldr	r2, [pc, #688]	; (80062dc <UART_SetConfig+0x9c8>)
 800602c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006030:	b29a      	uxth	r2, r3
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	f7fa f9a3 	bl	8000380 <__aeabi_uldivmod>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	4610      	mov	r0, r2
 8006040:	4619      	mov	r1, r3
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	020b      	lsls	r3, r1, #8
 800604c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006050:	0202      	lsls	r2, r0, #8
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	6849      	ldr	r1, [r1, #4]
 8006056:	0849      	lsrs	r1, r1, #1
 8006058:	4608      	mov	r0, r1
 800605a:	f04f 0100 	mov.w	r1, #0
 800605e:	1814      	adds	r4, r2, r0
 8006060:	eb43 0501 	adc.w	r5, r3, r1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	461a      	mov	r2, r3
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	4620      	mov	r0, r4
 8006070:	4629      	mov	r1, r5
 8006072:	f7fa f985 	bl	8000380 <__aeabi_uldivmod>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4613      	mov	r3, r2
 800607c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006084:	d308      	bcc.n	8006098 <UART_SetConfig+0x784>
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608c:	d204      	bcs.n	8006098 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	e180      	b.n	800639a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800609e:	e17c      	b.n	800639a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a8:	f040 80bf 	bne.w	800622a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80060ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	dc49      	bgt.n	8006148 <UART_SetConfig+0x834>
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	db7c      	blt.n	80061b2 <UART_SetConfig+0x89e>
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d87a      	bhi.n	80061b2 <UART_SetConfig+0x89e>
 80060bc:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <UART_SetConfig+0x7b0>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	0800614f 	.word	0x0800614f
 80060c8:	08006157 	.word	0x08006157
 80060cc:	080061b3 	.word	0x080061b3
 80060d0:	080061b3 	.word	0x080061b3
 80060d4:	0800615f 	.word	0x0800615f
 80060d8:	080061b3 	.word	0x080061b3
 80060dc:	080061b3 	.word	0x080061b3
 80060e0:	080061b3 	.word	0x080061b3
 80060e4:	0800616f 	.word	0x0800616f
 80060e8:	080061b3 	.word	0x080061b3
 80060ec:	080061b3 	.word	0x080061b3
 80060f0:	080061b3 	.word	0x080061b3
 80060f4:	080061b3 	.word	0x080061b3
 80060f8:	080061b3 	.word	0x080061b3
 80060fc:	080061b3 	.word	0x080061b3
 8006100:	080061b3 	.word	0x080061b3
 8006104:	0800617f 	.word	0x0800617f
 8006108:	080061b3 	.word	0x080061b3
 800610c:	080061b3 	.word	0x080061b3
 8006110:	080061b3 	.word	0x080061b3
 8006114:	080061b3 	.word	0x080061b3
 8006118:	080061b3 	.word	0x080061b3
 800611c:	080061b3 	.word	0x080061b3
 8006120:	080061b3 	.word	0x080061b3
 8006124:	080061b3 	.word	0x080061b3
 8006128:	080061b3 	.word	0x080061b3
 800612c:	080061b3 	.word	0x080061b3
 8006130:	080061b3 	.word	0x080061b3
 8006134:	080061b3 	.word	0x080061b3
 8006138:	080061b3 	.word	0x080061b3
 800613c:	080061b3 	.word	0x080061b3
 8006140:	080061b3 	.word	0x080061b3
 8006144:	080061a5 	.word	0x080061a5
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d02e      	beq.n	80061aa <UART_SetConfig+0x896>
 800614c:	e031      	b.n	80061b2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800614e:	f7fd ff3d 	bl	8003fcc <HAL_RCC_GetPCLK1Freq>
 8006152:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006154:	e033      	b.n	80061be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006156:	f7fd ff4f 	bl	8003ff8 <HAL_RCC_GetPCLK2Freq>
 800615a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800615c:	e02f      	b.n	80061be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800615e:	f107 0314 	add.w	r3, r7, #20
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe fee4 	bl	8004f30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800616c:	e027      	b.n	80061be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800616e:	f107 0308 	add.w	r3, r7, #8
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff f830 	bl	80051d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800617c:	e01f      	b.n	80061be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800617e:	4b58      	ldr	r3, [pc, #352]	; (80062e0 <UART_SetConfig+0x9cc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800618a:	4b55      	ldr	r3, [pc, #340]	; (80062e0 <UART_SetConfig+0x9cc>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	08db      	lsrs	r3, r3, #3
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	4a53      	ldr	r2, [pc, #332]	; (80062e4 <UART_SetConfig+0x9d0>)
 8006196:	fa22 f303 	lsr.w	r3, r2, r3
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800619c:	e00f      	b.n	80061be <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800619e:	4b51      	ldr	r3, [pc, #324]	; (80062e4 <UART_SetConfig+0x9d0>)
 80061a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061a2:	e00c      	b.n	80061be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061a4:	4b4c      	ldr	r3, [pc, #304]	; (80062d8 <UART_SetConfig+0x9c4>)
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061a8:	e009      	b.n	80061be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061b0:	e005      	b.n	80061be <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80061bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80ea 	beq.w	800639a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	4a44      	ldr	r2, [pc, #272]	; (80062dc <UART_SetConfig+0x9c8>)
 80061cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d0:	461a      	mov	r2, r3
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80061d8:	005a      	lsls	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	441a      	add	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	2b0f      	cmp	r3, #15
 80061f2:	d916      	bls.n	8006222 <UART_SetConfig+0x90e>
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fa:	d212      	bcs.n	8006222 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f023 030f 	bic.w	r3, r3, #15
 8006204:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	b29b      	uxth	r3, r3
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	b29a      	uxth	r2, r3
 8006212:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006214:	4313      	orrs	r3, r2
 8006216:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800621e:	60da      	str	r2, [r3, #12]
 8006220:	e0bb      	b.n	800639a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006228:	e0b7      	b.n	800639a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800622a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800622e:	2b20      	cmp	r3, #32
 8006230:	dc4a      	bgt.n	80062c8 <UART_SetConfig+0x9b4>
 8006232:	2b00      	cmp	r3, #0
 8006234:	f2c0 8086 	blt.w	8006344 <UART_SetConfig+0xa30>
 8006238:	2b20      	cmp	r3, #32
 800623a:	f200 8083 	bhi.w	8006344 <UART_SetConfig+0xa30>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <UART_SetConfig+0x930>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	080062cf 	.word	0x080062cf
 8006248:	080062e9 	.word	0x080062e9
 800624c:	08006345 	.word	0x08006345
 8006250:	08006345 	.word	0x08006345
 8006254:	080062f1 	.word	0x080062f1
 8006258:	08006345 	.word	0x08006345
 800625c:	08006345 	.word	0x08006345
 8006260:	08006345 	.word	0x08006345
 8006264:	08006301 	.word	0x08006301
 8006268:	08006345 	.word	0x08006345
 800626c:	08006345 	.word	0x08006345
 8006270:	08006345 	.word	0x08006345
 8006274:	08006345 	.word	0x08006345
 8006278:	08006345 	.word	0x08006345
 800627c:	08006345 	.word	0x08006345
 8006280:	08006345 	.word	0x08006345
 8006284:	08006311 	.word	0x08006311
 8006288:	08006345 	.word	0x08006345
 800628c:	08006345 	.word	0x08006345
 8006290:	08006345 	.word	0x08006345
 8006294:	08006345 	.word	0x08006345
 8006298:	08006345 	.word	0x08006345
 800629c:	08006345 	.word	0x08006345
 80062a0:	08006345 	.word	0x08006345
 80062a4:	08006345 	.word	0x08006345
 80062a8:	08006345 	.word	0x08006345
 80062ac:	08006345 	.word	0x08006345
 80062b0:	08006345 	.word	0x08006345
 80062b4:	08006345 	.word	0x08006345
 80062b8:	08006345 	.word	0x08006345
 80062bc:	08006345 	.word	0x08006345
 80062c0:	08006345 	.word	0x08006345
 80062c4:	08006337 	.word	0x08006337
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d037      	beq.n	800633c <UART_SetConfig+0xa28>
 80062cc:	e03a      	b.n	8006344 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ce:	f7fd fe7d 	bl	8003fcc <HAL_RCC_GetPCLK1Freq>
 80062d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062d4:	e03c      	b.n	8006350 <UART_SetConfig+0xa3c>
 80062d6:	bf00      	nop
 80062d8:	003d0900 	.word	0x003d0900
 80062dc:	08007930 	.word	0x08007930
 80062e0:	58024400 	.word	0x58024400
 80062e4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e8:	f7fd fe86 	bl	8003ff8 <HAL_RCC_GetPCLK2Freq>
 80062ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062ee:	e02f      	b.n	8006350 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062f0:	f107 0314 	add.w	r3, r7, #20
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fe fe1b 	bl	8004f30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062fe:	e027      	b.n	8006350 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006300:	f107 0308 	add.w	r3, r7, #8
 8006304:	4618      	mov	r0, r3
 8006306:	f7fe ff67 	bl	80051d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800630e:	e01f      	b.n	8006350 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006310:	4b2c      	ldr	r3, [pc, #176]	; (80063c4 <UART_SetConfig+0xab0>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b00      	cmp	r3, #0
 800631a:	d009      	beq.n	8006330 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800631c:	4b29      	ldr	r3, [pc, #164]	; (80063c4 <UART_SetConfig+0xab0>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	08db      	lsrs	r3, r3, #3
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	4a28      	ldr	r2, [pc, #160]	; (80063c8 <UART_SetConfig+0xab4>)
 8006328:	fa22 f303 	lsr.w	r3, r2, r3
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800632e:	e00f      	b.n	8006350 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006330:	4b25      	ldr	r3, [pc, #148]	; (80063c8 <UART_SetConfig+0xab4>)
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006334:	e00c      	b.n	8006350 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006336:	4b25      	ldr	r3, [pc, #148]	; (80063cc <UART_SetConfig+0xab8>)
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800633a:	e009      	b.n	8006350 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006342:	e005      	b.n	8006350 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800634e:	bf00      	nop
    }

    if (pclk != 0U)
 8006350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006352:	2b00      	cmp	r3, #0
 8006354:	d021      	beq.n	800639a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	4a1d      	ldr	r2, [pc, #116]	; (80063d0 <UART_SetConfig+0xabc>)
 800635c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006360:	461a      	mov	r2, r3
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	fbb3 f2f2 	udiv	r2, r3, r2
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	441a      	add	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	b29b      	uxth	r3, r3
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	2b0f      	cmp	r3, #15
 8006380:	d908      	bls.n	8006394 <UART_SetConfig+0xa80>
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006388:	d204      	bcs.n	8006394 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006390:	60da      	str	r2, [r3, #12]
 8006392:	e002      	b.n	800639a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80063b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3738      	adds	r7, #56	; 0x38
 80063be:	46bd      	mov	sp, r7
 80063c0:	bdb0      	pop	{r4, r5, r7, pc}
 80063c2:	bf00      	nop
 80063c4:	58024400 	.word	0x58024400
 80063c8:	03d09000 	.word	0x03d09000
 80063cc:	003d0900 	.word	0x003d0900
 80063d0:	08007930 	.word	0x08007930

080063d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01a      	beq.n	80064ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064d2:	d10a      	bne.n	80064ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	605a      	str	r2, [r3, #4]
  }
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af02      	add	r7, sp, #8
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006528:	f7fb f9ea 	bl	8001900 <HAL_GetTick>
 800652c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b08      	cmp	r3, #8
 800653a:	d10e      	bne.n	800655a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800653c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f82f 	bl	80065ae <UART_WaitOnFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e025      	b.n	80065a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b04      	cmp	r3, #4
 8006566:	d10e      	bne.n	8006586 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f819 	bl	80065ae <UART_WaitOnFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e00f      	b.n	80065a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	4613      	mov	r3, r2
 80065bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065be:	e062      	b.n	8006686 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c6:	d05e      	beq.n	8006686 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c8:	f7fb f99a 	bl	8001900 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d302      	bcc.n	80065de <UART_WaitOnFlagUntilTimeout+0x30>
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d11d      	bne.n	800661a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0201 	bic.w	r2, r2, #1
 80065fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e045      	b.n	80066a6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d02e      	beq.n	8006686 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006636:	d126      	bne.n	8006686 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006640:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006650:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0201 	bic.w	r2, r2, #1
 8006660:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2220      	movs	r2, #32
 8006666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2220      	movs	r2, #32
 8006676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e00f      	b.n	80066a6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4013      	ands	r3, r2
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	429a      	cmp	r2, r3
 8006694:	bf0c      	ite	eq
 8006696:	2301      	moveq	r3, #1
 8006698:	2300      	movne	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	461a      	mov	r2, r3
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d08d      	beq.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b085      	sub	sp, #20
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e027      	b.n	8006714 <HAL_UARTEx_DisableFifoMode+0x66>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2224      	movs	r2, #36	; 0x24
 80066d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006734:	2302      	movs	r3, #2
 8006736:	e02d      	b.n	8006794 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2224      	movs	r2, #36	; 0x24
 8006744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f84f 	bl	8006818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e02d      	b.n	8006810 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2224      	movs	r2, #36	; 0x24
 80067c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0201 	bic.w	r2, r2, #1
 80067da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f811 	bl	8006818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006824:	2b00      	cmp	r3, #0
 8006826:	d108      	bne.n	800683a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006838:	e031      	b.n	800689e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800683a:	2310      	movs	r3, #16
 800683c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800683e:	2310      	movs	r3, #16
 8006840:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	0e5b      	lsrs	r3, r3, #25
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	0f5b      	lsrs	r3, r3, #29
 800685a:	b2db      	uxtb	r3, r3
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	7b3a      	ldrb	r2, [r7, #12]
 8006866:	4911      	ldr	r1, [pc, #68]	; (80068ac <UARTEx_SetNbDataToProcess+0x94>)
 8006868:	5c8a      	ldrb	r2, [r1, r2]
 800686a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800686e:	7b3a      	ldrb	r2, [r7, #12]
 8006870:	490f      	ldr	r1, [pc, #60]	; (80068b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006872:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006874:	fb93 f3f2 	sdiv	r3, r3, r2
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	7b7a      	ldrb	r2, [r7, #13]
 8006884:	4909      	ldr	r1, [pc, #36]	; (80068ac <UARTEx_SetNbDataToProcess+0x94>)
 8006886:	5c8a      	ldrb	r2, [r1, r2]
 8006888:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800688c:	7b7a      	ldrb	r2, [r7, #13]
 800688e:	4908      	ldr	r1, [pc, #32]	; (80068b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006890:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006892:	fb93 f3f2 	sdiv	r3, r3, r2
 8006896:	b29a      	uxth	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	08007948 	.word	0x08007948
 80068b0:	08007950 	.word	0x08007950

080068b4 <__errno>:
 80068b4:	4b01      	ldr	r3, [pc, #4]	; (80068bc <__errno+0x8>)
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	24000010 	.word	0x24000010

080068c0 <__libc_init_array>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	4d0d      	ldr	r5, [pc, #52]	; (80068f8 <__libc_init_array+0x38>)
 80068c4:	4c0d      	ldr	r4, [pc, #52]	; (80068fc <__libc_init_array+0x3c>)
 80068c6:	1b64      	subs	r4, r4, r5
 80068c8:	10a4      	asrs	r4, r4, #2
 80068ca:	2600      	movs	r6, #0
 80068cc:	42a6      	cmp	r6, r4
 80068ce:	d109      	bne.n	80068e4 <__libc_init_array+0x24>
 80068d0:	4d0b      	ldr	r5, [pc, #44]	; (8006900 <__libc_init_array+0x40>)
 80068d2:	4c0c      	ldr	r4, [pc, #48]	; (8006904 <__libc_init_array+0x44>)
 80068d4:	f000 ffec 	bl	80078b0 <_init>
 80068d8:	1b64      	subs	r4, r4, r5
 80068da:	10a4      	asrs	r4, r4, #2
 80068dc:	2600      	movs	r6, #0
 80068de:	42a6      	cmp	r6, r4
 80068e0:	d105      	bne.n	80068ee <__libc_init_array+0x2e>
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
 80068e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e8:	4798      	blx	r3
 80068ea:	3601      	adds	r6, #1
 80068ec:	e7ee      	b.n	80068cc <__libc_init_array+0xc>
 80068ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f2:	4798      	blx	r3
 80068f4:	3601      	adds	r6, #1
 80068f6:	e7f2      	b.n	80068de <__libc_init_array+0x1e>
 80068f8:	080079f8 	.word	0x080079f8
 80068fc:	080079f8 	.word	0x080079f8
 8006900:	080079f8 	.word	0x080079f8
 8006904:	080079fc 	.word	0x080079fc

08006908 <memset>:
 8006908:	4402      	add	r2, r0
 800690a:	4603      	mov	r3, r0
 800690c:	4293      	cmp	r3, r2
 800690e:	d100      	bne.n	8006912 <memset+0xa>
 8006910:	4770      	bx	lr
 8006912:	f803 1b01 	strb.w	r1, [r3], #1
 8006916:	e7f9      	b.n	800690c <memset+0x4>

08006918 <iprintf>:
 8006918:	b40f      	push	{r0, r1, r2, r3}
 800691a:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <iprintf+0x2c>)
 800691c:	b513      	push	{r0, r1, r4, lr}
 800691e:	681c      	ldr	r4, [r3, #0]
 8006920:	b124      	cbz	r4, 800692c <iprintf+0x14>
 8006922:	69a3      	ldr	r3, [r4, #24]
 8006924:	b913      	cbnz	r3, 800692c <iprintf+0x14>
 8006926:	4620      	mov	r0, r4
 8006928:	f000 fa5e 	bl	8006de8 <__sinit>
 800692c:	ab05      	add	r3, sp, #20
 800692e:	9a04      	ldr	r2, [sp, #16]
 8006930:	68a1      	ldr	r1, [r4, #8]
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	4620      	mov	r0, r4
 8006936:	f000 fc2f 	bl	8007198 <_vfiprintf_r>
 800693a:	b002      	add	sp, #8
 800693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006940:	b004      	add	sp, #16
 8006942:	4770      	bx	lr
 8006944:	24000010 	.word	0x24000010

08006948 <_puts_r>:
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	460e      	mov	r6, r1
 800694c:	4605      	mov	r5, r0
 800694e:	b118      	cbz	r0, 8006958 <_puts_r+0x10>
 8006950:	6983      	ldr	r3, [r0, #24]
 8006952:	b90b      	cbnz	r3, 8006958 <_puts_r+0x10>
 8006954:	f000 fa48 	bl	8006de8 <__sinit>
 8006958:	69ab      	ldr	r3, [r5, #24]
 800695a:	68ac      	ldr	r4, [r5, #8]
 800695c:	b913      	cbnz	r3, 8006964 <_puts_r+0x1c>
 800695e:	4628      	mov	r0, r5
 8006960:	f000 fa42 	bl	8006de8 <__sinit>
 8006964:	4b2c      	ldr	r3, [pc, #176]	; (8006a18 <_puts_r+0xd0>)
 8006966:	429c      	cmp	r4, r3
 8006968:	d120      	bne.n	80069ac <_puts_r+0x64>
 800696a:	686c      	ldr	r4, [r5, #4]
 800696c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800696e:	07db      	lsls	r3, r3, #31
 8006970:	d405      	bmi.n	800697e <_puts_r+0x36>
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	0598      	lsls	r0, r3, #22
 8006976:	d402      	bmi.n	800697e <_puts_r+0x36>
 8006978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800697a:	f000 fad3 	bl	8006f24 <__retarget_lock_acquire_recursive>
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	0719      	lsls	r1, r3, #28
 8006982:	d51d      	bpl.n	80069c0 <_puts_r+0x78>
 8006984:	6923      	ldr	r3, [r4, #16]
 8006986:	b1db      	cbz	r3, 80069c0 <_puts_r+0x78>
 8006988:	3e01      	subs	r6, #1
 800698a:	68a3      	ldr	r3, [r4, #8]
 800698c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006990:	3b01      	subs	r3, #1
 8006992:	60a3      	str	r3, [r4, #8]
 8006994:	bb39      	cbnz	r1, 80069e6 <_puts_r+0x9e>
 8006996:	2b00      	cmp	r3, #0
 8006998:	da38      	bge.n	8006a0c <_puts_r+0xc4>
 800699a:	4622      	mov	r2, r4
 800699c:	210a      	movs	r1, #10
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f848 	bl	8006a34 <__swbuf_r>
 80069a4:	3001      	adds	r0, #1
 80069a6:	d011      	beq.n	80069cc <_puts_r+0x84>
 80069a8:	250a      	movs	r5, #10
 80069aa:	e011      	b.n	80069d0 <_puts_r+0x88>
 80069ac:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <_puts_r+0xd4>)
 80069ae:	429c      	cmp	r4, r3
 80069b0:	d101      	bne.n	80069b6 <_puts_r+0x6e>
 80069b2:	68ac      	ldr	r4, [r5, #8]
 80069b4:	e7da      	b.n	800696c <_puts_r+0x24>
 80069b6:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <_puts_r+0xd8>)
 80069b8:	429c      	cmp	r4, r3
 80069ba:	bf08      	it	eq
 80069bc:	68ec      	ldreq	r4, [r5, #12]
 80069be:	e7d5      	b.n	800696c <_puts_r+0x24>
 80069c0:	4621      	mov	r1, r4
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 f888 	bl	8006ad8 <__swsetup_r>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d0dd      	beq.n	8006988 <_puts_r+0x40>
 80069cc:	f04f 35ff 	mov.w	r5, #4294967295
 80069d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069d2:	07da      	lsls	r2, r3, #31
 80069d4:	d405      	bmi.n	80069e2 <_puts_r+0x9a>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	059b      	lsls	r3, r3, #22
 80069da:	d402      	bmi.n	80069e2 <_puts_r+0x9a>
 80069dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069de:	f000 faa2 	bl	8006f26 <__retarget_lock_release_recursive>
 80069e2:	4628      	mov	r0, r5
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da04      	bge.n	80069f4 <_puts_r+0xac>
 80069ea:	69a2      	ldr	r2, [r4, #24]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	dc06      	bgt.n	80069fe <_puts_r+0xb6>
 80069f0:	290a      	cmp	r1, #10
 80069f2:	d004      	beq.n	80069fe <_puts_r+0xb6>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	6022      	str	r2, [r4, #0]
 80069fa:	7019      	strb	r1, [r3, #0]
 80069fc:	e7c5      	b.n	800698a <_puts_r+0x42>
 80069fe:	4622      	mov	r2, r4
 8006a00:	4628      	mov	r0, r5
 8006a02:	f000 f817 	bl	8006a34 <__swbuf_r>
 8006a06:	3001      	adds	r0, #1
 8006a08:	d1bf      	bne.n	800698a <_puts_r+0x42>
 8006a0a:	e7df      	b.n	80069cc <_puts_r+0x84>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	250a      	movs	r5, #10
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	6022      	str	r2, [r4, #0]
 8006a14:	701d      	strb	r5, [r3, #0]
 8006a16:	e7db      	b.n	80069d0 <_puts_r+0x88>
 8006a18:	0800797c 	.word	0x0800797c
 8006a1c:	0800799c 	.word	0x0800799c
 8006a20:	0800795c 	.word	0x0800795c

08006a24 <puts>:
 8006a24:	4b02      	ldr	r3, [pc, #8]	; (8006a30 <puts+0xc>)
 8006a26:	4601      	mov	r1, r0
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	f7ff bf8d 	b.w	8006948 <_puts_r>
 8006a2e:	bf00      	nop
 8006a30:	24000010 	.word	0x24000010

08006a34 <__swbuf_r>:
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a36:	460e      	mov	r6, r1
 8006a38:	4614      	mov	r4, r2
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	b118      	cbz	r0, 8006a46 <__swbuf_r+0x12>
 8006a3e:	6983      	ldr	r3, [r0, #24]
 8006a40:	b90b      	cbnz	r3, 8006a46 <__swbuf_r+0x12>
 8006a42:	f000 f9d1 	bl	8006de8 <__sinit>
 8006a46:	4b21      	ldr	r3, [pc, #132]	; (8006acc <__swbuf_r+0x98>)
 8006a48:	429c      	cmp	r4, r3
 8006a4a:	d12b      	bne.n	8006aa4 <__swbuf_r+0x70>
 8006a4c:	686c      	ldr	r4, [r5, #4]
 8006a4e:	69a3      	ldr	r3, [r4, #24]
 8006a50:	60a3      	str	r3, [r4, #8]
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	071a      	lsls	r2, r3, #28
 8006a56:	d52f      	bpl.n	8006ab8 <__swbuf_r+0x84>
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	b36b      	cbz	r3, 8006ab8 <__swbuf_r+0x84>
 8006a5c:	6923      	ldr	r3, [r4, #16]
 8006a5e:	6820      	ldr	r0, [r4, #0]
 8006a60:	1ac0      	subs	r0, r0, r3
 8006a62:	6963      	ldr	r3, [r4, #20]
 8006a64:	b2f6      	uxtb	r6, r6
 8006a66:	4283      	cmp	r3, r0
 8006a68:	4637      	mov	r7, r6
 8006a6a:	dc04      	bgt.n	8006a76 <__swbuf_r+0x42>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 f926 	bl	8006cc0 <_fflush_r>
 8006a74:	bb30      	cbnz	r0, 8006ac4 <__swbuf_r+0x90>
 8006a76:	68a3      	ldr	r3, [r4, #8]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	60a3      	str	r3, [r4, #8]
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	6022      	str	r2, [r4, #0]
 8006a82:	701e      	strb	r6, [r3, #0]
 8006a84:	6963      	ldr	r3, [r4, #20]
 8006a86:	3001      	adds	r0, #1
 8006a88:	4283      	cmp	r3, r0
 8006a8a:	d004      	beq.n	8006a96 <__swbuf_r+0x62>
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	07db      	lsls	r3, r3, #31
 8006a90:	d506      	bpl.n	8006aa0 <__swbuf_r+0x6c>
 8006a92:	2e0a      	cmp	r6, #10
 8006a94:	d104      	bne.n	8006aa0 <__swbuf_r+0x6c>
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f000 f911 	bl	8006cc0 <_fflush_r>
 8006a9e:	b988      	cbnz	r0, 8006ac4 <__swbuf_r+0x90>
 8006aa0:	4638      	mov	r0, r7
 8006aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <__swbuf_r+0x9c>)
 8006aa6:	429c      	cmp	r4, r3
 8006aa8:	d101      	bne.n	8006aae <__swbuf_r+0x7a>
 8006aaa:	68ac      	ldr	r4, [r5, #8]
 8006aac:	e7cf      	b.n	8006a4e <__swbuf_r+0x1a>
 8006aae:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <__swbuf_r+0xa0>)
 8006ab0:	429c      	cmp	r4, r3
 8006ab2:	bf08      	it	eq
 8006ab4:	68ec      	ldreq	r4, [r5, #12]
 8006ab6:	e7ca      	b.n	8006a4e <__swbuf_r+0x1a>
 8006ab8:	4621      	mov	r1, r4
 8006aba:	4628      	mov	r0, r5
 8006abc:	f000 f80c 	bl	8006ad8 <__swsetup_r>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d0cb      	beq.n	8006a5c <__swbuf_r+0x28>
 8006ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ac8:	e7ea      	b.n	8006aa0 <__swbuf_r+0x6c>
 8006aca:	bf00      	nop
 8006acc:	0800797c 	.word	0x0800797c
 8006ad0:	0800799c 	.word	0x0800799c
 8006ad4:	0800795c 	.word	0x0800795c

08006ad8 <__swsetup_r>:
 8006ad8:	4b32      	ldr	r3, [pc, #200]	; (8006ba4 <__swsetup_r+0xcc>)
 8006ada:	b570      	push	{r4, r5, r6, lr}
 8006adc:	681d      	ldr	r5, [r3, #0]
 8006ade:	4606      	mov	r6, r0
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	b125      	cbz	r5, 8006aee <__swsetup_r+0x16>
 8006ae4:	69ab      	ldr	r3, [r5, #24]
 8006ae6:	b913      	cbnz	r3, 8006aee <__swsetup_r+0x16>
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 f97d 	bl	8006de8 <__sinit>
 8006aee:	4b2e      	ldr	r3, [pc, #184]	; (8006ba8 <__swsetup_r+0xd0>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	d10f      	bne.n	8006b14 <__swsetup_r+0x3c>
 8006af4:	686c      	ldr	r4, [r5, #4]
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006afc:	0719      	lsls	r1, r3, #28
 8006afe:	d42c      	bmi.n	8006b5a <__swsetup_r+0x82>
 8006b00:	06dd      	lsls	r5, r3, #27
 8006b02:	d411      	bmi.n	8006b28 <__swsetup_r+0x50>
 8006b04:	2309      	movs	r3, #9
 8006b06:	6033      	str	r3, [r6, #0]
 8006b08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b0c:	81a3      	strh	r3, [r4, #12]
 8006b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b12:	e03e      	b.n	8006b92 <__swsetup_r+0xba>
 8006b14:	4b25      	ldr	r3, [pc, #148]	; (8006bac <__swsetup_r+0xd4>)
 8006b16:	429c      	cmp	r4, r3
 8006b18:	d101      	bne.n	8006b1e <__swsetup_r+0x46>
 8006b1a:	68ac      	ldr	r4, [r5, #8]
 8006b1c:	e7eb      	b.n	8006af6 <__swsetup_r+0x1e>
 8006b1e:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <__swsetup_r+0xd8>)
 8006b20:	429c      	cmp	r4, r3
 8006b22:	bf08      	it	eq
 8006b24:	68ec      	ldreq	r4, [r5, #12]
 8006b26:	e7e6      	b.n	8006af6 <__swsetup_r+0x1e>
 8006b28:	0758      	lsls	r0, r3, #29
 8006b2a:	d512      	bpl.n	8006b52 <__swsetup_r+0x7a>
 8006b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b2e:	b141      	cbz	r1, 8006b42 <__swsetup_r+0x6a>
 8006b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b34:	4299      	cmp	r1, r3
 8006b36:	d002      	beq.n	8006b3e <__swsetup_r+0x66>
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f000 fa59 	bl	8006ff0 <_free_r>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6363      	str	r3, [r4, #52]	; 0x34
 8006b42:	89a3      	ldrh	r3, [r4, #12]
 8006b44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	6063      	str	r3, [r4, #4]
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	f043 0308 	orr.w	r3, r3, #8
 8006b58:	81a3      	strh	r3, [r4, #12]
 8006b5a:	6923      	ldr	r3, [r4, #16]
 8006b5c:	b94b      	cbnz	r3, 8006b72 <__swsetup_r+0x9a>
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b68:	d003      	beq.n	8006b72 <__swsetup_r+0x9a>
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f000 f9ff 	bl	8006f70 <__smakebuf_r>
 8006b72:	89a0      	ldrh	r0, [r4, #12]
 8006b74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b78:	f010 0301 	ands.w	r3, r0, #1
 8006b7c:	d00a      	beq.n	8006b94 <__swsetup_r+0xbc>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60a3      	str	r3, [r4, #8]
 8006b82:	6963      	ldr	r3, [r4, #20]
 8006b84:	425b      	negs	r3, r3
 8006b86:	61a3      	str	r3, [r4, #24]
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	b943      	cbnz	r3, 8006b9e <__swsetup_r+0xc6>
 8006b8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b90:	d1ba      	bne.n	8006b08 <__swsetup_r+0x30>
 8006b92:	bd70      	pop	{r4, r5, r6, pc}
 8006b94:	0781      	lsls	r1, r0, #30
 8006b96:	bf58      	it	pl
 8006b98:	6963      	ldrpl	r3, [r4, #20]
 8006b9a:	60a3      	str	r3, [r4, #8]
 8006b9c:	e7f4      	b.n	8006b88 <__swsetup_r+0xb0>
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	e7f7      	b.n	8006b92 <__swsetup_r+0xba>
 8006ba2:	bf00      	nop
 8006ba4:	24000010 	.word	0x24000010
 8006ba8:	0800797c 	.word	0x0800797c
 8006bac:	0800799c 	.word	0x0800799c
 8006bb0:	0800795c 	.word	0x0800795c

08006bb4 <__sflush_r>:
 8006bb4:	898a      	ldrh	r2, [r1, #12]
 8006bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bba:	4605      	mov	r5, r0
 8006bbc:	0710      	lsls	r0, r2, #28
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	d458      	bmi.n	8006c74 <__sflush_r+0xc0>
 8006bc2:	684b      	ldr	r3, [r1, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dc05      	bgt.n	8006bd4 <__sflush_r+0x20>
 8006bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dc02      	bgt.n	8006bd4 <__sflush_r+0x20>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bd6:	2e00      	cmp	r6, #0
 8006bd8:	d0f9      	beq.n	8006bce <__sflush_r+0x1a>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006be0:	682f      	ldr	r7, [r5, #0]
 8006be2:	602b      	str	r3, [r5, #0]
 8006be4:	d032      	beq.n	8006c4c <__sflush_r+0x98>
 8006be6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	075a      	lsls	r2, r3, #29
 8006bec:	d505      	bpl.n	8006bfa <__sflush_r+0x46>
 8006bee:	6863      	ldr	r3, [r4, #4]
 8006bf0:	1ac0      	subs	r0, r0, r3
 8006bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bf4:	b10b      	cbz	r3, 8006bfa <__sflush_r+0x46>
 8006bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bf8:	1ac0      	subs	r0, r0, r3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c00:	6a21      	ldr	r1, [r4, #32]
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b0      	blx	r6
 8006c06:	1c43      	adds	r3, r0, #1
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	d106      	bne.n	8006c1a <__sflush_r+0x66>
 8006c0c:	6829      	ldr	r1, [r5, #0]
 8006c0e:	291d      	cmp	r1, #29
 8006c10:	d82c      	bhi.n	8006c6c <__sflush_r+0xb8>
 8006c12:	4a2a      	ldr	r2, [pc, #168]	; (8006cbc <__sflush_r+0x108>)
 8006c14:	40ca      	lsrs	r2, r1
 8006c16:	07d6      	lsls	r6, r2, #31
 8006c18:	d528      	bpl.n	8006c6c <__sflush_r+0xb8>
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	6062      	str	r2, [r4, #4]
 8006c1e:	04d9      	lsls	r1, r3, #19
 8006c20:	6922      	ldr	r2, [r4, #16]
 8006c22:	6022      	str	r2, [r4, #0]
 8006c24:	d504      	bpl.n	8006c30 <__sflush_r+0x7c>
 8006c26:	1c42      	adds	r2, r0, #1
 8006c28:	d101      	bne.n	8006c2e <__sflush_r+0x7a>
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	b903      	cbnz	r3, 8006c30 <__sflush_r+0x7c>
 8006c2e:	6560      	str	r0, [r4, #84]	; 0x54
 8006c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c32:	602f      	str	r7, [r5, #0]
 8006c34:	2900      	cmp	r1, #0
 8006c36:	d0ca      	beq.n	8006bce <__sflush_r+0x1a>
 8006c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c3c:	4299      	cmp	r1, r3
 8006c3e:	d002      	beq.n	8006c46 <__sflush_r+0x92>
 8006c40:	4628      	mov	r0, r5
 8006c42:	f000 f9d5 	bl	8006ff0 <_free_r>
 8006c46:	2000      	movs	r0, #0
 8006c48:	6360      	str	r0, [r4, #52]	; 0x34
 8006c4a:	e7c1      	b.n	8006bd0 <__sflush_r+0x1c>
 8006c4c:	6a21      	ldr	r1, [r4, #32]
 8006c4e:	2301      	movs	r3, #1
 8006c50:	4628      	mov	r0, r5
 8006c52:	47b0      	blx	r6
 8006c54:	1c41      	adds	r1, r0, #1
 8006c56:	d1c7      	bne.n	8006be8 <__sflush_r+0x34>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0c4      	beq.n	8006be8 <__sflush_r+0x34>
 8006c5e:	2b1d      	cmp	r3, #29
 8006c60:	d001      	beq.n	8006c66 <__sflush_r+0xb2>
 8006c62:	2b16      	cmp	r3, #22
 8006c64:	d101      	bne.n	8006c6a <__sflush_r+0xb6>
 8006c66:	602f      	str	r7, [r5, #0]
 8006c68:	e7b1      	b.n	8006bce <__sflush_r+0x1a>
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c70:	81a3      	strh	r3, [r4, #12]
 8006c72:	e7ad      	b.n	8006bd0 <__sflush_r+0x1c>
 8006c74:	690f      	ldr	r7, [r1, #16]
 8006c76:	2f00      	cmp	r7, #0
 8006c78:	d0a9      	beq.n	8006bce <__sflush_r+0x1a>
 8006c7a:	0793      	lsls	r3, r2, #30
 8006c7c:	680e      	ldr	r6, [r1, #0]
 8006c7e:	bf08      	it	eq
 8006c80:	694b      	ldreq	r3, [r1, #20]
 8006c82:	600f      	str	r7, [r1, #0]
 8006c84:	bf18      	it	ne
 8006c86:	2300      	movne	r3, #0
 8006c88:	eba6 0807 	sub.w	r8, r6, r7
 8006c8c:	608b      	str	r3, [r1, #8]
 8006c8e:	f1b8 0f00 	cmp.w	r8, #0
 8006c92:	dd9c      	ble.n	8006bce <__sflush_r+0x1a>
 8006c94:	6a21      	ldr	r1, [r4, #32]
 8006c96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c98:	4643      	mov	r3, r8
 8006c9a:	463a      	mov	r2, r7
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	47b0      	blx	r6
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	dc06      	bgt.n	8006cb2 <__sflush_r+0xfe>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006caa:	81a3      	strh	r3, [r4, #12]
 8006cac:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb0:	e78e      	b.n	8006bd0 <__sflush_r+0x1c>
 8006cb2:	4407      	add	r7, r0
 8006cb4:	eba8 0800 	sub.w	r8, r8, r0
 8006cb8:	e7e9      	b.n	8006c8e <__sflush_r+0xda>
 8006cba:	bf00      	nop
 8006cbc:	20400001 	.word	0x20400001

08006cc0 <_fflush_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	690b      	ldr	r3, [r1, #16]
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	b913      	cbnz	r3, 8006cd0 <_fflush_r+0x10>
 8006cca:	2500      	movs	r5, #0
 8006ccc:	4628      	mov	r0, r5
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	b118      	cbz	r0, 8006cda <_fflush_r+0x1a>
 8006cd2:	6983      	ldr	r3, [r0, #24]
 8006cd4:	b90b      	cbnz	r3, 8006cda <_fflush_r+0x1a>
 8006cd6:	f000 f887 	bl	8006de8 <__sinit>
 8006cda:	4b14      	ldr	r3, [pc, #80]	; (8006d2c <_fflush_r+0x6c>)
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	d11b      	bne.n	8006d18 <_fflush_r+0x58>
 8006ce0:	686c      	ldr	r4, [r5, #4]
 8006ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0ef      	beq.n	8006cca <_fflush_r+0xa>
 8006cea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cec:	07d0      	lsls	r0, r2, #31
 8006cee:	d404      	bmi.n	8006cfa <_fflush_r+0x3a>
 8006cf0:	0599      	lsls	r1, r3, #22
 8006cf2:	d402      	bmi.n	8006cfa <_fflush_r+0x3a>
 8006cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cf6:	f000 f915 	bl	8006f24 <__retarget_lock_acquire_recursive>
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	f7ff ff59 	bl	8006bb4 <__sflush_r>
 8006d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d04:	07da      	lsls	r2, r3, #31
 8006d06:	4605      	mov	r5, r0
 8006d08:	d4e0      	bmi.n	8006ccc <_fflush_r+0xc>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	059b      	lsls	r3, r3, #22
 8006d0e:	d4dd      	bmi.n	8006ccc <_fflush_r+0xc>
 8006d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d12:	f000 f908 	bl	8006f26 <__retarget_lock_release_recursive>
 8006d16:	e7d9      	b.n	8006ccc <_fflush_r+0xc>
 8006d18:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <_fflush_r+0x70>)
 8006d1a:	429c      	cmp	r4, r3
 8006d1c:	d101      	bne.n	8006d22 <_fflush_r+0x62>
 8006d1e:	68ac      	ldr	r4, [r5, #8]
 8006d20:	e7df      	b.n	8006ce2 <_fflush_r+0x22>
 8006d22:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <_fflush_r+0x74>)
 8006d24:	429c      	cmp	r4, r3
 8006d26:	bf08      	it	eq
 8006d28:	68ec      	ldreq	r4, [r5, #12]
 8006d2a:	e7da      	b.n	8006ce2 <_fflush_r+0x22>
 8006d2c:	0800797c 	.word	0x0800797c
 8006d30:	0800799c 	.word	0x0800799c
 8006d34:	0800795c 	.word	0x0800795c

08006d38 <std>:
 8006d38:	2300      	movs	r3, #0
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d46:	6083      	str	r3, [r0, #8]
 8006d48:	8181      	strh	r1, [r0, #12]
 8006d4a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d4c:	81c2      	strh	r2, [r0, #14]
 8006d4e:	6183      	str	r3, [r0, #24]
 8006d50:	4619      	mov	r1, r3
 8006d52:	2208      	movs	r2, #8
 8006d54:	305c      	adds	r0, #92	; 0x5c
 8006d56:	f7ff fdd7 	bl	8006908 <memset>
 8006d5a:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <std+0x38>)
 8006d5c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <std+0x3c>)
 8006d60:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d62:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <std+0x40>)
 8006d64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d66:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <std+0x44>)
 8006d68:	6224      	str	r4, [r4, #32]
 8006d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	bf00      	nop
 8006d70:	08007741 	.word	0x08007741
 8006d74:	08007763 	.word	0x08007763
 8006d78:	0800779b 	.word	0x0800779b
 8006d7c:	080077bf 	.word	0x080077bf

08006d80 <_cleanup_r>:
 8006d80:	4901      	ldr	r1, [pc, #4]	; (8006d88 <_cleanup_r+0x8>)
 8006d82:	f000 b8af 	b.w	8006ee4 <_fwalk_reent>
 8006d86:	bf00      	nop
 8006d88:	08006cc1 	.word	0x08006cc1

08006d8c <__sfmoreglue>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	1e4a      	subs	r2, r1, #1
 8006d90:	2568      	movs	r5, #104	; 0x68
 8006d92:	4355      	muls	r5, r2
 8006d94:	460e      	mov	r6, r1
 8006d96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d9a:	f000 f979 	bl	8007090 <_malloc_r>
 8006d9e:	4604      	mov	r4, r0
 8006da0:	b140      	cbz	r0, 8006db4 <__sfmoreglue+0x28>
 8006da2:	2100      	movs	r1, #0
 8006da4:	e9c0 1600 	strd	r1, r6, [r0]
 8006da8:	300c      	adds	r0, #12
 8006daa:	60a0      	str	r0, [r4, #8]
 8006dac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006db0:	f7ff fdaa 	bl	8006908 <memset>
 8006db4:	4620      	mov	r0, r4
 8006db6:	bd70      	pop	{r4, r5, r6, pc}

08006db8 <__sfp_lock_acquire>:
 8006db8:	4801      	ldr	r0, [pc, #4]	; (8006dc0 <__sfp_lock_acquire+0x8>)
 8006dba:	f000 b8b3 	b.w	8006f24 <__retarget_lock_acquire_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	24000184 	.word	0x24000184

08006dc4 <__sfp_lock_release>:
 8006dc4:	4801      	ldr	r0, [pc, #4]	; (8006dcc <__sfp_lock_release+0x8>)
 8006dc6:	f000 b8ae 	b.w	8006f26 <__retarget_lock_release_recursive>
 8006dca:	bf00      	nop
 8006dcc:	24000184 	.word	0x24000184

08006dd0 <__sinit_lock_acquire>:
 8006dd0:	4801      	ldr	r0, [pc, #4]	; (8006dd8 <__sinit_lock_acquire+0x8>)
 8006dd2:	f000 b8a7 	b.w	8006f24 <__retarget_lock_acquire_recursive>
 8006dd6:	bf00      	nop
 8006dd8:	2400017f 	.word	0x2400017f

08006ddc <__sinit_lock_release>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	; (8006de4 <__sinit_lock_release+0x8>)
 8006dde:	f000 b8a2 	b.w	8006f26 <__retarget_lock_release_recursive>
 8006de2:	bf00      	nop
 8006de4:	2400017f 	.word	0x2400017f

08006de8 <__sinit>:
 8006de8:	b510      	push	{r4, lr}
 8006dea:	4604      	mov	r4, r0
 8006dec:	f7ff fff0 	bl	8006dd0 <__sinit_lock_acquire>
 8006df0:	69a3      	ldr	r3, [r4, #24]
 8006df2:	b11b      	cbz	r3, 8006dfc <__sinit+0x14>
 8006df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df8:	f7ff bff0 	b.w	8006ddc <__sinit_lock_release>
 8006dfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e00:	6523      	str	r3, [r4, #80]	; 0x50
 8006e02:	4b13      	ldr	r3, [pc, #76]	; (8006e50 <__sinit+0x68>)
 8006e04:	4a13      	ldr	r2, [pc, #76]	; (8006e54 <__sinit+0x6c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e0a:	42a3      	cmp	r3, r4
 8006e0c:	bf04      	itt	eq
 8006e0e:	2301      	moveq	r3, #1
 8006e10:	61a3      	streq	r3, [r4, #24]
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 f820 	bl	8006e58 <__sfp>
 8006e18:	6060      	str	r0, [r4, #4]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 f81c 	bl	8006e58 <__sfp>
 8006e20:	60a0      	str	r0, [r4, #8]
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 f818 	bl	8006e58 <__sfp>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	60e0      	str	r0, [r4, #12]
 8006e2c:	2104      	movs	r1, #4
 8006e2e:	6860      	ldr	r0, [r4, #4]
 8006e30:	f7ff ff82 	bl	8006d38 <std>
 8006e34:	68a0      	ldr	r0, [r4, #8]
 8006e36:	2201      	movs	r2, #1
 8006e38:	2109      	movs	r1, #9
 8006e3a:	f7ff ff7d 	bl	8006d38 <std>
 8006e3e:	68e0      	ldr	r0, [r4, #12]
 8006e40:	2202      	movs	r2, #2
 8006e42:	2112      	movs	r1, #18
 8006e44:	f7ff ff78 	bl	8006d38 <std>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	61a3      	str	r3, [r4, #24]
 8006e4c:	e7d2      	b.n	8006df4 <__sinit+0xc>
 8006e4e:	bf00      	nop
 8006e50:	08007958 	.word	0x08007958
 8006e54:	08006d81 	.word	0x08006d81

08006e58 <__sfp>:
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	4607      	mov	r7, r0
 8006e5c:	f7ff ffac 	bl	8006db8 <__sfp_lock_acquire>
 8006e60:	4b1e      	ldr	r3, [pc, #120]	; (8006edc <__sfp+0x84>)
 8006e62:	681e      	ldr	r6, [r3, #0]
 8006e64:	69b3      	ldr	r3, [r6, #24]
 8006e66:	b913      	cbnz	r3, 8006e6e <__sfp+0x16>
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff ffbd 	bl	8006de8 <__sinit>
 8006e6e:	3648      	adds	r6, #72	; 0x48
 8006e70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	d503      	bpl.n	8006e80 <__sfp+0x28>
 8006e78:	6833      	ldr	r3, [r6, #0]
 8006e7a:	b30b      	cbz	r3, 8006ec0 <__sfp+0x68>
 8006e7c:	6836      	ldr	r6, [r6, #0]
 8006e7e:	e7f7      	b.n	8006e70 <__sfp+0x18>
 8006e80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e84:	b9d5      	cbnz	r5, 8006ebc <__sfp+0x64>
 8006e86:	4b16      	ldr	r3, [pc, #88]	; (8006ee0 <__sfp+0x88>)
 8006e88:	60e3      	str	r3, [r4, #12]
 8006e8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e8e:	6665      	str	r5, [r4, #100]	; 0x64
 8006e90:	f000 f847 	bl	8006f22 <__retarget_lock_init_recursive>
 8006e94:	f7ff ff96 	bl	8006dc4 <__sfp_lock_release>
 8006e98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ea0:	6025      	str	r5, [r4, #0]
 8006ea2:	61a5      	str	r5, [r4, #24]
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006eac:	f7ff fd2c 	bl	8006908 <memset>
 8006eb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006eb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006eb8:	4620      	mov	r0, r4
 8006eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ebc:	3468      	adds	r4, #104	; 0x68
 8006ebe:	e7d9      	b.n	8006e74 <__sfp+0x1c>
 8006ec0:	2104      	movs	r1, #4
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	f7ff ff62 	bl	8006d8c <__sfmoreglue>
 8006ec8:	4604      	mov	r4, r0
 8006eca:	6030      	str	r0, [r6, #0]
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d1d5      	bne.n	8006e7c <__sfp+0x24>
 8006ed0:	f7ff ff78 	bl	8006dc4 <__sfp_lock_release>
 8006ed4:	230c      	movs	r3, #12
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	e7ee      	b.n	8006eb8 <__sfp+0x60>
 8006eda:	bf00      	nop
 8006edc:	08007958 	.word	0x08007958
 8006ee0:	ffff0001 	.word	0xffff0001

08006ee4 <_fwalk_reent>:
 8006ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee8:	4606      	mov	r6, r0
 8006eea:	4688      	mov	r8, r1
 8006eec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ef0:	2700      	movs	r7, #0
 8006ef2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ef6:	f1b9 0901 	subs.w	r9, r9, #1
 8006efa:	d505      	bpl.n	8006f08 <_fwalk_reent+0x24>
 8006efc:	6824      	ldr	r4, [r4, #0]
 8006efe:	2c00      	cmp	r4, #0
 8006f00:	d1f7      	bne.n	8006ef2 <_fwalk_reent+0xe>
 8006f02:	4638      	mov	r0, r7
 8006f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f08:	89ab      	ldrh	r3, [r5, #12]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d907      	bls.n	8006f1e <_fwalk_reent+0x3a>
 8006f0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f12:	3301      	adds	r3, #1
 8006f14:	d003      	beq.n	8006f1e <_fwalk_reent+0x3a>
 8006f16:	4629      	mov	r1, r5
 8006f18:	4630      	mov	r0, r6
 8006f1a:	47c0      	blx	r8
 8006f1c:	4307      	orrs	r7, r0
 8006f1e:	3568      	adds	r5, #104	; 0x68
 8006f20:	e7e9      	b.n	8006ef6 <_fwalk_reent+0x12>

08006f22 <__retarget_lock_init_recursive>:
 8006f22:	4770      	bx	lr

08006f24 <__retarget_lock_acquire_recursive>:
 8006f24:	4770      	bx	lr

08006f26 <__retarget_lock_release_recursive>:
 8006f26:	4770      	bx	lr

08006f28 <__swhatbuf_r>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	460e      	mov	r6, r1
 8006f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f30:	2900      	cmp	r1, #0
 8006f32:	b096      	sub	sp, #88	; 0x58
 8006f34:	4614      	mov	r4, r2
 8006f36:	461d      	mov	r5, r3
 8006f38:	da07      	bge.n	8006f4a <__swhatbuf_r+0x22>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	89b3      	ldrh	r3, [r6, #12]
 8006f40:	061a      	lsls	r2, r3, #24
 8006f42:	d410      	bmi.n	8006f66 <__swhatbuf_r+0x3e>
 8006f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f48:	e00e      	b.n	8006f68 <__swhatbuf_r+0x40>
 8006f4a:	466a      	mov	r2, sp
 8006f4c:	f000 fc5e 	bl	800780c <_fstat_r>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	dbf2      	blt.n	8006f3a <__swhatbuf_r+0x12>
 8006f54:	9a01      	ldr	r2, [sp, #4]
 8006f56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f5e:	425a      	negs	r2, r3
 8006f60:	415a      	adcs	r2, r3
 8006f62:	602a      	str	r2, [r5, #0]
 8006f64:	e7ee      	b.n	8006f44 <__swhatbuf_r+0x1c>
 8006f66:	2340      	movs	r3, #64	; 0x40
 8006f68:	2000      	movs	r0, #0
 8006f6a:	6023      	str	r3, [r4, #0]
 8006f6c:	b016      	add	sp, #88	; 0x58
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}

08006f70 <__smakebuf_r>:
 8006f70:	898b      	ldrh	r3, [r1, #12]
 8006f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f74:	079d      	lsls	r5, r3, #30
 8006f76:	4606      	mov	r6, r0
 8006f78:	460c      	mov	r4, r1
 8006f7a:	d507      	bpl.n	8006f8c <__smakebuf_r+0x1c>
 8006f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	6123      	str	r3, [r4, #16]
 8006f84:	2301      	movs	r3, #1
 8006f86:	6163      	str	r3, [r4, #20]
 8006f88:	b002      	add	sp, #8
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
 8006f8c:	ab01      	add	r3, sp, #4
 8006f8e:	466a      	mov	r2, sp
 8006f90:	f7ff ffca 	bl	8006f28 <__swhatbuf_r>
 8006f94:	9900      	ldr	r1, [sp, #0]
 8006f96:	4605      	mov	r5, r0
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f000 f879 	bl	8007090 <_malloc_r>
 8006f9e:	b948      	cbnz	r0, 8006fb4 <__smakebuf_r+0x44>
 8006fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa4:	059a      	lsls	r2, r3, #22
 8006fa6:	d4ef      	bmi.n	8006f88 <__smakebuf_r+0x18>
 8006fa8:	f023 0303 	bic.w	r3, r3, #3
 8006fac:	f043 0302 	orr.w	r3, r3, #2
 8006fb0:	81a3      	strh	r3, [r4, #12]
 8006fb2:	e7e3      	b.n	8006f7c <__smakebuf_r+0xc>
 8006fb4:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <__smakebuf_r+0x7c>)
 8006fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	6020      	str	r0, [r4, #0]
 8006fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc0:	81a3      	strh	r3, [r4, #12]
 8006fc2:	9b00      	ldr	r3, [sp, #0]
 8006fc4:	6163      	str	r3, [r4, #20]
 8006fc6:	9b01      	ldr	r3, [sp, #4]
 8006fc8:	6120      	str	r0, [r4, #16]
 8006fca:	b15b      	cbz	r3, 8006fe4 <__smakebuf_r+0x74>
 8006fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f000 fc2d 	bl	8007830 <_isatty_r>
 8006fd6:	b128      	cbz	r0, 8006fe4 <__smakebuf_r+0x74>
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	f023 0303 	bic.w	r3, r3, #3
 8006fde:	f043 0301 	orr.w	r3, r3, #1
 8006fe2:	81a3      	strh	r3, [r4, #12]
 8006fe4:	89a0      	ldrh	r0, [r4, #12]
 8006fe6:	4305      	orrs	r5, r0
 8006fe8:	81a5      	strh	r5, [r4, #12]
 8006fea:	e7cd      	b.n	8006f88 <__smakebuf_r+0x18>
 8006fec:	08006d81 	.word	0x08006d81

08006ff0 <_free_r>:
 8006ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	d048      	beq.n	8007088 <_free_r+0x98>
 8006ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ffa:	9001      	str	r0, [sp, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f1a1 0404 	sub.w	r4, r1, #4
 8007002:	bfb8      	it	lt
 8007004:	18e4      	addlt	r4, r4, r3
 8007006:	f000 fc35 	bl	8007874 <__malloc_lock>
 800700a:	4a20      	ldr	r2, [pc, #128]	; (800708c <_free_r+0x9c>)
 800700c:	9801      	ldr	r0, [sp, #4]
 800700e:	6813      	ldr	r3, [r2, #0]
 8007010:	4615      	mov	r5, r2
 8007012:	b933      	cbnz	r3, 8007022 <_free_r+0x32>
 8007014:	6063      	str	r3, [r4, #4]
 8007016:	6014      	str	r4, [r2, #0]
 8007018:	b003      	add	sp, #12
 800701a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800701e:	f000 bc2f 	b.w	8007880 <__malloc_unlock>
 8007022:	42a3      	cmp	r3, r4
 8007024:	d90b      	bls.n	800703e <_free_r+0x4e>
 8007026:	6821      	ldr	r1, [r4, #0]
 8007028:	1862      	adds	r2, r4, r1
 800702a:	4293      	cmp	r3, r2
 800702c:	bf04      	itt	eq
 800702e:	681a      	ldreq	r2, [r3, #0]
 8007030:	685b      	ldreq	r3, [r3, #4]
 8007032:	6063      	str	r3, [r4, #4]
 8007034:	bf04      	itt	eq
 8007036:	1852      	addeq	r2, r2, r1
 8007038:	6022      	streq	r2, [r4, #0]
 800703a:	602c      	str	r4, [r5, #0]
 800703c:	e7ec      	b.n	8007018 <_free_r+0x28>
 800703e:	461a      	mov	r2, r3
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	b10b      	cbz	r3, 8007048 <_free_r+0x58>
 8007044:	42a3      	cmp	r3, r4
 8007046:	d9fa      	bls.n	800703e <_free_r+0x4e>
 8007048:	6811      	ldr	r1, [r2, #0]
 800704a:	1855      	adds	r5, r2, r1
 800704c:	42a5      	cmp	r5, r4
 800704e:	d10b      	bne.n	8007068 <_free_r+0x78>
 8007050:	6824      	ldr	r4, [r4, #0]
 8007052:	4421      	add	r1, r4
 8007054:	1854      	adds	r4, r2, r1
 8007056:	42a3      	cmp	r3, r4
 8007058:	6011      	str	r1, [r2, #0]
 800705a:	d1dd      	bne.n	8007018 <_free_r+0x28>
 800705c:	681c      	ldr	r4, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	6053      	str	r3, [r2, #4]
 8007062:	4421      	add	r1, r4
 8007064:	6011      	str	r1, [r2, #0]
 8007066:	e7d7      	b.n	8007018 <_free_r+0x28>
 8007068:	d902      	bls.n	8007070 <_free_r+0x80>
 800706a:	230c      	movs	r3, #12
 800706c:	6003      	str	r3, [r0, #0]
 800706e:	e7d3      	b.n	8007018 <_free_r+0x28>
 8007070:	6825      	ldr	r5, [r4, #0]
 8007072:	1961      	adds	r1, r4, r5
 8007074:	428b      	cmp	r3, r1
 8007076:	bf04      	itt	eq
 8007078:	6819      	ldreq	r1, [r3, #0]
 800707a:	685b      	ldreq	r3, [r3, #4]
 800707c:	6063      	str	r3, [r4, #4]
 800707e:	bf04      	itt	eq
 8007080:	1949      	addeq	r1, r1, r5
 8007082:	6021      	streq	r1, [r4, #0]
 8007084:	6054      	str	r4, [r2, #4]
 8007086:	e7c7      	b.n	8007018 <_free_r+0x28>
 8007088:	b003      	add	sp, #12
 800708a:	bd30      	pop	{r4, r5, pc}
 800708c:	24000094 	.word	0x24000094

08007090 <_malloc_r>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	1ccd      	adds	r5, r1, #3
 8007094:	f025 0503 	bic.w	r5, r5, #3
 8007098:	3508      	adds	r5, #8
 800709a:	2d0c      	cmp	r5, #12
 800709c:	bf38      	it	cc
 800709e:	250c      	movcc	r5, #12
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	4606      	mov	r6, r0
 80070a4:	db01      	blt.n	80070aa <_malloc_r+0x1a>
 80070a6:	42a9      	cmp	r1, r5
 80070a8:	d903      	bls.n	80070b2 <_malloc_r+0x22>
 80070aa:	230c      	movs	r3, #12
 80070ac:	6033      	str	r3, [r6, #0]
 80070ae:	2000      	movs	r0, #0
 80070b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b2:	f000 fbdf 	bl	8007874 <__malloc_lock>
 80070b6:	4921      	ldr	r1, [pc, #132]	; (800713c <_malloc_r+0xac>)
 80070b8:	680a      	ldr	r2, [r1, #0]
 80070ba:	4614      	mov	r4, r2
 80070bc:	b99c      	cbnz	r4, 80070e6 <_malloc_r+0x56>
 80070be:	4f20      	ldr	r7, [pc, #128]	; (8007140 <_malloc_r+0xb0>)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	b923      	cbnz	r3, 80070ce <_malloc_r+0x3e>
 80070c4:	4621      	mov	r1, r4
 80070c6:	4630      	mov	r0, r6
 80070c8:	f000 fb2a 	bl	8007720 <_sbrk_r>
 80070cc:	6038      	str	r0, [r7, #0]
 80070ce:	4629      	mov	r1, r5
 80070d0:	4630      	mov	r0, r6
 80070d2:	f000 fb25 	bl	8007720 <_sbrk_r>
 80070d6:	1c43      	adds	r3, r0, #1
 80070d8:	d123      	bne.n	8007122 <_malloc_r+0x92>
 80070da:	230c      	movs	r3, #12
 80070dc:	6033      	str	r3, [r6, #0]
 80070de:	4630      	mov	r0, r6
 80070e0:	f000 fbce 	bl	8007880 <__malloc_unlock>
 80070e4:	e7e3      	b.n	80070ae <_malloc_r+0x1e>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	1b5b      	subs	r3, r3, r5
 80070ea:	d417      	bmi.n	800711c <_malloc_r+0x8c>
 80070ec:	2b0b      	cmp	r3, #11
 80070ee:	d903      	bls.n	80070f8 <_malloc_r+0x68>
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	441c      	add	r4, r3
 80070f4:	6025      	str	r5, [r4, #0]
 80070f6:	e004      	b.n	8007102 <_malloc_r+0x72>
 80070f8:	6863      	ldr	r3, [r4, #4]
 80070fa:	42a2      	cmp	r2, r4
 80070fc:	bf0c      	ite	eq
 80070fe:	600b      	streq	r3, [r1, #0]
 8007100:	6053      	strne	r3, [r2, #4]
 8007102:	4630      	mov	r0, r6
 8007104:	f000 fbbc 	bl	8007880 <__malloc_unlock>
 8007108:	f104 000b 	add.w	r0, r4, #11
 800710c:	1d23      	adds	r3, r4, #4
 800710e:	f020 0007 	bic.w	r0, r0, #7
 8007112:	1ac2      	subs	r2, r0, r3
 8007114:	d0cc      	beq.n	80070b0 <_malloc_r+0x20>
 8007116:	1a1b      	subs	r3, r3, r0
 8007118:	50a3      	str	r3, [r4, r2]
 800711a:	e7c9      	b.n	80070b0 <_malloc_r+0x20>
 800711c:	4622      	mov	r2, r4
 800711e:	6864      	ldr	r4, [r4, #4]
 8007120:	e7cc      	b.n	80070bc <_malloc_r+0x2c>
 8007122:	1cc4      	adds	r4, r0, #3
 8007124:	f024 0403 	bic.w	r4, r4, #3
 8007128:	42a0      	cmp	r0, r4
 800712a:	d0e3      	beq.n	80070f4 <_malloc_r+0x64>
 800712c:	1a21      	subs	r1, r4, r0
 800712e:	4630      	mov	r0, r6
 8007130:	f000 faf6 	bl	8007720 <_sbrk_r>
 8007134:	3001      	adds	r0, #1
 8007136:	d1dd      	bne.n	80070f4 <_malloc_r+0x64>
 8007138:	e7cf      	b.n	80070da <_malloc_r+0x4a>
 800713a:	bf00      	nop
 800713c:	24000094 	.word	0x24000094
 8007140:	24000098 	.word	0x24000098

08007144 <__sfputc_r>:
 8007144:	6893      	ldr	r3, [r2, #8]
 8007146:	3b01      	subs	r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	b410      	push	{r4}
 800714c:	6093      	str	r3, [r2, #8]
 800714e:	da08      	bge.n	8007162 <__sfputc_r+0x1e>
 8007150:	6994      	ldr	r4, [r2, #24]
 8007152:	42a3      	cmp	r3, r4
 8007154:	db01      	blt.n	800715a <__sfputc_r+0x16>
 8007156:	290a      	cmp	r1, #10
 8007158:	d103      	bne.n	8007162 <__sfputc_r+0x1e>
 800715a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800715e:	f7ff bc69 	b.w	8006a34 <__swbuf_r>
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	1c58      	adds	r0, r3, #1
 8007166:	6010      	str	r0, [r2, #0]
 8007168:	7019      	strb	r1, [r3, #0]
 800716a:	4608      	mov	r0, r1
 800716c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007170:	4770      	bx	lr

08007172 <__sfputs_r>:
 8007172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007174:	4606      	mov	r6, r0
 8007176:	460f      	mov	r7, r1
 8007178:	4614      	mov	r4, r2
 800717a:	18d5      	adds	r5, r2, r3
 800717c:	42ac      	cmp	r4, r5
 800717e:	d101      	bne.n	8007184 <__sfputs_r+0x12>
 8007180:	2000      	movs	r0, #0
 8007182:	e007      	b.n	8007194 <__sfputs_r+0x22>
 8007184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007188:	463a      	mov	r2, r7
 800718a:	4630      	mov	r0, r6
 800718c:	f7ff ffda 	bl	8007144 <__sfputc_r>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d1f3      	bne.n	800717c <__sfputs_r+0xa>
 8007194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007198 <_vfiprintf_r>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	460d      	mov	r5, r1
 800719e:	b09d      	sub	sp, #116	; 0x74
 80071a0:	4614      	mov	r4, r2
 80071a2:	4698      	mov	r8, r3
 80071a4:	4606      	mov	r6, r0
 80071a6:	b118      	cbz	r0, 80071b0 <_vfiprintf_r+0x18>
 80071a8:	6983      	ldr	r3, [r0, #24]
 80071aa:	b90b      	cbnz	r3, 80071b0 <_vfiprintf_r+0x18>
 80071ac:	f7ff fe1c 	bl	8006de8 <__sinit>
 80071b0:	4b89      	ldr	r3, [pc, #548]	; (80073d8 <_vfiprintf_r+0x240>)
 80071b2:	429d      	cmp	r5, r3
 80071b4:	d11b      	bne.n	80071ee <_vfiprintf_r+0x56>
 80071b6:	6875      	ldr	r5, [r6, #4]
 80071b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ba:	07d9      	lsls	r1, r3, #31
 80071bc:	d405      	bmi.n	80071ca <_vfiprintf_r+0x32>
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	059a      	lsls	r2, r3, #22
 80071c2:	d402      	bmi.n	80071ca <_vfiprintf_r+0x32>
 80071c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071c6:	f7ff fead 	bl	8006f24 <__retarget_lock_acquire_recursive>
 80071ca:	89ab      	ldrh	r3, [r5, #12]
 80071cc:	071b      	lsls	r3, r3, #28
 80071ce:	d501      	bpl.n	80071d4 <_vfiprintf_r+0x3c>
 80071d0:	692b      	ldr	r3, [r5, #16]
 80071d2:	b9eb      	cbnz	r3, 8007210 <_vfiprintf_r+0x78>
 80071d4:	4629      	mov	r1, r5
 80071d6:	4630      	mov	r0, r6
 80071d8:	f7ff fc7e 	bl	8006ad8 <__swsetup_r>
 80071dc:	b1c0      	cbz	r0, 8007210 <_vfiprintf_r+0x78>
 80071de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071e0:	07dc      	lsls	r4, r3, #31
 80071e2:	d50e      	bpl.n	8007202 <_vfiprintf_r+0x6a>
 80071e4:	f04f 30ff 	mov.w	r0, #4294967295
 80071e8:	b01d      	add	sp, #116	; 0x74
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	4b7b      	ldr	r3, [pc, #492]	; (80073dc <_vfiprintf_r+0x244>)
 80071f0:	429d      	cmp	r5, r3
 80071f2:	d101      	bne.n	80071f8 <_vfiprintf_r+0x60>
 80071f4:	68b5      	ldr	r5, [r6, #8]
 80071f6:	e7df      	b.n	80071b8 <_vfiprintf_r+0x20>
 80071f8:	4b79      	ldr	r3, [pc, #484]	; (80073e0 <_vfiprintf_r+0x248>)
 80071fa:	429d      	cmp	r5, r3
 80071fc:	bf08      	it	eq
 80071fe:	68f5      	ldreq	r5, [r6, #12]
 8007200:	e7da      	b.n	80071b8 <_vfiprintf_r+0x20>
 8007202:	89ab      	ldrh	r3, [r5, #12]
 8007204:	0598      	lsls	r0, r3, #22
 8007206:	d4ed      	bmi.n	80071e4 <_vfiprintf_r+0x4c>
 8007208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800720a:	f7ff fe8c 	bl	8006f26 <__retarget_lock_release_recursive>
 800720e:	e7e9      	b.n	80071e4 <_vfiprintf_r+0x4c>
 8007210:	2300      	movs	r3, #0
 8007212:	9309      	str	r3, [sp, #36]	; 0x24
 8007214:	2320      	movs	r3, #32
 8007216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800721a:	f8cd 800c 	str.w	r8, [sp, #12]
 800721e:	2330      	movs	r3, #48	; 0x30
 8007220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073e4 <_vfiprintf_r+0x24c>
 8007224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007228:	f04f 0901 	mov.w	r9, #1
 800722c:	4623      	mov	r3, r4
 800722e:	469a      	mov	sl, r3
 8007230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007234:	b10a      	cbz	r2, 800723a <_vfiprintf_r+0xa2>
 8007236:	2a25      	cmp	r2, #37	; 0x25
 8007238:	d1f9      	bne.n	800722e <_vfiprintf_r+0x96>
 800723a:	ebba 0b04 	subs.w	fp, sl, r4
 800723e:	d00b      	beq.n	8007258 <_vfiprintf_r+0xc0>
 8007240:	465b      	mov	r3, fp
 8007242:	4622      	mov	r2, r4
 8007244:	4629      	mov	r1, r5
 8007246:	4630      	mov	r0, r6
 8007248:	f7ff ff93 	bl	8007172 <__sfputs_r>
 800724c:	3001      	adds	r0, #1
 800724e:	f000 80aa 	beq.w	80073a6 <_vfiprintf_r+0x20e>
 8007252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007254:	445a      	add	r2, fp
 8007256:	9209      	str	r2, [sp, #36]	; 0x24
 8007258:	f89a 3000 	ldrb.w	r3, [sl]
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 80a2 	beq.w	80073a6 <_vfiprintf_r+0x20e>
 8007262:	2300      	movs	r3, #0
 8007264:	f04f 32ff 	mov.w	r2, #4294967295
 8007268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800726c:	f10a 0a01 	add.w	sl, sl, #1
 8007270:	9304      	str	r3, [sp, #16]
 8007272:	9307      	str	r3, [sp, #28]
 8007274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007278:	931a      	str	r3, [sp, #104]	; 0x68
 800727a:	4654      	mov	r4, sl
 800727c:	2205      	movs	r2, #5
 800727e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007282:	4858      	ldr	r0, [pc, #352]	; (80073e4 <_vfiprintf_r+0x24c>)
 8007284:	f7f9 f82c 	bl	80002e0 <memchr>
 8007288:	9a04      	ldr	r2, [sp, #16]
 800728a:	b9d8      	cbnz	r0, 80072c4 <_vfiprintf_r+0x12c>
 800728c:	06d1      	lsls	r1, r2, #27
 800728e:	bf44      	itt	mi
 8007290:	2320      	movmi	r3, #32
 8007292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007296:	0713      	lsls	r3, r2, #28
 8007298:	bf44      	itt	mi
 800729a:	232b      	movmi	r3, #43	; 0x2b
 800729c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a0:	f89a 3000 	ldrb.w	r3, [sl]
 80072a4:	2b2a      	cmp	r3, #42	; 0x2a
 80072a6:	d015      	beq.n	80072d4 <_vfiprintf_r+0x13c>
 80072a8:	9a07      	ldr	r2, [sp, #28]
 80072aa:	4654      	mov	r4, sl
 80072ac:	2000      	movs	r0, #0
 80072ae:	f04f 0c0a 	mov.w	ip, #10
 80072b2:	4621      	mov	r1, r4
 80072b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b8:	3b30      	subs	r3, #48	; 0x30
 80072ba:	2b09      	cmp	r3, #9
 80072bc:	d94e      	bls.n	800735c <_vfiprintf_r+0x1c4>
 80072be:	b1b0      	cbz	r0, 80072ee <_vfiprintf_r+0x156>
 80072c0:	9207      	str	r2, [sp, #28]
 80072c2:	e014      	b.n	80072ee <_vfiprintf_r+0x156>
 80072c4:	eba0 0308 	sub.w	r3, r0, r8
 80072c8:	fa09 f303 	lsl.w	r3, r9, r3
 80072cc:	4313      	orrs	r3, r2
 80072ce:	9304      	str	r3, [sp, #16]
 80072d0:	46a2      	mov	sl, r4
 80072d2:	e7d2      	b.n	800727a <_vfiprintf_r+0xe2>
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	1d19      	adds	r1, r3, #4
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	9103      	str	r1, [sp, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	bfbb      	ittet	lt
 80072e0:	425b      	neglt	r3, r3
 80072e2:	f042 0202 	orrlt.w	r2, r2, #2
 80072e6:	9307      	strge	r3, [sp, #28]
 80072e8:	9307      	strlt	r3, [sp, #28]
 80072ea:	bfb8      	it	lt
 80072ec:	9204      	strlt	r2, [sp, #16]
 80072ee:	7823      	ldrb	r3, [r4, #0]
 80072f0:	2b2e      	cmp	r3, #46	; 0x2e
 80072f2:	d10c      	bne.n	800730e <_vfiprintf_r+0x176>
 80072f4:	7863      	ldrb	r3, [r4, #1]
 80072f6:	2b2a      	cmp	r3, #42	; 0x2a
 80072f8:	d135      	bne.n	8007366 <_vfiprintf_r+0x1ce>
 80072fa:	9b03      	ldr	r3, [sp, #12]
 80072fc:	1d1a      	adds	r2, r3, #4
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	9203      	str	r2, [sp, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	bfb8      	it	lt
 8007306:	f04f 33ff 	movlt.w	r3, #4294967295
 800730a:	3402      	adds	r4, #2
 800730c:	9305      	str	r3, [sp, #20]
 800730e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073f4 <_vfiprintf_r+0x25c>
 8007312:	7821      	ldrb	r1, [r4, #0]
 8007314:	2203      	movs	r2, #3
 8007316:	4650      	mov	r0, sl
 8007318:	f7f8 ffe2 	bl	80002e0 <memchr>
 800731c:	b140      	cbz	r0, 8007330 <_vfiprintf_r+0x198>
 800731e:	2340      	movs	r3, #64	; 0x40
 8007320:	eba0 000a 	sub.w	r0, r0, sl
 8007324:	fa03 f000 	lsl.w	r0, r3, r0
 8007328:	9b04      	ldr	r3, [sp, #16]
 800732a:	4303      	orrs	r3, r0
 800732c:	3401      	adds	r4, #1
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007334:	482c      	ldr	r0, [pc, #176]	; (80073e8 <_vfiprintf_r+0x250>)
 8007336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800733a:	2206      	movs	r2, #6
 800733c:	f7f8 ffd0 	bl	80002e0 <memchr>
 8007340:	2800      	cmp	r0, #0
 8007342:	d03f      	beq.n	80073c4 <_vfiprintf_r+0x22c>
 8007344:	4b29      	ldr	r3, [pc, #164]	; (80073ec <_vfiprintf_r+0x254>)
 8007346:	bb1b      	cbnz	r3, 8007390 <_vfiprintf_r+0x1f8>
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	3307      	adds	r3, #7
 800734c:	f023 0307 	bic.w	r3, r3, #7
 8007350:	3308      	adds	r3, #8
 8007352:	9303      	str	r3, [sp, #12]
 8007354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007356:	443b      	add	r3, r7
 8007358:	9309      	str	r3, [sp, #36]	; 0x24
 800735a:	e767      	b.n	800722c <_vfiprintf_r+0x94>
 800735c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007360:	460c      	mov	r4, r1
 8007362:	2001      	movs	r0, #1
 8007364:	e7a5      	b.n	80072b2 <_vfiprintf_r+0x11a>
 8007366:	2300      	movs	r3, #0
 8007368:	3401      	adds	r4, #1
 800736a:	9305      	str	r3, [sp, #20]
 800736c:	4619      	mov	r1, r3
 800736e:	f04f 0c0a 	mov.w	ip, #10
 8007372:	4620      	mov	r0, r4
 8007374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007378:	3a30      	subs	r2, #48	; 0x30
 800737a:	2a09      	cmp	r2, #9
 800737c:	d903      	bls.n	8007386 <_vfiprintf_r+0x1ee>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0c5      	beq.n	800730e <_vfiprintf_r+0x176>
 8007382:	9105      	str	r1, [sp, #20]
 8007384:	e7c3      	b.n	800730e <_vfiprintf_r+0x176>
 8007386:	fb0c 2101 	mla	r1, ip, r1, r2
 800738a:	4604      	mov	r4, r0
 800738c:	2301      	movs	r3, #1
 800738e:	e7f0      	b.n	8007372 <_vfiprintf_r+0x1da>
 8007390:	ab03      	add	r3, sp, #12
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	462a      	mov	r2, r5
 8007396:	4b16      	ldr	r3, [pc, #88]	; (80073f0 <_vfiprintf_r+0x258>)
 8007398:	a904      	add	r1, sp, #16
 800739a:	4630      	mov	r0, r6
 800739c:	f3af 8000 	nop.w
 80073a0:	4607      	mov	r7, r0
 80073a2:	1c78      	adds	r0, r7, #1
 80073a4:	d1d6      	bne.n	8007354 <_vfiprintf_r+0x1bc>
 80073a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073a8:	07d9      	lsls	r1, r3, #31
 80073aa:	d405      	bmi.n	80073b8 <_vfiprintf_r+0x220>
 80073ac:	89ab      	ldrh	r3, [r5, #12]
 80073ae:	059a      	lsls	r2, r3, #22
 80073b0:	d402      	bmi.n	80073b8 <_vfiprintf_r+0x220>
 80073b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073b4:	f7ff fdb7 	bl	8006f26 <__retarget_lock_release_recursive>
 80073b8:	89ab      	ldrh	r3, [r5, #12]
 80073ba:	065b      	lsls	r3, r3, #25
 80073bc:	f53f af12 	bmi.w	80071e4 <_vfiprintf_r+0x4c>
 80073c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073c2:	e711      	b.n	80071e8 <_vfiprintf_r+0x50>
 80073c4:	ab03      	add	r3, sp, #12
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	462a      	mov	r2, r5
 80073ca:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <_vfiprintf_r+0x258>)
 80073cc:	a904      	add	r1, sp, #16
 80073ce:	4630      	mov	r0, r6
 80073d0:	f000 f880 	bl	80074d4 <_printf_i>
 80073d4:	e7e4      	b.n	80073a0 <_vfiprintf_r+0x208>
 80073d6:	bf00      	nop
 80073d8:	0800797c 	.word	0x0800797c
 80073dc:	0800799c 	.word	0x0800799c
 80073e0:	0800795c 	.word	0x0800795c
 80073e4:	080079bc 	.word	0x080079bc
 80073e8:	080079c6 	.word	0x080079c6
 80073ec:	00000000 	.word	0x00000000
 80073f0:	08007173 	.word	0x08007173
 80073f4:	080079c2 	.word	0x080079c2

080073f8 <_printf_common>:
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	4616      	mov	r6, r2
 80073fe:	4699      	mov	r9, r3
 8007400:	688a      	ldr	r2, [r1, #8]
 8007402:	690b      	ldr	r3, [r1, #16]
 8007404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007408:	4293      	cmp	r3, r2
 800740a:	bfb8      	it	lt
 800740c:	4613      	movlt	r3, r2
 800740e:	6033      	str	r3, [r6, #0]
 8007410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007414:	4607      	mov	r7, r0
 8007416:	460c      	mov	r4, r1
 8007418:	b10a      	cbz	r2, 800741e <_printf_common+0x26>
 800741a:	3301      	adds	r3, #1
 800741c:	6033      	str	r3, [r6, #0]
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	0699      	lsls	r1, r3, #26
 8007422:	bf42      	ittt	mi
 8007424:	6833      	ldrmi	r3, [r6, #0]
 8007426:	3302      	addmi	r3, #2
 8007428:	6033      	strmi	r3, [r6, #0]
 800742a:	6825      	ldr	r5, [r4, #0]
 800742c:	f015 0506 	ands.w	r5, r5, #6
 8007430:	d106      	bne.n	8007440 <_printf_common+0x48>
 8007432:	f104 0a19 	add.w	sl, r4, #25
 8007436:	68e3      	ldr	r3, [r4, #12]
 8007438:	6832      	ldr	r2, [r6, #0]
 800743a:	1a9b      	subs	r3, r3, r2
 800743c:	42ab      	cmp	r3, r5
 800743e:	dc26      	bgt.n	800748e <_printf_common+0x96>
 8007440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007444:	1e13      	subs	r3, r2, #0
 8007446:	6822      	ldr	r2, [r4, #0]
 8007448:	bf18      	it	ne
 800744a:	2301      	movne	r3, #1
 800744c:	0692      	lsls	r2, r2, #26
 800744e:	d42b      	bmi.n	80074a8 <_printf_common+0xb0>
 8007450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007454:	4649      	mov	r1, r9
 8007456:	4638      	mov	r0, r7
 8007458:	47c0      	blx	r8
 800745a:	3001      	adds	r0, #1
 800745c:	d01e      	beq.n	800749c <_printf_common+0xa4>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	68e5      	ldr	r5, [r4, #12]
 8007462:	6832      	ldr	r2, [r6, #0]
 8007464:	f003 0306 	and.w	r3, r3, #6
 8007468:	2b04      	cmp	r3, #4
 800746a:	bf08      	it	eq
 800746c:	1aad      	subeq	r5, r5, r2
 800746e:	68a3      	ldr	r3, [r4, #8]
 8007470:	6922      	ldr	r2, [r4, #16]
 8007472:	bf0c      	ite	eq
 8007474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007478:	2500      	movne	r5, #0
 800747a:	4293      	cmp	r3, r2
 800747c:	bfc4      	itt	gt
 800747e:	1a9b      	subgt	r3, r3, r2
 8007480:	18ed      	addgt	r5, r5, r3
 8007482:	2600      	movs	r6, #0
 8007484:	341a      	adds	r4, #26
 8007486:	42b5      	cmp	r5, r6
 8007488:	d11a      	bne.n	80074c0 <_printf_common+0xc8>
 800748a:	2000      	movs	r0, #0
 800748c:	e008      	b.n	80074a0 <_printf_common+0xa8>
 800748e:	2301      	movs	r3, #1
 8007490:	4652      	mov	r2, sl
 8007492:	4649      	mov	r1, r9
 8007494:	4638      	mov	r0, r7
 8007496:	47c0      	blx	r8
 8007498:	3001      	adds	r0, #1
 800749a:	d103      	bne.n	80074a4 <_printf_common+0xac>
 800749c:	f04f 30ff 	mov.w	r0, #4294967295
 80074a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a4:	3501      	adds	r5, #1
 80074a6:	e7c6      	b.n	8007436 <_printf_common+0x3e>
 80074a8:	18e1      	adds	r1, r4, r3
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	2030      	movs	r0, #48	; 0x30
 80074ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074b2:	4422      	add	r2, r4
 80074b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074bc:	3302      	adds	r3, #2
 80074be:	e7c7      	b.n	8007450 <_printf_common+0x58>
 80074c0:	2301      	movs	r3, #1
 80074c2:	4622      	mov	r2, r4
 80074c4:	4649      	mov	r1, r9
 80074c6:	4638      	mov	r0, r7
 80074c8:	47c0      	blx	r8
 80074ca:	3001      	adds	r0, #1
 80074cc:	d0e6      	beq.n	800749c <_printf_common+0xa4>
 80074ce:	3601      	adds	r6, #1
 80074d0:	e7d9      	b.n	8007486 <_printf_common+0x8e>
	...

080074d4 <_printf_i>:
 80074d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074d8:	460c      	mov	r4, r1
 80074da:	4691      	mov	r9, r2
 80074dc:	7e27      	ldrb	r7, [r4, #24]
 80074de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074e0:	2f78      	cmp	r7, #120	; 0x78
 80074e2:	4680      	mov	r8, r0
 80074e4:	469a      	mov	sl, r3
 80074e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074ea:	d807      	bhi.n	80074fc <_printf_i+0x28>
 80074ec:	2f62      	cmp	r7, #98	; 0x62
 80074ee:	d80a      	bhi.n	8007506 <_printf_i+0x32>
 80074f0:	2f00      	cmp	r7, #0
 80074f2:	f000 80d8 	beq.w	80076a6 <_printf_i+0x1d2>
 80074f6:	2f58      	cmp	r7, #88	; 0x58
 80074f8:	f000 80a3 	beq.w	8007642 <_printf_i+0x16e>
 80074fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007504:	e03a      	b.n	800757c <_printf_i+0xa8>
 8007506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800750a:	2b15      	cmp	r3, #21
 800750c:	d8f6      	bhi.n	80074fc <_printf_i+0x28>
 800750e:	a001      	add	r0, pc, #4	; (adr r0, 8007514 <_printf_i+0x40>)
 8007510:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007514:	0800756d 	.word	0x0800756d
 8007518:	08007581 	.word	0x08007581
 800751c:	080074fd 	.word	0x080074fd
 8007520:	080074fd 	.word	0x080074fd
 8007524:	080074fd 	.word	0x080074fd
 8007528:	080074fd 	.word	0x080074fd
 800752c:	08007581 	.word	0x08007581
 8007530:	080074fd 	.word	0x080074fd
 8007534:	080074fd 	.word	0x080074fd
 8007538:	080074fd 	.word	0x080074fd
 800753c:	080074fd 	.word	0x080074fd
 8007540:	0800768d 	.word	0x0800768d
 8007544:	080075b1 	.word	0x080075b1
 8007548:	0800766f 	.word	0x0800766f
 800754c:	080074fd 	.word	0x080074fd
 8007550:	080074fd 	.word	0x080074fd
 8007554:	080076af 	.word	0x080076af
 8007558:	080074fd 	.word	0x080074fd
 800755c:	080075b1 	.word	0x080075b1
 8007560:	080074fd 	.word	0x080074fd
 8007564:	080074fd 	.word	0x080074fd
 8007568:	08007677 	.word	0x08007677
 800756c:	680b      	ldr	r3, [r1, #0]
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	600a      	str	r2, [r1, #0]
 8007574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800757c:	2301      	movs	r3, #1
 800757e:	e0a3      	b.n	80076c8 <_printf_i+0x1f4>
 8007580:	6825      	ldr	r5, [r4, #0]
 8007582:	6808      	ldr	r0, [r1, #0]
 8007584:	062e      	lsls	r6, r5, #24
 8007586:	f100 0304 	add.w	r3, r0, #4
 800758a:	d50a      	bpl.n	80075a2 <_printf_i+0xce>
 800758c:	6805      	ldr	r5, [r0, #0]
 800758e:	600b      	str	r3, [r1, #0]
 8007590:	2d00      	cmp	r5, #0
 8007592:	da03      	bge.n	800759c <_printf_i+0xc8>
 8007594:	232d      	movs	r3, #45	; 0x2d
 8007596:	426d      	negs	r5, r5
 8007598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800759c:	485e      	ldr	r0, [pc, #376]	; (8007718 <_printf_i+0x244>)
 800759e:	230a      	movs	r3, #10
 80075a0:	e019      	b.n	80075d6 <_printf_i+0x102>
 80075a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075a6:	6805      	ldr	r5, [r0, #0]
 80075a8:	600b      	str	r3, [r1, #0]
 80075aa:	bf18      	it	ne
 80075ac:	b22d      	sxthne	r5, r5
 80075ae:	e7ef      	b.n	8007590 <_printf_i+0xbc>
 80075b0:	680b      	ldr	r3, [r1, #0]
 80075b2:	6825      	ldr	r5, [r4, #0]
 80075b4:	1d18      	adds	r0, r3, #4
 80075b6:	6008      	str	r0, [r1, #0]
 80075b8:	0628      	lsls	r0, r5, #24
 80075ba:	d501      	bpl.n	80075c0 <_printf_i+0xec>
 80075bc:	681d      	ldr	r5, [r3, #0]
 80075be:	e002      	b.n	80075c6 <_printf_i+0xf2>
 80075c0:	0669      	lsls	r1, r5, #25
 80075c2:	d5fb      	bpl.n	80075bc <_printf_i+0xe8>
 80075c4:	881d      	ldrh	r5, [r3, #0]
 80075c6:	4854      	ldr	r0, [pc, #336]	; (8007718 <_printf_i+0x244>)
 80075c8:	2f6f      	cmp	r7, #111	; 0x6f
 80075ca:	bf0c      	ite	eq
 80075cc:	2308      	moveq	r3, #8
 80075ce:	230a      	movne	r3, #10
 80075d0:	2100      	movs	r1, #0
 80075d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075d6:	6866      	ldr	r6, [r4, #4]
 80075d8:	60a6      	str	r6, [r4, #8]
 80075da:	2e00      	cmp	r6, #0
 80075dc:	bfa2      	ittt	ge
 80075de:	6821      	ldrge	r1, [r4, #0]
 80075e0:	f021 0104 	bicge.w	r1, r1, #4
 80075e4:	6021      	strge	r1, [r4, #0]
 80075e6:	b90d      	cbnz	r5, 80075ec <_printf_i+0x118>
 80075e8:	2e00      	cmp	r6, #0
 80075ea:	d04d      	beq.n	8007688 <_printf_i+0x1b4>
 80075ec:	4616      	mov	r6, r2
 80075ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80075f2:	fb03 5711 	mls	r7, r3, r1, r5
 80075f6:	5dc7      	ldrb	r7, [r0, r7]
 80075f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075fc:	462f      	mov	r7, r5
 80075fe:	42bb      	cmp	r3, r7
 8007600:	460d      	mov	r5, r1
 8007602:	d9f4      	bls.n	80075ee <_printf_i+0x11a>
 8007604:	2b08      	cmp	r3, #8
 8007606:	d10b      	bne.n	8007620 <_printf_i+0x14c>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	07df      	lsls	r7, r3, #31
 800760c:	d508      	bpl.n	8007620 <_printf_i+0x14c>
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	6861      	ldr	r1, [r4, #4]
 8007612:	4299      	cmp	r1, r3
 8007614:	bfde      	ittt	le
 8007616:	2330      	movle	r3, #48	; 0x30
 8007618:	f806 3c01 	strble.w	r3, [r6, #-1]
 800761c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007620:	1b92      	subs	r2, r2, r6
 8007622:	6122      	str	r2, [r4, #16]
 8007624:	f8cd a000 	str.w	sl, [sp]
 8007628:	464b      	mov	r3, r9
 800762a:	aa03      	add	r2, sp, #12
 800762c:	4621      	mov	r1, r4
 800762e:	4640      	mov	r0, r8
 8007630:	f7ff fee2 	bl	80073f8 <_printf_common>
 8007634:	3001      	adds	r0, #1
 8007636:	d14c      	bne.n	80076d2 <_printf_i+0x1fe>
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
 800763c:	b004      	add	sp, #16
 800763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007642:	4835      	ldr	r0, [pc, #212]	; (8007718 <_printf_i+0x244>)
 8007644:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	680e      	ldr	r6, [r1, #0]
 800764c:	061f      	lsls	r7, r3, #24
 800764e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007652:	600e      	str	r6, [r1, #0]
 8007654:	d514      	bpl.n	8007680 <_printf_i+0x1ac>
 8007656:	07d9      	lsls	r1, r3, #31
 8007658:	bf44      	itt	mi
 800765a:	f043 0320 	orrmi.w	r3, r3, #32
 800765e:	6023      	strmi	r3, [r4, #0]
 8007660:	b91d      	cbnz	r5, 800766a <_printf_i+0x196>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	f023 0320 	bic.w	r3, r3, #32
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	2310      	movs	r3, #16
 800766c:	e7b0      	b.n	80075d0 <_printf_i+0xfc>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	f043 0320 	orr.w	r3, r3, #32
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	2378      	movs	r3, #120	; 0x78
 8007678:	4828      	ldr	r0, [pc, #160]	; (800771c <_printf_i+0x248>)
 800767a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800767e:	e7e3      	b.n	8007648 <_printf_i+0x174>
 8007680:	065e      	lsls	r6, r3, #25
 8007682:	bf48      	it	mi
 8007684:	b2ad      	uxthmi	r5, r5
 8007686:	e7e6      	b.n	8007656 <_printf_i+0x182>
 8007688:	4616      	mov	r6, r2
 800768a:	e7bb      	b.n	8007604 <_printf_i+0x130>
 800768c:	680b      	ldr	r3, [r1, #0]
 800768e:	6826      	ldr	r6, [r4, #0]
 8007690:	6960      	ldr	r0, [r4, #20]
 8007692:	1d1d      	adds	r5, r3, #4
 8007694:	600d      	str	r5, [r1, #0]
 8007696:	0635      	lsls	r5, r6, #24
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	d501      	bpl.n	80076a0 <_printf_i+0x1cc>
 800769c:	6018      	str	r0, [r3, #0]
 800769e:	e002      	b.n	80076a6 <_printf_i+0x1d2>
 80076a0:	0671      	lsls	r1, r6, #25
 80076a2:	d5fb      	bpl.n	800769c <_printf_i+0x1c8>
 80076a4:	8018      	strh	r0, [r3, #0]
 80076a6:	2300      	movs	r3, #0
 80076a8:	6123      	str	r3, [r4, #16]
 80076aa:	4616      	mov	r6, r2
 80076ac:	e7ba      	b.n	8007624 <_printf_i+0x150>
 80076ae:	680b      	ldr	r3, [r1, #0]
 80076b0:	1d1a      	adds	r2, r3, #4
 80076b2:	600a      	str	r2, [r1, #0]
 80076b4:	681e      	ldr	r6, [r3, #0]
 80076b6:	6862      	ldr	r2, [r4, #4]
 80076b8:	2100      	movs	r1, #0
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7f8 fe10 	bl	80002e0 <memchr>
 80076c0:	b108      	cbz	r0, 80076c6 <_printf_i+0x1f2>
 80076c2:	1b80      	subs	r0, r0, r6
 80076c4:	6060      	str	r0, [r4, #4]
 80076c6:	6863      	ldr	r3, [r4, #4]
 80076c8:	6123      	str	r3, [r4, #16]
 80076ca:	2300      	movs	r3, #0
 80076cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d0:	e7a8      	b.n	8007624 <_printf_i+0x150>
 80076d2:	6923      	ldr	r3, [r4, #16]
 80076d4:	4632      	mov	r2, r6
 80076d6:	4649      	mov	r1, r9
 80076d8:	4640      	mov	r0, r8
 80076da:	47d0      	blx	sl
 80076dc:	3001      	adds	r0, #1
 80076de:	d0ab      	beq.n	8007638 <_printf_i+0x164>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	079b      	lsls	r3, r3, #30
 80076e4:	d413      	bmi.n	800770e <_printf_i+0x23a>
 80076e6:	68e0      	ldr	r0, [r4, #12]
 80076e8:	9b03      	ldr	r3, [sp, #12]
 80076ea:	4298      	cmp	r0, r3
 80076ec:	bfb8      	it	lt
 80076ee:	4618      	movlt	r0, r3
 80076f0:	e7a4      	b.n	800763c <_printf_i+0x168>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4632      	mov	r2, r6
 80076f6:	4649      	mov	r1, r9
 80076f8:	4640      	mov	r0, r8
 80076fa:	47d0      	blx	sl
 80076fc:	3001      	adds	r0, #1
 80076fe:	d09b      	beq.n	8007638 <_printf_i+0x164>
 8007700:	3501      	adds	r5, #1
 8007702:	68e3      	ldr	r3, [r4, #12]
 8007704:	9903      	ldr	r1, [sp, #12]
 8007706:	1a5b      	subs	r3, r3, r1
 8007708:	42ab      	cmp	r3, r5
 800770a:	dcf2      	bgt.n	80076f2 <_printf_i+0x21e>
 800770c:	e7eb      	b.n	80076e6 <_printf_i+0x212>
 800770e:	2500      	movs	r5, #0
 8007710:	f104 0619 	add.w	r6, r4, #25
 8007714:	e7f5      	b.n	8007702 <_printf_i+0x22e>
 8007716:	bf00      	nop
 8007718:	080079cd 	.word	0x080079cd
 800771c:	080079de 	.word	0x080079de

08007720 <_sbrk_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4d06      	ldr	r5, [pc, #24]	; (800773c <_sbrk_r+0x1c>)
 8007724:	2300      	movs	r3, #0
 8007726:	4604      	mov	r4, r0
 8007728:	4608      	mov	r0, r1
 800772a:	602b      	str	r3, [r5, #0]
 800772c:	f7fa f802 	bl	8001734 <_sbrk>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_sbrk_r+0x1a>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_sbrk_r+0x1a>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	24000188 	.word	0x24000188

08007740 <__sread>:
 8007740:	b510      	push	{r4, lr}
 8007742:	460c      	mov	r4, r1
 8007744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007748:	f000 f8a0 	bl	800788c <_read_r>
 800774c:	2800      	cmp	r0, #0
 800774e:	bfab      	itete	ge
 8007750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007752:	89a3      	ldrhlt	r3, [r4, #12]
 8007754:	181b      	addge	r3, r3, r0
 8007756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800775a:	bfac      	ite	ge
 800775c:	6563      	strge	r3, [r4, #84]	; 0x54
 800775e:	81a3      	strhlt	r3, [r4, #12]
 8007760:	bd10      	pop	{r4, pc}

08007762 <__swrite>:
 8007762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007766:	461f      	mov	r7, r3
 8007768:	898b      	ldrh	r3, [r1, #12]
 800776a:	05db      	lsls	r3, r3, #23
 800776c:	4605      	mov	r5, r0
 800776e:	460c      	mov	r4, r1
 8007770:	4616      	mov	r6, r2
 8007772:	d505      	bpl.n	8007780 <__swrite+0x1e>
 8007774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007778:	2302      	movs	r3, #2
 800777a:	2200      	movs	r2, #0
 800777c:	f000 f868 	bl	8007850 <_lseek_r>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	4632      	mov	r2, r6
 800778e:	463b      	mov	r3, r7
 8007790:	4628      	mov	r0, r5
 8007792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007796:	f000 b817 	b.w	80077c8 <_write_r>

0800779a <__sseek>:
 800779a:	b510      	push	{r4, lr}
 800779c:	460c      	mov	r4, r1
 800779e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a2:	f000 f855 	bl	8007850 <_lseek_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	bf15      	itete	ne
 80077ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80077ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077b6:	81a3      	strheq	r3, [r4, #12]
 80077b8:	bf18      	it	ne
 80077ba:	81a3      	strhne	r3, [r4, #12]
 80077bc:	bd10      	pop	{r4, pc}

080077be <__sclose>:
 80077be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c2:	f000 b813 	b.w	80077ec <_close_r>
	...

080077c8 <_write_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4d07      	ldr	r5, [pc, #28]	; (80077e8 <_write_r+0x20>)
 80077cc:	4604      	mov	r4, r0
 80077ce:	4608      	mov	r0, r1
 80077d0:	4611      	mov	r1, r2
 80077d2:	2200      	movs	r2, #0
 80077d4:	602a      	str	r2, [r5, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f7f9 ff5b 	bl	8001692 <_write>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_write_r+0x1e>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_write_r+0x1e>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	24000188 	.word	0x24000188

080077ec <_close_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d06      	ldr	r5, [pc, #24]	; (8007808 <_close_r+0x1c>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	f7f9 ff67 	bl	80016ca <_close>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_close_r+0x1a>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	b103      	cbz	r3, 8007806 <_close_r+0x1a>
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	24000188 	.word	0x24000188

0800780c <_fstat_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4d07      	ldr	r5, [pc, #28]	; (800782c <_fstat_r+0x20>)
 8007810:	2300      	movs	r3, #0
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	4611      	mov	r1, r2
 8007818:	602b      	str	r3, [r5, #0]
 800781a:	f7f9 ff62 	bl	80016e2 <_fstat>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	d102      	bne.n	8007828 <_fstat_r+0x1c>
 8007822:	682b      	ldr	r3, [r5, #0]
 8007824:	b103      	cbz	r3, 8007828 <_fstat_r+0x1c>
 8007826:	6023      	str	r3, [r4, #0]
 8007828:	bd38      	pop	{r3, r4, r5, pc}
 800782a:	bf00      	nop
 800782c:	24000188 	.word	0x24000188

08007830 <_isatty_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d06      	ldr	r5, [pc, #24]	; (800784c <_isatty_r+0x1c>)
 8007834:	2300      	movs	r3, #0
 8007836:	4604      	mov	r4, r0
 8007838:	4608      	mov	r0, r1
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	f7f9 ff61 	bl	8001702 <_isatty>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_isatty_r+0x1a>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_isatty_r+0x1a>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	24000188 	.word	0x24000188

08007850 <_lseek_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d07      	ldr	r5, [pc, #28]	; (8007870 <_lseek_r+0x20>)
 8007854:	4604      	mov	r4, r0
 8007856:	4608      	mov	r0, r1
 8007858:	4611      	mov	r1, r2
 800785a:	2200      	movs	r2, #0
 800785c:	602a      	str	r2, [r5, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	f7f9 ff5a 	bl	8001718 <_lseek>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_lseek_r+0x1e>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_lseek_r+0x1e>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	24000188 	.word	0x24000188

08007874 <__malloc_lock>:
 8007874:	4801      	ldr	r0, [pc, #4]	; (800787c <__malloc_lock+0x8>)
 8007876:	f7ff bb55 	b.w	8006f24 <__retarget_lock_acquire_recursive>
 800787a:	bf00      	nop
 800787c:	24000180 	.word	0x24000180

08007880 <__malloc_unlock>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__malloc_unlock+0x8>)
 8007882:	f7ff bb50 	b.w	8006f26 <__retarget_lock_release_recursive>
 8007886:	bf00      	nop
 8007888:	24000180 	.word	0x24000180

0800788c <_read_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4d07      	ldr	r5, [pc, #28]	; (80078ac <_read_r+0x20>)
 8007890:	4604      	mov	r4, r0
 8007892:	4608      	mov	r0, r1
 8007894:	4611      	mov	r1, r2
 8007896:	2200      	movs	r2, #0
 8007898:	602a      	str	r2, [r5, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	f7f9 fedc 	bl	8001658 <_read>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_read_r+0x1e>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_read_r+0x1e>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	24000188 	.word	0x24000188

080078b0 <_init>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr

080078bc <_fini>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	bf00      	nop
 80078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c2:	bc08      	pop	{r3}
 80078c4:	469e      	mov	lr, r3
 80078c6:	4770      	bx	lr
