
H747_GPIO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005598  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800590c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c8  20000074  08005980  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000013c  08005980  0002013c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017040  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a63  00000000  00000000  000370e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bd0  00000000  00000000  00039b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ad8  00000000  00000000  0003a718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ee53  00000000  00000000  0003b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d32c  00000000  00000000  0007a043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00193e65  00000000  00000000  0008736f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021b1d4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000361c  00000000  00000000  0021b228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000074 	.word	0x20000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005818 	.word	0x08005818

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000078 	.word	0x20000078
 80002d4:	08005818 	.word	0x08005818

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <__io_putchar>:

UART_HandleTypeDef huart8;

/* USER CODE BEGIN PV */

int __io_putchar (int ch) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, HAL_MAX_DELAY);
 8000712:	f107 010f 	add.w	r1, r7, #15
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	2201      	movs	r2, #1
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <__io_putchar+0x28>)
 800071e:	f003 faff 	bl	8003d20 <HAL_UART_Transmit>
	return ch;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000009c 	.word	0x2000009c

08000730 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2){
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	2b04      	cmp	r3, #4
 800073e:	d102      	bne.n	8000746 <HAL_GPIO_EXTI_Callback+0x16>
		printf("***2***\r\n");
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <HAL_GPIO_EXTI_Callback+0x44>)
 8000742:	f004 fc11 	bl	8004f68 <puts>
	}
	if(GPIO_Pin == GPIO_PIN_3){
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	2b08      	cmp	r3, #8
 800074a:	d102      	bne.n	8000752 <HAL_GPIO_EXTI_Callback+0x22>
		printf("***3***\r\n");
 800074c:	480a      	ldr	r0, [pc, #40]	; (8000778 <HAL_GPIO_EXTI_Callback+0x48>)
 800074e:	f004 fc0b 	bl	8004f68 <puts>
	}
	if(GPIO_Pin == GPIO_PIN_4){
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	2b10      	cmp	r3, #16
 8000756:	d102      	bne.n	800075e <HAL_GPIO_EXTI_Callback+0x2e>
		printf("***4***\r\n");
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <HAL_GPIO_EXTI_Callback+0x4c>)
 800075a:	f004 fc05 	bl	8004f68 <puts>
	}
	if(GPIO_Pin == GPIO_PIN_5){
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	2b20      	cmp	r3, #32
 8000762:	d102      	bne.n	800076a <HAL_GPIO_EXTI_Callback+0x3a>
		printf("***5***\r\n");
 8000764:	4806      	ldr	r0, [pc, #24]	; (8000780 <HAL_GPIO_EXTI_Callback+0x50>)
 8000766:	f004 fbff 	bl	8004f68 <puts>
	}
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	08005830 	.word	0x08005830
 8000778:	0800583c 	.word	0x0800583c
 800077c:	08005848 	.word	0x08005848
 8000780:	08005854 	.word	0x08005854

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800078a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000790:	bf00      	nop
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <main+0x94>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d004      	beq.n	80007a8 <main+0x24>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dcf4      	bgt.n	8000792 <main+0xe>
  if ( timeout < 0 )
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	da01      	bge.n	80007b2 <main+0x2e>
  {
  Error_Handler();
 80007ae:	f000 f9a9 	bl	8000b04 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 fb2d 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f831 	bl	800081c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <main+0x94>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c0:	4a15      	ldr	r2, [pc, #84]	; (8000818 <main+0x94>)
 80007c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <main+0x94>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 feab 	bl	8001534 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007de:	2100      	movs	r1, #0
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fec1 	bl	8001568 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ea:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007ec:	bf00      	nop
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <main+0x94>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d104      	bne.n	8000804 <main+0x80>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	1e5a      	subs	r2, r3, #1
 80007fe:	607a      	str	r2, [r7, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	dcf4      	bgt.n	80007ee <main+0x6a>
if ( timeout < 0 )
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	da01      	bge.n	800080e <main+0x8a>
{
Error_Handler();
 800080a:	f000 f97b 	bl	8000b04 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080e:	f000 f8e5 	bl	80009dc <MX_GPIO_Init>
  MX_UART8_Init();
 8000812:	f000 f897 	bl	8000944 <MX_UART8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000816:	e7fe      	b.n	8000816 <main+0x92>
 8000818:	58024400 	.word	0x58024400

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b0cc      	sub	sp, #304	; 0x130
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000826:	224c      	movs	r2, #76	; 0x4c
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fb26 	bl	8004e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000834:	2220      	movs	r2, #32
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f004 fb1f 	bl	8004e7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4618      	mov	r0, r3
 8000842:	23c0      	movs	r3, #192	; 0xc0
 8000844:	461a      	mov	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f004 fb18 	bl	8004e7c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800084c:	2002      	movs	r0, #2
 800084e:	f000 fe9f 	bl	8001590 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	4b38      	ldr	r3, [pc, #224]	; (800093c <SystemClock_Config+0x120>)
 800085a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085c:	4a37      	ldr	r2, [pc, #220]	; (800093c <SystemClock_Config+0x120>)
 800085e:	f023 0301 	bic.w	r3, r3, #1
 8000862:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000864:	4b35      	ldr	r3, [pc, #212]	; (800093c <SystemClock_Config+0x120>)
 8000866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000868:	f003 0201 	and.w	r2, r3, #1
 800086c:	463b      	mov	r3, r7
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	4b33      	ldr	r3, [pc, #204]	; (8000940 <SystemClock_Config+0x124>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000878:	4a31      	ldr	r2, [pc, #196]	; (8000940 <SystemClock_Config+0x124>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <SystemClock_Config+0x124>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000888:	463b      	mov	r3, r7
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	463b      	mov	r3, r7
 800088e:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000890:	bf00      	nop
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <SystemClock_Config+0x124>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089e:	d1f8      	bne.n	8000892 <SystemClock_Config+0x76>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a0:	2302      	movs	r3, #2
 80008a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fec1 	bl	8001644 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008c8:	f000 f91c 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	233f      	movs	r3, #63	; 0x3f
 80008ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 80008d8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80008dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f001 faad 	bl	8001e64 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000910:	f000 f8f8 	bl	8000b04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2202      	movs	r2, #2
 8000918:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fe2a 	bl	800257c <HAL_RCCEx_PeriphCLKConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800092e:	f000 f8e9 	bl	8000b04 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	58000400 	.word	0x58000400
 8000940:	58024800 	.word	0x58024800

08000944 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_UART8_Init+0x90>)
 800094a:	4a23      	ldr	r2, [pc, #140]	; (80009d8 <MX_UART8_Init+0x94>)
 800094c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_UART8_Init+0x90>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_UART8_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_UART8_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_UART8_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_UART8_Init+0x90>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_UART8_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_UART8_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_UART8_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_UART8_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_UART8_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800098c:	4811      	ldr	r0, [pc, #68]	; (80009d4 <MX_UART8_Init+0x90>)
 800098e:	f003 f977 	bl	8003c80 <HAL_UART_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f8b4 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_UART8_Init+0x90>)
 80009a0:	f004 f95d 	bl	8004c5e <HAL_UARTEx_SetTxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80009aa:	f000 f8ab 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4808      	ldr	r0, [pc, #32]	; (80009d4 <MX_UART8_Init+0x90>)
 80009b2:	f004 f992 	bl	8004cda <HAL_UARTEx_SetRxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f000 f8a2 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_UART8_Init+0x90>)
 80009c2:	f004 f913 	bl	8004bec <HAL_UARTEx_DisableFifoMode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80009cc:	f000 f89a 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000009c 	.word	0x2000009c
 80009d8:	40007c00 	.word	0x40007c00

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009f2:	4b3f      	ldr	r3, [pc, #252]	; (8000af0 <MX_GPIO_Init+0x114>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	4a3d      	ldr	r2, [pc, #244]	; (8000af0 <MX_GPIO_Init+0x114>)
 80009fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a02:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <MX_GPIO_Init+0x114>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a10:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <MX_GPIO_Init+0x114>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	4a36      	ldr	r2, [pc, #216]	; (8000af0 <MX_GPIO_Init+0x114>)
 8000a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a20:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <MX_GPIO_Init+0x114>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a2e:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <MX_GPIO_Init+0x114>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	4a2e      	ldr	r2, [pc, #184]	; (8000af0 <MX_GPIO_Init+0x114>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <MX_GPIO_Init+0x114>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a52:	4828      	ldr	r0, [pc, #160]	; (8000af4 <MX_GPIO_Init+0x118>)
 8000a54:	f000 fd3a 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PK4 PK6 PK3 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_2;
 8000a58:	235c      	movs	r3, #92	; 0x5c
 8000a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_GPIO_Init+0x11c>)
 8000a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4824      	ldr	r0, [pc, #144]	; (8000afc <MX_GPIO_Init+0x120>)
 8000a6c:	f000 fb7e 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a70:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	481a      	ldr	r0, [pc, #104]	; (8000af4 <MX_GPIO_Init+0x118>)
 8000a8a:	f000 fb6f 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_GPIO_Init+0x11c>)
 8000a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a96:	2302      	movs	r3, #2
 8000a98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4817      	ldr	r0, [pc, #92]	; (8000b00 <MX_GPIO_Init+0x124>)
 8000aa2:	f000 fb63 	bl	800116c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2008      	movs	r0, #8
 8000aac:	f000 fb29 	bl	8001102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ab0:	2008      	movs	r0, #8
 8000ab2:	f000 fb40 	bl	8001136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2009      	movs	r0, #9
 8000abc:	f000 fb21 	bl	8001102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ac0:	2009      	movs	r0, #9
 8000ac2:	f000 fb38 	bl	8001136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	200a      	movs	r0, #10
 8000acc:	f000 fb19 	bl	8001102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f000 fb30 	bl	8001136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2017      	movs	r0, #23
 8000adc:	f000 fb11 	bl	8001102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ae0:	2017      	movs	r0, #23
 8000ae2:	f000 fb28 	bl	8001136 <HAL_NVIC_EnableIRQ>

}
 8000ae6:	bf00      	nop
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	58024400 	.word	0x58024400
 8000af4:	58022000 	.word	0x58022000
 8000af8:	11210000 	.word	0x11210000
 8000afc:	58022800 	.word	0x58022800
 8000b00:	58022400 	.word	0x58022400

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_MspInit+0x30>)
 8000b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b20:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x30>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x30>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	58024400 	.word	0x58024400

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a1a      	ldr	r2, [pc, #104]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12e      	bne.n	8000bc8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b70:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_UART_MspInit+0x90>)
 8000bc4:	f000 fad2 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40007c00 	.word	0x40007c00
 8000bd4:	58024400 	.word	0x58024400
 8000bd8:	58022400 	.word	0x58022400

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 f960 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	//printf("***GPIO_PIN_2***\r\n");
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c3c:	2004      	movs	r0, #4
 8000c3e:	f000 fc5e 	bl	80014fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	//printf("***GPIO_PIN_3***\r\n");
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000c4a:	2008      	movs	r0, #8
 8000c4c:	f000 fc57 	bl	80014fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	//printf("***GPIO_PIN_4***\r\n");
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000c58:	2010      	movs	r0, #16
 8000c5a:	f000 fc50 	bl	80014fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	//printf("***GPIO_PIN_5***\r\n");
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c66:	2020      	movs	r0, #32
 8000c68:	f000 fc49 	bl	80014fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c6c:	2040      	movs	r0, #64	; 0x40
 8000c6e:	f000 fc46 	bl	80014fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e00a      	b.n	8000c9e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c88:	f3af 8000 	nop.w
 8000c8c:	4601      	mov	r1, r0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	60ba      	str	r2, [r7, #8]
 8000c94:	b2ca      	uxtb	r2, r1
 8000c96:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dbf0      	blt.n	8000c88 <_read+0x12>
	}

return len;
 8000ca6:	687b      	ldr	r3, [r7, #4]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e009      	b.n	8000cd6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	60ba      	str	r2, [r7, #8]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd1a 	bl	8000704 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dbf1      	blt.n	8000cc2 <_write+0x12>
	}
	return len;
 8000cde:	687b      	ldr	r3, [r7, #4]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_close>:

int _close(int file)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	return -1;
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d10:	605a      	str	r2, [r3, #4]
	return 0;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <_isatty>:

int _isatty(int file)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	return 1;
 8000d28:	2301      	movs	r3, #1
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b085      	sub	sp, #20
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
	return 0;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f004 f852 	bl	8004e28 <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20020000 	.word	0x20020000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	20000090 	.word	0x20000090
 8000db8:	20000140 	.word	0x20000140

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dc0:	f7ff fc06 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dc6:	e003      	b.n	8000dd0 <LoopCopyDataInit>

08000dc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000dca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dce:	3104      	adds	r1, #4

08000dd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000dd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dd8:	d3f6      	bcc.n	8000dc8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000ddc:	e002      	b.n	8000de4 <LoopFillZerobss>

08000dde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000de0:	f842 3b04 	str.w	r3, [r2], #4

08000de4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000de6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000de8:	d3f9      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f004 f823 	bl	8004e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fcc9 	bl	8000784 <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000df8:	0800590c 	.word	0x0800590c
  ldr  r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e00:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000e04:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000e08:	2000013c 	.word	0x2000013c

08000e0c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC3_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 f968 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e1c:	f001 f9d8 	bl	80021d0 <HAL_RCC_GetSysClockFreq>
 8000e20:	4602      	mov	r2, r0
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_Init+0x68>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	4913      	ldr	r1, [pc, #76]	; (8000e7c <HAL_Init+0x6c>)
 8000e2e:	5ccb      	ldrb	r3, [r1, r3]
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	fa22 f303 	lsr.w	r3, r2, r3
 8000e38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_Init+0x68>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_Init+0x6c>)
 8000e44:	5cd3      	ldrb	r3, [r2, r3]
 8000e46:	f003 031f 	and.w	r3, r3, #31
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_Init+0x70>)
 8000e52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e54:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <HAL_Init+0x74>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f814 	bl	8000e88 <HAL_InitTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e002      	b.n	8000e70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6a:	f7ff fe53 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	08005870 	.word	0x08005870
 8000e80:	20000004 	.word	0x20000004
 8000e84:	20000000 	.word	0x20000000

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_InitTick+0x60>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e021      	b.n	8000ee0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_InitTick+0x64>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_InitTick+0x60>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f94d 	bl	8001152 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f917 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x68>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000000c 	.word	0x2000000c
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	2000000c 	.word	0x2000000c
 8000f18:	20000128 	.word	0x20000128

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000128 	.word	0x20000128

08000f34 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetREVID+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	0c1b      	lsrs	r3, r3, #16
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	5c001000 	.word	0x5c001000

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <__NVIC_SetPriorityGrouping+0x40>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x40>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	05fa0000 	.word	0x05fa0000

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff8e 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff29 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff40 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff90 	bl	8001040 <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5f 	bl	8000fec <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff33 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa4 	bl	80010a8 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800117a:	4b89      	ldr	r3, [pc, #548]	; (80013a0 <HAL_GPIO_Init+0x234>)
 800117c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800117e:	e194      	b.n	80014aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2101      	movs	r1, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8186 	beq.w	80014a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d00b      	beq.n	80011b8 <HAL_GPIO_Init+0x4c>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d007      	beq.n	80011b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ac:	2b11      	cmp	r3, #17
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b12      	cmp	r3, #18
 80011b6:	d130      	bne.n	800121a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ee:	2201      	movs	r2, #1
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	f003 0201 	and.w	r2, r3, #1
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0xee>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b12      	cmp	r3, #18
 8001258:	d123      	bne.n	80012a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	691a      	ldr	r2, [r3, #16]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	69b9      	ldr	r1, [r7, #24]
 800129e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0203 	and.w	r2, r3, #3
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 80e0 	beq.w	80014a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <HAL_GPIO_Init+0x238>)
 80012e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ea:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <HAL_GPIO_Init+0x238>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012f4:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <HAL_GPIO_Init+0x238>)
 80012f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001302:	4a29      	ldr	r2, [pc, #164]	; (80013a8 <HAL_GPIO_Init+0x23c>)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a20      	ldr	r2, [pc, #128]	; (80013ac <HAL_GPIO_Init+0x240>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d052      	beq.n	80013d4 <HAL_GPIO_Init+0x268>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a1f      	ldr	r2, [pc, #124]	; (80013b0 <HAL_GPIO_Init+0x244>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d031      	beq.n	800139a <HAL_GPIO_Init+0x22e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <HAL_GPIO_Init+0x248>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d02b      	beq.n	8001396 <HAL_GPIO_Init+0x22a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <HAL_GPIO_Init+0x24c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d025      	beq.n	8001392 <HAL_GPIO_Init+0x226>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <HAL_GPIO_Init+0x250>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01f      	beq.n	800138e <HAL_GPIO_Init+0x222>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <HAL_GPIO_Init+0x254>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0x21e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <HAL_GPIO_Init+0x258>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0x21a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <HAL_GPIO_Init+0x25c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d00d      	beq.n	8001382 <HAL_GPIO_Init+0x216>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <HAL_GPIO_Init+0x260>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x212>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <HAL_GPIO_Init+0x264>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_GPIO_Init+0x20e>
 8001376:	2309      	movs	r3, #9
 8001378:	e02d      	b.n	80013d6 <HAL_GPIO_Init+0x26a>
 800137a:	230a      	movs	r3, #10
 800137c:	e02b      	b.n	80013d6 <HAL_GPIO_Init+0x26a>
 800137e:	2308      	movs	r3, #8
 8001380:	e029      	b.n	80013d6 <HAL_GPIO_Init+0x26a>
 8001382:	2307      	movs	r3, #7
 8001384:	e027      	b.n	80013d6 <HAL_GPIO_Init+0x26a>
 8001386:	2306      	movs	r3, #6
 8001388:	e025      	b.n	80013d6 <HAL_GPIO_Init+0x26a>
 800138a:	2305      	movs	r3, #5
 800138c:	e023      	b.n	80013d6 <HAL_GPIO_Init+0x26a>
 800138e:	2304      	movs	r3, #4
 8001390:	e021      	b.n	80013d6 <HAL_GPIO_Init+0x26a>
 8001392:	2303      	movs	r3, #3
 8001394:	e01f      	b.n	80013d6 <HAL_GPIO_Init+0x26a>
 8001396:	2302      	movs	r3, #2
 8001398:	e01d      	b.n	80013d6 <HAL_GPIO_Init+0x26a>
 800139a:	2301      	movs	r3, #1
 800139c:	e01b      	b.n	80013d6 <HAL_GPIO_Init+0x26a>
 800139e:	bf00      	nop
 80013a0:	58000080 	.word	0x58000080
 80013a4:	58024400 	.word	0x58024400
 80013a8:	58000400 	.word	0x58000400
 80013ac:	58020000 	.word	0x58020000
 80013b0:	58020400 	.word	0x58020400
 80013b4:	58020800 	.word	0x58020800
 80013b8:	58020c00 	.word	0x58020c00
 80013bc:	58021000 	.word	0x58021000
 80013c0:	58021400 	.word	0x58021400
 80013c4:	58021800 	.word	0x58021800
 80013c8:	58021c00 	.word	0x58021c00
 80013cc:	58022000 	.word	0x58022000
 80013d0:	58022400 	.word	0x58022400
 80013d4:	2300      	movs	r3, #0
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4093      	lsls	r3, r2
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e6:	4938      	ldr	r1, [pc, #224]	; (80014c8 <HAL_GPIO_Init+0x35c>)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800146e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800149c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	3301      	adds	r3, #1
 80014a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f47f ae63 	bne.w	8001180 <HAL_GPIO_Init+0x14>
  }
}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	3724      	adds	r7, #36	; 0x24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	58000400 	.word	0x58000400

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f903 	bl	8000730 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800153c:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_HSEM_FastTake+0x2c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3320      	adds	r3, #32
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_HSEM_FastTake+0x30>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d101      	bne.n	8001550 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e000      	b.n	8001552 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	58026400 	.word	0x58026400
 8001564:	80000300 	.word	0x80000300

08001568 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001572:	4906      	ldr	r1, [pc, #24]	; (800158c <HAL_HSEM_Release+0x24>)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	58026400 	.word	0x58026400

08001590 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	2b06      	cmp	r3, #6
 80015a2:	d00a      	beq.n	80015ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d001      	beq.n	80015b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e040      	b.n	8001638 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e03e      	b.n	8001638 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80015c2:	491f      	ldr	r1, [pc, #124]	; (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015ca:	f7ff fca7 	bl	8000f1c <HAL_GetTick>
 80015ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015d0:	e009      	b.n	80015e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015d2:	f7ff fca3 	bl	8000f1c <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015e0:	d901      	bls.n	80015e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e028      	b.n	8001638 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015f2:	d1ee      	bne.n	80015d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b1e      	cmp	r3, #30
 80015f8:	d008      	beq.n	800160c <HAL_PWREx_ConfigSupply+0x7c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b2e      	cmp	r3, #46	; 0x2e
 80015fe:	d005      	beq.n	800160c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b1d      	cmp	r3, #29
 8001604:	d002      	beq.n	800160c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b2d      	cmp	r3, #45	; 0x2d
 800160a:	d114      	bne.n	8001636 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800160c:	f7ff fc86 	bl	8000f1c <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001612:	e009      	b.n	8001628 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001614:	f7ff fc82 	bl	8000f1c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001622:	d901      	bls.n	8001628 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e007      	b.n	8001638 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001634:	d1ee      	bne.n	8001614 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	58024800 	.word	0x58024800

08001644 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08c      	sub	sp, #48	; 0x30
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e3ff      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8087 	beq.w	8001772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001664:	4b99      	ldr	r3, [pc, #612]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800166e:	4b97      	ldr	r3, [pc, #604]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001676:	2b10      	cmp	r3, #16
 8001678:	d007      	beq.n	800168a <HAL_RCC_OscConfig+0x46>
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	2b18      	cmp	r3, #24
 800167e:	d110      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5e>
 8001680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d10b      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168a:	4b90      	ldr	r3, [pc, #576]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d06c      	beq.n	8001770 <HAL_RCC_OscConfig+0x12c>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d168      	bne.n	8001770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e3d9      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x76>
 80016ac:	4b87      	ldr	r3, [pc, #540]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a86      	ldr	r2, [pc, #536]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80016b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e02e      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x98>
 80016c2:	4b82      	ldr	r3, [pc, #520]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a81      	ldr	r2, [pc, #516]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80016c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b7f      	ldr	r3, [pc, #508]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a7e      	ldr	r2, [pc, #504]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80016d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e01d      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0xbc>
 80016e6:	4b79      	ldr	r3, [pc, #484]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a78      	ldr	r2, [pc, #480]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b76      	ldr	r3, [pc, #472]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a75      	ldr	r2, [pc, #468]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 8001700:	4b72      	ldr	r3, [pc, #456]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a71      	ldr	r2, [pc, #452]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b6f      	ldr	r3, [pc, #444]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a6e      	ldr	r2, [pc, #440]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fbfc 	bl	8000f1c <HAL_GetTick>
 8001724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fbf8 	bl	8000f1c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e38d      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800173a:	4b64      	ldr	r3, [pc, #400]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0xe4>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fbe8 	bl	8000f1c <HAL_GetTick>
 800174c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fbe4 	bl	8000f1c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e379      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001762:	4b5a      	ldr	r3, [pc, #360]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x10c>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80ae 	beq.w	80018dc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001780:	4b52      	ldr	r3, [pc, #328]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001788:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800178a:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <HAL_RCC_OscConfig+0x162>
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	2b18      	cmp	r3, #24
 800179a:	d13a      	bne.n	8001812 <HAL_RCC_OscConfig+0x1ce>
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d135      	bne.n	8001812 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_RCC_OscConfig+0x17a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e34b      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	f7ff fbb9 	bl	8000f34 <HAL_GetREVID>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d817      	bhi.n	80017fc <HAL_RCC_OscConfig+0x1b8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	2b40      	cmp	r3, #64	; 0x40
 80017d2:	d108      	bne.n	80017e6 <HAL_RCC_OscConfig+0x1a2>
 80017d4:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80017dc:	4a3b      	ldr	r2, [pc, #236]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80017de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e4:	e07a      	b.n	80018dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	031b      	lsls	r3, r3, #12
 80017f4:	4935      	ldr	r1, [pc, #212]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fa:	e06f      	b.n	80018dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	061b      	lsls	r3, r3, #24
 800180a:	4930      	ldr	r1, [pc, #192]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001810:	e064      	b.n	80018dc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d045      	beq.n	80018a6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0219 	bic.w	r2, r3, #25
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	4929      	ldr	r1, [pc, #164]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff fb76 	bl	8000f1c <HAL_GetTick>
 8001830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001834:	f7ff fb72 	bl	8000f1c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e307      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001852:	f7ff fb6f 	bl	8000f34 <HAL_GetREVID>
 8001856:	4603      	mov	r3, r0
 8001858:	f241 0203 	movw	r2, #4099	; 0x1003
 800185c:	4293      	cmp	r3, r2
 800185e:	d817      	bhi.n	8001890 <HAL_RCC_OscConfig+0x24c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b40      	cmp	r3, #64	; 0x40
 8001866:	d108      	bne.n	800187a <HAL_RCC_OscConfig+0x236>
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001870:	4a16      	ldr	r2, [pc, #88]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 8001872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001876:	6053      	str	r3, [r2, #4]
 8001878:	e030      	b.n	80018dc <HAL_RCC_OscConfig+0x298>
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	031b      	lsls	r3, r3, #12
 8001888:	4910      	ldr	r1, [pc, #64]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
 800188e:	e025      	b.n	80018dc <HAL_RCC_OscConfig+0x298>
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	061b      	lsls	r3, r3, #24
 800189e:	490b      	ldr	r1, [pc, #44]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	e01a      	b.n	80018dc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <HAL_RCC_OscConfig+0x288>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff fb33 	bl	8000f1c <HAL_GetTick>
 80018b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff fb2f 	bl	8000f1c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d903      	bls.n	80018d0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e2c4      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
 80018cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018d0:	4ba4      	ldr	r3, [pc, #656]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1ee      	bne.n	80018ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80a9 	beq.w	8001a3c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ea:	4b9e      	ldr	r3, [pc, #632]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018f4:	4b9b      	ldr	r3, [pc, #620]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d007      	beq.n	8001910 <HAL_RCC_OscConfig+0x2cc>
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b18      	cmp	r3, #24
 8001904:	d13a      	bne.n	800197c <HAL_RCC_OscConfig+0x338>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d135      	bne.n	800197c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001910:	4b94      	ldr	r3, [pc, #592]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_OscConfig+0x2e4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b80      	cmp	r3, #128	; 0x80
 8001922:	d001      	beq.n	8001928 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e296      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001928:	f7ff fb04 	bl	8000f34 <HAL_GetREVID>
 800192c:	4603      	mov	r3, r0
 800192e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001932:	4293      	cmp	r3, r2
 8001934:	d817      	bhi.n	8001966 <HAL_RCC_OscConfig+0x322>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	2b20      	cmp	r3, #32
 800193c:	d108      	bne.n	8001950 <HAL_RCC_OscConfig+0x30c>
 800193e:	4b89      	ldr	r3, [pc, #548]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001946:	4a87      	ldr	r2, [pc, #540]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001948:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800194c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800194e:	e075      	b.n	8001a3c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001950:	4b84      	ldr	r3, [pc, #528]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	069b      	lsls	r3, r3, #26
 800195e:	4981      	ldr	r1, [pc, #516]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001964:	e06a      	b.n	8001a3c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001966:	4b7f      	ldr	r3, [pc, #508]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	061b      	lsls	r3, r3, #24
 8001974:	497b      	ldr	r1, [pc, #492]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001976:	4313      	orrs	r3, r2
 8001978:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800197a:	e05f      	b.n	8001a3c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d042      	beq.n	8001a0a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001984:	4b77      	ldr	r3, [pc, #476]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a76      	ldr	r2, [pc, #472]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 800198a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800198e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fac4 	bl	8000f1c <HAL_GetTick>
 8001994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001998:	f7ff fac0 	bl	8000f1c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e255      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019aa:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019b6:	f7ff fabd 	bl	8000f34 <HAL_GetREVID>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d817      	bhi.n	80019f4 <HAL_RCC_OscConfig+0x3b0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	2b20      	cmp	r3, #32
 80019ca:	d108      	bne.n	80019de <HAL_RCC_OscConfig+0x39a>
 80019cc:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80019d4:	4a63      	ldr	r2, [pc, #396]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 80019d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019da:	6053      	str	r3, [r2, #4]
 80019dc:	e02e      	b.n	8001a3c <HAL_RCC_OscConfig+0x3f8>
 80019de:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	069b      	lsls	r3, r3, #26
 80019ec:	495d      	ldr	r1, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
 80019f2:	e023      	b.n	8001a3c <HAL_RCC_OscConfig+0x3f8>
 80019f4:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	061b      	lsls	r3, r3, #24
 8001a02:	4958      	ldr	r1, [pc, #352]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
 8001a08:	e018      	b.n	8001a3c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a0a:	4b56      	ldr	r3, [pc, #344]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a55      	ldr	r2, [pc, #340]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff fa81 	bl	8000f1c <HAL_GetTick>
 8001a1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fa7d 	bl	8000f1c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e212      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a30:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d036      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d019      	beq.n	8001a84 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a50:	4b44      	ldr	r3, [pc, #272]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a54:	4a43      	ldr	r2, [pc, #268]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fa5e 	bl	8000f1c <HAL_GetTick>
 8001a60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff fa5a 	bl	8000f1c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1ef      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x420>
 8001a82:	e018      	b.n	8001ab6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a88:	4a36      	ldr	r2, [pc, #216]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff fa44 	bl	8000f1c <HAL_GetTick>
 8001a94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fa40 	bl	8000f1c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e1d5      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d036      	beq.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d019      	beq.n	8001afe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a25      	ldr	r2, [pc, #148]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fa21 	bl	8000f1c <HAL_GetTick>
 8001ada:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ade:	f7ff fa1d 	bl	8000f1c <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e1b2      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x49a>
 8001afc:	e018      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fa07 	bl	8000f1c <HAL_GetTick>
 8001b0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b12:	f7ff fa03 	bl	8000f1c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e198      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_RCC_OscConfig+0x520>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8085 	beq.w	8001c48 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_RCC_OscConfig+0x524>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_OscConfig+0x524>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b4a:	f7ff f9e7 	bl	8000f1c <HAL_GetTick>
 8001b4e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b50:	e00c      	b.n	8001b6c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7ff f9e3 	bl	8000f1c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b64      	cmp	r3, #100	; 0x64
 8001b5e:	d905      	bls.n	8001b6c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e178      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
 8001b64:	58024400 	.word	0x58024400
 8001b68:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b6c:	4b96      	ldr	r3, [pc, #600]	; (8001dc8 <HAL_RCC_OscConfig+0x784>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0ec      	beq.n	8001b52 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x54a>
 8001b80:	4b92      	ldr	r3, [pc, #584]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a91      	ldr	r2, [pc, #580]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8c:	e02d      	b.n	8001bea <HAL_RCC_OscConfig+0x5a6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x56c>
 8001b96:	4b8d      	ldr	r3, [pc, #564]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	4a8c      	ldr	r2, [pc, #560]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba2:	4b8a      	ldr	r3, [pc, #552]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a89      	ldr	r2, [pc, #548]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	e01c      	b.n	8001bea <HAL_RCC_OscConfig+0x5a6>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x58e>
 8001bb8:	4b84      	ldr	r3, [pc, #528]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a83      	ldr	r2, [pc, #524]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	4b81      	ldr	r3, [pc, #516]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a80      	ldr	r2, [pc, #512]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	e00b      	b.n	8001bea <HAL_RCC_OscConfig+0x5a6>
 8001bd2:	4b7e      	ldr	r3, [pc, #504]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a7d      	ldr	r2, [pc, #500]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	4b7b      	ldr	r3, [pc, #492]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a7a      	ldr	r2, [pc, #488]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d015      	beq.n	8001c1e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff f993 	bl	8000f1c <HAL_GetTick>
 8001bf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff f98f 	bl	8000f1c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e122      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c10:	4b6e      	ldr	r3, [pc, #440]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ee      	beq.n	8001bfa <HAL_RCC_OscConfig+0x5b6>
 8001c1c:	e014      	b.n	8001c48 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff f97d 	bl	8000f1c <HAL_GetTick>
 8001c22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff f979 	bl	8000f1c <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e10c      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c3c:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ee      	bne.n	8001c26 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 8101 	beq.w	8001e54 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c52:	4b5e      	ldr	r3, [pc, #376]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c5a:	2b18      	cmp	r3, #24
 8001c5c:	f000 80bc 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f040 8095 	bne.w	8001d94 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a57      	ldr	r2, [pc, #348]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff f951 	bl	8000f1c <HAL_GetTick>
 8001c7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff f94d 	bl	8000f1c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e0e2      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c90:	4b4e      	ldr	r3, [pc, #312]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9c:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ca0:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <HAL_RCC_OscConfig+0x78c>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	4946      	ldr	r1, [pc, #280]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	628b      	str	r3, [r1, #40]	; 0x28
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	025b      	lsls	r3, r3, #9
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	041b      	lsls	r3, r3, #16
 8001cd4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ce6:	4939      	ldr	r1, [pc, #228]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001cec:	4b37      	ldr	r3, [pc, #220]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	4a36      	ldr	r2, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cf8:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfc:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <HAL_RCC_OscConfig+0x790>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d04:	00d2      	lsls	r2, r2, #3
 8001d06:	4931      	ldr	r1, [pc, #196]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f023 020c 	bic.w	r2, r3, #12
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	492c      	ldr	r1, [pc, #176]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d1e:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	f023 0202 	bic.w	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4928      	ldr	r1, [pc, #160]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d30:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f8d6 	bl	8000f1c <HAL_GetTick>
 8001d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff f8d2 	bl	8000f1c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e067      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x730>
 8001d92:	e05f      	b.n	8001e54 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f8bc 	bl	8000f1c <HAL_GetTick>
 8001da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f8b8 	bl	8000f1c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e04d      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <HAL_RCC_OscConfig+0x788>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x764>
 8001dc6:	e045      	b.n	8001e54 <HAL_RCC_OscConfig+0x810>
 8001dc8:	58024800 	.word	0x58024800
 8001dcc:	58024400 	.word	0x58024400
 8001dd0:	fffffc0c 	.word	0xfffffc0c
 8001dd4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_OscConfig+0x81c>)
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_RCC_OscConfig+0x81c>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d031      	beq.n	8001e50 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f003 0203 	and.w	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d12a      	bne.n	8001e50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d122      	bne.n	8001e50 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d11a      	bne.n	8001e50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	0a5b      	lsrs	r3, r3, #9
 8001e1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e26:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d111      	bne.n	8001e50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d108      	bne.n	8001e50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	0e1b      	lsrs	r3, r3, #24
 8001e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3730      	adds	r7, #48	; 0x30
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	58024400 	.word	0x58024400

08001e64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e19c      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b8a      	ldr	r3, [pc, #552]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b87      	ldr	r3, [pc, #540]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 020f 	bic.w	r2, r3, #15
 8001e8e:	4985      	ldr	r1, [pc, #532]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b83      	ldr	r3, [pc, #524]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e184      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d010      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	4b7b      	ldr	r3, [pc, #492]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d908      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ec4:	4b78      	ldr	r3, [pc, #480]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	4975      	ldr	r1, [pc, #468]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d010      	beq.n	8001f04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d908      	bls.n	8001f04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	496a      	ldr	r1, [pc, #424]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	4b64      	ldr	r3, [pc, #400]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d908      	bls.n	8001f32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f20:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	495e      	ldr	r1, [pc, #376]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d908      	bls.n	8001f60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f4e:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4953      	ldr	r1, [pc, #332]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d908      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f023 020f 	bic.w	r2, r3, #15
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4947      	ldr	r1, [pc, #284]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d055      	beq.n	8002046 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f9a:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4940      	ldr	r1, [pc, #256]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fb4:	4b3c      	ldr	r3, [pc, #240]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d121      	bne.n	8002004 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0f6      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d115      	bne.n	8002004 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0ea      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0de      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ff4:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0d6      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f023 0207 	bic.w	r2, r3, #7
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4925      	ldr	r1, [pc, #148]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002012:	4313      	orrs	r3, r2
 8002014:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7fe ff81 	bl	8000f1c <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201c:	e00a      	b.n	8002034 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201e:	f7fe ff7d 	bl	8000f1c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0be      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	429a      	cmp	r2, r3
 8002044:	d1eb      	bne.n	800201e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	429a      	cmp	r2, r3
 8002060:	d208      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f023 020f 	bic.w	r2, r3, #15
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	490e      	ldr	r1, [pc, #56]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002070:	4313      	orrs	r3, r2
 8002072:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d214      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 020f 	bic.w	r2, r3, #15
 800208a:	4906      	ldr	r1, [pc, #24]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e086      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
 80020a4:	52002000 	.word	0x52002000
 80020a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d208      	bcs.n	80020da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020c8:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	4939      	ldr	r1, [pc, #228]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d010      	beq.n	8002108 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d208      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	492e      	ldr	r1, [pc, #184]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002104:	4313      	orrs	r3, r2
 8002106:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d010      	beq.n	8002136 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002120:	429a      	cmp	r2, r3
 8002122:	d208      	bcs.n	8002136 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4922      	ldr	r1, [pc, #136]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002132:	4313      	orrs	r3, r2
 8002134:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800214e:	429a      	cmp	r2, r3
 8002150:	d208      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4917      	ldr	r1, [pc, #92]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002160:	4313      	orrs	r3, r2
 8002162:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002164:	f000 f834 	bl	80021d0 <HAL_RCC_GetSysClockFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	4912      	ldr	r1, [pc, #72]	; (80021c0 <HAL_RCC_ClockConfig+0x35c>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_RCC_ClockConfig+0x35c>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <HAL_RCC_ClockConfig+0x360>)
 800219a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_RCC_ClockConfig+0x364>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x368>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fe6e 	bl	8000e88 <HAL_InitTick>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	58024400 	.word	0x58024400
 80021c0:	08005870 	.word	0x08005870
 80021c4:	20000004 	.word	0x20000004
 80021c8:	20000000 	.word	0x20000000
 80021cc:	20000008 	.word	0x20000008

080021d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d6:	4bb3      	ldr	r3, [pc, #716]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021de:	2b18      	cmp	r3, #24
 80021e0:	f200 8155 	bhi.w	800248e <HAL_RCC_GetSysClockFreq+0x2be>
 80021e4:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ea:	bf00      	nop
 80021ec:	08002251 	.word	0x08002251
 80021f0:	0800248f 	.word	0x0800248f
 80021f4:	0800248f 	.word	0x0800248f
 80021f8:	0800248f 	.word	0x0800248f
 80021fc:	0800248f 	.word	0x0800248f
 8002200:	0800248f 	.word	0x0800248f
 8002204:	0800248f 	.word	0x0800248f
 8002208:	0800248f 	.word	0x0800248f
 800220c:	08002277 	.word	0x08002277
 8002210:	0800248f 	.word	0x0800248f
 8002214:	0800248f 	.word	0x0800248f
 8002218:	0800248f 	.word	0x0800248f
 800221c:	0800248f 	.word	0x0800248f
 8002220:	0800248f 	.word	0x0800248f
 8002224:	0800248f 	.word	0x0800248f
 8002228:	0800248f 	.word	0x0800248f
 800222c:	0800227d 	.word	0x0800227d
 8002230:	0800248f 	.word	0x0800248f
 8002234:	0800248f 	.word	0x0800248f
 8002238:	0800248f 	.word	0x0800248f
 800223c:	0800248f 	.word	0x0800248f
 8002240:	0800248f 	.word	0x0800248f
 8002244:	0800248f 	.word	0x0800248f
 8002248:	0800248f 	.word	0x0800248f
 800224c:	08002283 	.word	0x08002283
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002250:	4b94      	ldr	r3, [pc, #592]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800225c:	4b91      	ldr	r3, [pc, #580]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	4a90      	ldr	r2, [pc, #576]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
 800226c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800226e:	e111      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002270:	4b8d      	ldr	r3, [pc, #564]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002272:	61bb      	str	r3, [r7, #24]
    break;
 8002274:	e10e      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002276:	4b8d      	ldr	r3, [pc, #564]	; (80024ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002278:	61bb      	str	r3, [r7, #24]
    break;
 800227a:	e10b      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800227c:	4b8c      	ldr	r3, [pc, #560]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800227e:	61bb      	str	r3, [r7, #24]
    break;
 8002280:	e108      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002282:	4b88      	ldr	r3, [pc, #544]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800228c:	4b85      	ldr	r3, [pc, #532]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002296:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002298:	4b82      	ldr	r3, [pc, #520]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80022a2:	4b80      	ldr	r3, [pc, #512]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	08db      	lsrs	r3, r3, #3
 80022a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80e1 	beq.w	8002488 <HAL_RCC_GetSysClockFreq+0x2b8>
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	f000 8083 	beq.w	80023d4 <HAL_RCC_GetSysClockFreq+0x204>
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	f200 80a1 	bhi.w	8002418 <HAL_RCC_GetSysClockFreq+0x248>
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x114>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d056      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x1c0>
 80022e2:	e099      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022e4:	4b6f      	ldr	r3, [pc, #444]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d02d      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022f0:	4b6c      	ldr	r3, [pc, #432]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	08db      	lsrs	r3, r3, #3
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	4a6b      	ldr	r2, [pc, #428]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800231a:	4b62      	ldr	r3, [pc, #392]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232a:	ed97 6a02 	vldr	s12, [r7, #8]
 800232e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800233a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800233e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800234a:	e087      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002356:	eddf 6a58 	vldr	s13, [pc, #352]	; 80024b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800235a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235e:	4b51      	ldr	r3, [pc, #324]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002372:	eddf 5a50 	vldr	s11, [pc, #320]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800237a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800238e:	e065      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80024bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800239e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a2:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023d2:	e043      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80024c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80023e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023e6:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800240a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800240e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002416:	e021      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002422:	eddf 6a26 	vldr	s13, [pc, #152]	; 80024bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800243a:	ed97 6a02 	vldr	s12, [r7, #8]
 800243e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800244a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800244e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800245a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	0a5b      	lsrs	r3, r3, #9
 8002462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002466:	3301      	adds	r3, #1
 8002468:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002474:	edd7 6a07 	vldr	s13, [r7, #28]
 8002478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800247c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002480:	ee17 3a90 	vmov	r3, s15
 8002484:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002486:	e005      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
    break;
 800248c:	e002      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002490:	61bb      	str	r3, [r7, #24]
    break;
 8002492:	bf00      	nop
  }

  return sysclockfreq;
 8002494:	69bb      	ldr	r3, [r7, #24]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	58024400 	.word	0x58024400
 80024a8:	03d09000 	.word	0x03d09000
 80024ac:	003d0900 	.word	0x003d0900
 80024b0:	017d7840 	.word	0x017d7840
 80024b4:	46000000 	.word	0x46000000
 80024b8:	4c742400 	.word	0x4c742400
 80024bc:	4a742400 	.word	0x4a742400
 80024c0:	4bbebc20 	.word	0x4bbebc20

080024c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80024ca:	f7ff fe81 	bl	80021d0 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_RCC_GetHCLKFreq+0x50>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490f      	ldr	r1, [pc, #60]	; (8002518 <HAL_RCC_GetHCLKFreq+0x54>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_GetHCLKFreq+0x50>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_GetHCLKFreq+0x54>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_RCC_GetHCLKFreq+0x58>)
 8002500:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002502:	4a07      	ldr	r2, [pc, #28]	; (8002520 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_RCC_GetHCLKFreq+0x58>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	58024400 	.word	0x58024400
 8002518:	08005870 	.word	0x08005870
 800251c:	20000004 	.word	0x20000004
 8002520:	20000000 	.word	0x20000000

08002524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002528:	f7ff ffcc 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_RCC_GetPCLK1Freq+0x28>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	58024400 	.word	0x58024400
 800254c:	08005870 	.word	0x08005870

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002554:	f7ff ffb6 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4904      	ldr	r1, [pc, #16]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	58024400 	.word	0x58024400
 8002578:	08005870 	.word	0x08005870

0800257c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002584:	2300      	movs	r3, #0
 8002586:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002588:	2300      	movs	r3, #0
 800258a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d03f      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800259c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025a0:	d02a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025a6:	d824      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ac:	d018      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025b2:	d81e      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025bc:	d007      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025be:	e018      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025c0:	4bab      	ldr	r3, [pc, #684]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	4aaa      	ldr	r2, [pc, #680]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025cc:	e015      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2102      	movs	r1, #2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 f9ef 	bl	80039b8 <RCCEx_PLL2_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025de:	e00c      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3324      	adds	r3, #36	; 0x24
 80025e4:	2102      	movs	r1, #2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f001 fa98 	bl	8003b1c <RCCEx_PLL3_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025f0:	e003      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	75fb      	strb	r3, [r7, #23]
      break;
 80025f6:	e000      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002600:	4b9b      	ldr	r3, [pc, #620]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800260c:	4998      	ldr	r1, [pc, #608]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	650b      	str	r3, [r1, #80]	; 0x50
 8002612:	e001      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03d      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	2b04      	cmp	r3, #4
 800262a:	d826      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	08002649 	.word	0x08002649
 8002638:	08002657 	.word	0x08002657
 800263c:	08002669 	.word	0x08002669
 8002640:	08002681 	.word	0x08002681
 8002644:	08002681 	.word	0x08002681
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002648:	4b89      	ldr	r3, [pc, #548]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	4a88      	ldr	r2, [pc, #544]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800264e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002654:	e015      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3304      	adds	r3, #4
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f001 f9ab 	bl	80039b8 <RCCEx_PLL2_Config>
 8002662:	4603      	mov	r3, r0
 8002664:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002666:	e00c      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3324      	adds	r3, #36	; 0x24
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f001 fa54 	bl	8003b1c <RCCEx_PLL3_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002678:	e003      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
      break;
 800267e:	e000      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002688:	4b79      	ldr	r3, [pc, #484]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800268a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268c:	f023 0207 	bic.w	r2, r3, #7
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	4976      	ldr	r1, [pc, #472]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	650b      	str	r3, [r1, #80]	; 0x50
 800269a:	e001      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d042      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b4:	d02b      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80026b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ba:	d825      	bhi.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80026bc:	2bc0      	cmp	r3, #192	; 0xc0
 80026be:	d028      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80026c0:	2bc0      	cmp	r3, #192	; 0xc0
 80026c2:	d821      	bhi.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d016      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80026c8:	2b80      	cmp	r3, #128	; 0x80
 80026ca:	d81d      	bhi.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d007      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80026d4:	e018      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d6:	4b66      	ldr	r3, [pc, #408]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	4a65      	ldr	r2, [pc, #404]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80026e2:	e017      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f001 f964 	bl	80039b8 <RCCEx_PLL2_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80026f4:	e00e      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3324      	adds	r3, #36	; 0x24
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 fa0d 	bl	8003b1c <RCCEx_PLL3_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002706:	e005      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	75fb      	strb	r3, [r7, #23]
      break;
 800270c:	e002      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800271a:	4b55      	ldr	r3, [pc, #340]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800271c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	4952      	ldr	r1, [pc, #328]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	650b      	str	r3, [r1, #80]	; 0x50
 800272c:	e001      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272e:	7dfb      	ldrb	r3, [r7, #23]
 8002730:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273a:	2b00      	cmp	r3, #0
 800273c:	d049      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002744:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002748:	d030      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x230>
 800274a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800274e:	d82a      	bhi.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002750:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002754:	d02c      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002756:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800275a:	d824      	bhi.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800275c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002760:	d018      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002766:	d81e      	bhi.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800276c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002770:	d007      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002772:	e018      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002774:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	4a3d      	ldr	r2, [pc, #244]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800277a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002780:	e017      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f001 f915 	bl	80039b8 <RCCEx_PLL2_Config>
 800278e:	4603      	mov	r3, r0
 8002790:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002792:	e00e      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3324      	adds	r3, #36	; 0x24
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f001 f9be 	bl	8003b1c <RCCEx_PLL3_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027a4:	e005      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80027ac:	bf00      	nop
 80027ae:	e000      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80027b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027c6:	492a      	ldr	r1, [pc, #168]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	658b      	str	r3, [r1, #88]	; 0x58
 80027cc:	e001      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d04c      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027e8:	d030      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80027ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ee:	d82a      	bhi.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80027f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027f4:	d02c      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80027f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027fa:	d824      	bhi.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80027fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002800:	d018      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002806:	d81e      	bhi.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002810:	d007      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002812:	e018      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002814:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	4a15      	ldr	r2, [pc, #84]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800281a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002820:	e017      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3304      	adds	r3, #4
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f001 f8c5 	bl	80039b8 <RCCEx_PLL2_Config>
 800282e:	4603      	mov	r3, r0
 8002830:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002832:	e00e      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3324      	adds	r3, #36	; 0x24
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f001 f96e 	bl	8003b1c <RCCEx_PLL3_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002844:	e005      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	75fb      	strb	r3, [r7, #23]
      break;
 800284a:	e002      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800284c:	bf00      	nop
 800284e:	e000      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10d      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002866:	4902      	ldr	r1, [pc, #8]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	658b      	str	r3, [r1, #88]	; 0x58
 800286c:	e004      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800286e:	bf00      	nop
 8002870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d032      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002888:	2b30      	cmp	r3, #48	; 0x30
 800288a:	d01c      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800288c:	2b30      	cmp	r3, #48	; 0x30
 800288e:	d817      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002890:	2b20      	cmp	r3, #32
 8002892:	d00c      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002894:	2b20      	cmp	r3, #32
 8002896:	d813      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d016      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800289c:	2b10      	cmp	r3, #16
 800289e:	d10f      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a0:	4bb1      	ldr	r3, [pc, #708]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	4ab0      	ldr	r2, [pc, #704]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80028ac:	e00e      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2102      	movs	r1, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f87f 	bl	80039b8 <RCCEx_PLL2_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80028be:	e005      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	75fb      	strb	r3, [r7, #23]
      break;
 80028c4:	e002      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80028c6:	bf00      	nop
 80028c8:	e000      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80028ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028d2:	4ba5      	ldr	r3, [pc, #660]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028de:	49a2      	ldr	r1, [pc, #648]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80028e4:	e001      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d047      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028fe:	d030      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002904:	d82a      	bhi.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002906:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800290a:	d02c      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800290c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002910:	d824      	bhi.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002916:	d018      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291c:	d81e      	bhi.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	d007      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002928:	e018      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800292a:	4b8f      	ldr	r3, [pc, #572]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	4a8e      	ldr	r2, [pc, #568]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002936:	e017      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f001 f83a 	bl	80039b8 <RCCEx_PLL2_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002948:	e00e      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3324      	adds	r3, #36	; 0x24
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f001 f8e3 	bl	8003b1c <RCCEx_PLL3_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800295a:	e005      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	75fb      	strb	r3, [r7, #23]
      break;
 8002960:	e002      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002962:	bf00      	nop
 8002964:	e000      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800296e:	4b7e      	ldr	r3, [pc, #504]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002972:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297a:	497b      	ldr	r1, [pc, #492]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800297c:	4313      	orrs	r3, r2
 800297e:	650b      	str	r3, [r1, #80]	; 0x50
 8002980:	e001      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d049      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002996:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800299a:	d02e      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800299c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a0:	d828      	bhi.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80029a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029a6:	d02a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x482>
 80029a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029ac:	d822      	bhi.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80029ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029b2:	d026      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80029b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029b8:	d81c      	bhi.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80029ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029be:	d010      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80029c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029c4:	d816      	bhi.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01d      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ce:	d111      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	2101      	movs	r1, #1
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 ffee 	bl	80039b8 <RCCEx_PLL2_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80029e0:	e012      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3324      	adds	r3, #36	; 0x24
 80029e6:	2101      	movs	r1, #1
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 f897 	bl	8003b1c <RCCEx_PLL3_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80029f2:	e009      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	75fb      	strb	r3, [r7, #23]
      break;
 80029f8:	e006      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80029fa:	bf00      	nop
 80029fc:	e004      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80029fe:	bf00      	nop
 8002a00:	e002      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002a02:	bf00      	nop
 8002a04:	e000      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a0e:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a12:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a1a:	4953      	ldr	r1, [pc, #332]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	650b      	str	r3, [r1, #80]	; 0x50
 8002a20:	e001      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d04b      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a3c:	d02e      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a42:	d828      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d02a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4e:	d822      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a54:	d026      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002a56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a5a:	d81c      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a60:	d010      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a66:	d816      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a70:	d111      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2101      	movs	r1, #1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 ff9d 	bl	80039b8 <RCCEx_PLL2_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a82:	e012      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3324      	adds	r3, #36	; 0x24
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f001 f846 	bl	8003b1c <RCCEx_PLL3_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a94:	e009      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9a:	e006      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002a9c:	bf00      	nop
 8002a9e:	e004      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002aa0:	bf00      	nop
 8002aa2:	e002      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002aa4:	bf00      	nop
 8002aa6:	e000      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002abe:	492a      	ldr	r1, [pc, #168]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	658b      	str	r3, [r1, #88]	; 0x58
 8002ac4:	e001      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d022      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00e      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae2:	d108      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 ff64 	bl	80039b8 <RCCEx_PLL2_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002af4:	e003      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
      break;
 8002afa:	e000      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8002afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	4915      	ldr	r1, [pc, #84]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b16:	e001      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d031      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b30:	d00e      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b36:	d814      	bhi.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d017      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8002b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b40:	d10f      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b4e:	e00e      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	2101      	movs	r1, #1
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 ff2e 	bl	80039b8 <RCCEx_PLL2_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b60:	e005      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	75fb      	strb	r3, [r7, #23]
      break;
 8002b66:	e002      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002b68:	58024400 	.word	0x58024400
      break;
 8002b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b74:	4bbc      	ldr	r3, [pc, #752]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	49b9      	ldr	r1, [pc, #740]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	650b      	str	r3, [r1, #80]	; 0x50
 8002b86:	e001      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d032      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d81b      	bhi.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002ba0:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002bdf 	.word	0x08002bdf
 8002bac:	08002bb9 	.word	0x08002bb9
 8002bb0:	08002bc7 	.word	0x08002bc7
 8002bb4:	08002bdf 	.word	0x08002bdf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb8:	4bab      	ldr	r3, [pc, #684]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	4aaa      	ldr	r2, [pc, #680]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002bc4:	e00c      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fef3 	bl	80039b8 <RCCEx_PLL2_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002bd6:	e003      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
      break;
 8002bdc:	e000      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8002bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002be6:	4ba0      	ldr	r3, [pc, #640]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	499d      	ldr	r1, [pc, #628]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002bf8:	e001      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8086 	beq.w	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c0c:	4b97      	ldr	r3, [pc, #604]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a96      	ldr	r2, [pc, #600]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c18:	f7fe f980 	bl	8000f1c <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c1e:	e009      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c20:	f7fe f97c 	bl	8000f1c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d902      	bls.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	75fb      	strb	r3, [r7, #23]
        break;
 8002c32:	e005      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c34:	4b8d      	ldr	r3, [pc, #564]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ef      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d166      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c46:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c50:	4053      	eors	r3, r2
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d013      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c5a:	4b83      	ldr	r3, [pc, #524]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c62:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c64:	4b80      	ldr	r3, [pc, #512]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a7f      	ldr	r2, [pc, #508]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c70:	4b7d      	ldr	r3, [pc, #500]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a7c      	ldr	r2, [pc, #496]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c7c:	4a7a      	ldr	r2, [pc, #488]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c8c:	d115      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe f945 	bl	8000f1c <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c94:	e00b      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fe f941 	bl	8000f1c <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d902      	bls.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	75fb      	strb	r3, [r7, #23]
            break;
 8002cac:	e005      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cae:	4b6e      	ldr	r3, [pc, #440]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0ed      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d126      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cce:	d10d      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x770>
 8002cd0:	4b65      	ldr	r3, [pc, #404]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cde:	0919      	lsrs	r1, r3, #4
 8002ce0:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	4960      	ldr	r1, [pc, #384]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	610b      	str	r3, [r1, #16]
 8002cea:	e005      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002cec:	4b5e      	ldr	r3, [pc, #376]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	4a5d      	ldr	r2, [pc, #372]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cf2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002cf6:	6113      	str	r3, [r2, #16]
 8002cf8:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d06:	4958      	ldr	r1, [pc, #352]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	670b      	str	r3, [r1, #112]	; 0x70
 8002d0c:	e004      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	75bb      	strb	r3, [r7, #22]
 8002d12:	e001      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d07e      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d28:	2b28      	cmp	r3, #40	; 0x28
 8002d2a:	d867      	bhi.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x880>
 8002d2c:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002e03 	.word	0x08002e03
 8002d38:	08002dfd 	.word	0x08002dfd
 8002d3c:	08002dfd 	.word	0x08002dfd
 8002d40:	08002dfd 	.word	0x08002dfd
 8002d44:	08002dfd 	.word	0x08002dfd
 8002d48:	08002dfd 	.word	0x08002dfd
 8002d4c:	08002dfd 	.word	0x08002dfd
 8002d50:	08002dfd 	.word	0x08002dfd
 8002d54:	08002dd9 	.word	0x08002dd9
 8002d58:	08002dfd 	.word	0x08002dfd
 8002d5c:	08002dfd 	.word	0x08002dfd
 8002d60:	08002dfd 	.word	0x08002dfd
 8002d64:	08002dfd 	.word	0x08002dfd
 8002d68:	08002dfd 	.word	0x08002dfd
 8002d6c:	08002dfd 	.word	0x08002dfd
 8002d70:	08002dfd 	.word	0x08002dfd
 8002d74:	08002deb 	.word	0x08002deb
 8002d78:	08002dfd 	.word	0x08002dfd
 8002d7c:	08002dfd 	.word	0x08002dfd
 8002d80:	08002dfd 	.word	0x08002dfd
 8002d84:	08002dfd 	.word	0x08002dfd
 8002d88:	08002dfd 	.word	0x08002dfd
 8002d8c:	08002dfd 	.word	0x08002dfd
 8002d90:	08002dfd 	.word	0x08002dfd
 8002d94:	08002e03 	.word	0x08002e03
 8002d98:	08002dfd 	.word	0x08002dfd
 8002d9c:	08002dfd 	.word	0x08002dfd
 8002da0:	08002dfd 	.word	0x08002dfd
 8002da4:	08002dfd 	.word	0x08002dfd
 8002da8:	08002dfd 	.word	0x08002dfd
 8002dac:	08002dfd 	.word	0x08002dfd
 8002db0:	08002dfd 	.word	0x08002dfd
 8002db4:	08002e03 	.word	0x08002e03
 8002db8:	08002dfd 	.word	0x08002dfd
 8002dbc:	08002dfd 	.word	0x08002dfd
 8002dc0:	08002dfd 	.word	0x08002dfd
 8002dc4:	08002dfd 	.word	0x08002dfd
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002dfd 	.word	0x08002dfd
 8002dd0:	08002dfd 	.word	0x08002dfd
 8002dd4:	08002e03 	.word	0x08002e03
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	2101      	movs	r1, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fdea 	bl	80039b8 <RCCEx_PLL2_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002de8:	e00c      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3324      	adds	r3, #36	; 0x24
 8002dee:	2101      	movs	r1, #1
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fe93 	bl	8003b1c <RCCEx_PLL3_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002dfa:	e003      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8002e00:	e000      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8002e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e16:	4914      	ldr	r1, [pc, #80]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	654b      	str	r3, [r1, #84]	; 0x54
 8002e1c:	e001      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
 8002e20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d03e      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d827      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002e36:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002e8d 	.word	0x08002e8d
 8002e40:	08002e55 	.word	0x08002e55
 8002e44:	08002e75 	.word	0x08002e75
 8002e48:	08002e8d 	.word	0x08002e8d
 8002e4c:	08002e8d 	.word	0x08002e8d
 8002e50:	08002e8d 	.word	0x08002e8d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	2101      	movs	r1, #1
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fdac 	bl	80039b8 <RCCEx_PLL2_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e64:	e013      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8002e66:	bf00      	nop
 8002e68:	58024400 	.word	0x58024400
 8002e6c:	58024800 	.word	0x58024800
 8002e70:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3324      	adds	r3, #36	; 0x24
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fe4e 	bl	8003b1c <RCCEx_PLL3_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002e84:	e003      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
      break;
 8002e8a:	e000      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8002e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e94:	4b9f      	ldr	r3, [pc, #636]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e98:	f023 0207 	bic.w	r2, r3, #7
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea0:	499c      	ldr	r1, [pc, #624]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	654b      	str	r3, [r1, #84]	; 0x54
 8002ea6:	e001      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d039      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d820      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002f0b 	.word	0x08002f0b
 8002ecc:	08002ee1 	.word	0x08002ee1
 8002ed0:	08002ef3 	.word	0x08002ef3
 8002ed4:	08002f0b 	.word	0x08002f0b
 8002ed8:	08002f0b 	.word	0x08002f0b
 8002edc:	08002f0b 	.word	0x08002f0b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fd66 	bl	80039b8 <RCCEx_PLL2_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002ef0:	e00c      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3324      	adds	r3, #36	; 0x24
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fe0f 	bl	8003b1c <RCCEx_PLL3_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f02:	e003      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
      break;
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8002f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f12:	4b80      	ldr	r3, [pc, #512]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	f023 0207 	bic.w	r2, r3, #7
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f20:	497c      	ldr	r1, [pc, #496]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	658b      	str	r3, [r1, #88]	; 0x58
 8002f26:	e001      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d04b      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f42:	d02e      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8002f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f48:	d828      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4e:	d02a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f54:	d822      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002f56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f5a:	d026      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8002f5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f60:	d81c      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f66:	d010      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f6c:	d816      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01d      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8002f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f76:	d111      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fd1a 	bl	80039b8 <RCCEx_PLL2_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f88:	e012      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3324      	adds	r3, #36	; 0x24
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fdc3 	bl	8003b1c <RCCEx_PLL3_Config>
 8002f96:	4603      	mov	r3, r0
 8002f98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa0:	e006      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e004      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e002      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fb6:	4b57      	ldr	r3, [pc, #348]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	4953      	ldr	r1, [pc, #332]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	654b      	str	r3, [r1, #84]	; 0x54
 8002fca:	e001      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d04b      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fe2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fe6:	d02e      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8002fe8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fec:	d828      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff2:	d02a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xace>
 8002ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff8:	d822      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002ffa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ffe:	d026      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003004:	d81c      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800300a:	d010      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800300c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003010:	d816      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01d      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301a:	d111      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fcc8 	bl	80039b8 <RCCEx_PLL2_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800302c:	e012      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3324      	adds	r3, #36	; 0x24
 8003032:	2102      	movs	r1, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fd71 	bl	8003b1c <RCCEx_PLL3_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800303e:	e009      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	75fb      	strb	r3, [r7, #23]
      break;
 8003044:	e006      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003046:	bf00      	nop
 8003048:	e004      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800304a:	bf00      	nop
 800304c:	e002      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800304e:	bf00      	nop
 8003050:	e000      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003052:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800305a:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003068:	492a      	ldr	r1, [pc, #168]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800306a:	4313      	orrs	r3, r2
 800306c:	658b      	str	r3, [r1, #88]	; 0x58
 800306e:	e001      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d04d      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003086:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800308a:	d02e      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 800308c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003090:	d828      	bhi.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003096:	d02a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309c:	d822      	bhi.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800309e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030a2:	d026      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 80030a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030a8:	d81c      	bhi.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80030aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ae:	d010      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 80030b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b4:	d816      	bhi.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01d      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 80030ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030be:	d111      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3304      	adds	r3, #4
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fc76 	bl	80039b8 <RCCEx_PLL2_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80030d0:	e012      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3324      	adds	r3, #36	; 0x24
 80030d6:	2102      	movs	r1, #2
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fd1f 	bl	8003b1c <RCCEx_PLL3_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80030e2:	e009      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	75fb      	strb	r3, [r7, #23]
      break;
 80030e8:	e006      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80030ea:	bf00      	nop
 80030ec:	e004      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80030ee:	bf00      	nop
 80030f0:	e002      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80030f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10c      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800310c:	4901      	ldr	r1, [pc, #4]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800310e:	4313      	orrs	r3, r2
 8003110:	658b      	str	r3, [r1, #88]	; 0x58
 8003112:	e003      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003132:	d10a      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3324      	adds	r3, #36	; 0x24
 8003138:	2102      	movs	r1, #2
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fcee 	bl	8003b1c <RCCEx_PLL3_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800314a:	4b8c      	ldr	r3, [pc, #560]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003158:	4988      	ldr	r1, [pc, #544]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800315a:	4313      	orrs	r3, r2
 800315c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003174:	d10a      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3324      	adds	r3, #36	; 0x24
 800317a:	2102      	movs	r1, #2
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fccd 	bl	8003b1c <RCCEx_PLL3_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800318c:	4b7b      	ldr	r3, [pc, #492]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319a:	4978      	ldr	r1, [pc, #480]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800319c:	4313      	orrs	r3, r2
 800319e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d034      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031b6:	d01d      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80031b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031bc:	d817      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80031c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c6:	d009      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xc60>
 80031c8:	e011      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fbf1 	bl	80039b8 <RCCEx_PLL2_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80031da:	e00c      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3324      	adds	r3, #36	; 0x24
 80031e0:	2102      	movs	r1, #2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fc9a 	bl	8003b1c <RCCEx_PLL3_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80031ec:	e003      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	75fb      	strb	r3, [r7, #23]
      break;
 80031f2:	e000      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 80031f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031fc:	4b5f      	ldr	r3, [pc, #380]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800320a:	495c      	ldr	r1, [pc, #368]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800320c:	4313      	orrs	r3, r2
 800320e:	658b      	str	r3, [r1, #88]	; 0x58
 8003210:	e001      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003212:	7dfb      	ldrb	r3, [r7, #23]
 8003214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d033      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800322c:	d01c      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 800322e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003232:	d816      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8003234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003238:	d003      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800323a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800323e:	d007      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8003240:	e00f      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003242:	4b4e      	ldr	r3, [pc, #312]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	4a4d      	ldr	r2, [pc, #308]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800324e:	e00c      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3324      	adds	r3, #36	; 0x24
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fc60 	bl	8003b1c <RCCEx_PLL3_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003260:	e003      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	75fb      	strb	r3, [r7, #23]
      break;
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8003268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800326a:	7dfb      	ldrb	r3, [r7, #23]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003270:	4b42      	ldr	r3, [pc, #264]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	493f      	ldr	r1, [pc, #252]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003280:	4313      	orrs	r3, r2
 8003282:	654b      	str	r3, [r1, #84]	; 0x54
 8003284:	e001      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d029      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a2:	d007      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80032a4:	e00f      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a6:	4b35      	ldr	r3, [pc, #212]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	4a34      	ldr	r2, [pc, #208]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80032b2:	e00b      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3304      	adds	r3, #4
 80032b8:	2102      	movs	r1, #2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fb7c 	bl	80039b8 <RCCEx_PLL2_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80032c4:	e002      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
      break;
 80032ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80032d2:	4b2a      	ldr	r3, [pc, #168]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032de:	4927      	ldr	r1, [pc, #156]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80032e4:	e001      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3324      	adds	r3, #36	; 0x24
 80032fa:	2102      	movs	r1, #2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fc0d 	bl	8003b1c <RCCEx_PLL3_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d035      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003322:	d017      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003328:	d811      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800332a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332e:	d013      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003334:	d80b      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d010      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800333a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333e:	d106      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	4a0d      	ldr	r2, [pc, #52]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800334c:	e007      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
      break;
 8003352:	e004      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003354:	bf00      	nop
 8003356:	e002      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003358:	bf00      	nop
 800335a:	e000      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 800335c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335e:	7dfb      	ldrb	r3, [r7, #23]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003372:	4902      	ldr	r1, [pc, #8]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003374:	4313      	orrs	r3, r2
 8003376:	654b      	str	r3, [r1, #84]	; 0x54
 8003378:	e004      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800337a:	bf00      	nop
 800337c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003390:	4b29      	ldr	r3, [pc, #164]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 8003392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003394:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339c:	4926      	ldr	r1, [pc, #152]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80033ae:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80033bc:	491e      	ldr	r1, [pc, #120]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 80033d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033da:	4917      	ldr	r1, [pc, #92]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00d      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	4a11      	ldr	r2, [pc, #68]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 80033f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033f6:	6113      	str	r3, [r2, #16]
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003402:	490d      	ldr	r1, [pc, #52]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	da08      	bge.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003410:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 8003412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003414:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	4906      	ldr	r1, [pc, #24]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003422:	7dbb      	ldrb	r3, [r7, #22]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xeb0>
  {
    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xeb2>
  }
  return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	58024400 	.word	0x58024400

0800343c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003440:	f7ff f840 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4904      	ldr	r1, [pc, #16]	; (8003464 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	58024400 	.word	0x58024400
 8003464:	08005870 	.word	0x08005870

08003468 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003470:	4ba1      	ldr	r3, [pc, #644]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800347a:	4b9f      	ldr	r3, [pc, #636]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	0b1b      	lsrs	r3, r3, #12
 8003480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003484:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003486:	4b9c      	ldr	r3, [pc, #624]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003492:	4b99      	ldr	r3, [pc, #612]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	08db      	lsrs	r3, r3, #3
 8003498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8111 	beq.w	80036d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	f000 8083 	beq.w	80035c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	f200 80a1 	bhi.w	8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d056      	beq.n	8003580 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80034d2:	e099      	b.n	8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034d4:	4b88      	ldr	r3, [pc, #544]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02d      	beq.n	800353c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034e0:	4b85      	ldr	r3, [pc, #532]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	08db      	lsrs	r3, r3, #3
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	4a84      	ldr	r2, [pc, #528]	; (80036fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
 80034f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	ee07 3a90 	vmov	s15, r3
 80034f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800350a:	4b7b      	ldr	r3, [pc, #492]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351a:	ed97 6a03 	vldr	s12, [r7, #12]
 800351e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003700 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800352a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800352e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003536:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800353a:	e087      	b.n	800364c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003546:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003704 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800354a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800354e:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800355e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003562:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003700 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800356a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800356e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800357e:	e065      	b.n	800364c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003708 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800358e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003592:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80035a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003700 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035c2:	e043      	b.n	800364c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800370c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80035d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d6:	4b48      	ldr	r3, [pc, #288]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80035ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003700 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003606:	e021      	b.n	800364c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003612:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003708 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361a:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362a:	ed97 6a03 	vldr	s12, [r7, #12]
 800362e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003700 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800363e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003646:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800364a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800364c:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	0a5b      	lsrs	r3, r3, #9
 8003652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003666:	edd7 6a07 	vldr	s13, [r7, #28]
 800366a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800366e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003672:	ee17 2a90 	vmov	r2, s15
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	0c1b      	lsrs	r3, r3, #16
 8003680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003690:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003694:	edd7 6a07 	vldr	s13, [r7, #28]
 8003698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800369c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a0:	ee17 2a90 	vmov	r2, s15
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80036a8:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	0e1b      	lsrs	r3, r3, #24
 80036ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80036c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ce:	ee17 2a90 	vmov	r2, s15
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80036d6:	e008      	b.n	80036ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
}
 80036ea:	bf00      	nop
 80036ec:	3724      	adds	r7, #36	; 0x24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	58024400 	.word	0x58024400
 80036fc:	03d09000 	.word	0x03d09000
 8003700:	46000000 	.word	0x46000000
 8003704:	4c742400 	.word	0x4c742400
 8003708:	4a742400 	.word	0x4a742400
 800370c:	4bbebc20 	.word	0x4bbebc20

08003710 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003718:	4ba1      	ldr	r3, [pc, #644]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003722:	4b9f      	ldr	r3, [pc, #636]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	0d1b      	lsrs	r3, r3, #20
 8003728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800372c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800372e:	4b9c      	ldr	r3, [pc, #624]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800373a:	4b99      	ldr	r3, [pc, #612]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	08db      	lsrs	r3, r3, #3
 8003740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003752:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 8111 	beq.w	8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b02      	cmp	r3, #2
 8003762:	f000 8083 	beq.w	800386c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b02      	cmp	r3, #2
 800376a:	f200 80a1 	bhi.w	80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d056      	beq.n	8003828 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800377a:	e099      	b.n	80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800377c:	4b88      	ldr	r3, [pc, #544]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d02d      	beq.n	80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003788:	4b85      	ldr	r3, [pc, #532]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	08db      	lsrs	r3, r3, #3
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	4a84      	ldr	r2, [pc, #528]	; (80039a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
 8003798:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	ee07 3a90 	vmov	s15, r3
 80037a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b2:	4b7b      	ldr	r3, [pc, #492]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80037e2:	e087      	b.n	80038f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80037f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f6:	4b6a      	ldr	r3, [pc, #424]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003806:	ed97 6a03 	vldr	s12, [r7, #12]
 800380a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800380e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800381a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003822:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003826:	e065      	b.n	80038f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003832:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383a:	4b59      	ldr	r3, [pc, #356]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384a:	ed97 6a03 	vldr	s12, [r7, #12]
 800384e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800385e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003866:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800386a:	e043      	b.n	80038f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003876:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800387a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387e:	4b48      	ldr	r3, [pc, #288]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800388e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003892:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800389a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800389e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ae:	e021      	b.n	80038f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80038be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c2:	4b37      	ldr	r3, [pc, #220]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ca:	ee07 3a90 	vmov	s15, r3
 80038ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80038f4:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	0a5b      	lsrs	r3, r3, #9
 80038fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800390a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800390e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800391a:	ee17 2a90 	vmov	r2, s15
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	0c1b      	lsrs	r3, r3, #16
 8003928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800392c:	ee07 3a90 	vmov	s15, r3
 8003930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003934:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003938:	ee37 7a87 	vadd.f32	s14, s15, s14
 800393c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003948:	ee17 2a90 	vmov	r2, s15
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003950:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	0e1b      	lsrs	r3, r3, #24
 8003956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003966:	ee37 7a87 	vadd.f32	s14, s15, s14
 800396a:	edd7 6a07 	vldr	s13, [r7, #28]
 800396e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003976:	ee17 2a90 	vmov	r2, s15
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800397e:	e008      	b.n	8003992 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
}
 8003992:	bf00      	nop
 8003994:	3724      	adds	r7, #36	; 0x24
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	58024400 	.word	0x58024400
 80039a4:	03d09000 	.word	0x03d09000
 80039a8:	46000000 	.word	0x46000000
 80039ac:	4c742400 	.word	0x4c742400
 80039b0:	4a742400 	.word	0x4a742400
 80039b4:	4bbebc20 	.word	0x4bbebc20

080039b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039c6:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d101      	bne.n	80039d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e099      	b.n	8003b0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80039d6:	4b4f      	ldr	r3, [pc, #316]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a4e      	ldr	r2, [pc, #312]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 80039dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e2:	f7fd fa9b 	bl	8000f1c <HAL_GetTick>
 80039e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039e8:	e008      	b.n	80039fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80039ea:	f7fd fa97 	bl	8000f1c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e086      	b.n	8003b0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039fc:	4b45      	ldr	r3, [pc, #276]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f0      	bne.n	80039ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a08:	4b42      	ldr	r3, [pc, #264]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	031b      	lsls	r3, r3, #12
 8003a16:	493f      	ldr	r1, [pc, #252]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	628b      	str	r3, [r1, #40]	; 0x28
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	025b      	lsls	r3, r3, #9
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a4c:	4931      	ldr	r1, [pc, #196]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a52:	4b30      	ldr	r3, [pc, #192]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	492d      	ldr	r1, [pc, #180]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a64:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	f023 0220 	bic.w	r2, r3, #32
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	4928      	ldr	r1, [pc, #160]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a76:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a7c:	f023 0310 	bic.w	r3, r3, #16
 8003a80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a82:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a86:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <RCCEx_PLL2_Config+0x160>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	69d2      	ldr	r2, [r2, #28]
 8003a8e:	00d2      	lsls	r2, r2, #3
 8003a90:	4920      	ldr	r1, [pc, #128]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a96:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	4a1e      	ldr	r2, [pc, #120]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003a9c:	f043 0310 	orr.w	r3, r3, #16
 8003aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ab2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ab4:	e00f      	b.n	8003ad6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d106      	bne.n	8003aca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003abc:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	4a14      	ldr	r2, [pc, #80]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ac8:	e005      	b.n	8003ad6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003ad0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ad4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a0e      	ldr	r2, [pc, #56]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003adc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae2:	f7fd fa1b 	bl	8000f1c <HAL_GetTick>
 8003ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ae8:	e008      	b.n	8003afc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003aea:	f7fd fa17 	bl	8000f1c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e006      	b.n	8003b0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <RCCEx_PLL2_Config+0x15c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	58024400 	.word	0x58024400
 8003b18:	ffff0007 	.word	0xffff0007

08003b1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b2a:	4b53      	ldr	r3, [pc, #332]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d101      	bne.n	8003b3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e099      	b.n	8003c6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b3a:	4b4f      	ldr	r3, [pc, #316]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a4e      	ldr	r2, [pc, #312]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b46:	f7fd f9e9 	bl	8000f1c <HAL_GetTick>
 8003b4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b4c:	e008      	b.n	8003b60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b4e:	f7fd f9e5 	bl	8000f1c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e086      	b.n	8003c6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b60:	4b45      	ldr	r3, [pc, #276]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003b6c:	4b42      	ldr	r3, [pc, #264]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	051b      	lsls	r3, r3, #20
 8003b7a:	493f      	ldr	r1, [pc, #252]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	628b      	str	r3, [r1, #40]	; 0x28
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	025b      	lsls	r3, r3, #9
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	061b      	lsls	r3, r3, #24
 8003bac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bb0:	4931      	ldr	r1, [pc, #196]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003bb6:	4b30      	ldr	r3, [pc, #192]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	492d      	ldr	r1, [pc, #180]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	4928      	ldr	r1, [pc, #160]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003bda:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	4a26      	ldr	r2, [pc, #152]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003be6:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bea:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <RCCEx_PLL3_Config+0x160>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	69d2      	ldr	r2, [r2, #28]
 8003bf2:	00d2      	lsls	r2, r2, #3
 8003bf4:	4920      	ldr	r1, [pc, #128]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	4a19      	ldr	r2, [pc, #100]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003c12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c18:	e00f      	b.n	8003c3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d106      	bne.n	8003c2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c20:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003c26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c2c:	e005      	b.n	8003c3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	4a11      	ldr	r2, [pc, #68]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003c34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c3a:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c46:	f7fd f969 	bl	8000f1c <HAL_GetTick>
 8003c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c4c:	e008      	b.n	8003c60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c4e:	f7fd f965 	bl	8000f1c <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e006      	b.n	8003c6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <RCCEx_PLL3_Config+0x15c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	58024400 	.word	0x58024400
 8003c7c:	ffff0007 	.word	0xffff0007

08003c80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e042      	b.n	8003d18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7fc ff4f 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2224      	movs	r2, #36	; 0x24
 8003cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8c2 	bl	8003e4c <UART_SetConfig>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e022      	b.n	8003d18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fe1c 	bl	8004918 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fea3 	bl	8004a5c <UART_CheckIdleState>
 8003d16:	4603      	mov	r3, r0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	; 0x28
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	f040 8083 	bne.w	8003e42 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_UART_Transmit+0x28>
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e07b      	b.n	8003e44 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Transmit+0x3a>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e074      	b.n	8003e44 <HAL_UART_Transmit+0x124>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2221      	movs	r2, #33	; 0x21
 8003d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d72:	f7fd f8d3 	bl	8000f1c <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	88fa      	ldrh	r2, [r7, #6]
 8003d84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d90:	d108      	bne.n	8003da4 <HAL_UART_Transmit+0x84>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d104      	bne.n	8003da4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	e003      	b.n	8003dac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003db4:	e02c      	b.n	8003e10 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2180      	movs	r1, #128	; 0x80
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fe93 	bl	8004aec <UART_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e039      	b.n	8003e44 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10b      	bne.n	8003dee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	3302      	adds	r3, #2
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	e007      	b.n	8003dfe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1cc      	bne.n	8003db6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2200      	movs	r2, #0
 8003e24:	2140      	movs	r1, #64	; 0x40
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fe60 	bl	8004aec <UART_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e006      	b.n	8003e44 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
  }
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3720      	adds	r7, #32
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e4c:	b5b0      	push	{r4, r5, r7, lr}
 8003e4e:	b08e      	sub	sp, #56	; 0x38
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4bc0      	ldr	r3, [pc, #768]	; (8004184 <UART_SetConfig+0x338>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4ab5      	ldr	r2, [pc, #724]	; (8004188 <UART_SetConfig+0x33c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	4bb1      	ldr	r3, [pc, #708]	; (800418c <UART_SetConfig+0x340>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	f023 010f 	bic.w	r1, r3, #15
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4aa8      	ldr	r2, [pc, #672]	; (8004190 <UART_SetConfig+0x344>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d177      	bne.n	8003fe4 <UART_SetConfig+0x198>
 8003ef4:	4ba7      	ldr	r3, [pc, #668]	; (8004194 <UART_SetConfig+0x348>)
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003efc:	2b28      	cmp	r3, #40	; 0x28
 8003efe:	d86d      	bhi.n	8003fdc <UART_SetConfig+0x190>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <UART_SetConfig+0xbc>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003fad 	.word	0x08003fad
 8003f0c:	08003fdd 	.word	0x08003fdd
 8003f10:	08003fdd 	.word	0x08003fdd
 8003f14:	08003fdd 	.word	0x08003fdd
 8003f18:	08003fdd 	.word	0x08003fdd
 8003f1c:	08003fdd 	.word	0x08003fdd
 8003f20:	08003fdd 	.word	0x08003fdd
 8003f24:	08003fdd 	.word	0x08003fdd
 8003f28:	08003fb5 	.word	0x08003fb5
 8003f2c:	08003fdd 	.word	0x08003fdd
 8003f30:	08003fdd 	.word	0x08003fdd
 8003f34:	08003fdd 	.word	0x08003fdd
 8003f38:	08003fdd 	.word	0x08003fdd
 8003f3c:	08003fdd 	.word	0x08003fdd
 8003f40:	08003fdd 	.word	0x08003fdd
 8003f44:	08003fdd 	.word	0x08003fdd
 8003f48:	08003fbd 	.word	0x08003fbd
 8003f4c:	08003fdd 	.word	0x08003fdd
 8003f50:	08003fdd 	.word	0x08003fdd
 8003f54:	08003fdd 	.word	0x08003fdd
 8003f58:	08003fdd 	.word	0x08003fdd
 8003f5c:	08003fdd 	.word	0x08003fdd
 8003f60:	08003fdd 	.word	0x08003fdd
 8003f64:	08003fdd 	.word	0x08003fdd
 8003f68:	08003fc5 	.word	0x08003fc5
 8003f6c:	08003fdd 	.word	0x08003fdd
 8003f70:	08003fdd 	.word	0x08003fdd
 8003f74:	08003fdd 	.word	0x08003fdd
 8003f78:	08003fdd 	.word	0x08003fdd
 8003f7c:	08003fdd 	.word	0x08003fdd
 8003f80:	08003fdd 	.word	0x08003fdd
 8003f84:	08003fdd 	.word	0x08003fdd
 8003f88:	08003fcd 	.word	0x08003fcd
 8003f8c:	08003fdd 	.word	0x08003fdd
 8003f90:	08003fdd 	.word	0x08003fdd
 8003f94:	08003fdd 	.word	0x08003fdd
 8003f98:	08003fdd 	.word	0x08003fdd
 8003f9c:	08003fdd 	.word	0x08003fdd
 8003fa0:	08003fdd 	.word	0x08003fdd
 8003fa4:	08003fdd 	.word	0x08003fdd
 8003fa8:	08003fd5 	.word	0x08003fd5
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fb2:	e222      	b.n	80043fa <UART_SetConfig+0x5ae>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fba:	e21e      	b.n	80043fa <UART_SetConfig+0x5ae>
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fc2:	e21a      	b.n	80043fa <UART_SetConfig+0x5ae>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fca:	e216      	b.n	80043fa <UART_SetConfig+0x5ae>
 8003fcc:	2320      	movs	r3, #32
 8003fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fd2:	e212      	b.n	80043fa <UART_SetConfig+0x5ae>
 8003fd4:	2340      	movs	r3, #64	; 0x40
 8003fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fda:	e20e      	b.n	80043fa <UART_SetConfig+0x5ae>
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fe2:	e20a      	b.n	80043fa <UART_SetConfig+0x5ae>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6b      	ldr	r2, [pc, #428]	; (8004198 <UART_SetConfig+0x34c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d130      	bne.n	8004050 <UART_SetConfig+0x204>
 8003fee:	4b69      	ldr	r3, [pc, #420]	; (8004194 <UART_SetConfig+0x348>)
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	d826      	bhi.n	8004048 <UART_SetConfig+0x1fc>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <UART_SetConfig+0x1b4>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004019 	.word	0x08004019
 8004004:	08004021 	.word	0x08004021
 8004008:	08004029 	.word	0x08004029
 800400c:	08004031 	.word	0x08004031
 8004010:	08004039 	.word	0x08004039
 8004014:	08004041 	.word	0x08004041
 8004018:	2300      	movs	r3, #0
 800401a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800401e:	e1ec      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004020:	2304      	movs	r3, #4
 8004022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004026:	e1e8      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004028:	2308      	movs	r3, #8
 800402a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800402e:	e1e4      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004030:	2310      	movs	r3, #16
 8004032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004036:	e1e0      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004038:	2320      	movs	r3, #32
 800403a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800403e:	e1dc      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004040:	2340      	movs	r3, #64	; 0x40
 8004042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004046:	e1d8      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800404e:	e1d4      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a51      	ldr	r2, [pc, #324]	; (800419c <UART_SetConfig+0x350>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d130      	bne.n	80040bc <UART_SetConfig+0x270>
 800405a:	4b4e      	ldr	r3, [pc, #312]	; (8004194 <UART_SetConfig+0x348>)
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	2b05      	cmp	r3, #5
 8004064:	d826      	bhi.n	80040b4 <UART_SetConfig+0x268>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0x220>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	08004085 	.word	0x08004085
 8004070:	0800408d 	.word	0x0800408d
 8004074:	08004095 	.word	0x08004095
 8004078:	0800409d 	.word	0x0800409d
 800407c:	080040a5 	.word	0x080040a5
 8004080:	080040ad 	.word	0x080040ad
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800408a:	e1b6      	b.n	80043fa <UART_SetConfig+0x5ae>
 800408c:	2304      	movs	r3, #4
 800408e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004092:	e1b2      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004094:	2308      	movs	r3, #8
 8004096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800409a:	e1ae      	b.n	80043fa <UART_SetConfig+0x5ae>
 800409c:	2310      	movs	r3, #16
 800409e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040a2:	e1aa      	b.n	80043fa <UART_SetConfig+0x5ae>
 80040a4:	2320      	movs	r3, #32
 80040a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040aa:	e1a6      	b.n	80043fa <UART_SetConfig+0x5ae>
 80040ac:	2340      	movs	r3, #64	; 0x40
 80040ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040b2:	e1a2      	b.n	80043fa <UART_SetConfig+0x5ae>
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ba:	e19e      	b.n	80043fa <UART_SetConfig+0x5ae>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a37      	ldr	r2, [pc, #220]	; (80041a0 <UART_SetConfig+0x354>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d130      	bne.n	8004128 <UART_SetConfig+0x2dc>
 80040c6:	4b33      	ldr	r3, [pc, #204]	; (8004194 <UART_SetConfig+0x348>)
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	2b05      	cmp	r3, #5
 80040d0:	d826      	bhi.n	8004120 <UART_SetConfig+0x2d4>
 80040d2:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <UART_SetConfig+0x28c>)
 80040d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d8:	080040f1 	.word	0x080040f1
 80040dc:	080040f9 	.word	0x080040f9
 80040e0:	08004101 	.word	0x08004101
 80040e4:	08004109 	.word	0x08004109
 80040e8:	08004111 	.word	0x08004111
 80040ec:	08004119 	.word	0x08004119
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040f6:	e180      	b.n	80043fa <UART_SetConfig+0x5ae>
 80040f8:	2304      	movs	r3, #4
 80040fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040fe:	e17c      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004100:	2308      	movs	r3, #8
 8004102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004106:	e178      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004108:	2310      	movs	r3, #16
 800410a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800410e:	e174      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004110:	2320      	movs	r3, #32
 8004112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004116:	e170      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004118:	2340      	movs	r3, #64	; 0x40
 800411a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800411e:	e16c      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004126:	e168      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <UART_SetConfig+0x358>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d142      	bne.n	80041b8 <UART_SetConfig+0x36c>
 8004132:	4b18      	ldr	r3, [pc, #96]	; (8004194 <UART_SetConfig+0x348>)
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	2b05      	cmp	r3, #5
 800413c:	d838      	bhi.n	80041b0 <UART_SetConfig+0x364>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <UART_SetConfig+0x2f8>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	0800415d 	.word	0x0800415d
 8004148:	08004165 	.word	0x08004165
 800414c:	0800416d 	.word	0x0800416d
 8004150:	08004175 	.word	0x08004175
 8004154:	0800417d 	.word	0x0800417d
 8004158:	080041a9 	.word	0x080041a9
 800415c:	2300      	movs	r3, #0
 800415e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004162:	e14a      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004164:	2304      	movs	r3, #4
 8004166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800416a:	e146      	b.n	80043fa <UART_SetConfig+0x5ae>
 800416c:	2308      	movs	r3, #8
 800416e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004172:	e142      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004174:	2310      	movs	r3, #16
 8004176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800417a:	e13e      	b.n	80043fa <UART_SetConfig+0x5ae>
 800417c:	2320      	movs	r3, #32
 800417e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004182:	e13a      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004184:	cfff69f3 	.word	0xcfff69f3
 8004188:	58000c00 	.word	0x58000c00
 800418c:	11fff4ff 	.word	0x11fff4ff
 8004190:	40011000 	.word	0x40011000
 8004194:	58024400 	.word	0x58024400
 8004198:	40004400 	.word	0x40004400
 800419c:	40004800 	.word	0x40004800
 80041a0:	40004c00 	.word	0x40004c00
 80041a4:	40005000 	.word	0x40005000
 80041a8:	2340      	movs	r3, #64	; 0x40
 80041aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ae:	e124      	b.n	80043fa <UART_SetConfig+0x5ae>
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041b6:	e120      	b.n	80043fa <UART_SetConfig+0x5ae>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4acc      	ldr	r2, [pc, #816]	; (80044f0 <UART_SetConfig+0x6a4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d176      	bne.n	80042b0 <UART_SetConfig+0x464>
 80041c2:	4bcc      	ldr	r3, [pc, #816]	; (80044f4 <UART_SetConfig+0x6a8>)
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041ca:	2b28      	cmp	r3, #40	; 0x28
 80041cc:	d86c      	bhi.n	80042a8 <UART_SetConfig+0x45c>
 80041ce:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <UART_SetConfig+0x388>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	08004279 	.word	0x08004279
 80041d8:	080042a9 	.word	0x080042a9
 80041dc:	080042a9 	.word	0x080042a9
 80041e0:	080042a9 	.word	0x080042a9
 80041e4:	080042a9 	.word	0x080042a9
 80041e8:	080042a9 	.word	0x080042a9
 80041ec:	080042a9 	.word	0x080042a9
 80041f0:	080042a9 	.word	0x080042a9
 80041f4:	08004281 	.word	0x08004281
 80041f8:	080042a9 	.word	0x080042a9
 80041fc:	080042a9 	.word	0x080042a9
 8004200:	080042a9 	.word	0x080042a9
 8004204:	080042a9 	.word	0x080042a9
 8004208:	080042a9 	.word	0x080042a9
 800420c:	080042a9 	.word	0x080042a9
 8004210:	080042a9 	.word	0x080042a9
 8004214:	08004289 	.word	0x08004289
 8004218:	080042a9 	.word	0x080042a9
 800421c:	080042a9 	.word	0x080042a9
 8004220:	080042a9 	.word	0x080042a9
 8004224:	080042a9 	.word	0x080042a9
 8004228:	080042a9 	.word	0x080042a9
 800422c:	080042a9 	.word	0x080042a9
 8004230:	080042a9 	.word	0x080042a9
 8004234:	08004291 	.word	0x08004291
 8004238:	080042a9 	.word	0x080042a9
 800423c:	080042a9 	.word	0x080042a9
 8004240:	080042a9 	.word	0x080042a9
 8004244:	080042a9 	.word	0x080042a9
 8004248:	080042a9 	.word	0x080042a9
 800424c:	080042a9 	.word	0x080042a9
 8004250:	080042a9 	.word	0x080042a9
 8004254:	08004299 	.word	0x08004299
 8004258:	080042a9 	.word	0x080042a9
 800425c:	080042a9 	.word	0x080042a9
 8004260:	080042a9 	.word	0x080042a9
 8004264:	080042a9 	.word	0x080042a9
 8004268:	080042a9 	.word	0x080042a9
 800426c:	080042a9 	.word	0x080042a9
 8004270:	080042a9 	.word	0x080042a9
 8004274:	080042a1 	.word	0x080042a1
 8004278:	2301      	movs	r3, #1
 800427a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800427e:	e0bc      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004280:	2304      	movs	r3, #4
 8004282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004286:	e0b8      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004288:	2308      	movs	r3, #8
 800428a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800428e:	e0b4      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004290:	2310      	movs	r3, #16
 8004292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004296:	e0b0      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004298:	2320      	movs	r3, #32
 800429a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800429e:	e0ac      	b.n	80043fa <UART_SetConfig+0x5ae>
 80042a0:	2340      	movs	r3, #64	; 0x40
 80042a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042a6:	e0a8      	b.n	80043fa <UART_SetConfig+0x5ae>
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ae:	e0a4      	b.n	80043fa <UART_SetConfig+0x5ae>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a90      	ldr	r2, [pc, #576]	; (80044f8 <UART_SetConfig+0x6ac>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d130      	bne.n	800431c <UART_SetConfig+0x4d0>
 80042ba:	4b8e      	ldr	r3, [pc, #568]	; (80044f4 <UART_SetConfig+0x6a8>)
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	2b05      	cmp	r3, #5
 80042c4:	d826      	bhi.n	8004314 <UART_SetConfig+0x4c8>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0x480>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042e5 	.word	0x080042e5
 80042d0:	080042ed 	.word	0x080042ed
 80042d4:	080042f5 	.word	0x080042f5
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	08004305 	.word	0x08004305
 80042e0:	0800430d 	.word	0x0800430d
 80042e4:	2300      	movs	r3, #0
 80042e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ea:	e086      	b.n	80043fa <UART_SetConfig+0x5ae>
 80042ec:	2304      	movs	r3, #4
 80042ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042f2:	e082      	b.n	80043fa <UART_SetConfig+0x5ae>
 80042f4:	2308      	movs	r3, #8
 80042f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042fa:	e07e      	b.n	80043fa <UART_SetConfig+0x5ae>
 80042fc:	2310      	movs	r3, #16
 80042fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004302:	e07a      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004304:	2320      	movs	r3, #32
 8004306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800430a:	e076      	b.n	80043fa <UART_SetConfig+0x5ae>
 800430c:	2340      	movs	r3, #64	; 0x40
 800430e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004312:	e072      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800431a:	e06e      	b.n	80043fa <UART_SetConfig+0x5ae>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a76      	ldr	r2, [pc, #472]	; (80044fc <UART_SetConfig+0x6b0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d130      	bne.n	8004388 <UART_SetConfig+0x53c>
 8004326:	4b73      	ldr	r3, [pc, #460]	; (80044f4 <UART_SetConfig+0x6a8>)
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	2b05      	cmp	r3, #5
 8004330:	d826      	bhi.n	8004380 <UART_SetConfig+0x534>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <UART_SetConfig+0x4ec>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	08004351 	.word	0x08004351
 800433c:	08004359 	.word	0x08004359
 8004340:	08004361 	.word	0x08004361
 8004344:	08004369 	.word	0x08004369
 8004348:	08004371 	.word	0x08004371
 800434c:	08004379 	.word	0x08004379
 8004350:	2300      	movs	r3, #0
 8004352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004356:	e050      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004358:	2304      	movs	r3, #4
 800435a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800435e:	e04c      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004360:	2308      	movs	r3, #8
 8004362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004366:	e048      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004368:	2310      	movs	r3, #16
 800436a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800436e:	e044      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004370:	2320      	movs	r3, #32
 8004372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004376:	e040      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004378:	2340      	movs	r3, #64	; 0x40
 800437a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800437e:	e03c      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004386:	e038      	b.n	80043fa <UART_SetConfig+0x5ae>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a5c      	ldr	r2, [pc, #368]	; (8004500 <UART_SetConfig+0x6b4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d130      	bne.n	80043f4 <UART_SetConfig+0x5a8>
 8004392:	4b58      	ldr	r3, [pc, #352]	; (80044f4 <UART_SetConfig+0x6a8>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	2b05      	cmp	r3, #5
 800439c:	d826      	bhi.n	80043ec <UART_SetConfig+0x5a0>
 800439e:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <UART_SetConfig+0x558>)
 80043a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a4:	080043bd 	.word	0x080043bd
 80043a8:	080043c5 	.word	0x080043c5
 80043ac:	080043cd 	.word	0x080043cd
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	2302      	movs	r3, #2
 80043be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043c2:	e01a      	b.n	80043fa <UART_SetConfig+0x5ae>
 80043c4:	2304      	movs	r3, #4
 80043c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ca:	e016      	b.n	80043fa <UART_SetConfig+0x5ae>
 80043cc:	2308      	movs	r3, #8
 80043ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043d2:	e012      	b.n	80043fa <UART_SetConfig+0x5ae>
 80043d4:	2310      	movs	r3, #16
 80043d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043da:	e00e      	b.n	80043fa <UART_SetConfig+0x5ae>
 80043dc:	2320      	movs	r3, #32
 80043de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043e2:	e00a      	b.n	80043fa <UART_SetConfig+0x5ae>
 80043e4:	2340      	movs	r3, #64	; 0x40
 80043e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ea:	e006      	b.n	80043fa <UART_SetConfig+0x5ae>
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043f2:	e002      	b.n	80043fa <UART_SetConfig+0x5ae>
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a40      	ldr	r2, [pc, #256]	; (8004500 <UART_SetConfig+0x6b4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	f040 80ef 	bne.w	80045e4 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004406:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800440a:	2b20      	cmp	r3, #32
 800440c:	dc46      	bgt.n	800449c <UART_SetConfig+0x650>
 800440e:	2b02      	cmp	r3, #2
 8004410:	f2c0 8081 	blt.w	8004516 <UART_SetConfig+0x6ca>
 8004414:	3b02      	subs	r3, #2
 8004416:	2b1e      	cmp	r3, #30
 8004418:	d87d      	bhi.n	8004516 <UART_SetConfig+0x6ca>
 800441a:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <UART_SetConfig+0x5d4>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	080044a3 	.word	0x080044a3
 8004424:	08004517 	.word	0x08004517
 8004428:	080044ab 	.word	0x080044ab
 800442c:	08004517 	.word	0x08004517
 8004430:	08004517 	.word	0x08004517
 8004434:	08004517 	.word	0x08004517
 8004438:	080044bb 	.word	0x080044bb
 800443c:	08004517 	.word	0x08004517
 8004440:	08004517 	.word	0x08004517
 8004444:	08004517 	.word	0x08004517
 8004448:	08004517 	.word	0x08004517
 800444c:	08004517 	.word	0x08004517
 8004450:	08004517 	.word	0x08004517
 8004454:	08004517 	.word	0x08004517
 8004458:	080044cb 	.word	0x080044cb
 800445c:	08004517 	.word	0x08004517
 8004460:	08004517 	.word	0x08004517
 8004464:	08004517 	.word	0x08004517
 8004468:	08004517 	.word	0x08004517
 800446c:	08004517 	.word	0x08004517
 8004470:	08004517 	.word	0x08004517
 8004474:	08004517 	.word	0x08004517
 8004478:	08004517 	.word	0x08004517
 800447c:	08004517 	.word	0x08004517
 8004480:	08004517 	.word	0x08004517
 8004484:	08004517 	.word	0x08004517
 8004488:	08004517 	.word	0x08004517
 800448c:	08004517 	.word	0x08004517
 8004490:	08004517 	.word	0x08004517
 8004494:	08004517 	.word	0x08004517
 8004498:	08004509 	.word	0x08004509
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d036      	beq.n	800450e <UART_SetConfig+0x6c2>
 80044a0:	e039      	b.n	8004516 <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80044a2:	f7fe ffcb 	bl	800343c <HAL_RCCEx_GetD3PCLK1Freq>
 80044a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80044a8:	e03b      	b.n	8004522 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044aa:	f107 0314 	add.w	r3, r7, #20
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe ffda 	bl	8003468 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044b8:	e033      	b.n	8004522 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff f926 	bl	8003710 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044c8:	e02b      	b.n	8004522 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044ca:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <UART_SetConfig+0x6a8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <UART_SetConfig+0x6a8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	08db      	lsrs	r3, r3, #3
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	4a08      	ldr	r2, [pc, #32]	; (8004504 <UART_SetConfig+0x6b8>)
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80044e8:	e01b      	b.n	8004522 <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <UART_SetConfig+0x6b8>)
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044ee:	e018      	b.n	8004522 <UART_SetConfig+0x6d6>
 80044f0:	40011400 	.word	0x40011400
 80044f4:	58024400 	.word	0x58024400
 80044f8:	40007800 	.word	0x40007800
 80044fc:	40007c00 	.word	0x40007c00
 8004500:	58000c00 	.word	0x58000c00
 8004504:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004508:	4bc4      	ldr	r3, [pc, #784]	; (800481c <UART_SetConfig+0x9d0>)
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800450c:	e009      	b.n	8004522 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004514:	e005      	b.n	8004522 <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004520:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 81da 	beq.w	80048de <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	4abc      	ldr	r2, [pc, #752]	; (8004820 <UART_SetConfig+0x9d4>)
 8004530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004534:	461a      	mov	r2, r3
 8004536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004538:	fbb3 f3f2 	udiv	r3, r3, r2
 800453c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4413      	add	r3, r2
 8004548:	6a3a      	ldr	r2, [r7, #32]
 800454a:	429a      	cmp	r2, r3
 800454c:	d305      	bcc.n	800455a <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004554:	6a3a      	ldr	r2, [r7, #32]
 8004556:	429a      	cmp	r2, r3
 8004558:	d903      	bls.n	8004562 <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004560:	e1bd      	b.n	80048de <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	4618      	mov	r0, r3
 8004566:	f04f 0100 	mov.w	r1, #0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	4aac      	ldr	r2, [pc, #688]	; (8004820 <UART_SetConfig+0x9d4>)
 8004570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004574:	b29a      	uxth	r2, r3
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	f7fb fead 	bl	80002d8 <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	020b      	lsls	r3, r1, #8
 8004590:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004594:	0202      	lsls	r2, r0, #8
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	6849      	ldr	r1, [r1, #4]
 800459a:	0849      	lsrs	r1, r1, #1
 800459c:	4608      	mov	r0, r1
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	1814      	adds	r4, r2, r0
 80045a4:	eb43 0501 	adc.w	r5, r3, r1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	461a      	mov	r2, r3
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	4620      	mov	r0, r4
 80045b4:	4629      	mov	r1, r5
 80045b6:	f7fb fe8f 	bl	80002d8 <__aeabi_uldivmod>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4613      	mov	r3, r2
 80045c0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c8:	d308      	bcc.n	80045dc <UART_SetConfig+0x790>
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d0:	d204      	bcs.n	80045dc <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	e180      	b.n	80048de <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80045e2:	e17c      	b.n	80048de <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ec:	f040 80bf 	bne.w	800476e <UART_SetConfig+0x922>
  {
    switch (clocksource)
 80045f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	dc49      	bgt.n	800468c <UART_SetConfig+0x840>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	db7c      	blt.n	80046f6 <UART_SetConfig+0x8aa>
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d87a      	bhi.n	80046f6 <UART_SetConfig+0x8aa>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <UART_SetConfig+0x7bc>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	08004693 	.word	0x08004693
 800460c:	0800469b 	.word	0x0800469b
 8004610:	080046f7 	.word	0x080046f7
 8004614:	080046f7 	.word	0x080046f7
 8004618:	080046a3 	.word	0x080046a3
 800461c:	080046f7 	.word	0x080046f7
 8004620:	080046f7 	.word	0x080046f7
 8004624:	080046f7 	.word	0x080046f7
 8004628:	080046b3 	.word	0x080046b3
 800462c:	080046f7 	.word	0x080046f7
 8004630:	080046f7 	.word	0x080046f7
 8004634:	080046f7 	.word	0x080046f7
 8004638:	080046f7 	.word	0x080046f7
 800463c:	080046f7 	.word	0x080046f7
 8004640:	080046f7 	.word	0x080046f7
 8004644:	080046f7 	.word	0x080046f7
 8004648:	080046c3 	.word	0x080046c3
 800464c:	080046f7 	.word	0x080046f7
 8004650:	080046f7 	.word	0x080046f7
 8004654:	080046f7 	.word	0x080046f7
 8004658:	080046f7 	.word	0x080046f7
 800465c:	080046f7 	.word	0x080046f7
 8004660:	080046f7 	.word	0x080046f7
 8004664:	080046f7 	.word	0x080046f7
 8004668:	080046f7 	.word	0x080046f7
 800466c:	080046f7 	.word	0x080046f7
 8004670:	080046f7 	.word	0x080046f7
 8004674:	080046f7 	.word	0x080046f7
 8004678:	080046f7 	.word	0x080046f7
 800467c:	080046f7 	.word	0x080046f7
 8004680:	080046f7 	.word	0x080046f7
 8004684:	080046f7 	.word	0x080046f7
 8004688:	080046e9 	.word	0x080046e9
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d02e      	beq.n	80046ee <UART_SetConfig+0x8a2>
 8004690:	e031      	b.n	80046f6 <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004692:	f7fd ff47 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8004696:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004698:	e033      	b.n	8004702 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800469a:	f7fd ff59 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 800469e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80046a0:	e02f      	b.n	8004702 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046a2:	f107 0314 	add.w	r3, r7, #20
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe fede 	bl	8003468 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046b0:	e027      	b.n	8004702 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046b2:	f107 0308 	add.w	r3, r7, #8
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff f82a 	bl	8003710 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046c0:	e01f      	b.n	8004702 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046c2:	4b58      	ldr	r3, [pc, #352]	; (8004824 <UART_SetConfig+0x9d8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80046ce:	4b55      	ldr	r3, [pc, #340]	; (8004824 <UART_SetConfig+0x9d8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	08db      	lsrs	r3, r3, #3
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	4a53      	ldr	r2, [pc, #332]	; (8004828 <UART_SetConfig+0x9dc>)
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046e0:	e00f      	b.n	8004702 <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 80046e2:	4b51      	ldr	r3, [pc, #324]	; (8004828 <UART_SetConfig+0x9dc>)
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046e6:	e00c      	b.n	8004702 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80046e8:	4b4c      	ldr	r3, [pc, #304]	; (800481c <UART_SetConfig+0x9d0>)
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046ec:	e009      	b.n	8004702 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046f4:	e005      	b.n	8004702 <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004700:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80ea 	beq.w	80048de <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	4a44      	ldr	r2, [pc, #272]	; (8004820 <UART_SetConfig+0x9d4>)
 8004710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004714:	461a      	mov	r2, r3
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	fbb3 f3f2 	udiv	r3, r3, r2
 800471c:	005a      	lsls	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	441a      	add	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	b29b      	uxth	r3, r3
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	2b0f      	cmp	r3, #15
 8004736:	d916      	bls.n	8004766 <UART_SetConfig+0x91a>
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473e:	d212      	bcs.n	8004766 <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	b29b      	uxth	r3, r3
 8004744:	f023 030f 	bic.w	r3, r3, #15
 8004748:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	b29b      	uxth	r3, r3
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	b29a      	uxth	r2, r3
 8004756:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004758:	4313      	orrs	r3, r2
 800475a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	e0bb      	b.n	80048de <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800476c:	e0b7      	b.n	80048de <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 800476e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004772:	2b20      	cmp	r3, #32
 8004774:	dc4a      	bgt.n	800480c <UART_SetConfig+0x9c0>
 8004776:	2b00      	cmp	r3, #0
 8004778:	f2c0 8086 	blt.w	8004888 <UART_SetConfig+0xa3c>
 800477c:	2b20      	cmp	r3, #32
 800477e:	f200 8083 	bhi.w	8004888 <UART_SetConfig+0xa3c>
 8004782:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <UART_SetConfig+0x93c>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	08004813 	.word	0x08004813
 800478c:	0800482d 	.word	0x0800482d
 8004790:	08004889 	.word	0x08004889
 8004794:	08004889 	.word	0x08004889
 8004798:	08004835 	.word	0x08004835
 800479c:	08004889 	.word	0x08004889
 80047a0:	08004889 	.word	0x08004889
 80047a4:	08004889 	.word	0x08004889
 80047a8:	08004845 	.word	0x08004845
 80047ac:	08004889 	.word	0x08004889
 80047b0:	08004889 	.word	0x08004889
 80047b4:	08004889 	.word	0x08004889
 80047b8:	08004889 	.word	0x08004889
 80047bc:	08004889 	.word	0x08004889
 80047c0:	08004889 	.word	0x08004889
 80047c4:	08004889 	.word	0x08004889
 80047c8:	08004855 	.word	0x08004855
 80047cc:	08004889 	.word	0x08004889
 80047d0:	08004889 	.word	0x08004889
 80047d4:	08004889 	.word	0x08004889
 80047d8:	08004889 	.word	0x08004889
 80047dc:	08004889 	.word	0x08004889
 80047e0:	08004889 	.word	0x08004889
 80047e4:	08004889 	.word	0x08004889
 80047e8:	08004889 	.word	0x08004889
 80047ec:	08004889 	.word	0x08004889
 80047f0:	08004889 	.word	0x08004889
 80047f4:	08004889 	.word	0x08004889
 80047f8:	08004889 	.word	0x08004889
 80047fc:	08004889 	.word	0x08004889
 8004800:	08004889 	.word	0x08004889
 8004804:	08004889 	.word	0x08004889
 8004808:	0800487b 	.word	0x0800487b
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d037      	beq.n	8004880 <UART_SetConfig+0xa34>
 8004810:	e03a      	b.n	8004888 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004812:	f7fd fe87 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8004816:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004818:	e03c      	b.n	8004894 <UART_SetConfig+0xa48>
 800481a:	bf00      	nop
 800481c:	003d0900 	.word	0x003d0900
 8004820:	08005880 	.word	0x08005880
 8004824:	58024400 	.word	0x58024400
 8004828:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800482c:	f7fd fe90 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8004830:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004832:	e02f      	b.n	8004894 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004834:	f107 0314 	add.w	r3, r7, #20
 8004838:	4618      	mov	r0, r3
 800483a:	f7fe fe15 	bl	8003468 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004842:	e027      	b.n	8004894 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004844:	f107 0308 	add.w	r3, r7, #8
 8004848:	4618      	mov	r0, r3
 800484a:	f7fe ff61 	bl	8003710 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004852:	e01f      	b.n	8004894 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004854:	4b2c      	ldr	r3, [pc, #176]	; (8004908 <UART_SetConfig+0xabc>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d009      	beq.n	8004874 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004860:	4b29      	ldr	r3, [pc, #164]	; (8004908 <UART_SetConfig+0xabc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	4a28      	ldr	r2, [pc, #160]	; (800490c <UART_SetConfig+0xac0>)
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004872:	e00f      	b.n	8004894 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8004874:	4b25      	ldr	r3, [pc, #148]	; (800490c <UART_SetConfig+0xac0>)
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004878:	e00c      	b.n	8004894 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800487a:	4b25      	ldr	r3, [pc, #148]	; (8004910 <UART_SetConfig+0xac4>)
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800487e:	e009      	b.n	8004894 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004886:	e005      	b.n	8004894 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004892:	bf00      	nop
    }

    if (pclk != 0U)
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d021      	beq.n	80048de <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <UART_SetConfig+0xac8>)
 80048a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	441a      	add	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	b29b      	uxth	r3, r3
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	2b0f      	cmp	r3, #15
 80048c4:	d908      	bls.n	80048d8 <UART_SetConfig+0xa8c>
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d204      	bcs.n	80048d8 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	e002      	b.n	80048de <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80048fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3738      	adds	r7, #56	; 0x38
 8004902:	46bd      	mov	sp, r7
 8004904:	bdb0      	pop	{r4, r5, r7, pc}
 8004906:	bf00      	nop
 8004908:	58024400 	.word	0x58024400
 800490c:	03d09000 	.word	0x03d09000
 8004910:	003d0900 	.word	0x003d0900
 8004914:	08005880 	.word	0x08005880

08004918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01a      	beq.n	8004a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a16:	d10a      	bne.n	8004a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	605a      	str	r2, [r3, #4]
  }
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a6c:	f7fc fa56 	bl	8000f1c <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d10e      	bne.n	8004a9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f82c 	bl	8004aec <UART_WaitOnFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e022      	b.n	8004ae4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d10e      	bne.n	8004aca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f816 	bl	8004aec <UART_WaitOnFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e00c      	b.n	8004ae4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afc:	e062      	b.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d05e      	beq.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b06:	f7fc fa09 	bl	8000f1c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d302      	bcc.n	8004b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d11d      	bne.n	8004b58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b2a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e045      	b.n	8004be4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02e      	beq.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b74:	d126      	bne.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b8e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e00f      	b.n	8004be4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69da      	ldr	r2, [r3, #28]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d08d      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e027      	b.n	8004c52 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2224      	movs	r2, #36	; 0x24
 8004c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e02d      	b.n	8004cd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2224      	movs	r2, #36	; 0x24
 8004c82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f850 	bl	8004d58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e02d      	b.n	8004d4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2224      	movs	r2, #36	; 0x24
 8004cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f812 	bl	8004d58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b089      	sub	sp, #36	; 0x24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004d60:	4a2f      	ldr	r2, [pc, #188]	; (8004e20 <UARTEx_SetNbDataToProcess+0xc8>)
 8004d62:	f107 0314 	add.w	r3, r7, #20
 8004d66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d6a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004d6e:	4a2d      	ldr	r2, [pc, #180]	; (8004e24 <UARTEx_SetNbDataToProcess+0xcc>)
 8004d70:	f107 030c 	add.w	r3, r7, #12
 8004d74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d78:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d108      	bne.n	8004d96 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d94:	e03d      	b.n	8004e12 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d96:	2310      	movs	r3, #16
 8004d98:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d9a:	2310      	movs	r3, #16
 8004d9c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	0e5b      	lsrs	r3, r3, #25
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	0f5b      	lsrs	r3, r3, #29
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004dbe:	7fbb      	ldrb	r3, [r7, #30]
 8004dc0:	7f3a      	ldrb	r2, [r7, #28]
 8004dc2:	f107 0120 	add.w	r1, r7, #32
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004dcc:	fb02 f303 	mul.w	r3, r2, r3
 8004dd0:	7f3a      	ldrb	r2, [r7, #28]
 8004dd2:	f107 0120 	add.w	r1, r7, #32
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004ddc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004de8:	7ffb      	ldrb	r3, [r7, #31]
 8004dea:	7f7a      	ldrb	r2, [r7, #29]
 8004dec:	f107 0120 	add.w	r1, r7, #32
 8004df0:	440a      	add	r2, r1
 8004df2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	7f7a      	ldrb	r2, [r7, #29]
 8004dfc:	f107 0120 	add.w	r1, r7, #32
 8004e00:	440a      	add	r2, r1
 8004e02:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004e06:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e12:	bf00      	nop
 8004e14:	3724      	adds	r7, #36	; 0x24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	08005860 	.word	0x08005860
 8004e24:	08005868 	.word	0x08005868

08004e28 <__errno>:
 8004e28:	4b01      	ldr	r3, [pc, #4]	; (8004e30 <__errno+0x8>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000010 	.word	0x20000010

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4d0d      	ldr	r5, [pc, #52]	; (8004e6c <__libc_init_array+0x38>)
 8004e38:	4c0d      	ldr	r4, [pc, #52]	; (8004e70 <__libc_init_array+0x3c>)
 8004e3a:	1b64      	subs	r4, r4, r5
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	2600      	movs	r6, #0
 8004e40:	42a6      	cmp	r6, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	4d0b      	ldr	r5, [pc, #44]	; (8004e74 <__libc_init_array+0x40>)
 8004e46:	4c0c      	ldr	r4, [pc, #48]	; (8004e78 <__libc_init_array+0x44>)
 8004e48:	f000 fce6 	bl	8005818 <_init>
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	2600      	movs	r6, #0
 8004e52:	42a6      	cmp	r6, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5c:	4798      	blx	r3
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e66:	4798      	blx	r3
 8004e68:	3601      	adds	r6, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	08005904 	.word	0x08005904
 8004e70:	08005904 	.word	0x08005904
 8004e74:	08005904 	.word	0x08005904
 8004e78:	08005908 	.word	0x08005908

08004e7c <memset>:
 8004e7c:	4402      	add	r2, r0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d100      	bne.n	8004e86 <memset+0xa>
 8004e84:	4770      	bx	lr
 8004e86:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8a:	e7f9      	b.n	8004e80 <memset+0x4>

08004e8c <_puts_r>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	460e      	mov	r6, r1
 8004e90:	4605      	mov	r5, r0
 8004e92:	b118      	cbz	r0, 8004e9c <_puts_r+0x10>
 8004e94:	6983      	ldr	r3, [r0, #24]
 8004e96:	b90b      	cbnz	r3, 8004e9c <_puts_r+0x10>
 8004e98:	f000 fa48 	bl	800532c <__sinit>
 8004e9c:	69ab      	ldr	r3, [r5, #24]
 8004e9e:	68ac      	ldr	r4, [r5, #8]
 8004ea0:	b913      	cbnz	r3, 8004ea8 <_puts_r+0x1c>
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 fa42 	bl	800532c <__sinit>
 8004ea8:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <_puts_r+0xd0>)
 8004eaa:	429c      	cmp	r4, r3
 8004eac:	d120      	bne.n	8004ef0 <_puts_r+0x64>
 8004eae:	686c      	ldr	r4, [r5, #4]
 8004eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eb2:	07db      	lsls	r3, r3, #31
 8004eb4:	d405      	bmi.n	8004ec2 <_puts_r+0x36>
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	0598      	lsls	r0, r3, #22
 8004eba:	d402      	bmi.n	8004ec2 <_puts_r+0x36>
 8004ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ebe:	f000 fad3 	bl	8005468 <__retarget_lock_acquire_recursive>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	0719      	lsls	r1, r3, #28
 8004ec6:	d51d      	bpl.n	8004f04 <_puts_r+0x78>
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	b1db      	cbz	r3, 8004f04 <_puts_r+0x78>
 8004ecc:	3e01      	subs	r6, #1
 8004ece:	68a3      	ldr	r3, [r4, #8]
 8004ed0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	60a3      	str	r3, [r4, #8]
 8004ed8:	bb39      	cbnz	r1, 8004f2a <_puts_r+0x9e>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da38      	bge.n	8004f50 <_puts_r+0xc4>
 8004ede:	4622      	mov	r2, r4
 8004ee0:	210a      	movs	r1, #10
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 f848 	bl	8004f78 <__swbuf_r>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d011      	beq.n	8004f10 <_puts_r+0x84>
 8004eec:	250a      	movs	r5, #10
 8004eee:	e011      	b.n	8004f14 <_puts_r+0x88>
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <_puts_r+0xd4>)
 8004ef2:	429c      	cmp	r4, r3
 8004ef4:	d101      	bne.n	8004efa <_puts_r+0x6e>
 8004ef6:	68ac      	ldr	r4, [r5, #8]
 8004ef8:	e7da      	b.n	8004eb0 <_puts_r+0x24>
 8004efa:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <_puts_r+0xd8>)
 8004efc:	429c      	cmp	r4, r3
 8004efe:	bf08      	it	eq
 8004f00:	68ec      	ldreq	r4, [r5, #12]
 8004f02:	e7d5      	b.n	8004eb0 <_puts_r+0x24>
 8004f04:	4621      	mov	r1, r4
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 f888 	bl	800501c <__swsetup_r>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d0dd      	beq.n	8004ecc <_puts_r+0x40>
 8004f10:	f04f 35ff 	mov.w	r5, #4294967295
 8004f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f16:	07da      	lsls	r2, r3, #31
 8004f18:	d405      	bmi.n	8004f26 <_puts_r+0x9a>
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	059b      	lsls	r3, r3, #22
 8004f1e:	d402      	bmi.n	8004f26 <_puts_r+0x9a>
 8004f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f22:	f000 faa2 	bl	800546a <__retarget_lock_release_recursive>
 8004f26:	4628      	mov	r0, r5
 8004f28:	bd70      	pop	{r4, r5, r6, pc}
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da04      	bge.n	8004f38 <_puts_r+0xac>
 8004f2e:	69a2      	ldr	r2, [r4, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	dc06      	bgt.n	8004f42 <_puts_r+0xb6>
 8004f34:	290a      	cmp	r1, #10
 8004f36:	d004      	beq.n	8004f42 <_puts_r+0xb6>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	6022      	str	r2, [r4, #0]
 8004f3e:	7019      	strb	r1, [r3, #0]
 8004f40:	e7c5      	b.n	8004ece <_puts_r+0x42>
 8004f42:	4622      	mov	r2, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	f000 f817 	bl	8004f78 <__swbuf_r>
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d1bf      	bne.n	8004ece <_puts_r+0x42>
 8004f4e:	e7df      	b.n	8004f10 <_puts_r+0x84>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	250a      	movs	r5, #10
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	6022      	str	r2, [r4, #0]
 8004f58:	701d      	strb	r5, [r3, #0]
 8004f5a:	e7db      	b.n	8004f14 <_puts_r+0x88>
 8004f5c:	080058bc 	.word	0x080058bc
 8004f60:	080058dc 	.word	0x080058dc
 8004f64:	0800589c 	.word	0x0800589c

08004f68 <puts>:
 8004f68:	4b02      	ldr	r3, [pc, #8]	; (8004f74 <puts+0xc>)
 8004f6a:	4601      	mov	r1, r0
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	f7ff bf8d 	b.w	8004e8c <_puts_r>
 8004f72:	bf00      	nop
 8004f74:	20000010 	.word	0x20000010

08004f78 <__swbuf_r>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	460e      	mov	r6, r1
 8004f7c:	4614      	mov	r4, r2
 8004f7e:	4605      	mov	r5, r0
 8004f80:	b118      	cbz	r0, 8004f8a <__swbuf_r+0x12>
 8004f82:	6983      	ldr	r3, [r0, #24]
 8004f84:	b90b      	cbnz	r3, 8004f8a <__swbuf_r+0x12>
 8004f86:	f000 f9d1 	bl	800532c <__sinit>
 8004f8a:	4b21      	ldr	r3, [pc, #132]	; (8005010 <__swbuf_r+0x98>)
 8004f8c:	429c      	cmp	r4, r3
 8004f8e:	d12b      	bne.n	8004fe8 <__swbuf_r+0x70>
 8004f90:	686c      	ldr	r4, [r5, #4]
 8004f92:	69a3      	ldr	r3, [r4, #24]
 8004f94:	60a3      	str	r3, [r4, #8]
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	071a      	lsls	r2, r3, #28
 8004f9a:	d52f      	bpl.n	8004ffc <__swbuf_r+0x84>
 8004f9c:	6923      	ldr	r3, [r4, #16]
 8004f9e:	b36b      	cbz	r3, 8004ffc <__swbuf_r+0x84>
 8004fa0:	6923      	ldr	r3, [r4, #16]
 8004fa2:	6820      	ldr	r0, [r4, #0]
 8004fa4:	1ac0      	subs	r0, r0, r3
 8004fa6:	6963      	ldr	r3, [r4, #20]
 8004fa8:	b2f6      	uxtb	r6, r6
 8004faa:	4283      	cmp	r3, r0
 8004fac:	4637      	mov	r7, r6
 8004fae:	dc04      	bgt.n	8004fba <__swbuf_r+0x42>
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f000 f926 	bl	8005204 <_fflush_r>
 8004fb8:	bb30      	cbnz	r0, 8005008 <__swbuf_r+0x90>
 8004fba:	68a3      	ldr	r3, [r4, #8]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	60a3      	str	r3, [r4, #8]
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	6022      	str	r2, [r4, #0]
 8004fc6:	701e      	strb	r6, [r3, #0]
 8004fc8:	6963      	ldr	r3, [r4, #20]
 8004fca:	3001      	adds	r0, #1
 8004fcc:	4283      	cmp	r3, r0
 8004fce:	d004      	beq.n	8004fda <__swbuf_r+0x62>
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	07db      	lsls	r3, r3, #31
 8004fd4:	d506      	bpl.n	8004fe4 <__swbuf_r+0x6c>
 8004fd6:	2e0a      	cmp	r6, #10
 8004fd8:	d104      	bne.n	8004fe4 <__swbuf_r+0x6c>
 8004fda:	4621      	mov	r1, r4
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f000 f911 	bl	8005204 <_fflush_r>
 8004fe2:	b988      	cbnz	r0, 8005008 <__swbuf_r+0x90>
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <__swbuf_r+0x9c>)
 8004fea:	429c      	cmp	r4, r3
 8004fec:	d101      	bne.n	8004ff2 <__swbuf_r+0x7a>
 8004fee:	68ac      	ldr	r4, [r5, #8]
 8004ff0:	e7cf      	b.n	8004f92 <__swbuf_r+0x1a>
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <__swbuf_r+0xa0>)
 8004ff4:	429c      	cmp	r4, r3
 8004ff6:	bf08      	it	eq
 8004ff8:	68ec      	ldreq	r4, [r5, #12]
 8004ffa:	e7ca      	b.n	8004f92 <__swbuf_r+0x1a>
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 f80c 	bl	800501c <__swsetup_r>
 8005004:	2800      	cmp	r0, #0
 8005006:	d0cb      	beq.n	8004fa0 <__swbuf_r+0x28>
 8005008:	f04f 37ff 	mov.w	r7, #4294967295
 800500c:	e7ea      	b.n	8004fe4 <__swbuf_r+0x6c>
 800500e:	bf00      	nop
 8005010:	080058bc 	.word	0x080058bc
 8005014:	080058dc 	.word	0x080058dc
 8005018:	0800589c 	.word	0x0800589c

0800501c <__swsetup_r>:
 800501c:	4b32      	ldr	r3, [pc, #200]	; (80050e8 <__swsetup_r+0xcc>)
 800501e:	b570      	push	{r4, r5, r6, lr}
 8005020:	681d      	ldr	r5, [r3, #0]
 8005022:	4606      	mov	r6, r0
 8005024:	460c      	mov	r4, r1
 8005026:	b125      	cbz	r5, 8005032 <__swsetup_r+0x16>
 8005028:	69ab      	ldr	r3, [r5, #24]
 800502a:	b913      	cbnz	r3, 8005032 <__swsetup_r+0x16>
 800502c:	4628      	mov	r0, r5
 800502e:	f000 f97d 	bl	800532c <__sinit>
 8005032:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <__swsetup_r+0xd0>)
 8005034:	429c      	cmp	r4, r3
 8005036:	d10f      	bne.n	8005058 <__swsetup_r+0x3c>
 8005038:	686c      	ldr	r4, [r5, #4]
 800503a:	89a3      	ldrh	r3, [r4, #12]
 800503c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005040:	0719      	lsls	r1, r3, #28
 8005042:	d42c      	bmi.n	800509e <__swsetup_r+0x82>
 8005044:	06dd      	lsls	r5, r3, #27
 8005046:	d411      	bmi.n	800506c <__swsetup_r+0x50>
 8005048:	2309      	movs	r3, #9
 800504a:	6033      	str	r3, [r6, #0]
 800504c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005050:	81a3      	strh	r3, [r4, #12]
 8005052:	f04f 30ff 	mov.w	r0, #4294967295
 8005056:	e03e      	b.n	80050d6 <__swsetup_r+0xba>
 8005058:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <__swsetup_r+0xd4>)
 800505a:	429c      	cmp	r4, r3
 800505c:	d101      	bne.n	8005062 <__swsetup_r+0x46>
 800505e:	68ac      	ldr	r4, [r5, #8]
 8005060:	e7eb      	b.n	800503a <__swsetup_r+0x1e>
 8005062:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <__swsetup_r+0xd8>)
 8005064:	429c      	cmp	r4, r3
 8005066:	bf08      	it	eq
 8005068:	68ec      	ldreq	r4, [r5, #12]
 800506a:	e7e6      	b.n	800503a <__swsetup_r+0x1e>
 800506c:	0758      	lsls	r0, r3, #29
 800506e:	d512      	bpl.n	8005096 <__swsetup_r+0x7a>
 8005070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005072:	b141      	cbz	r1, 8005086 <__swsetup_r+0x6a>
 8005074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005078:	4299      	cmp	r1, r3
 800507a:	d002      	beq.n	8005082 <__swsetup_r+0x66>
 800507c:	4630      	mov	r0, r6
 800507e:	f000 fa59 	bl	8005534 <_free_r>
 8005082:	2300      	movs	r3, #0
 8005084:	6363      	str	r3, [r4, #52]	; 0x34
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	2300      	movs	r3, #0
 8005090:	6063      	str	r3, [r4, #4]
 8005092:	6923      	ldr	r3, [r4, #16]
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	f043 0308 	orr.w	r3, r3, #8
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	b94b      	cbnz	r3, 80050b6 <__swsetup_r+0x9a>
 80050a2:	89a3      	ldrh	r3, [r4, #12]
 80050a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ac:	d003      	beq.n	80050b6 <__swsetup_r+0x9a>
 80050ae:	4621      	mov	r1, r4
 80050b0:	4630      	mov	r0, r6
 80050b2:	f000 f9ff 	bl	80054b4 <__smakebuf_r>
 80050b6:	89a0      	ldrh	r0, [r4, #12]
 80050b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050bc:	f010 0301 	ands.w	r3, r0, #1
 80050c0:	d00a      	beq.n	80050d8 <__swsetup_r+0xbc>
 80050c2:	2300      	movs	r3, #0
 80050c4:	60a3      	str	r3, [r4, #8]
 80050c6:	6963      	ldr	r3, [r4, #20]
 80050c8:	425b      	negs	r3, r3
 80050ca:	61a3      	str	r3, [r4, #24]
 80050cc:	6923      	ldr	r3, [r4, #16]
 80050ce:	b943      	cbnz	r3, 80050e2 <__swsetup_r+0xc6>
 80050d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050d4:	d1ba      	bne.n	800504c <__swsetup_r+0x30>
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	0781      	lsls	r1, r0, #30
 80050da:	bf58      	it	pl
 80050dc:	6963      	ldrpl	r3, [r4, #20]
 80050de:	60a3      	str	r3, [r4, #8]
 80050e0:	e7f4      	b.n	80050cc <__swsetup_r+0xb0>
 80050e2:	2000      	movs	r0, #0
 80050e4:	e7f7      	b.n	80050d6 <__swsetup_r+0xba>
 80050e6:	bf00      	nop
 80050e8:	20000010 	.word	0x20000010
 80050ec:	080058bc 	.word	0x080058bc
 80050f0:	080058dc 	.word	0x080058dc
 80050f4:	0800589c 	.word	0x0800589c

080050f8 <__sflush_r>:
 80050f8:	898a      	ldrh	r2, [r1, #12]
 80050fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fe:	4605      	mov	r5, r0
 8005100:	0710      	lsls	r0, r2, #28
 8005102:	460c      	mov	r4, r1
 8005104:	d458      	bmi.n	80051b8 <__sflush_r+0xc0>
 8005106:	684b      	ldr	r3, [r1, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	dc05      	bgt.n	8005118 <__sflush_r+0x20>
 800510c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	dc02      	bgt.n	8005118 <__sflush_r+0x20>
 8005112:	2000      	movs	r0, #0
 8005114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800511a:	2e00      	cmp	r6, #0
 800511c:	d0f9      	beq.n	8005112 <__sflush_r+0x1a>
 800511e:	2300      	movs	r3, #0
 8005120:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005124:	682f      	ldr	r7, [r5, #0]
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	d032      	beq.n	8005190 <__sflush_r+0x98>
 800512a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	075a      	lsls	r2, r3, #29
 8005130:	d505      	bpl.n	800513e <__sflush_r+0x46>
 8005132:	6863      	ldr	r3, [r4, #4]
 8005134:	1ac0      	subs	r0, r0, r3
 8005136:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005138:	b10b      	cbz	r3, 800513e <__sflush_r+0x46>
 800513a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800513c:	1ac0      	subs	r0, r0, r3
 800513e:	2300      	movs	r3, #0
 8005140:	4602      	mov	r2, r0
 8005142:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005144:	6a21      	ldr	r1, [r4, #32]
 8005146:	4628      	mov	r0, r5
 8005148:	47b0      	blx	r6
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	d106      	bne.n	800515e <__sflush_r+0x66>
 8005150:	6829      	ldr	r1, [r5, #0]
 8005152:	291d      	cmp	r1, #29
 8005154:	d82c      	bhi.n	80051b0 <__sflush_r+0xb8>
 8005156:	4a2a      	ldr	r2, [pc, #168]	; (8005200 <__sflush_r+0x108>)
 8005158:	40ca      	lsrs	r2, r1
 800515a:	07d6      	lsls	r6, r2, #31
 800515c:	d528      	bpl.n	80051b0 <__sflush_r+0xb8>
 800515e:	2200      	movs	r2, #0
 8005160:	6062      	str	r2, [r4, #4]
 8005162:	04d9      	lsls	r1, r3, #19
 8005164:	6922      	ldr	r2, [r4, #16]
 8005166:	6022      	str	r2, [r4, #0]
 8005168:	d504      	bpl.n	8005174 <__sflush_r+0x7c>
 800516a:	1c42      	adds	r2, r0, #1
 800516c:	d101      	bne.n	8005172 <__sflush_r+0x7a>
 800516e:	682b      	ldr	r3, [r5, #0]
 8005170:	b903      	cbnz	r3, 8005174 <__sflush_r+0x7c>
 8005172:	6560      	str	r0, [r4, #84]	; 0x54
 8005174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005176:	602f      	str	r7, [r5, #0]
 8005178:	2900      	cmp	r1, #0
 800517a:	d0ca      	beq.n	8005112 <__sflush_r+0x1a>
 800517c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005180:	4299      	cmp	r1, r3
 8005182:	d002      	beq.n	800518a <__sflush_r+0x92>
 8005184:	4628      	mov	r0, r5
 8005186:	f000 f9d5 	bl	8005534 <_free_r>
 800518a:	2000      	movs	r0, #0
 800518c:	6360      	str	r0, [r4, #52]	; 0x34
 800518e:	e7c1      	b.n	8005114 <__sflush_r+0x1c>
 8005190:	6a21      	ldr	r1, [r4, #32]
 8005192:	2301      	movs	r3, #1
 8005194:	4628      	mov	r0, r5
 8005196:	47b0      	blx	r6
 8005198:	1c41      	adds	r1, r0, #1
 800519a:	d1c7      	bne.n	800512c <__sflush_r+0x34>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0c4      	beq.n	800512c <__sflush_r+0x34>
 80051a2:	2b1d      	cmp	r3, #29
 80051a4:	d001      	beq.n	80051aa <__sflush_r+0xb2>
 80051a6:	2b16      	cmp	r3, #22
 80051a8:	d101      	bne.n	80051ae <__sflush_r+0xb6>
 80051aa:	602f      	str	r7, [r5, #0]
 80051ac:	e7b1      	b.n	8005112 <__sflush_r+0x1a>
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b4:	81a3      	strh	r3, [r4, #12]
 80051b6:	e7ad      	b.n	8005114 <__sflush_r+0x1c>
 80051b8:	690f      	ldr	r7, [r1, #16]
 80051ba:	2f00      	cmp	r7, #0
 80051bc:	d0a9      	beq.n	8005112 <__sflush_r+0x1a>
 80051be:	0793      	lsls	r3, r2, #30
 80051c0:	680e      	ldr	r6, [r1, #0]
 80051c2:	bf08      	it	eq
 80051c4:	694b      	ldreq	r3, [r1, #20]
 80051c6:	600f      	str	r7, [r1, #0]
 80051c8:	bf18      	it	ne
 80051ca:	2300      	movne	r3, #0
 80051cc:	eba6 0807 	sub.w	r8, r6, r7
 80051d0:	608b      	str	r3, [r1, #8]
 80051d2:	f1b8 0f00 	cmp.w	r8, #0
 80051d6:	dd9c      	ble.n	8005112 <__sflush_r+0x1a>
 80051d8:	6a21      	ldr	r1, [r4, #32]
 80051da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051dc:	4643      	mov	r3, r8
 80051de:	463a      	mov	r2, r7
 80051e0:	4628      	mov	r0, r5
 80051e2:	47b0      	blx	r6
 80051e4:	2800      	cmp	r0, #0
 80051e6:	dc06      	bgt.n	80051f6 <__sflush_r+0xfe>
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295
 80051f4:	e78e      	b.n	8005114 <__sflush_r+0x1c>
 80051f6:	4407      	add	r7, r0
 80051f8:	eba8 0800 	sub.w	r8, r8, r0
 80051fc:	e7e9      	b.n	80051d2 <__sflush_r+0xda>
 80051fe:	bf00      	nop
 8005200:	20400001 	.word	0x20400001

08005204 <_fflush_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	690b      	ldr	r3, [r1, #16]
 8005208:	4605      	mov	r5, r0
 800520a:	460c      	mov	r4, r1
 800520c:	b913      	cbnz	r3, 8005214 <_fflush_r+0x10>
 800520e:	2500      	movs	r5, #0
 8005210:	4628      	mov	r0, r5
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	b118      	cbz	r0, 800521e <_fflush_r+0x1a>
 8005216:	6983      	ldr	r3, [r0, #24]
 8005218:	b90b      	cbnz	r3, 800521e <_fflush_r+0x1a>
 800521a:	f000 f887 	bl	800532c <__sinit>
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <_fflush_r+0x6c>)
 8005220:	429c      	cmp	r4, r3
 8005222:	d11b      	bne.n	800525c <_fflush_r+0x58>
 8005224:	686c      	ldr	r4, [r5, #4]
 8005226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0ef      	beq.n	800520e <_fflush_r+0xa>
 800522e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005230:	07d0      	lsls	r0, r2, #31
 8005232:	d404      	bmi.n	800523e <_fflush_r+0x3a>
 8005234:	0599      	lsls	r1, r3, #22
 8005236:	d402      	bmi.n	800523e <_fflush_r+0x3a>
 8005238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800523a:	f000 f915 	bl	8005468 <__retarget_lock_acquire_recursive>
 800523e:	4628      	mov	r0, r5
 8005240:	4621      	mov	r1, r4
 8005242:	f7ff ff59 	bl	80050f8 <__sflush_r>
 8005246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005248:	07da      	lsls	r2, r3, #31
 800524a:	4605      	mov	r5, r0
 800524c:	d4e0      	bmi.n	8005210 <_fflush_r+0xc>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	059b      	lsls	r3, r3, #22
 8005252:	d4dd      	bmi.n	8005210 <_fflush_r+0xc>
 8005254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005256:	f000 f908 	bl	800546a <__retarget_lock_release_recursive>
 800525a:	e7d9      	b.n	8005210 <_fflush_r+0xc>
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <_fflush_r+0x70>)
 800525e:	429c      	cmp	r4, r3
 8005260:	d101      	bne.n	8005266 <_fflush_r+0x62>
 8005262:	68ac      	ldr	r4, [r5, #8]
 8005264:	e7df      	b.n	8005226 <_fflush_r+0x22>
 8005266:	4b04      	ldr	r3, [pc, #16]	; (8005278 <_fflush_r+0x74>)
 8005268:	429c      	cmp	r4, r3
 800526a:	bf08      	it	eq
 800526c:	68ec      	ldreq	r4, [r5, #12]
 800526e:	e7da      	b.n	8005226 <_fflush_r+0x22>
 8005270:	080058bc 	.word	0x080058bc
 8005274:	080058dc 	.word	0x080058dc
 8005278:	0800589c 	.word	0x0800589c

0800527c <std>:
 800527c:	2300      	movs	r3, #0
 800527e:	b510      	push	{r4, lr}
 8005280:	4604      	mov	r4, r0
 8005282:	e9c0 3300 	strd	r3, r3, [r0]
 8005286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800528a:	6083      	str	r3, [r0, #8]
 800528c:	8181      	strh	r1, [r0, #12]
 800528e:	6643      	str	r3, [r0, #100]	; 0x64
 8005290:	81c2      	strh	r2, [r0, #14]
 8005292:	6183      	str	r3, [r0, #24]
 8005294:	4619      	mov	r1, r3
 8005296:	2208      	movs	r2, #8
 8005298:	305c      	adds	r0, #92	; 0x5c
 800529a:	f7ff fdef 	bl	8004e7c <memset>
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <std+0x38>)
 80052a0:	6263      	str	r3, [r4, #36]	; 0x24
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <std+0x3c>)
 80052a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <std+0x40>)
 80052a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <std+0x44>)
 80052ac:	6224      	str	r4, [r4, #32]
 80052ae:	6323      	str	r3, [r4, #48]	; 0x30
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	bf00      	nop
 80052b4:	080056a9 	.word	0x080056a9
 80052b8:	080056cb 	.word	0x080056cb
 80052bc:	08005703 	.word	0x08005703
 80052c0:	08005727 	.word	0x08005727

080052c4 <_cleanup_r>:
 80052c4:	4901      	ldr	r1, [pc, #4]	; (80052cc <_cleanup_r+0x8>)
 80052c6:	f000 b8af 	b.w	8005428 <_fwalk_reent>
 80052ca:	bf00      	nop
 80052cc:	08005205 	.word	0x08005205

080052d0 <__sfmoreglue>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	1e4a      	subs	r2, r1, #1
 80052d4:	2568      	movs	r5, #104	; 0x68
 80052d6:	4355      	muls	r5, r2
 80052d8:	460e      	mov	r6, r1
 80052da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80052de:	f000 f979 	bl	80055d4 <_malloc_r>
 80052e2:	4604      	mov	r4, r0
 80052e4:	b140      	cbz	r0, 80052f8 <__sfmoreglue+0x28>
 80052e6:	2100      	movs	r1, #0
 80052e8:	e9c0 1600 	strd	r1, r6, [r0]
 80052ec:	300c      	adds	r0, #12
 80052ee:	60a0      	str	r0, [r4, #8]
 80052f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052f4:	f7ff fdc2 	bl	8004e7c <memset>
 80052f8:	4620      	mov	r0, r4
 80052fa:	bd70      	pop	{r4, r5, r6, pc}

080052fc <__sfp_lock_acquire>:
 80052fc:	4801      	ldr	r0, [pc, #4]	; (8005304 <__sfp_lock_acquire+0x8>)
 80052fe:	f000 b8b3 	b.w	8005468 <__retarget_lock_acquire_recursive>
 8005302:	bf00      	nop
 8005304:	20000134 	.word	0x20000134

08005308 <__sfp_lock_release>:
 8005308:	4801      	ldr	r0, [pc, #4]	; (8005310 <__sfp_lock_release+0x8>)
 800530a:	f000 b8ae 	b.w	800546a <__retarget_lock_release_recursive>
 800530e:	bf00      	nop
 8005310:	20000134 	.word	0x20000134

08005314 <__sinit_lock_acquire>:
 8005314:	4801      	ldr	r0, [pc, #4]	; (800531c <__sinit_lock_acquire+0x8>)
 8005316:	f000 b8a7 	b.w	8005468 <__retarget_lock_acquire_recursive>
 800531a:	bf00      	nop
 800531c:	2000012f 	.word	0x2000012f

08005320 <__sinit_lock_release>:
 8005320:	4801      	ldr	r0, [pc, #4]	; (8005328 <__sinit_lock_release+0x8>)
 8005322:	f000 b8a2 	b.w	800546a <__retarget_lock_release_recursive>
 8005326:	bf00      	nop
 8005328:	2000012f 	.word	0x2000012f

0800532c <__sinit>:
 800532c:	b510      	push	{r4, lr}
 800532e:	4604      	mov	r4, r0
 8005330:	f7ff fff0 	bl	8005314 <__sinit_lock_acquire>
 8005334:	69a3      	ldr	r3, [r4, #24]
 8005336:	b11b      	cbz	r3, 8005340 <__sinit+0x14>
 8005338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533c:	f7ff bff0 	b.w	8005320 <__sinit_lock_release>
 8005340:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005344:	6523      	str	r3, [r4, #80]	; 0x50
 8005346:	4b13      	ldr	r3, [pc, #76]	; (8005394 <__sinit+0x68>)
 8005348:	4a13      	ldr	r2, [pc, #76]	; (8005398 <__sinit+0x6c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	62a2      	str	r2, [r4, #40]	; 0x28
 800534e:	42a3      	cmp	r3, r4
 8005350:	bf04      	itt	eq
 8005352:	2301      	moveq	r3, #1
 8005354:	61a3      	streq	r3, [r4, #24]
 8005356:	4620      	mov	r0, r4
 8005358:	f000 f820 	bl	800539c <__sfp>
 800535c:	6060      	str	r0, [r4, #4]
 800535e:	4620      	mov	r0, r4
 8005360:	f000 f81c 	bl	800539c <__sfp>
 8005364:	60a0      	str	r0, [r4, #8]
 8005366:	4620      	mov	r0, r4
 8005368:	f000 f818 	bl	800539c <__sfp>
 800536c:	2200      	movs	r2, #0
 800536e:	60e0      	str	r0, [r4, #12]
 8005370:	2104      	movs	r1, #4
 8005372:	6860      	ldr	r0, [r4, #4]
 8005374:	f7ff ff82 	bl	800527c <std>
 8005378:	68a0      	ldr	r0, [r4, #8]
 800537a:	2201      	movs	r2, #1
 800537c:	2109      	movs	r1, #9
 800537e:	f7ff ff7d 	bl	800527c <std>
 8005382:	68e0      	ldr	r0, [r4, #12]
 8005384:	2202      	movs	r2, #2
 8005386:	2112      	movs	r1, #18
 8005388:	f7ff ff78 	bl	800527c <std>
 800538c:	2301      	movs	r3, #1
 800538e:	61a3      	str	r3, [r4, #24]
 8005390:	e7d2      	b.n	8005338 <__sinit+0xc>
 8005392:	bf00      	nop
 8005394:	08005898 	.word	0x08005898
 8005398:	080052c5 	.word	0x080052c5

0800539c <__sfp>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	4607      	mov	r7, r0
 80053a0:	f7ff ffac 	bl	80052fc <__sfp_lock_acquire>
 80053a4:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <__sfp+0x84>)
 80053a6:	681e      	ldr	r6, [r3, #0]
 80053a8:	69b3      	ldr	r3, [r6, #24]
 80053aa:	b913      	cbnz	r3, 80053b2 <__sfp+0x16>
 80053ac:	4630      	mov	r0, r6
 80053ae:	f7ff ffbd 	bl	800532c <__sinit>
 80053b2:	3648      	adds	r6, #72	; 0x48
 80053b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	d503      	bpl.n	80053c4 <__sfp+0x28>
 80053bc:	6833      	ldr	r3, [r6, #0]
 80053be:	b30b      	cbz	r3, 8005404 <__sfp+0x68>
 80053c0:	6836      	ldr	r6, [r6, #0]
 80053c2:	e7f7      	b.n	80053b4 <__sfp+0x18>
 80053c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80053c8:	b9d5      	cbnz	r5, 8005400 <__sfp+0x64>
 80053ca:	4b16      	ldr	r3, [pc, #88]	; (8005424 <__sfp+0x88>)
 80053cc:	60e3      	str	r3, [r4, #12]
 80053ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053d2:	6665      	str	r5, [r4, #100]	; 0x64
 80053d4:	f000 f847 	bl	8005466 <__retarget_lock_init_recursive>
 80053d8:	f7ff ff96 	bl	8005308 <__sfp_lock_release>
 80053dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80053e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80053e4:	6025      	str	r5, [r4, #0]
 80053e6:	61a5      	str	r5, [r4, #24]
 80053e8:	2208      	movs	r2, #8
 80053ea:	4629      	mov	r1, r5
 80053ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053f0:	f7ff fd44 	bl	8004e7c <memset>
 80053f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053fc:	4620      	mov	r0, r4
 80053fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005400:	3468      	adds	r4, #104	; 0x68
 8005402:	e7d9      	b.n	80053b8 <__sfp+0x1c>
 8005404:	2104      	movs	r1, #4
 8005406:	4638      	mov	r0, r7
 8005408:	f7ff ff62 	bl	80052d0 <__sfmoreglue>
 800540c:	4604      	mov	r4, r0
 800540e:	6030      	str	r0, [r6, #0]
 8005410:	2800      	cmp	r0, #0
 8005412:	d1d5      	bne.n	80053c0 <__sfp+0x24>
 8005414:	f7ff ff78 	bl	8005308 <__sfp_lock_release>
 8005418:	230c      	movs	r3, #12
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	e7ee      	b.n	80053fc <__sfp+0x60>
 800541e:	bf00      	nop
 8005420:	08005898 	.word	0x08005898
 8005424:	ffff0001 	.word	0xffff0001

08005428 <_fwalk_reent>:
 8005428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800542c:	4606      	mov	r6, r0
 800542e:	4688      	mov	r8, r1
 8005430:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005434:	2700      	movs	r7, #0
 8005436:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800543a:	f1b9 0901 	subs.w	r9, r9, #1
 800543e:	d505      	bpl.n	800544c <_fwalk_reent+0x24>
 8005440:	6824      	ldr	r4, [r4, #0]
 8005442:	2c00      	cmp	r4, #0
 8005444:	d1f7      	bne.n	8005436 <_fwalk_reent+0xe>
 8005446:	4638      	mov	r0, r7
 8005448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544c:	89ab      	ldrh	r3, [r5, #12]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d907      	bls.n	8005462 <_fwalk_reent+0x3a>
 8005452:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005456:	3301      	adds	r3, #1
 8005458:	d003      	beq.n	8005462 <_fwalk_reent+0x3a>
 800545a:	4629      	mov	r1, r5
 800545c:	4630      	mov	r0, r6
 800545e:	47c0      	blx	r8
 8005460:	4307      	orrs	r7, r0
 8005462:	3568      	adds	r5, #104	; 0x68
 8005464:	e7e9      	b.n	800543a <_fwalk_reent+0x12>

08005466 <__retarget_lock_init_recursive>:
 8005466:	4770      	bx	lr

08005468 <__retarget_lock_acquire_recursive>:
 8005468:	4770      	bx	lr

0800546a <__retarget_lock_release_recursive>:
 800546a:	4770      	bx	lr

0800546c <__swhatbuf_r>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	460e      	mov	r6, r1
 8005470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005474:	2900      	cmp	r1, #0
 8005476:	b096      	sub	sp, #88	; 0x58
 8005478:	4614      	mov	r4, r2
 800547a:	461d      	mov	r5, r3
 800547c:	da07      	bge.n	800548e <__swhatbuf_r+0x22>
 800547e:	2300      	movs	r3, #0
 8005480:	602b      	str	r3, [r5, #0]
 8005482:	89b3      	ldrh	r3, [r6, #12]
 8005484:	061a      	lsls	r2, r3, #24
 8005486:	d410      	bmi.n	80054aa <__swhatbuf_r+0x3e>
 8005488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800548c:	e00e      	b.n	80054ac <__swhatbuf_r+0x40>
 800548e:	466a      	mov	r2, sp
 8005490:	f000 f970 	bl	8005774 <_fstat_r>
 8005494:	2800      	cmp	r0, #0
 8005496:	dbf2      	blt.n	800547e <__swhatbuf_r+0x12>
 8005498:	9a01      	ldr	r2, [sp, #4]
 800549a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800549e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80054a2:	425a      	negs	r2, r3
 80054a4:	415a      	adcs	r2, r3
 80054a6:	602a      	str	r2, [r5, #0]
 80054a8:	e7ee      	b.n	8005488 <__swhatbuf_r+0x1c>
 80054aa:	2340      	movs	r3, #64	; 0x40
 80054ac:	2000      	movs	r0, #0
 80054ae:	6023      	str	r3, [r4, #0]
 80054b0:	b016      	add	sp, #88	; 0x58
 80054b2:	bd70      	pop	{r4, r5, r6, pc}

080054b4 <__smakebuf_r>:
 80054b4:	898b      	ldrh	r3, [r1, #12]
 80054b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054b8:	079d      	lsls	r5, r3, #30
 80054ba:	4606      	mov	r6, r0
 80054bc:	460c      	mov	r4, r1
 80054be:	d507      	bpl.n	80054d0 <__smakebuf_r+0x1c>
 80054c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	6123      	str	r3, [r4, #16]
 80054c8:	2301      	movs	r3, #1
 80054ca:	6163      	str	r3, [r4, #20]
 80054cc:	b002      	add	sp, #8
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	ab01      	add	r3, sp, #4
 80054d2:	466a      	mov	r2, sp
 80054d4:	f7ff ffca 	bl	800546c <__swhatbuf_r>
 80054d8:	9900      	ldr	r1, [sp, #0]
 80054da:	4605      	mov	r5, r0
 80054dc:	4630      	mov	r0, r6
 80054de:	f000 f879 	bl	80055d4 <_malloc_r>
 80054e2:	b948      	cbnz	r0, 80054f8 <__smakebuf_r+0x44>
 80054e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e8:	059a      	lsls	r2, r3, #22
 80054ea:	d4ef      	bmi.n	80054cc <__smakebuf_r+0x18>
 80054ec:	f023 0303 	bic.w	r3, r3, #3
 80054f0:	f043 0302 	orr.w	r3, r3, #2
 80054f4:	81a3      	strh	r3, [r4, #12]
 80054f6:	e7e3      	b.n	80054c0 <__smakebuf_r+0xc>
 80054f8:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <__smakebuf_r+0x7c>)
 80054fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	6020      	str	r0, [r4, #0]
 8005500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005504:	81a3      	strh	r3, [r4, #12]
 8005506:	9b00      	ldr	r3, [sp, #0]
 8005508:	6163      	str	r3, [r4, #20]
 800550a:	9b01      	ldr	r3, [sp, #4]
 800550c:	6120      	str	r0, [r4, #16]
 800550e:	b15b      	cbz	r3, 8005528 <__smakebuf_r+0x74>
 8005510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005514:	4630      	mov	r0, r6
 8005516:	f000 f93f 	bl	8005798 <_isatty_r>
 800551a:	b128      	cbz	r0, 8005528 <__smakebuf_r+0x74>
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	81a3      	strh	r3, [r4, #12]
 8005528:	89a0      	ldrh	r0, [r4, #12]
 800552a:	4305      	orrs	r5, r0
 800552c:	81a5      	strh	r5, [r4, #12]
 800552e:	e7cd      	b.n	80054cc <__smakebuf_r+0x18>
 8005530:	080052c5 	.word	0x080052c5

08005534 <_free_r>:
 8005534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005536:	2900      	cmp	r1, #0
 8005538:	d048      	beq.n	80055cc <_free_r+0x98>
 800553a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800553e:	9001      	str	r0, [sp, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	f1a1 0404 	sub.w	r4, r1, #4
 8005546:	bfb8      	it	lt
 8005548:	18e4      	addlt	r4, r4, r3
 800554a:	f000 f947 	bl	80057dc <__malloc_lock>
 800554e:	4a20      	ldr	r2, [pc, #128]	; (80055d0 <_free_r+0x9c>)
 8005550:	9801      	ldr	r0, [sp, #4]
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	4615      	mov	r5, r2
 8005556:	b933      	cbnz	r3, 8005566 <_free_r+0x32>
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	6014      	str	r4, [r2, #0]
 800555c:	b003      	add	sp, #12
 800555e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005562:	f000 b941 	b.w	80057e8 <__malloc_unlock>
 8005566:	42a3      	cmp	r3, r4
 8005568:	d90b      	bls.n	8005582 <_free_r+0x4e>
 800556a:	6821      	ldr	r1, [r4, #0]
 800556c:	1862      	adds	r2, r4, r1
 800556e:	4293      	cmp	r3, r2
 8005570:	bf04      	itt	eq
 8005572:	681a      	ldreq	r2, [r3, #0]
 8005574:	685b      	ldreq	r3, [r3, #4]
 8005576:	6063      	str	r3, [r4, #4]
 8005578:	bf04      	itt	eq
 800557a:	1852      	addeq	r2, r2, r1
 800557c:	6022      	streq	r2, [r4, #0]
 800557e:	602c      	str	r4, [r5, #0]
 8005580:	e7ec      	b.n	800555c <_free_r+0x28>
 8005582:	461a      	mov	r2, r3
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	b10b      	cbz	r3, 800558c <_free_r+0x58>
 8005588:	42a3      	cmp	r3, r4
 800558a:	d9fa      	bls.n	8005582 <_free_r+0x4e>
 800558c:	6811      	ldr	r1, [r2, #0]
 800558e:	1855      	adds	r5, r2, r1
 8005590:	42a5      	cmp	r5, r4
 8005592:	d10b      	bne.n	80055ac <_free_r+0x78>
 8005594:	6824      	ldr	r4, [r4, #0]
 8005596:	4421      	add	r1, r4
 8005598:	1854      	adds	r4, r2, r1
 800559a:	42a3      	cmp	r3, r4
 800559c:	6011      	str	r1, [r2, #0]
 800559e:	d1dd      	bne.n	800555c <_free_r+0x28>
 80055a0:	681c      	ldr	r4, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	6053      	str	r3, [r2, #4]
 80055a6:	4421      	add	r1, r4
 80055a8:	6011      	str	r1, [r2, #0]
 80055aa:	e7d7      	b.n	800555c <_free_r+0x28>
 80055ac:	d902      	bls.n	80055b4 <_free_r+0x80>
 80055ae:	230c      	movs	r3, #12
 80055b0:	6003      	str	r3, [r0, #0]
 80055b2:	e7d3      	b.n	800555c <_free_r+0x28>
 80055b4:	6825      	ldr	r5, [r4, #0]
 80055b6:	1961      	adds	r1, r4, r5
 80055b8:	428b      	cmp	r3, r1
 80055ba:	bf04      	itt	eq
 80055bc:	6819      	ldreq	r1, [r3, #0]
 80055be:	685b      	ldreq	r3, [r3, #4]
 80055c0:	6063      	str	r3, [r4, #4]
 80055c2:	bf04      	itt	eq
 80055c4:	1949      	addeq	r1, r1, r5
 80055c6:	6021      	streq	r1, [r4, #0]
 80055c8:	6054      	str	r4, [r2, #4]
 80055ca:	e7c7      	b.n	800555c <_free_r+0x28>
 80055cc:	b003      	add	sp, #12
 80055ce:	bd30      	pop	{r4, r5, pc}
 80055d0:	20000094 	.word	0x20000094

080055d4 <_malloc_r>:
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	1ccd      	adds	r5, r1, #3
 80055d8:	f025 0503 	bic.w	r5, r5, #3
 80055dc:	3508      	adds	r5, #8
 80055de:	2d0c      	cmp	r5, #12
 80055e0:	bf38      	it	cc
 80055e2:	250c      	movcc	r5, #12
 80055e4:	2d00      	cmp	r5, #0
 80055e6:	4606      	mov	r6, r0
 80055e8:	db01      	blt.n	80055ee <_malloc_r+0x1a>
 80055ea:	42a9      	cmp	r1, r5
 80055ec:	d903      	bls.n	80055f6 <_malloc_r+0x22>
 80055ee:	230c      	movs	r3, #12
 80055f0:	6033      	str	r3, [r6, #0]
 80055f2:	2000      	movs	r0, #0
 80055f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f6:	f000 f8f1 	bl	80057dc <__malloc_lock>
 80055fa:	4921      	ldr	r1, [pc, #132]	; (8005680 <_malloc_r+0xac>)
 80055fc:	680a      	ldr	r2, [r1, #0]
 80055fe:	4614      	mov	r4, r2
 8005600:	b99c      	cbnz	r4, 800562a <_malloc_r+0x56>
 8005602:	4f20      	ldr	r7, [pc, #128]	; (8005684 <_malloc_r+0xb0>)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	b923      	cbnz	r3, 8005612 <_malloc_r+0x3e>
 8005608:	4621      	mov	r1, r4
 800560a:	4630      	mov	r0, r6
 800560c:	f000 f83c 	bl	8005688 <_sbrk_r>
 8005610:	6038      	str	r0, [r7, #0]
 8005612:	4629      	mov	r1, r5
 8005614:	4630      	mov	r0, r6
 8005616:	f000 f837 	bl	8005688 <_sbrk_r>
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	d123      	bne.n	8005666 <_malloc_r+0x92>
 800561e:	230c      	movs	r3, #12
 8005620:	6033      	str	r3, [r6, #0]
 8005622:	4630      	mov	r0, r6
 8005624:	f000 f8e0 	bl	80057e8 <__malloc_unlock>
 8005628:	e7e3      	b.n	80055f2 <_malloc_r+0x1e>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	1b5b      	subs	r3, r3, r5
 800562e:	d417      	bmi.n	8005660 <_malloc_r+0x8c>
 8005630:	2b0b      	cmp	r3, #11
 8005632:	d903      	bls.n	800563c <_malloc_r+0x68>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	441c      	add	r4, r3
 8005638:	6025      	str	r5, [r4, #0]
 800563a:	e004      	b.n	8005646 <_malloc_r+0x72>
 800563c:	6863      	ldr	r3, [r4, #4]
 800563e:	42a2      	cmp	r2, r4
 8005640:	bf0c      	ite	eq
 8005642:	600b      	streq	r3, [r1, #0]
 8005644:	6053      	strne	r3, [r2, #4]
 8005646:	4630      	mov	r0, r6
 8005648:	f000 f8ce 	bl	80057e8 <__malloc_unlock>
 800564c:	f104 000b 	add.w	r0, r4, #11
 8005650:	1d23      	adds	r3, r4, #4
 8005652:	f020 0007 	bic.w	r0, r0, #7
 8005656:	1ac2      	subs	r2, r0, r3
 8005658:	d0cc      	beq.n	80055f4 <_malloc_r+0x20>
 800565a:	1a1b      	subs	r3, r3, r0
 800565c:	50a3      	str	r3, [r4, r2]
 800565e:	e7c9      	b.n	80055f4 <_malloc_r+0x20>
 8005660:	4622      	mov	r2, r4
 8005662:	6864      	ldr	r4, [r4, #4]
 8005664:	e7cc      	b.n	8005600 <_malloc_r+0x2c>
 8005666:	1cc4      	adds	r4, r0, #3
 8005668:	f024 0403 	bic.w	r4, r4, #3
 800566c:	42a0      	cmp	r0, r4
 800566e:	d0e3      	beq.n	8005638 <_malloc_r+0x64>
 8005670:	1a21      	subs	r1, r4, r0
 8005672:	4630      	mov	r0, r6
 8005674:	f000 f808 	bl	8005688 <_sbrk_r>
 8005678:	3001      	adds	r0, #1
 800567a:	d1dd      	bne.n	8005638 <_malloc_r+0x64>
 800567c:	e7cf      	b.n	800561e <_malloc_r+0x4a>
 800567e:	bf00      	nop
 8005680:	20000094 	.word	0x20000094
 8005684:	20000098 	.word	0x20000098

08005688 <_sbrk_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	4d06      	ldr	r5, [pc, #24]	; (80056a4 <_sbrk_r+0x1c>)
 800568c:	2300      	movs	r3, #0
 800568e:	4604      	mov	r4, r0
 8005690:	4608      	mov	r0, r1
 8005692:	602b      	str	r3, [r5, #0]
 8005694:	f7fb fb5c 	bl	8000d50 <_sbrk>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_sbrk_r+0x1a>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_sbrk_r+0x1a>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	20000138 	.word	0x20000138

080056a8 <__sread>:
 80056a8:	b510      	push	{r4, lr}
 80056aa:	460c      	mov	r4, r1
 80056ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b0:	f000 f8a0 	bl	80057f4 <_read_r>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	bfab      	itete	ge
 80056b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056ba:	89a3      	ldrhlt	r3, [r4, #12]
 80056bc:	181b      	addge	r3, r3, r0
 80056be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056c2:	bfac      	ite	ge
 80056c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80056c6:	81a3      	strhlt	r3, [r4, #12]
 80056c8:	bd10      	pop	{r4, pc}

080056ca <__swrite>:
 80056ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ce:	461f      	mov	r7, r3
 80056d0:	898b      	ldrh	r3, [r1, #12]
 80056d2:	05db      	lsls	r3, r3, #23
 80056d4:	4605      	mov	r5, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	4616      	mov	r6, r2
 80056da:	d505      	bpl.n	80056e8 <__swrite+0x1e>
 80056dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e0:	2302      	movs	r3, #2
 80056e2:	2200      	movs	r2, #0
 80056e4:	f000 f868 	bl	80057b8 <_lseek_r>
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056f2:	81a3      	strh	r3, [r4, #12]
 80056f4:	4632      	mov	r2, r6
 80056f6:	463b      	mov	r3, r7
 80056f8:	4628      	mov	r0, r5
 80056fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056fe:	f000 b817 	b.w	8005730 <_write_r>

08005702 <__sseek>:
 8005702:	b510      	push	{r4, lr}
 8005704:	460c      	mov	r4, r1
 8005706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570a:	f000 f855 	bl	80057b8 <_lseek_r>
 800570e:	1c43      	adds	r3, r0, #1
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	bf15      	itete	ne
 8005714:	6560      	strne	r0, [r4, #84]	; 0x54
 8005716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800571a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800571e:	81a3      	strheq	r3, [r4, #12]
 8005720:	bf18      	it	ne
 8005722:	81a3      	strhne	r3, [r4, #12]
 8005724:	bd10      	pop	{r4, pc}

08005726 <__sclose>:
 8005726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572a:	f000 b813 	b.w	8005754 <_close_r>
	...

08005730 <_write_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d07      	ldr	r5, [pc, #28]	; (8005750 <_write_r+0x20>)
 8005734:	4604      	mov	r4, r0
 8005736:	4608      	mov	r0, r1
 8005738:	4611      	mov	r1, r2
 800573a:	2200      	movs	r2, #0
 800573c:	602a      	str	r2, [r5, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	f7fb fab6 	bl	8000cb0 <_write>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_write_r+0x1e>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_write_r+0x1e>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	20000138 	.word	0x20000138

08005754 <_close_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4d06      	ldr	r5, [pc, #24]	; (8005770 <_close_r+0x1c>)
 8005758:	2300      	movs	r3, #0
 800575a:	4604      	mov	r4, r0
 800575c:	4608      	mov	r0, r1
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	f7fb fac2 	bl	8000ce8 <_close>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_close_r+0x1a>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	b103      	cbz	r3, 800576e <_close_r+0x1a>
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	20000138 	.word	0x20000138

08005774 <_fstat_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4d07      	ldr	r5, [pc, #28]	; (8005794 <_fstat_r+0x20>)
 8005778:	2300      	movs	r3, #0
 800577a:	4604      	mov	r4, r0
 800577c:	4608      	mov	r0, r1
 800577e:	4611      	mov	r1, r2
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	f7fb fabd 	bl	8000d00 <_fstat>
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	d102      	bne.n	8005790 <_fstat_r+0x1c>
 800578a:	682b      	ldr	r3, [r5, #0]
 800578c:	b103      	cbz	r3, 8005790 <_fstat_r+0x1c>
 800578e:	6023      	str	r3, [r4, #0]
 8005790:	bd38      	pop	{r3, r4, r5, pc}
 8005792:	bf00      	nop
 8005794:	20000138 	.word	0x20000138

08005798 <_isatty_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d06      	ldr	r5, [pc, #24]	; (80057b4 <_isatty_r+0x1c>)
 800579c:	2300      	movs	r3, #0
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	602b      	str	r3, [r5, #0]
 80057a4:	f7fb fabc 	bl	8000d20 <_isatty>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_isatty_r+0x1a>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_isatty_r+0x1a>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20000138 	.word	0x20000138

080057b8 <_lseek_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d07      	ldr	r5, [pc, #28]	; (80057d8 <_lseek_r+0x20>)
 80057bc:	4604      	mov	r4, r0
 80057be:	4608      	mov	r0, r1
 80057c0:	4611      	mov	r1, r2
 80057c2:	2200      	movs	r2, #0
 80057c4:	602a      	str	r2, [r5, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f7fb fab5 	bl	8000d36 <_lseek>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_lseek_r+0x1e>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_lseek_r+0x1e>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	20000138 	.word	0x20000138

080057dc <__malloc_lock>:
 80057dc:	4801      	ldr	r0, [pc, #4]	; (80057e4 <__malloc_lock+0x8>)
 80057de:	f7ff be43 	b.w	8005468 <__retarget_lock_acquire_recursive>
 80057e2:	bf00      	nop
 80057e4:	20000130 	.word	0x20000130

080057e8 <__malloc_unlock>:
 80057e8:	4801      	ldr	r0, [pc, #4]	; (80057f0 <__malloc_unlock+0x8>)
 80057ea:	f7ff be3e 	b.w	800546a <__retarget_lock_release_recursive>
 80057ee:	bf00      	nop
 80057f0:	20000130 	.word	0x20000130

080057f4 <_read_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4d07      	ldr	r5, [pc, #28]	; (8005814 <_read_r+0x20>)
 80057f8:	4604      	mov	r4, r0
 80057fa:	4608      	mov	r0, r1
 80057fc:	4611      	mov	r1, r2
 80057fe:	2200      	movs	r2, #0
 8005800:	602a      	str	r2, [r5, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	f7fb fa37 	bl	8000c76 <_read>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_read_r+0x1e>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	b103      	cbz	r3, 8005812 <_read_r+0x1e>
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	20000138 	.word	0x20000138

08005818 <_init>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	bf00      	nop
 800581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581e:	bc08      	pop	{r3}
 8005820:	469e      	mov	lr, r3
 8005822:	4770      	bx	lr

08005824 <_fini>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	bf00      	nop
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr
