
L152_W5500_DHCP_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002990  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002acc  08002acc  00012acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af0  08002af0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002af0  08002af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002af8  08002af8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af8  08002af8  00012af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000001c  08002b1c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002b1c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078af  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001593  00000000  00000000  000278f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000858  00000000  00000000  00028e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a0  00000000  00000000  000296e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012b37  00000000  00000000  00029e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000690e  00000000  00000000  0003c9b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073ebf  00000000  00000000  000432c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7184  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021c0  00000000  00000000  000b7200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000001c 	.word	0x2000001c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002ab4 	.word	0x08002ab4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000020 	.word	0x20000020
 8000178:	08002ab4 	.word	0x08002ab4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fa9f 	bl	80009c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f85c 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 f900 	bl	8000690 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000490:	f000 f89e 	bl	80005d0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000494:	f000 f8d2 	bl	800063c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  spi_enable;
 8000498:	2200      	movs	r2, #0
 800049a:	2104      	movs	r1, #4
 800049c:	480e      	ldr	r0, [pc, #56]	; (80004d8 <main+0x58>)
 800049e:	f000 fdef 	bl	8001080 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_IT(&hspi1, &send_data, 1);
 80004a2:	2201      	movs	r2, #1
 80004a4:	490d      	ldr	r1, [pc, #52]	; (80004dc <main+0x5c>)
 80004a6:	480e      	ldr	r0, [pc, #56]	; (80004e0 <main+0x60>)
 80004a8:	f001 fc30 	bl	8001d0c <HAL_SPI_Transmit_IT>
	  spi_disable;
 80004ac:	2201      	movs	r2, #1
 80004ae:	2104      	movs	r1, #4
 80004b0:	4809      	ldr	r0, [pc, #36]	; (80004d8 <main+0x58>)
 80004b2:	f000 fde5 	bl	8001080 <HAL_GPIO_WritePin>
	  send_data++;
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <main+0x5c>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	3301      	adds	r3, #1
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <main+0x5c>)
 80004c0:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)&UART1_TxBuffer, countof(UART1_TxBuffer)-1);
 80004c2:	220b      	movs	r2, #11
 80004c4:	4907      	ldr	r1, [pc, #28]	; (80004e4 <main+0x64>)
 80004c6:	4808      	ldr	r0, [pc, #32]	; (80004e8 <main+0x68>)
 80004c8:	f001 ff6d 	bl	80023a6 <HAL_UART_Transmit_IT>
	  HAL_Delay(1000);
 80004cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d0:	f000 fae8 	bl	8000aa4 <HAL_Delay>
	  spi_enable;
 80004d4:	e7e0      	b.n	8000498 <main+0x18>
 80004d6:	bf00      	nop
 80004d8:	40020c00 	.word	0x40020c00
 80004dc:	20000000 	.word	0x20000000
 80004e0:	20000038 	.word	0x20000038
 80004e4:	20000004 	.word	0x20000004
 80004e8:	20000090 	.word	0x20000090

080004ec <HAL_SPI_TxCpltCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi1.Instance)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <HAL_SPI_TxCpltCallback+0x24>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d103      	bne.n	8000508 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <HAL_SPI_TxCpltCallback+0x28>)
 8000504:	f000 fdd4 	bl	80010b0 <HAL_GPIO_TogglePin>
	}
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000038 	.word	0x20000038
 8000514:	40020400 	.word	0x40020400

08000518 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <HAL_UART_TxCpltCallback+0x24>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	429a      	cmp	r2, r3
 800052a:	d103      	bne.n	8000534 <HAL_UART_TxCpltCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 800052c:	2140      	movs	r1, #64	; 0x40
 800052e:	4804      	ldr	r0, [pc, #16]	; (8000540 <HAL_UART_TxCpltCallback+0x28>)
 8000530:	f000 fdbe 	bl	80010b0 <HAL_GPIO_TogglePin>
	}
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000090 	.word	0x20000090
 8000540:	40020400 	.word	0x40020400

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b092      	sub	sp, #72	; 0x48
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2234      	movs	r2, #52	; 0x34
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 faa6 	bl	8002aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000566:	4b19      	ldr	r3, [pc, #100]	; (80005cc <SystemClock_Config+0x88>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800056e:	4a17      	ldr	r2, [pc, #92]	; (80005cc <SystemClock_Config+0x88>)
 8000570:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000574:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000582:	2300      	movs	r3, #0
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fdaa 	bl	80010e4 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000596:	f000 f8db 	bl	8000750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059e:	2301      	movs	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f8c6 	bl	8001744 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005be:	f000 f8c7 	bl	8000750 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3748      	adds	r7, #72	; 0x48
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_SPI1_Init+0x64>)
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <MX_SPI1_Init+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <MX_SPI1_Init+0x64>)
 80005dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_SPI1_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_SPI1_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_SPI1_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_SPI1_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_SPI1_Init+0x64>)
 80005fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000600:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_SPI1_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_SPI1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_SPI1_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_SPI1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_SPI1_Init+0x64>)
 800061c:	220a      	movs	r2, #10
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_SPI1_Init+0x64>)
 8000622:	f001 faf7 	bl	8001c14 <HAL_SPI_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800062c:	f000 f890 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000038 	.word	0x20000038
 8000638:	40013000 	.word	0x40013000

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_USART2_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000674:	f001 fe4a 	bl	800230c <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f867 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000090 	.word	0x20000090
 800068c:	40004400 	.word	0x40004400

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b27      	ldr	r3, [pc, #156]	; (8000744 <MX_GPIO_Init+0xb4>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	4a26      	ldr	r2, [pc, #152]	; (8000744 <MX_GPIO_Init+0xb4>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	61d3      	str	r3, [r2, #28]
 80006b2:	4b24      	ldr	r3, [pc, #144]	; (8000744 <MX_GPIO_Init+0xb4>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_GPIO_Init+0xb4>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a20      	ldr	r2, [pc, #128]	; (8000744 <MX_GPIO_Init+0xb4>)
 80006c4:	f043 0308 	orr.w	r3, r3, #8
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_GPIO_Init+0xb4>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_GPIO_Init+0xb4>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a1a      	ldr	r2, [pc, #104]	; (8000744 <MX_GPIO_Init+0xb4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_GPIO_Init+0xb4>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2104      	movs	r1, #4
 80006f2:	4815      	ldr	r0, [pc, #84]	; (8000748 <MX_GPIO_Init+0xb8>)
 80006f4:	f000 fcc4 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	21c0      	movs	r1, #192	; 0xc0
 80006fc:	4813      	ldr	r0, [pc, #76]	; (800074c <MX_GPIO_Init+0xbc>)
 80006fe:	f000 fcbf 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000702:	2304      	movs	r3, #4
 8000704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4619      	mov	r1, r3
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <MX_GPIO_Init+0xb8>)
 800071a:	f000 fb33 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800071e:	23c0      	movs	r3, #192	; 0xc0
 8000720:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_GPIO_Init+0xbc>)
 8000736:	f000 fb25 	bl	8000d84 <HAL_GPIO_Init>

}
 800073a:	bf00      	nop
 800073c:	3720      	adds	r7, #32
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40020c00 	.word	0x40020c00
 800074c:	40020400 	.word	0x40020400

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <HAL_MspInit+0x58>)
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000766:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <HAL_MspInit+0x58>)
 8000768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800076c:	6253      	str	r3, [r2, #36]	; 0x24
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_MspInit+0x58>)
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_MspInit+0x58>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <HAL_MspInit+0x58>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6213      	str	r3, [r2, #32]
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <HAL_MspInit+0x58>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_MspInit+0x58>)
 8000794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_MspInit+0x58>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6253      	str	r3, [r2, #36]	; 0x24
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_MspInit+0x58>)
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <HAL_SPI_MspInit+0x8c>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d12f      	bne.n	800083a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <HAL_SPI_MspInit+0x90>)
 80007dc:	6a1b      	ldr	r3, [r3, #32]
 80007de:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <HAL_SPI_MspInit+0x90>)
 80007e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007e4:	6213      	str	r3, [r2, #32]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_SPI_MspInit+0x90>)
 80007e8:	6a1b      	ldr	r3, [r3, #32]
 80007ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_SPI_MspInit+0x90>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <HAL_SPI_MspInit+0x90>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_SPI_MspInit+0x90>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800080a:	2338      	movs	r3, #56	; 0x38
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000816:	2303      	movs	r3, #3
 8000818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800081a:	2305      	movs	r3, #5
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <HAL_SPI_MspInit+0x94>)
 8000826:	f000 faad 	bl	8000d84 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	2023      	movs	r0, #35	; 0x23
 8000830:	f000 fa31 	bl	8000c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000834:	2023      	movs	r0, #35	; 0x23
 8000836:	f000 fa4a 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40013000 	.word	0x40013000
 8000848:	40023800 	.word	0x40023800
 800084c:	40020400 	.word	0x40020400

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <HAL_UART_MspInit+0x8c>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d12f      	bne.n	80008d2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <HAL_UART_MspInit+0x90>)
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <HAL_UART_MspInit+0x90>)
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	6253      	str	r3, [r2, #36]	; 0x24
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_UART_MspInit+0x90>)
 8000880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_UART_MspInit+0x90>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <HAL_UART_MspInit+0x90>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_UART_MspInit+0x90>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008a2:	230c      	movs	r3, #12
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b2:	2307      	movs	r3, #7
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <HAL_UART_MspInit+0x94>)
 80008be:	f000 fa61 	bl	8000d84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2026      	movs	r0, #38	; 0x26
 80008c8:	f000 f9e5 	bl	8000c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008cc:	2026      	movs	r0, #38	; 0x26
 80008ce:	f000 f9fe 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40004400 	.word	0x40004400
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <HardFault_Handler+0x4>

080008fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <MemManage_Handler+0x4>

08000900 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <BusFault_Handler+0x4>

08000906 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <UsageFault_Handler+0x4>

0800090c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f89a 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <SPI1_IRQHandler+0x10>)
 8000942:	f001 fa6d 	bl	8001e20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000038 	.word	0x20000038

08000950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <USART2_IRQHandler+0x10>)
 8000956:	f001 fd6b 	bl	8002430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000090 	.word	0x20000090

08000964 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <SystemInit+0x14>)
 800096a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800096e:	609a      	str	r2, [r3, #8]
#endif
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800097c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800097e:	e003      	b.n	8000988 <LoopCopyDataInit>

08000980 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000982:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000984:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000986:	3104      	adds	r1, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000988:	480a      	ldr	r0, [pc, #40]	; (80009b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800098c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800098e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000990:	d3f6      	bcc.n	8000980 <CopyDataInit>
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000994:	e002      	b.n	800099c <LoopFillZerobss>

08000996 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000998:	f842 3b04 	str.w	r3, [r2], #4

0800099c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800099e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009a0:	d3f9      	bcc.n	8000996 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009a2:	f7ff ffdf 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a6:	f002 f859 	bl	8002a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009aa:	f7ff fd69 	bl	8000480 <main>
  bx lr
 80009ae:	4770      	bx	lr
  ldr r3, =_sidata
 80009b0:	08002b00 	.word	0x08002b00
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009b8:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 80009bc:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 80009c0:	200000d4 	.word	0x200000d4

080009c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_IRQHandler>

080009c6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f955 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 f80e 	bl	80009f8 <HAL_InitTick>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	e001      	b.n	80009ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e8:	f7ff feb8 	bl	800075c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_InitTick+0x68>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d022      	beq.n	8000a52 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_InitTick+0x6c>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <HAL_InitTick+0x68>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f962 	bl	8000cea <HAL_SYSTICK_Config>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d10f      	bne.n	8000a4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b0f      	cmp	r3, #15
 8000a30:	d809      	bhi.n	8000a46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a32:	2200      	movs	r2, #0
 8000a34:	6879      	ldr	r1, [r7, #4]
 8000a36:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3a:	f000 f92c 	bl	8000c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_InitTick+0x70>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	e007      	b.n	8000a56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	73fb      	strb	r3, [r7, #15]
 8000a4a:	e004      	b.n	8000a56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
 8000a50:	e001      	b.n	8000a56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000018 	.word	0x20000018
 8000a64:	20000010 	.word	0x20000010
 8000a68:	20000014 	.word	0x20000014

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_IncTick+0x1c>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_IncTick+0x20>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <HAL_IncTick+0x1c>)
 8000a7c:	6013      	str	r3, [r2, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200000d0 	.word	0x200000d0
 8000a8c:	20000018 	.word	0x20000018

08000a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b02      	ldr	r3, [pc, #8]	; (8000aa0 <HAL_GetTick+0x10>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	200000d0 	.word	0x200000d0

08000aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aac:	f7ff fff0 	bl	8000a90 <HAL_GetTick>
 8000ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000abc:	d004      	beq.n	8000ac8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_Delay+0x40>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ac8:	bf00      	nop
 8000aca:	f7ff ffe1 	bl	8000a90 <HAL_GetTick>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d8f7      	bhi.n	8000aca <HAL_Delay+0x26>
  {
  }
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000018 	.word	0x20000018

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 021f 	and.w	r2, r3, #31
 8000b64:	4906      	ldr	r1, [pc, #24]	; (8000b80 <__NVIC_EnableIRQ+0x34>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
         );
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	; 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff90 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff2d 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff42 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff90 	bl	8000bd8 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5f 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff35 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffa2 	bl	8000c3c <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d005      	beq.n	8000d26 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e029      	b.n	8000d7a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 020e 	bic.w	r2, r2, #14
 8000d34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0201 	bic.w	r2, r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 021c 	and.w	r2, r3, #28
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d52:	2101      	movs	r1, #1
 8000d54:	fa01 f202 	lsl.w	r2, r1, r2
 8000d58:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	4798      	blx	r3
    }
  }
  return status;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d9a:	e154      	b.n	8001046 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8146 	beq.w	8001040 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d00b      	beq.n	8000dd4 <HAL_GPIO_Init+0x50>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d007      	beq.n	8000dd4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc8:	2b11      	cmp	r3, #17
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b12      	cmp	r3, #18
 8000dd2:	d130      	bne.n	8000e36 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	f003 0201 	and.w	r2, r3, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0xf2>
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b12      	cmp	r3, #18
 8000e74:	d123      	bne.n	8000ebe <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e82:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0203 	and.w	r2, r3, #3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 80a0 	beq.w	8001040 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b57      	ldr	r3, [pc, #348]	; (8001060 <HAL_GPIO_Init+0x2dc>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a56      	ldr	r2, [pc, #344]	; (8001060 <HAL_GPIO_Init+0x2dc>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6213      	str	r3, [r2, #32]
 8000f0c:	4b54      	ldr	r3, [pc, #336]	; (8001060 <HAL_GPIO_Init+0x2dc>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f18:	4a52      	ldr	r2, [pc, #328]	; (8001064 <HAL_GPIO_Init+0x2e0>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a4a      	ldr	r2, [pc, #296]	; (8001068 <HAL_GPIO_Init+0x2e4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d019      	beq.n	8000f78 <HAL_GPIO_Init+0x1f4>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a49      	ldr	r2, [pc, #292]	; (800106c <HAL_GPIO_Init+0x2e8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d013      	beq.n	8000f74 <HAL_GPIO_Init+0x1f0>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a48      	ldr	r2, [pc, #288]	; (8001070 <HAL_GPIO_Init+0x2ec>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d00d      	beq.n	8000f70 <HAL_GPIO_Init+0x1ec>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a47      	ldr	r2, [pc, #284]	; (8001074 <HAL_GPIO_Init+0x2f0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d007      	beq.n	8000f6c <HAL_GPIO_Init+0x1e8>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a46      	ldr	r2, [pc, #280]	; (8001078 <HAL_GPIO_Init+0x2f4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d101      	bne.n	8000f68 <HAL_GPIO_Init+0x1e4>
 8000f64:	2304      	movs	r3, #4
 8000f66:	e008      	b.n	8000f7a <HAL_GPIO_Init+0x1f6>
 8000f68:	2305      	movs	r3, #5
 8000f6a:	e006      	b.n	8000f7a <HAL_GPIO_Init+0x1f6>
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e004      	b.n	8000f7a <HAL_GPIO_Init+0x1f6>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x1f6>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <HAL_GPIO_Init+0x1f6>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	f002 0203 	and.w	r2, r2, #3
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	4093      	lsls	r3, r2
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f8a:	4936      	ldr	r1, [pc, #216]	; (8001064 <HAL_GPIO_Init+0x2e0>)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f98:	4b38      	ldr	r3, [pc, #224]	; (800107c <HAL_GPIO_Init+0x2f8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fbc:	4a2f      	ldr	r2, [pc, #188]	; (800107c <HAL_GPIO_Init+0x2f8>)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	; (800107c <HAL_GPIO_Init+0x2f8>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fe6:	4a25      	ldr	r2, [pc, #148]	; (800107c <HAL_GPIO_Init+0x2f8>)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_GPIO_Init+0x2f8>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001010:	4a1a      	ldr	r2, [pc, #104]	; (800107c <HAL_GPIO_Init+0x2f8>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_GPIO_Init+0x2f8>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_GPIO_Init+0x2f8>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	f47f aea3 	bne.w	8000d9c <HAL_GPIO_Init+0x18>
  }
}
 8001056:	bf00      	nop
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40023800 	.word	0x40023800
 8001064:	40010000 	.word	0x40010000
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4013      	ands	r3, r2
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43d9      	mvns	r1, r3
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	400b      	ands	r3, r1
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
	...

080010e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e31d      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f6:	4b94      	ldr	r3, [pc, #592]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001100:	4b91      	ldr	r3, [pc, #580]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001108:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d07b      	beq.n	800120e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2b08      	cmp	r3, #8
 800111a:	d006      	beq.n	800112a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2b0c      	cmp	r3, #12
 8001120:	d10f      	bne.n	8001142 <HAL_RCC_OscConfig+0x5e>
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001128:	d10b      	bne.n	8001142 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112a:	4b87      	ldr	r3, [pc, #540]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d06a      	beq.n	800120c <HAL_RCC_OscConfig+0x128>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d166      	bne.n	800120c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e2f7      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d106      	bne.n	8001158 <HAL_RCC_OscConfig+0x74>
 800114a:	4b7f      	ldr	r3, [pc, #508]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a7e      	ldr	r2, [pc, #504]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e02d      	b.n	80011b4 <HAL_RCC_OscConfig+0xd0>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10c      	bne.n	800117a <HAL_RCC_OscConfig+0x96>
 8001160:	4b79      	ldr	r3, [pc, #484]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a78      	ldr	r2, [pc, #480]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b76      	ldr	r3, [pc, #472]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a75      	ldr	r2, [pc, #468]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	e01c      	b.n	80011b4 <HAL_RCC_OscConfig+0xd0>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b05      	cmp	r3, #5
 8001180:	d10c      	bne.n	800119c <HAL_RCC_OscConfig+0xb8>
 8001182:	4b71      	ldr	r3, [pc, #452]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a70      	ldr	r2, [pc, #448]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b6e      	ldr	r3, [pc, #440]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a6d      	ldr	r2, [pc, #436]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e00b      	b.n	80011b4 <HAL_RCC_OscConfig+0xd0>
 800119c:	4b6a      	ldr	r3, [pc, #424]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a69      	ldr	r2, [pc, #420]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b67      	ldr	r3, [pc, #412]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a66      	ldr	r2, [pc, #408]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d013      	beq.n	80011e4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc68 	bl	8000a90 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fc64 	bl	8000a90 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e2ad      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011d6:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0xe0>
 80011e2:	e014      	b.n	800120e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc54 	bl	8000a90 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fc50 	bl	8000a90 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e299      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011fe:	4b52      	ldr	r3, [pc, #328]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x108>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d05a      	beq.n	80012d0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	2b04      	cmp	r3, #4
 800121e:	d005      	beq.n	800122c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2b0c      	cmp	r3, #12
 8001224:	d119      	bne.n	800125a <HAL_RCC_OscConfig+0x176>
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d116      	bne.n	800125a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122c:	4b46      	ldr	r3, [pc, #280]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_OscConfig+0x160>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d001      	beq.n	8001244 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e276      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001244:	4b40      	ldr	r3, [pc, #256]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	493d      	ldr	r1, [pc, #244]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001258:	e03a      	b.n	80012d0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d020      	beq.n	80012a4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <HAL_RCC_OscConfig+0x268>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fc12 	bl	8000a90 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001270:	f7ff fc0e 	bl	8000a90 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e257      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	492a      	ldr	r1, [pc, #168]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
 80012a2:	e015      	b.n	80012d0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <HAL_RCC_OscConfig+0x268>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fbf1 	bl	8000a90 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fbed 	bl	8000a90 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e236      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80b8 	beq.w	800144e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d170      	bne.n	80013c6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_OscConfig+0x218>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e21a      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1a      	ldr	r2, [r3, #32]
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001308:	429a      	cmp	r2, r3
 800130a:	d921      	bls.n	8001350 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fc1f 	bl	8001b54 <RCC_SetFlashLatencyFromMSIRange>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e208      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4906      	ldr	r1, [pc, #24]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	061b      	lsls	r3, r3, #24
 8001340:	4901      	ldr	r1, [pc, #4]	; (8001348 <HAL_RCC_OscConfig+0x264>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
 8001346:	e020      	b.n	800138a <HAL_RCC_OscConfig+0x2a6>
 8001348:	40023800 	.word	0x40023800
 800134c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001350:	4ba4      	ldr	r3, [pc, #656]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	49a1      	ldr	r1, [pc, #644]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001362:	4ba0      	ldr	r3, [pc, #640]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	061b      	lsls	r3, r3, #24
 8001370:	499c      	ldr	r1, [pc, #624]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fbea 	bl	8001b54 <RCC_SetFlashLatencyFromMSIRange>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1d3      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	0b5b      	lsrs	r3, r3, #13
 8001390:	3301      	adds	r3, #1
 8001392:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800139a:	4a92      	ldr	r2, [pc, #584]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 800139c:	6892      	ldr	r2, [r2, #8]
 800139e:	0912      	lsrs	r2, r2, #4
 80013a0:	f002 020f 	and.w	r2, r2, #15
 80013a4:	4990      	ldr	r1, [pc, #576]	; (80015e8 <HAL_RCC_OscConfig+0x504>)
 80013a6:	5c8a      	ldrb	r2, [r1, r2]
 80013a8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013aa:	4a90      	ldr	r2, [pc, #576]	; (80015ec <HAL_RCC_OscConfig+0x508>)
 80013ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013ae:	4b90      	ldr	r3, [pc, #576]	; (80015f0 <HAL_RCC_OscConfig+0x50c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fb20 	bl	80009f8 <HAL_InitTick>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d045      	beq.n	800144e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	e1b5      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d029      	beq.n	8001422 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013ce:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <HAL_RCC_OscConfig+0x510>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb5c 	bl	8000a90 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013dc:	f7ff fb58 	bl	8000a90 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1a1      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ee:	4b7d      	ldr	r3, [pc, #500]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013fa:	4b7a      	ldr	r3, [pc, #488]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4977      	ldr	r1, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140c:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	061b      	lsls	r3, r3, #24
 800141a:	4972      	ldr	r1, [pc, #456]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
 8001420:	e015      	b.n	800144e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001422:	4b74      	ldr	r3, [pc, #464]	; (80015f4 <HAL_RCC_OscConfig+0x510>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb32 	bl	8000a90 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001430:	f7ff fb2e 	bl	8000a90 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e177      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001442:	4b68      	ldr	r3, [pc, #416]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d030      	beq.n	80014bc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d016      	beq.n	8001490 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001462:	4b65      	ldr	r3, [pc, #404]	; (80015f8 <HAL_RCC_OscConfig+0x514>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001468:	f7ff fb12 	bl	8000a90 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff fb0e 	bl	8000a90 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e157      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001482:	4b58      	ldr	r3, [pc, #352]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x38c>
 800148e:	e015      	b.n	80014bc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001490:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <HAL_RCC_OscConfig+0x514>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001496:	f7ff fafb 	bl	8000a90 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149e:	f7ff faf7 	bl	8000a90 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e140      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014b0:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 80014b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f0      	bne.n	800149e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80b5 	beq.w	8001634 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ce:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10d      	bne.n	80014f6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	4a41      	ldr	r2, [pc, #260]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6253      	str	r3, [r2, #36]	; 0x24
 80014e6:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f2:	2301      	movs	r3, #1
 80014f4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b41      	ldr	r3, [pc, #260]	; (80015fc <HAL_RCC_OscConfig+0x518>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d118      	bne.n	8001534 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001502:	4b3e      	ldr	r3, [pc, #248]	; (80015fc <HAL_RCC_OscConfig+0x518>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a3d      	ldr	r2, [pc, #244]	; (80015fc <HAL_RCC_OscConfig+0x518>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150e:	f7ff fabf 	bl	8000a90 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001516:	f7ff fabb 	bl	8000a90 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b64      	cmp	r3, #100	; 0x64
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e104      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <HAL_RCC_OscConfig+0x518>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x466>
 800153c:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 800153e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001540:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001546:	6353      	str	r3, [r2, #52]	; 0x34
 8001548:	e02d      	b.n	80015a6 <HAL_RCC_OscConfig+0x4c2>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x488>
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001556:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800155c:	6353      	str	r3, [r2, #52]	; 0x34
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	4a20      	ldr	r2, [pc, #128]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001568:	6353      	str	r3, [r2, #52]	; 0x34
 800156a:	e01c      	b.n	80015a6 <HAL_RCC_OscConfig+0x4c2>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b05      	cmp	r3, #5
 8001572:	d10c      	bne.n	800158e <HAL_RCC_OscConfig+0x4aa>
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001578:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 800157a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157e:	6353      	str	r3, [r2, #52]	; 0x34
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158a:	6353      	str	r3, [r2, #52]	; 0x34
 800158c:	e00b      	b.n	80015a6 <HAL_RCC_OscConfig+0x4c2>
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001592:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 8001594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001598:	6353      	str	r3, [r2, #52]	; 0x34
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 80015a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015a4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d015      	beq.n	80015da <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fa6f 	bl	8000a90 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff fa6b 	bl	8000a90 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0b2      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_RCC_OscConfig+0x500>)
 80015ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0ee      	beq.n	80015b6 <HAL_RCC_OscConfig+0x4d2>
 80015d8:	e023      	b.n	8001622 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff fa59 	bl	8000a90 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015e0:	e019      	b.n	8001616 <HAL_RCC_OscConfig+0x532>
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	08002ad8 	.word	0x08002ad8
 80015ec:	20000010 	.word	0x20000010
 80015f0:	20000014 	.word	0x20000014
 80015f4:	42470020 	.word	0x42470020
 80015f8:	42470680 	.word	0x42470680
 80015fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	f7ff fa46 	bl	8000a90 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e08d      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <HAL_RCC_OscConfig+0x658>)
 8001618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ee      	bne.n	8001600 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d105      	bne.n	8001634 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001628:	4b44      	ldr	r3, [pc, #272]	; (800173c <HAL_RCC_OscConfig+0x658>)
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	4a43      	ldr	r2, [pc, #268]	; (800173c <HAL_RCC_OscConfig+0x658>)
 800162e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001632:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	2b00      	cmp	r3, #0
 800163a:	d079      	beq.n	8001730 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b0c      	cmp	r3, #12
 8001640:	d056      	beq.n	80016f0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	2b02      	cmp	r3, #2
 8001648:	d13b      	bne.n	80016c2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <HAL_RCC_OscConfig+0x65c>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fa1e 	bl	8000a90 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff fa1a 	bl	8000a90 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e063      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <HAL_RCC_OscConfig+0x658>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_RCC_OscConfig+0x658>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	4319      	orrs	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	430b      	orrs	r3, r1
 800168e:	492b      	ldr	r1, [pc, #172]	; (800173c <HAL_RCC_OscConfig+0x658>)
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_RCC_OscConfig+0x65c>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff f9f9 	bl	8000a90 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff f9f5 	bl	8000a90 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e03e      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <HAL_RCC_OscConfig+0x658>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x5be>
 80016c0:	e036      	b.n	8001730 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <HAL_RCC_OscConfig+0x65c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff f9e2 	bl	8000a90 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff f9de 	bl	8000a90 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e027      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_RCC_OscConfig+0x658>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5ec>
 80016ee:	e01f      	b.n	8001730 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e01a      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_RCC_OscConfig+0x658>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	429a      	cmp	r2, r3
 800170e:	d10d      	bne.n	800172c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d106      	bne.n	800172c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	42470060 	.word	0x42470060

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e11a      	b.n	800198e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b8f      	ldr	r3, [pc, #572]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d919      	bls.n	800179a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <HAL_RCC_ClockConfig+0x34>
 800176c:	4b8a      	ldr	r3, [pc, #552]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a89      	ldr	r2, [pc, #548]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b87      	ldr	r3, [pc, #540]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 0201 	bic.w	r2, r3, #1
 8001780:	4985      	ldr	r1, [pc, #532]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001788:	4b83      	ldr	r3, [pc, #524]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d001      	beq.n	800179a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0f9      	b.n	800198e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d008      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a6:	4b7d      	ldr	r3, [pc, #500]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	497a      	ldr	r1, [pc, #488]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 808e 	beq.w	80018e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017ce:	4b73      	ldr	r3, [pc, #460]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d121      	bne.n	800181e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0d7      	b.n	800198e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017e6:	4b6d      	ldr	r3, [pc, #436]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d115      	bne.n	800181e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0cb      	b.n	800198e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017fe:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e0bf      	b.n	800198e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800180e:	4b63      	ldr	r3, [pc, #396]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e0b7      	b.n	800198e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b5f      	ldr	r3, [pc, #380]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	495c      	ldr	r1, [pc, #368]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff f92e 	bl	8000a90 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d112      	bne.n	8001864 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800183e:	e00a      	b.n	8001856 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001840:	f7ff f926 	bl	8000a90 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	; 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e09b      	b.n	800198e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001856:	4b51      	ldr	r3, [pc, #324]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b08      	cmp	r3, #8
 8001860:	d1ee      	bne.n	8001840 <HAL_RCC_ClockConfig+0xfc>
 8001862:	e03e      	b.n	80018e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d112      	bne.n	8001892 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186e:	f7ff f90f 	bl	8000a90 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e084      	b.n	800198e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001884:	4b45      	ldr	r3, [pc, #276]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d1ee      	bne.n	800186e <HAL_RCC_ClockConfig+0x12a>
 8001890:	e027      	b.n	80018e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d11d      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7ff f8f8 	bl	8000a90 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e06d      	b.n	800198e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b2:	4b3a      	ldr	r3, [pc, #232]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d1ee      	bne.n	800189c <HAL_RCC_ClockConfig+0x158>
 80018be:	e010      	b.n	80018e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c0:	f7ff f8e6 	bl	8000a90 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e05b      	b.n	800198e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ee      	bne.n	80018c0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d219      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d105      	bne.n	8001902 <HAL_RCC_ClockConfig+0x1be>
 80018f6:	4b28      	ldr	r3, [pc, #160]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a27      	ldr	r2, [pc, #156]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 0201 	bic.w	r2, r3, #1
 800190a:	4923      	ldr	r1, [pc, #140]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_RCC_ClockConfig+0x254>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e034      	b.n	800198e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4917      	ldr	r1, [pc, #92]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	490f      	ldr	r1, [pc, #60]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 800195e:	4313      	orrs	r3, r2
 8001960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001962:	f000 f823 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8001966:	4601      	mov	r1, r0
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_RCC_ClockConfig+0x258>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <HAL_RCC_ClockConfig+0x25c>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	fa21 f303 	lsr.w	r3, r1, r3
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_RCC_ClockConfig+0x260>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x264>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f838 	bl	80009f8 <HAL_InitTick>
 8001988:	4603      	mov	r3, r0
 800198a:	72fb      	strb	r3, [r7, #11]

  return status;
 800198c:	7afb      	ldrb	r3, [r7, #11]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00
 800199c:	40023800 	.word	0x40023800
 80019a0:	08002ad8 	.word	0x08002ad8
 80019a4:	20000010 	.word	0x20000010
 80019a8:	20000014 	.word	0x20000014

080019ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80019b2:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x134>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d006      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x24>
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d007      	beq.n	80019d6 <HAL_RCC_GetSysClockFreq+0x2a>
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d176      	bne.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x10c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ca:	4b46      	ldr	r3, [pc, #280]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x138>)
 80019cc:	613b      	str	r3, [r7, #16]
      break;
 80019ce:	e081      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d0:	4b45      	ldr	r3, [pc, #276]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80019d2:	613b      	str	r3, [r7, #16]
      break;
 80019d4:	e07e      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	0c9b      	lsrs	r3, r3, #18
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	4a43      	ldr	r2, [pc, #268]	; (8001aec <HAL_RCC_GetSysClockFreq+0x140>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	0d9b      	lsrs	r3, r3, #22
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	3301      	adds	r3, #1
 80019ee:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f0:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x134>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d019      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f04f 0400 	mov.w	r4, #0
 8001a02:	4a39      	ldr	r2, [pc, #228]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a04:	fb02 f104 	mul.w	r1, r2, r4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	fb02 f203 	mul.w	r2, r2, r3
 8001a0e:	440a      	add	r2, r1
 8001a10:	4935      	ldr	r1, [pc, #212]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a12:	fba3 0101 	umull	r0, r1, r3, r1
 8001a16:	1853      	adds	r3, r2, r1
 8001a18:	4619      	mov	r1, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f04f 0400 	mov.w	r4, #0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	f7fe fbaa 	bl	800017c <__aeabi_uldivmod>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e040      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x106>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	461d      	mov	r5, r3
 8001a34:	f04f 0600 	mov.w	r6, #0
 8001a38:	4629      	mov	r1, r5
 8001a3a:	4632      	mov	r2, r6
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	f04f 0400 	mov.w	r4, #0
 8001a44:	0154      	lsls	r4, r2, #5
 8001a46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a4a:	014b      	lsls	r3, r1, #5
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4622      	mov	r2, r4
 8001a50:	1b49      	subs	r1, r1, r5
 8001a52:	eb62 0206 	sbc.w	r2, r2, r6
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	f04f 0400 	mov.w	r4, #0
 8001a5e:	0194      	lsls	r4, r2, #6
 8001a60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a64:	018b      	lsls	r3, r1, #6
 8001a66:	1a5b      	subs	r3, r3, r1
 8001a68:	eb64 0402 	sbc.w	r4, r4, r2
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	00e2      	lsls	r2, r4, #3
 8001a76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a7a:	00d9      	lsls	r1, r3, #3
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4614      	mov	r4, r2
 8001a80:	195b      	adds	r3, r3, r5
 8001a82:	eb44 0406 	adc.w	r4, r4, r6
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	02a2      	lsls	r2, r4, #10
 8001a90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a94:	0299      	lsls	r1, r3, #10
 8001a96:	460b      	mov	r3, r1
 8001a98:	4614      	mov	r4, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f04f 0400 	mov.w	r4, #0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	f7fe fb68 	bl	800017c <__aeabi_uldivmod>
 8001aac:	4603      	mov	r3, r0
 8001aae:	460c      	mov	r4, r1
 8001ab0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	613b      	str	r3, [r7, #16]
      break;
 8001ab6:	e00d      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x134>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	0b5b      	lsrs	r3, r3, #13
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	613b      	str	r3, [r7, #16]
      break;
 8001ad2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad4:	693b      	ldr	r3, [r7, #16]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	371c      	adds	r7, #28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	00f42400 	.word	0x00f42400
 8001ae8:	016e3600 	.word	0x016e3600
 8001aec:	08002acc 	.word	0x08002acc

08001af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	20000010 	.word	0x20000010

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b08:	f7ff fff2 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08002ae8 	.word	0x08002ae8

08001b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b30:	f7ff ffde 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b34:	4601      	mov	r1, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0adb      	lsrs	r3, r3, #11
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08002ae8 	.word	0x08002ae8

08001b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d12c      	bne.n	8001bc6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b6c:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b78:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e016      	b.n	8001bb2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b84:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	6253      	str	r3, [r2, #36]	; 0x24
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ba4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001bb8:	d105      	bne.n	8001bc6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001bc0:	d101      	bne.n	8001bc6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 0201 	bic.w	r2, r3, #1
 8001be0:	490b      	ldr	r1, [pc, #44]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d001      	beq.n	8001bfa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	371c      	adds	r7, #28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	40023c00 	.word	0x40023c00

08001c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e06e      	b.n	8001d04 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d108      	bne.n	8001c40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c36:	d009      	beq.n	8001c4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
 8001c3e:	e005      	b.n	8001c4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fda6 	bl	80007b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd0:	ea42 0103 	orr.w	r1, r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	0c1a      	lsrs	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f002 0204 	and.w	r2, r2, #4
 8001cf2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_SPI_Transmit_IT+0x20>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e06f      	b.n	8001e0c <HAL_SPI_Transmit_IT+0x100>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_SPI_Transmit_IT+0x34>
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d44:	e05d      	b.n	8001e02 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d002      	beq.n	8001d58 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8001d52:	2302      	movs	r3, #2
 8001d54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d56:	e054      	b.n	8001e02 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <HAL_SPI_Transmit_IT+0x10c>)
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d9e:	e002      	b.n	8001da6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a1e      	ldr	r2, [pc, #120]	; (8001e1c <HAL_SPI_Transmit_IT+0x110>)
 8001da4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dae:	d10f      	bne.n	8001dd0 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8001dde:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	d008      	beq.n	8001e00 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e000      	b.n	8001e02 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8001e00:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	08002071 	.word	0x08002071
 8001e1c:	0800202b 	.word	0x0800202b

08001e20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	099b      	lsrs	r3, r3, #6
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10f      	bne.n	8001e64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d004      	beq.n	8001e64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
    return;
 8001e62:	e0bf      	b.n	8001fe4 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_SPI_IRQHandler+0x66>
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	09db      	lsrs	r3, r3, #7
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	4798      	blx	r3
    return;
 8001e84:	e0ae      	b.n	8001fe4 <HAL_SPI_IRQHandler+0x1c4>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_SPI_IRQHandler+0x80>
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80a2 	beq.w	8001fe4 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 809b 	beq.w	8001fe4 <HAL_SPI_IRQHandler+0x1c4>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d023      	beq.n	8001f02 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d011      	beq.n	8001eea <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0204 	orr.w	r2, r3, #4
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	e00b      	b.n	8001f02 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]
        return;
 8001f00:	e070      	b.n	8001fe4 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d014      	beq.n	8001f38 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d050      	beq.n	8001fe2 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f4e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d104      	bne.n	8001f6c <HAL_SPI_IRQHandler+0x14c>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d034      	beq.n	8001fd6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0203 	bic.w	r2, r2, #3
 8001f7a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d011      	beq.n	8001fa8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f88:	4a18      	ldr	r2, [pc, #96]	; (8001fec <HAL_SPI_IRQHandler+0x1cc>)
 8001f8a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe feb6 	bl	8000d02 <HAL_DMA_Abort_IT>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d016      	beq.n	8001fde <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <HAL_SPI_IRQHandler+0x1cc>)
 8001fb6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fea0 	bl	8000d02 <HAL_DMA_Abort_IT>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001fd4:	e003      	b.n	8001fde <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f80a 	bl	8001ff0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001fdc:	e000      	b.n	8001fe0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8001fde:	bf00      	nop
    return;
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
  }
}
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	08002003 	.word	0x08002003

08001ff0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7ff ffe7 	bl	8001ff0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	330c      	adds	r3, #12
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8f0 	bl	8002248 <SPI_CloseTx_ISR>
  }
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	881a      	ldrh	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	1c9a      	adds	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8ce 	bl	8002248 <SPI_CloseTx_ISR>
  }
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020c4:	f7fe fce4 	bl	8000a90 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020d4:	f7fe fcdc 	bl	8000a90 <HAL_GetTick>
 80020d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020da:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	015b      	lsls	r3, r3, #5
 80020e0:	0d1b      	lsrs	r3, r3, #20
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020ea:	e054      	b.n	8002196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d050      	beq.n	8002196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020f4:	f7fe fccc 	bl	8000a90 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	429a      	cmp	r2, r3
 8002102:	d902      	bls.n	800210a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d13d      	bne.n	8002186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002122:	d111      	bne.n	8002148 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800212c:	d004      	beq.n	8002138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	d107      	bne.n	8002148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002150:	d10f      	bne.n	8002172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e017      	b.n	80021b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3b01      	subs	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4013      	ands	r3, r2
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d19b      	bne.n	80020ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000010 	.word	0x20000010

080021c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <SPI_EndRxTxTransaction+0x7c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <SPI_EndRxTxTransaction+0x80>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0d5b      	lsrs	r3, r3, #21
 80021dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ee:	d112      	bne.n	8002216 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2200      	movs	r2, #0
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff ff5a 	bl	80020b4 <SPI_WaitFlagStateUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	f043 0220 	orr.w	r2, r3, #32
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e00f      	b.n	8002236 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3b01      	subs	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222c:	2b80      	cmp	r3, #128	; 0x80
 800222e:	d0f2      	beq.n	8002216 <SPI_EndRxTxTransaction+0x52>
 8002230:	e000      	b.n	8002234 <SPI_EndRxTxTransaction+0x70>
        break;
 8002232:	bf00      	nop
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000010 	.word	0x20000010
 8002244:	165e9f81 	.word	0x165e9f81

08002248 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002250:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <SPI_CloseTx_ISR+0xbc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <SPI_CloseTx_ISR+0xc0>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0a5b      	lsrs	r3, r3, #9
 800225c:	2264      	movs	r2, #100	; 0x64
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002264:	f7fe fc14 	bl	8000a90 <HAL_GetTick>
 8002268:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d106      	bne.n	800227e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800227c:	e009      	b.n	8002292 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	3b01      	subs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0eb      	beq.n	800226a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022a0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	2164      	movs	r1, #100	; 0x64
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ff8c 	bl	80021c4 <SPI_EndRxTxTransaction>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	f043 0220 	orr.w	r2, r3, #32
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10a      	bne.n	80022dc <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fe7f 	bl	8001ff0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80022f2:	e002      	b.n	80022fa <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7fe f8f9 	bl	80004ec <HAL_SPI_TxCpltCallback>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000010 	.word	0x20000010
 8002308:	057619f1 	.word	0x057619f1

0800230c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e03f      	b.n	800239e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fa8c 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	; 0x24
 800233c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800234e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fa9f 	bl	8002894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	4613      	mov	r3, r2
 80023b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d130      	bne.n	8002422 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_UART_Transmit_IT+0x26>
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e029      	b.n	8002424 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_UART_Transmit_IT+0x38>
 80023da:	2302      	movs	r3, #2
 80023dc:	e022      	b.n	8002424 <HAL_UART_Transmit_IT+0x7e>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2221      	movs	r2, #33	; 0x21
 8002402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800241c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
	...

08002430 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_UART_IRQHandler+0x52>
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f988 	bl	8002790 <UART_Receive_IT>
      return;
 8002480:	e0d1      	b.n	8002626 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80b0 	beq.w	80025ea <HAL_UART_IRQHandler+0x1ba>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_UART_IRQHandler+0x70>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80a5 	beq.w	80025ea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_UART_IRQHandler+0x90>
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_UART_IRQHandler+0xb0>
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	f043 0202 	orr.w	r2, r3, #2
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_UART_IRQHandler+0xd0>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	f043 0204 	orr.w	r2, r3, #4
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00f      	beq.n	800252a <HAL_UART_IRQHandler+0xfa>
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d104      	bne.n	800251e <HAL_UART_IRQHandler+0xee>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	f043 0208 	orr.w	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d078      	beq.n	8002624 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_UART_IRQHandler+0x11c>
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f922 	bl	8002790 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <HAL_UART_IRQHandler+0x144>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d031      	beq.n	80025d8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f86d 	bl	8002654 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d123      	bne.n	80025d0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002596:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259c:	2b00      	cmp	r3, #0
 800259e:	d013      	beq.n	80025c8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <HAL_UART_IRQHandler+0x1fc>)
 80025a6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fba8 	bl	8000d02 <HAL_DMA_Abort_IT>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d016      	beq.n	80025e6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025c2:	4610      	mov	r0, r2
 80025c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c6:	e00e      	b.n	80025e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f83a 	bl	8002642 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ce:	e00a      	b.n	80025e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f836 	bl	8002642 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d6:	e006      	b.n	80025e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f832 	bl	8002642 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80025e4:	e01e      	b.n	8002624 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e6:	bf00      	nop
    return;
 80025e8:	e01c      	b.n	8002624 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_UART_IRQHandler+0x1d6>
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f859 	bl	80026b6 <UART_Transmit_IT>
    return;
 8002604:	e00f      	b.n	8002626 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_UART_IRQHandler+0x1f6>
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8a0 	bl	8002760 <UART_EndTransmit_IT>
    return;
 8002620:	bf00      	nop
 8002622:	e000      	b.n	8002626 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002624:	bf00      	nop
  }
}
 8002626:	3720      	adds	r7, #32
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	0800268f 	.word	0x0800268f

08002630 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800266a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f7ff ffca 	bl	8002642 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b21      	cmp	r3, #33	; 0x21
 80026c8:	d144      	bne.n	8002754 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d2:	d11a      	bne.n	800270a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	1c9a      	adds	r2, r3, #2
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	621a      	str	r2, [r3, #32]
 80026fc:	e00e      	b.n	800271c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	621a      	str	r2, [r3, #32]
 8002708:	e008      	b.n	800271c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	1c59      	adds	r1, r3, #1
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6211      	str	r1, [r2, #32]
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29b      	uxth	r3, r3
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4619      	mov	r1, r3
 800272a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10f      	bne.n	8002750 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800274e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002776:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7fd fec9 	bl	8000518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b22      	cmp	r3, #34	; 0x22
 80027a2:	d171      	bne.n	8002888 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ac:	d123      	bne.n	80027f6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10e      	bne.n	80027da <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	1c9a      	adds	r2, r3, #2
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
 80027d8:	e029      	b.n	800282e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
 80027f4:	e01b      	b.n	800282e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6858      	ldr	r0, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	1c59      	adds	r1, r3, #1
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6291      	str	r1, [r2, #40]	; 0x28
 800280e:	b2c2      	uxtb	r2, r0
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	e00c      	b.n	800282e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	1c58      	adds	r0, r3, #1
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	6288      	str	r0, [r1, #40]	; 0x28
 8002826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29b      	uxth	r3, r3
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4619      	mov	r1, r3
 800283c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800283e:	2b00      	cmp	r3, #0
 8002840:	d120      	bne.n	8002884 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0220 	bic.w	r2, r2, #32
 8002850:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002860:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff fed8 	bl	8002630 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e002      	b.n	800288a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028d4:	f023 030c 	bic.w	r3, r3, #12
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	430b      	orrs	r3, r1
 80028e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699a      	ldr	r2, [r3, #24]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a55      	ldr	r2, [pc, #340]	; (8002a54 <UART_SetConfig+0x1c0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d103      	bne.n	800290a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002902:	f7ff f913 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	e002      	b.n	8002910 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800290a:	f7ff f8fb 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 800290e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002918:	d14c      	bne.n	80029b4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	009a      	lsls	r2, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	4a49      	ldr	r2, [pc, #292]	; (8002a58 <UART_SetConfig+0x1c4>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	0119      	lsls	r1, r3, #4
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	009a      	lsls	r2, r3, #2
 8002944:	441a      	add	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002950:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <UART_SetConfig+0x1c4>)
 8002952:	fba3 0302 	umull	r0, r3, r3, r2
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2064      	movs	r0, #100	; 0x64
 800295a:	fb00 f303 	mul.w	r3, r0, r3
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	3332      	adds	r3, #50	; 0x32
 8002964:	4a3c      	ldr	r2, [pc, #240]	; (8002a58 <UART_SetConfig+0x1c4>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002972:	4419      	add	r1, r3
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	009a      	lsls	r2, r3, #2
 800297e:	441a      	add	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fbb2 f2f3 	udiv	r2, r2, r3
 800298a:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <UART_SetConfig+0x1c4>)
 800298c:	fba3 0302 	umull	r0, r3, r3, r2
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	2064      	movs	r0, #100	; 0x64
 8002994:	fb00 f303 	mul.w	r3, r0, r3
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	3332      	adds	r3, #50	; 0x32
 800299e:	4a2e      	ldr	r2, [pc, #184]	; (8002a58 <UART_SetConfig+0x1c4>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	f003 0207 	and.w	r2, r3, #7
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	440a      	add	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029b2:	e04a      	b.n	8002a4a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009a      	lsls	r2, r3, #2
 80029be:	441a      	add	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4a23      	ldr	r2, [pc, #140]	; (8002a58 <UART_SetConfig+0x1c4>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	0119      	lsls	r1, r3, #4
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	009a      	lsls	r2, r3, #2
 80029de:	441a      	add	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <UART_SetConfig+0x1c4>)
 80029ec:	fba3 0302 	umull	r0, r3, r3, r2
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	2064      	movs	r0, #100	; 0x64
 80029f4:	fb00 f303 	mul.w	r3, r0, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	3332      	adds	r3, #50	; 0x32
 80029fe:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <UART_SetConfig+0x1c4>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0a:	4419      	add	r1, r3
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009a      	lsls	r2, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <UART_SetConfig+0x1c4>)
 8002a24:	fba3 0302 	umull	r0, r3, r3, r2
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2064      	movs	r0, #100	; 0x64
 8002a2c:	fb00 f303 	mul.w	r3, r0, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <UART_SetConfig+0x1c4>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	f003 020f 	and.w	r2, r3, #15
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	440a      	add	r2, r1
 8002a48:	609a      	str	r2, [r3, #8]
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40013800 	.word	0x40013800
 8002a58:	51eb851f 	.word	0x51eb851f

08002a5c <__libc_init_array>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	2500      	movs	r5, #0
 8002a60:	4e0c      	ldr	r6, [pc, #48]	; (8002a94 <__libc_init_array+0x38>)
 8002a62:	4c0d      	ldr	r4, [pc, #52]	; (8002a98 <__libc_init_array+0x3c>)
 8002a64:	1ba4      	subs	r4, r4, r6
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	42a5      	cmp	r5, r4
 8002a6a:	d109      	bne.n	8002a80 <__libc_init_array+0x24>
 8002a6c:	f000 f822 	bl	8002ab4 <_init>
 8002a70:	2500      	movs	r5, #0
 8002a72:	4e0a      	ldr	r6, [pc, #40]	; (8002a9c <__libc_init_array+0x40>)
 8002a74:	4c0a      	ldr	r4, [pc, #40]	; (8002aa0 <__libc_init_array+0x44>)
 8002a76:	1ba4      	subs	r4, r4, r6
 8002a78:	10a4      	asrs	r4, r4, #2
 8002a7a:	42a5      	cmp	r5, r4
 8002a7c:	d105      	bne.n	8002a8a <__libc_init_array+0x2e>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a84:	4798      	blx	r3
 8002a86:	3501      	adds	r5, #1
 8002a88:	e7ee      	b.n	8002a68 <__libc_init_array+0xc>
 8002a8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a8e:	4798      	blx	r3
 8002a90:	3501      	adds	r5, #1
 8002a92:	e7f2      	b.n	8002a7a <__libc_init_array+0x1e>
 8002a94:	08002af8 	.word	0x08002af8
 8002a98:	08002af8 	.word	0x08002af8
 8002a9c:	08002af8 	.word	0x08002af8
 8002aa0:	08002afc 	.word	0x08002afc

08002aa4 <memset>:
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4402      	add	r2, r0
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d100      	bne.n	8002aae <memset+0xa>
 8002aac:	4770      	bx	lr
 8002aae:	f803 1b01 	strb.w	r1, [r3], #1
 8002ab2:	e7f9      	b.n	8002aa8 <memset+0x4>

08002ab4 <_init>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr

08002ac0 <_fini>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr
