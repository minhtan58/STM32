
SPI5_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c40  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08002ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a8  20000014  08002f04  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000bc  08002f04  000200bc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   000119a8  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001dc0  00000000  00000000  000319ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000910  00000000  00000000  000337b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000858  00000000  00000000  000340c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d28d  00000000  00000000  00034918  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008e75  00000000  00000000  00071ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018e370  00000000  00000000  0007aa1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  00208d8a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000242c  00000000  00000000  00208e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002ec0 	.word	0x08002ec0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	08002ec0 	.word	0x08002ec0

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000410:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000414:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <SCB_EnableICache+0x3c>)
 800041a:	2200      	movs	r2, #0
 800041c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000424:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <SCB_EnableICache+0x3c>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a06      	ldr	r2, [pc, #24]	; (8000448 <SCB_EnableICache+0x3c>)
 800042e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000432:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000434:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000438:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <SCB_EnableDCache+0x7c>)
 8000454:	2200      	movs	r2, #0
 8000456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800045a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <SCB_EnableDCache+0x7c>)
 8000460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000464:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	0b5b      	lsrs	r3, r3, #13
 800046a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800046e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000478:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	015a      	lsls	r2, r3, #5
 800047e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000482:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000484:	68ba      	ldr	r2, [r7, #8]
 8000486:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000488:	490f      	ldr	r1, [pc, #60]	; (80004c8 <SCB_EnableDCache+0x7c>)
 800048a:	4313      	orrs	r3, r2
 800048c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	1e5a      	subs	r2, r3, #1
 8000494:	60ba      	str	r2, [r7, #8]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1ef      	bne.n	800047a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	1e5a      	subs	r2, r3, #1
 800049e:	60fa      	str	r2, [r7, #12]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1e5      	bne.n	8000470 <SCB_EnableDCache+0x24>
 80004a4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <SCB_EnableDCache+0x7c>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <SCB_EnableDCache+0x7c>)
 80004ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004b2:	6153      	str	r3, [r2, #20]
 80004b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004b8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	e000ed00 	.word	0xe000ed00

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

	  int32_t timeout;

	  SCB_EnableICache();
 80004d2:	f7ff ff9b 	bl	800040c <SCB_EnableICache>
	  SCB_EnableDCache();
 80004d6:	f7ff ffb9 	bl	800044c <SCB_EnableDCache>

	  timeout = 0xFFFF;
 80004da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004de:	607b      	str	r3, [r7, #4]
	  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004e0:	bf00      	nop
 80004e2:	4b16      	ldr	r3, [pc, #88]	; (800053c <main+0x70>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d004      	beq.n	80004f8 <main+0x2c>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	1e5a      	subs	r2, r3, #1
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	dcf4      	bgt.n	80004e2 <main+0x16>
	  if ( timeout < 0 )
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	da01      	bge.n	8000502 <main+0x36>
	  {
	    Error_Handler();
 80004fe:	f000 f951 	bl	80007a4 <Error_Handler>
	  }

	  HAL_Init();
 8000502:	f000 fa47 	bl	8000994 <HAL_Init>

	  SystemClock_Config();
 8000506:	f000 f839 	bl	800057c <SystemClock_Config>

	  MX_GPIO_Init();
 800050a:	f000 f8f7 	bl	80006fc <MX_GPIO_Init>
	  MX_SPI5_Init();
 800050e:	f000 f8b3 	bl	8000678 <MX_SPI5_Init>

	  while (1)
	  {
		  spi_enable;
 8000512:	2200      	movs	r2, #0
 8000514:	2102      	movs	r1, #2
 8000516:	480a      	ldr	r0, [pc, #40]	; (8000540 <main+0x74>)
 8000518:	f001 f800 	bl	800151c <HAL_GPIO_WritePin>
		  //HAL_Delay(100);
		  HAL_SPI_Transmit_IT(&hspi5, &send_data, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	4909      	ldr	r1, [pc, #36]	; (8000544 <main+0x78>)
 8000520:	4809      	ldr	r0, [pc, #36]	; (8000548 <main+0x7c>)
 8000522:	f002 f89f 	bl	8002664 <HAL_SPI_Transmit_IT>
		  //HAL_Delay(100);
		  //spi_disable;
		  send_data++;
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <main+0x78>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <main+0x78>)
 8000530:	701a      	strb	r2, [r3, #0]
			//spi_disable;
		  HAL_Delay(100);
 8000532:	2064      	movs	r0, #100	; 0x64
 8000534:	f000 fac0 	bl	8000ab8 <HAL_Delay>
		  spi_enable;
 8000538:	e7eb      	b.n	8000512 <main+0x46>
 800053a:	bf00      	nop
 800053c:	58024400 	.word	0x58024400
 8000540:	58022800 	.word	0x58022800
 8000544:	20000008 	.word	0x20000008
 8000548:	20000030 	.word	0x20000030

0800054c <HAL_SPI_TxCpltCallback>:
	  }
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi5.Instance)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_SPI_TxCpltCallback+0x28>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	d104      	bne.n	800056a <HAL_SPI_TxCpltCallback+0x1e>
	{
		spi_disable;
 8000560:	2201      	movs	r2, #1
 8000562:	2102      	movs	r1, #2
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <HAL_SPI_TxCpltCallback+0x2c>)
 8000566:	f000 ffd9 	bl	800151c <HAL_GPIO_WritePin>
	}
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000030 	.word	0x20000030
 8000578:	58022800 	.word	0x58022800

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b09e      	sub	sp, #120	; 0x78
 8000580:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000588:	2004      	movs	r0, #4
 800058a:	f000 ffe1 	bl	8001550 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <SystemClock_Config+0xf4>)
 8000594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000596:	4a36      	ldr	r2, [pc, #216]	; (8000670 <SystemClock_Config+0xf4>)
 8000598:	f023 0301 	bic.w	r3, r3, #1
 800059c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800059e:	4b34      	ldr	r3, [pc, #208]	; (8000670 <SystemClock_Config+0xf4>)
 80005a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b32      	ldr	r3, [pc, #200]	; (8000674 <SystemClock_Config+0xf8>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a31      	ldr	r2, [pc, #196]	; (8000674 <SystemClock_Config+0xf8>)
 80005ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <SystemClock_Config+0xf8>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005c0:	bf00      	nop
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <SystemClock_Config+0xf8>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005ce:	d1f8      	bne.n	80005c2 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	2302      	movs	r3, #2
 80005e8:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ea:	2305      	movs	r3, #5
 80005ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 80005ee:	23a0      	movs	r3, #160	; 0xa0
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005fe:	2304      	movs	r3, #4
 8000600:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000602:	2300      	movs	r3, #0
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000606:	2308      	movs	r3, #8
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fff8 	bl	8001604 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800061a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000622:	f000 f8bf 	bl	80007a4 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000626:	233f      	movs	r3, #63	; 0x3f
 8000628:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2303      	movs	r3, #3
 800062c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000632:	2308      	movs	r3, #8
 8000634:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000636:	2340      	movs	r3, #64	; 0x40
 8000638:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800063a:	2340      	movs	r3, #64	; 0x40
 800063c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800063e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000642:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000644:	2340      	movs	r3, #64	; 0x40
 8000646:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000648:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fbe8 	bl	8001e24 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800065a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000662:	f000 f89f 	bl	80007a4 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3778      	adds	r7, #120	; 0x78
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	58000400 	.word	0x58000400
 8000674:	58024800 	.word	0x58024800

08000678 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
//  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
//  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
//  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
//  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;

	 hspi5.Instance               = SPI5;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_SPI5_Init+0x7c>)
 800067e:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <MX_SPI5_Init+0x80>)
 8000680:	601a      	str	r2, [r3, #0]
	 hspi5.Init.Mode              = SPI_MODE_MASTER;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_SPI5_Init+0x7c>)
 8000684:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000688:	605a      	str	r2, [r3, #4]
	 hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_SPI5_Init+0x7c>)
 800068c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000690:	61da      	str	r2, [r3, #28]
	 hspi5.Init.Direction         = SPI_DIRECTION_2LINES;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_SPI5_Init+0x7c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
	 hspi5.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI5_Init+0x7c>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
	 hspi5.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_SPI5_Init+0x7c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
	 hspi5.Init.DataSize          = SPI_DATASIZE_8BIT;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_SPI5_Init+0x7c>)
 80006a6:	2207      	movs	r2, #7
 80006a8:	60da      	str	r2, [r3, #12]
	 hspi5.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_SPI5_Init+0x7c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
	 hspi5.Init.TIMode            = SPI_TIMODE_DISABLE;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_SPI5_Init+0x7c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24
	 hspi5.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI5_Init+0x7c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	629a      	str	r2, [r3, #40]	; 0x28
	 hspi5.Init.CRCPolynomial     = 7;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_SPI5_Init+0x7c>)
 80006be:	2207      	movs	r2, #7
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
	 hspi5.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI5_Init+0x7c>)
 80006c4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80006c8:	631a      	str	r2, [r3, #48]	; 0x30
	 hspi5.Init.NSS               = SPI_NSS_SOFT;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_SPI5_Init+0x7c>)
 80006cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80006d0:	619a      	str	r2, [r3, #24]
	 hspi5.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_SPI5_Init+0x7c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	635a      	str	r2, [r3, #52]	; 0x34
	 hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI5_Init+0x7c>)
 80006da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80006de:	655a      	str	r2, [r3, #84]	; 0x54
	 if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_SPI5_Init+0x7c>)
 80006e2:	f001 fec7 	bl	8002474 <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI5_Init+0x78>
	 {
		Error_Handler();
 80006ec:	f000 f85a 	bl	80007a4 <Error_Handler>
	 }
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000030 	.word	0x20000030
 80006f8:	40015000 	.word	0x40015000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_GPIO_Init+0xa0>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	4a20      	ldr	r2, [pc, #128]	; (800079c <MX_GPIO_Init+0xa0>)
 800071a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_GPIO_Init+0xa0>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_GPIO_Init+0xa0>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000736:	4a19      	ldr	r2, [pc, #100]	; (800079c <MX_GPIO_Init+0xa0>)
 8000738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800073c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_GPIO_Init+0xa0>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_GPIO_Init+0xa0>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	4a11      	ldr	r2, [pc, #68]	; (800079c <MX_GPIO_Init+0xa0>)
 8000756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_GPIO_Init+0xa0>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800076c:	2302      	movs	r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <MX_GPIO_Init+0xa4>)
 8000784:	f000 fd1a 	bl	80011bc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2102      	movs	r1, #2
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xa4>)
 800078e:	f000 fec5 	bl	800151c <HAL_GPIO_WritePin>
}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	58024400 	.word	0x58024400
 80007a0:	58022800 	.word	0x58022800

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_MspInit+0x30>)
 80007bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007c0:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x30>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x30>)
 80007cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007d0:	f003 0302 	and.w	r3, r3, #2
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	58024400 	.word	0x58024400

080007e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a2e      	ldr	r2, [pc, #184]	; (80008c0 <HAL_SPI_MspInit+0xd8>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d155      	bne.n	80008b6 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <HAL_SPI_MspInit+0xdc>)
 800080c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000810:	4a2c      	ldr	r2, [pc, #176]	; (80008c4 <HAL_SPI_MspInit+0xdc>)
 8000812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000816:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <HAL_SPI_MspInit+0xdc>)
 800081c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000828:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <HAL_SPI_MspInit+0xdc>)
 800082a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082e:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <HAL_SPI_MspInit+0xdc>)
 8000830:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <HAL_SPI_MspInit+0xdc>)
 800083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <HAL_SPI_MspInit+0xdc>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084c:	4a1d      	ldr	r2, [pc, #116]	; (80008c4 <HAL_SPI_MspInit+0xdc>)
 800084e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <HAL_SPI_MspInit+0xdc>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000864:	2301      	movs	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000874:	2305      	movs	r3, #5
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4812      	ldr	r0, [pc, #72]	; (80008c8 <HAL_SPI_MspInit+0xe0>)
 8000880:	f000 fc9c 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000884:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000896:	2305      	movs	r3, #5
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480a      	ldr	r0, [pc, #40]	; (80008cc <HAL_SPI_MspInit+0xe4>)
 80008a2:	f000 fc8b 	bl	80011bc <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2055      	movs	r0, #85	; 0x55
 80008ac:	f000 fa0d 	bl	8000cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80008b0:	2055      	movs	r0, #85	; 0x55
 80008b2:	f000 fa24 	bl	8000cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40015000 	.word	0x40015000
 80008c4:	58024400 	.word	0x58024400
 80008c8:	58022800 	.word	0x58022800
 80008cc:	58022400 	.word	0x58022400

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 f8a8 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <SPI5_IRQHandler+0x10>)
 8000932:	f001 ff43 	bl	80027bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000030 	.word	0x20000030

08000940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000978 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000944:	f7ff fcc8 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000948:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800094a:	e003      	b.n	8000954 <LoopCopyDataInit>

0800094c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800094e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000950:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000952:	3104      	adds	r1, #4

08000954 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000958:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800095a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800095c:	d3f6      	bcc.n	800094c <CopyDataInit>
  ldr  r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000960:	e002      	b.n	8000968 <LoopFillZerobss>

08000962 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000962:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000964:	f842 3b04 	str.w	r3, [r2], #4

08000968 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800096a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800096c:	d3f9      	bcc.n	8000962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096e:	f002 fa83 	bl	8002e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000972:	f7ff fdab 	bl	80004cc <main>
  bx  lr    
 8000976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000978:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800097c:	08002ef0 	.word	0x08002ef0
  ldr  r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000984:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000988:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800098c:	200000bc 	.word	0x200000bc

08000990 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC3_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099a:	2003      	movs	r0, #3
 800099c:	f000 f98a 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009a0:	f001 fbf6 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 80009a4:	4601      	mov	r1, r0
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_Init+0x68>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	f003 030f 	and.w	r3, r3, #15
 80009b0:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <HAL_Init+0x6c>)
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	f003 031f 	and.w	r3, r3, #31
 80009b8:	fa21 f303 	lsr.w	r3, r1, r3
 80009bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_Init+0x68>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_Init+0x6c>)
 80009c8:	5cd3      	ldrb	r3, [r2, r3]
 80009ca:	f003 031f 	and.w	r3, r3, #31
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	fa22 f303 	lsr.w	r3, r2, r3
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <HAL_Init+0x70>)
 80009d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009d8:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <HAL_Init+0x74>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 f814 	bl	8000a0c <HAL_InitTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e002      	b.n	80009f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009ee:	f7ff fee1 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	58024400 	.word	0x58024400
 8000a00:	08002ed8 	.word	0x08002ed8
 8000a04:	20000004 	.word	0x20000004
 8000a08:	20000000 	.word	0x20000000

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_InitTick+0x60>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d101      	bne.n	8000a20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e021      	b.n	8000a64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_InitTick+0x64>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_InitTick+0x60>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f96f 	bl	8000d1a <HAL_SYSTICK_Config>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00e      	b.n	8000a64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d80a      	bhi.n	8000a62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f000 f939 	bl	8000cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <HAL_InitTick+0x68>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000010 	.word	0x20000010
 8000a70:	20000000 	.word	0x20000000
 8000a74:	2000000c 	.word	0x2000000c

08000a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000010 	.word	0x20000010
 8000a9c:	200000b8 	.word	0x200000b8

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	200000b8 	.word	0x200000b8

08000ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac0:	f7ff ffee 	bl	8000aa0 <HAL_GetTick>
 8000ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad0:	d005      	beq.n	8000ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_Delay+0x40>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ade:	bf00      	nop
 8000ae0:	f7ff ffde 	bl	8000aa0 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8f7      	bhi.n	8000ae0 <HAL_Delay+0x28>
  {
  }
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000010 	.word	0x20000010

08000afc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetREVID+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	0c1b      	lsrs	r3, r3, #16
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	5c001000 	.word	0x5c001000

08000b14 <__NVIC_SetPriorityGrouping>:
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <__NVIC_SetPriorityGrouping+0x40>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <__NVIC_SetPriorityGrouping+0x40>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00
 8000b58:	05fa0000 	.word	0x05fa0000

08000b5c <__NVIC_GetPriorityGrouping>:
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <__NVIC_EnableIRQ+0x38>)
 8000b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f7ff ff8e 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff29 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff40 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff90 	bl	8000c08 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5f 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff33 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffa4 	bl	8000c70 <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e205      	b.n	8001152 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d004      	beq.n	8000d5c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e1fa      	b.n	8001152 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a8c      	ldr	r2, [pc, #560]	; (8000f94 <HAL_DMA_Abort_IT+0x260>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d04a      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a8b      	ldr	r2, [pc, #556]	; (8000f98 <HAL_DMA_Abort_IT+0x264>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d045      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a89      	ldr	r2, [pc, #548]	; (8000f9c <HAL_DMA_Abort_IT+0x268>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d040      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a88      	ldr	r2, [pc, #544]	; (8000fa0 <HAL_DMA_Abort_IT+0x26c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d03b      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a86      	ldr	r2, [pc, #536]	; (8000fa4 <HAL_DMA_Abort_IT+0x270>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d036      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a85      	ldr	r2, [pc, #532]	; (8000fa8 <HAL_DMA_Abort_IT+0x274>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d031      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a83      	ldr	r2, [pc, #524]	; (8000fac <HAL_DMA_Abort_IT+0x278>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d02c      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a82      	ldr	r2, [pc, #520]	; (8000fb0 <HAL_DMA_Abort_IT+0x27c>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d027      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a80      	ldr	r2, [pc, #512]	; (8000fb4 <HAL_DMA_Abort_IT+0x280>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d022      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a7f      	ldr	r2, [pc, #508]	; (8000fb8 <HAL_DMA_Abort_IT+0x284>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d01d      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a7d      	ldr	r2, [pc, #500]	; (8000fbc <HAL_DMA_Abort_IT+0x288>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d018      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a7c      	ldr	r2, [pc, #496]	; (8000fc0 <HAL_DMA_Abort_IT+0x28c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d013      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a7a      	ldr	r2, [pc, #488]	; (8000fc4 <HAL_DMA_Abort_IT+0x290>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00e      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a79      	ldr	r2, [pc, #484]	; (8000fc8 <HAL_DMA_Abort_IT+0x294>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d009      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a77      	ldr	r2, [pc, #476]	; (8000fcc <HAL_DMA_Abort_IT+0x298>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d004      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a76      	ldr	r2, [pc, #472]	; (8000fd0 <HAL_DMA_Abort_IT+0x29c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d101      	bne.n	8000e00 <HAL_DMA_Abort_IT+0xcc>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <HAL_DMA_Abort_IT+0xce>
 8000e00:	2300      	movs	r3, #0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d065      	beq.n	8000ed2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2204      	movs	r2, #4
 8000e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a60      	ldr	r2, [pc, #384]	; (8000f94 <HAL_DMA_Abort_IT+0x260>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d04a      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a5e      	ldr	r2, [pc, #376]	; (8000f98 <HAL_DMA_Abort_IT+0x264>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d045      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a5d      	ldr	r2, [pc, #372]	; (8000f9c <HAL_DMA_Abort_IT+0x268>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d040      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a5b      	ldr	r2, [pc, #364]	; (8000fa0 <HAL_DMA_Abort_IT+0x26c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d03b      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a5a      	ldr	r2, [pc, #360]	; (8000fa4 <HAL_DMA_Abort_IT+0x270>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d036      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a58      	ldr	r2, [pc, #352]	; (8000fa8 <HAL_DMA_Abort_IT+0x274>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d031      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a57      	ldr	r2, [pc, #348]	; (8000fac <HAL_DMA_Abort_IT+0x278>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d02c      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a55      	ldr	r2, [pc, #340]	; (8000fb0 <HAL_DMA_Abort_IT+0x27c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d027      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a54      	ldr	r2, [pc, #336]	; (8000fb4 <HAL_DMA_Abort_IT+0x280>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d022      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a52      	ldr	r2, [pc, #328]	; (8000fb8 <HAL_DMA_Abort_IT+0x284>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d01d      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a51      	ldr	r2, [pc, #324]	; (8000fbc <HAL_DMA_Abort_IT+0x288>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d018      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_DMA_Abort_IT+0x28c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <HAL_DMA_Abort_IT+0x290>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d00e      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a4c      	ldr	r2, [pc, #304]	; (8000fc8 <HAL_DMA_Abort_IT+0x294>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d009      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a4b      	ldr	r2, [pc, #300]	; (8000fcc <HAL_DMA_Abort_IT+0x298>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d004      	beq.n	8000eae <HAL_DMA_Abort_IT+0x17a>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a49      	ldr	r2, [pc, #292]	; (8000fd0 <HAL_DMA_Abort_IT+0x29c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d108      	bne.n	8000ec0 <HAL_DMA_Abort_IT+0x18c>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0201 	bic.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e147      	b.n	8001150 <HAL_DMA_Abort_IT+0x41c>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0201 	bic.w	r2, r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e13e      	b.n	8001150 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 020e 	bic.w	r2, r2, #14
 8000ee0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <HAL_DMA_Abort_IT+0x260>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d04a      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a29      	ldr	r2, [pc, #164]	; (8000f98 <HAL_DMA_Abort_IT+0x264>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d045      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <HAL_DMA_Abort_IT+0x268>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d040      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <HAL_DMA_Abort_IT+0x26c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d03b      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a25      	ldr	r2, [pc, #148]	; (8000fa4 <HAL_DMA_Abort_IT+0x270>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d036      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <HAL_DMA_Abort_IT+0x274>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d031      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a22      	ldr	r2, [pc, #136]	; (8000fac <HAL_DMA_Abort_IT+0x278>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d02c      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <HAL_DMA_Abort_IT+0x27c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d027      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <HAL_DMA_Abort_IT+0x280>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d022      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <HAL_DMA_Abort_IT+0x284>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d01d      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <HAL_DMA_Abort_IT+0x288>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d018      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <HAL_DMA_Abort_IT+0x28c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <HAL_DMA_Abort_IT+0x290>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d00e      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <HAL_DMA_Abort_IT+0x294>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d009      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <HAL_DMA_Abort_IT+0x298>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d004      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24e>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <HAL_DMA_Abort_IT+0x29c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d128      	bne.n	8000fd4 <HAL_DMA_Abort_IT+0x2a0>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0201 	bic.w	r2, r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e027      	b.n	8000fe4 <HAL_DMA_Abort_IT+0x2b0>
 8000f94:	40020010 	.word	0x40020010
 8000f98:	40020028 	.word	0x40020028
 8000f9c:	40020040 	.word	0x40020040
 8000fa0:	40020058 	.word	0x40020058
 8000fa4:	40020070 	.word	0x40020070
 8000fa8:	40020088 	.word	0x40020088
 8000fac:	400200a0 	.word	0x400200a0
 8000fb0:	400200b8 	.word	0x400200b8
 8000fb4:	40020410 	.word	0x40020410
 8000fb8:	40020428 	.word	0x40020428
 8000fbc:	40020440 	.word	0x40020440
 8000fc0:	40020458 	.word	0x40020458
 8000fc4:	40020470 	.word	0x40020470
 8000fc8:	40020488 	.word	0x40020488
 8000fcc:	400204a0 	.word	0x400204a0
 8000fd0:	400204b8 	.word	0x400204b8
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0201 	bic.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a5c      	ldr	r2, [pc, #368]	; (800115c <HAL_DMA_Abort_IT+0x428>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d072      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a5b      	ldr	r2, [pc, #364]	; (8001160 <HAL_DMA_Abort_IT+0x42c>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d06d      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a59      	ldr	r2, [pc, #356]	; (8001164 <HAL_DMA_Abort_IT+0x430>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d068      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a58      	ldr	r2, [pc, #352]	; (8001168 <HAL_DMA_Abort_IT+0x434>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d063      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a56      	ldr	r2, [pc, #344]	; (800116c <HAL_DMA_Abort_IT+0x438>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d05e      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a55      	ldr	r2, [pc, #340]	; (8001170 <HAL_DMA_Abort_IT+0x43c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d059      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a53      	ldr	r2, [pc, #332]	; (8001174 <HAL_DMA_Abort_IT+0x440>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d054      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a52      	ldr	r2, [pc, #328]	; (8001178 <HAL_DMA_Abort_IT+0x444>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d04f      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a50      	ldr	r2, [pc, #320]	; (800117c <HAL_DMA_Abort_IT+0x448>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d04a      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a4f      	ldr	r2, [pc, #316]	; (8001180 <HAL_DMA_Abort_IT+0x44c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d045      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a4d      	ldr	r2, [pc, #308]	; (8001184 <HAL_DMA_Abort_IT+0x450>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d040      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <HAL_DMA_Abort_IT+0x454>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d03b      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_DMA_Abort_IT+0x458>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d036      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a49      	ldr	r2, [pc, #292]	; (8001190 <HAL_DMA_Abort_IT+0x45c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d031      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a47      	ldr	r2, [pc, #284]	; (8001194 <HAL_DMA_Abort_IT+0x460>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d02c      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a46      	ldr	r2, [pc, #280]	; (8001198 <HAL_DMA_Abort_IT+0x464>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d027      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a44      	ldr	r2, [pc, #272]	; (800119c <HAL_DMA_Abort_IT+0x468>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d022      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a43      	ldr	r2, [pc, #268]	; (80011a0 <HAL_DMA_Abort_IT+0x46c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d01d      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a41      	ldr	r2, [pc, #260]	; (80011a4 <HAL_DMA_Abort_IT+0x470>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d018      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a40      	ldr	r2, [pc, #256]	; (80011a8 <HAL_DMA_Abort_IT+0x474>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d013      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a3e      	ldr	r2, [pc, #248]	; (80011ac <HAL_DMA_Abort_IT+0x478>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00e      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a3d      	ldr	r2, [pc, #244]	; (80011b0 <HAL_DMA_Abort_IT+0x47c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d009      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a3b      	ldr	r2, [pc, #236]	; (80011b4 <HAL_DMA_Abort_IT+0x480>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d004      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x3a0>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a3a      	ldr	r2, [pc, #232]	; (80011b8 <HAL_DMA_Abort_IT+0x484>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d101      	bne.n	80010d8 <HAL_DMA_Abort_IT+0x3a4>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_DMA_Abort_IT+0x3a6>
 80010d8:	2300      	movs	r3, #0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d028      	beq.n	8001130 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	2201      	movs	r2, #1
 80010fe:	409a      	lsls	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800110c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00c      	beq.n	8001130 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001124:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800112e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40020010 	.word	0x40020010
 8001160:	40020028 	.word	0x40020028
 8001164:	40020040 	.word	0x40020040
 8001168:	40020058 	.word	0x40020058
 800116c:	40020070 	.word	0x40020070
 8001170:	40020088 	.word	0x40020088
 8001174:	400200a0 	.word	0x400200a0
 8001178:	400200b8 	.word	0x400200b8
 800117c:	40020410 	.word	0x40020410
 8001180:	40020428 	.word	0x40020428
 8001184:	40020440 	.word	0x40020440
 8001188:	40020458 	.word	0x40020458
 800118c:	40020470 	.word	0x40020470
 8001190:	40020488 	.word	0x40020488
 8001194:	400204a0 	.word	0x400204a0
 8001198:	400204b8 	.word	0x400204b8
 800119c:	58025408 	.word	0x58025408
 80011a0:	5802541c 	.word	0x5802541c
 80011a4:	58025430 	.word	0x58025430
 80011a8:	58025444 	.word	0x58025444
 80011ac:	58025458 	.word	0x58025458
 80011b0:	5802546c 	.word	0x5802546c
 80011b4:	58025480 	.word	0x58025480
 80011b8:	58025494 	.word	0x58025494

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011ca:	4b89      	ldr	r3, [pc, #548]	; (80013f0 <HAL_GPIO_Init+0x234>)
 80011cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011ce:	e194      	b.n	80014fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2101      	movs	r1, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8186 	beq.w	80014f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d00b      	beq.n	8001208 <HAL_GPIO_Init+0x4c>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d007      	beq.n	8001208 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011fc:	2b11      	cmp	r3, #17
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b12      	cmp	r3, #18
 8001206:	d130      	bne.n	800126a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800123e:	2201      	movs	r2, #1
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	f003 0201 	and.w	r2, r3, #1
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0xee>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b12      	cmp	r3, #18
 80012a8:	d123      	bne.n	80012f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3208      	adds	r2, #8
 80012b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	691a      	ldr	r2, [r3, #16]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	69b9      	ldr	r1, [r7, #24]
 80012ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0203 	and.w	r2, r3, #3
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 80e0 	beq.w	80014f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001334:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <HAL_GPIO_Init+0x238>)
 8001336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800133a:	4a2e      	ldr	r2, [pc, #184]	; (80013f4 <HAL_GPIO_Init+0x238>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <HAL_GPIO_Init+0x238>)
 8001346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <HAL_GPIO_Init+0x23c>)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a20      	ldr	r2, [pc, #128]	; (80013fc <HAL_GPIO_Init+0x240>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d052      	beq.n	8001424 <HAL_GPIO_Init+0x268>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <HAL_GPIO_Init+0x244>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d031      	beq.n	80013ea <HAL_GPIO_Init+0x22e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <HAL_GPIO_Init+0x248>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d02b      	beq.n	80013e6 <HAL_GPIO_Init+0x22a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <HAL_GPIO_Init+0x24c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d025      	beq.n	80013e2 <HAL_GPIO_Init+0x226>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a1c      	ldr	r2, [pc, #112]	; (800140c <HAL_GPIO_Init+0x250>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d01f      	beq.n	80013de <HAL_GPIO_Init+0x222>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <HAL_GPIO_Init+0x254>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x21e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <HAL_GPIO_Init+0x258>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x21a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_GPIO_Init+0x25c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x216>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a18      	ldr	r2, [pc, #96]	; (800141c <HAL_GPIO_Init+0x260>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x212>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_GPIO_Init+0x264>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x20e>
 80013c6:	2309      	movs	r3, #9
 80013c8:	e02d      	b.n	8001426 <HAL_GPIO_Init+0x26a>
 80013ca:	230a      	movs	r3, #10
 80013cc:	e02b      	b.n	8001426 <HAL_GPIO_Init+0x26a>
 80013ce:	2308      	movs	r3, #8
 80013d0:	e029      	b.n	8001426 <HAL_GPIO_Init+0x26a>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e027      	b.n	8001426 <HAL_GPIO_Init+0x26a>
 80013d6:	2306      	movs	r3, #6
 80013d8:	e025      	b.n	8001426 <HAL_GPIO_Init+0x26a>
 80013da:	2305      	movs	r3, #5
 80013dc:	e023      	b.n	8001426 <HAL_GPIO_Init+0x26a>
 80013de:	2304      	movs	r3, #4
 80013e0:	e021      	b.n	8001426 <HAL_GPIO_Init+0x26a>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e01f      	b.n	8001426 <HAL_GPIO_Init+0x26a>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e01d      	b.n	8001426 <HAL_GPIO_Init+0x26a>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e01b      	b.n	8001426 <HAL_GPIO_Init+0x26a>
 80013ee:	bf00      	nop
 80013f0:	58000080 	.word	0x58000080
 80013f4:	58024400 	.word	0x58024400
 80013f8:	58000400 	.word	0x58000400
 80013fc:	58020000 	.word	0x58020000
 8001400:	58020400 	.word	0x58020400
 8001404:	58020800 	.word	0x58020800
 8001408:	58020c00 	.word	0x58020c00
 800140c:	58021000 	.word	0x58021000
 8001410:	58021400 	.word	0x58021400
 8001414:	58021800 	.word	0x58021800
 8001418:	58021c00 	.word	0x58021c00
 800141c:	58022000 	.word	0x58022000
 8001420:	58022400 	.word	0x58022400
 8001424:	2300      	movs	r3, #0
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	f002 0203 	and.w	r2, r2, #3
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	4093      	lsls	r3, r2
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001436:	4938      	ldr	r1, [pc, #224]	; (8001518 <HAL_GPIO_Init+0x35c>)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	3301      	adds	r3, #1
 80014f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	f47f ae63 	bne.w	80011d0 <HAL_GPIO_Init+0x14>
  }
}
 800150a:	bf00      	nop
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	58000400 	.word	0x58000400

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001538:	e003      	b.n	8001542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_PWREx_ConfigSupply+0xb0>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	2b06      	cmp	r3, #6
 8001562:	d00a      	beq.n	800157a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_PWREx_ConfigSupply+0xb0>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e040      	b.n	80015f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e03e      	b.n	80015f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_PWREx_ConfigSupply+0xb0>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001582:	491f      	ldr	r1, [pc, #124]	; (8001600 <HAL_PWREx_ConfigSupply+0xb0>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4313      	orrs	r3, r2
 8001588:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800158a:	f7ff fa89 	bl	8000aa0 <HAL_GetTick>
 800158e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001590:	e009      	b.n	80015a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001592:	f7ff fa85 	bl	8000aa0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a0:	d901      	bls.n	80015a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e028      	b.n	80015f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_PWREx_ConfigSupply+0xb0>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b2:	d1ee      	bne.n	8001592 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b1e      	cmp	r3, #30
 80015b8:	d008      	beq.n	80015cc <HAL_PWREx_ConfigSupply+0x7c>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b2e      	cmp	r3, #46	; 0x2e
 80015be:	d005      	beq.n	80015cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b1d      	cmp	r3, #29
 80015c4:	d002      	beq.n	80015cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b2d      	cmp	r3, #45	; 0x2d
 80015ca:	d114      	bne.n	80015f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80015cc:	f7ff fa68 	bl	8000aa0 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015d2:	e009      	b.n	80015e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015d4:	f7ff fa64 	bl	8000aa0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015e2:	d901      	bls.n	80015e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e007      	b.n	80015f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_PWREx_ConfigSupply+0xb0>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d1ee      	bne.n	80015d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	58024800 	.word	0x58024800

08001604 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	; 0x30
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e3ff      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8087 	beq.w	8001732 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001624:	4b99      	ldr	r3, [pc, #612]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800162e:	4b97      	ldr	r3, [pc, #604]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	2b10      	cmp	r3, #16
 8001638:	d007      	beq.n	800164a <HAL_RCC_OscConfig+0x46>
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	2b18      	cmp	r3, #24
 800163e:	d110      	bne.n	8001662 <HAL_RCC_OscConfig+0x5e>
 8001640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d10b      	bne.n	8001662 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164a:	4b90      	ldr	r3, [pc, #576]	; (800188c <HAL_RCC_OscConfig+0x288>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d06c      	beq.n	8001730 <HAL_RCC_OscConfig+0x12c>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d168      	bne.n	8001730 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e3d9      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x76>
 800166c:	4b87      	ldr	r3, [pc, #540]	; (800188c <HAL_RCC_OscConfig+0x288>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a86      	ldr	r2, [pc, #536]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	e02e      	b.n	80016d8 <HAL_RCC_OscConfig+0xd4>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0x98>
 8001682:	4b82      	ldr	r3, [pc, #520]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a81      	ldr	r2, [pc, #516]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b7f      	ldr	r3, [pc, #508]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7e      	ldr	r2, [pc, #504]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e01d      	b.n	80016d8 <HAL_RCC_OscConfig+0xd4>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0xbc>
 80016a6:	4b79      	ldr	r3, [pc, #484]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a78      	ldr	r2, [pc, #480]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b76      	ldr	r3, [pc, #472]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a75      	ldr	r2, [pc, #468]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0xd4>
 80016c0:	4b72      	ldr	r3, [pc, #456]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a71      	ldr	r2, [pc, #452]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b6f      	ldr	r3, [pc, #444]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a6e      	ldr	r2, [pc, #440]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff f9de 	bl	8000aa0 <HAL_GetTick>
 80016e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff f9da 	bl	8000aa0 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e38d      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016fa:	4b64      	ldr	r3, [pc, #400]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0xe4>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff f9ca 	bl	8000aa0 <HAL_GetTick>
 800170c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff f9c6 	bl	8000aa0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e379      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001722:	4b5a      	ldr	r3, [pc, #360]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x10c>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80ae 	beq.w	800189c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001740:	4b52      	ldr	r3, [pc, #328]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001748:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800174a:	4b50      	ldr	r3, [pc, #320]	; (800188c <HAL_RCC_OscConfig+0x288>)
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_RCC_OscConfig+0x162>
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	2b18      	cmp	r3, #24
 800175a:	d13a      	bne.n	80017d2 <HAL_RCC_OscConfig+0x1ce>
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d135      	bne.n	80017d2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_RCC_OscConfig+0x17a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e34b      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	f7ff f9bd 	bl	8000afc <HAL_GetREVID>
 8001782:	4602      	mov	r2, r0
 8001784:	f241 0303 	movw	r3, #4099	; 0x1003
 8001788:	429a      	cmp	r2, r3
 800178a:	d817      	bhi.n	80017bc <HAL_RCC_OscConfig+0x1b8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	2b40      	cmp	r3, #64	; 0x40
 8001792:	d108      	bne.n	80017a6 <HAL_RCC_OscConfig+0x1a2>
 8001794:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800179c:	4a3b      	ldr	r2, [pc, #236]	; (800188c <HAL_RCC_OscConfig+0x288>)
 800179e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a4:	e07a      	b.n	800189c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	031b      	lsls	r3, r3, #12
 80017b4:	4935      	ldr	r1, [pc, #212]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ba:	e06f      	b.n	800189c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	061b      	lsls	r3, r3, #24
 80017ca:	4930      	ldr	r1, [pc, #192]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d0:	e064      	b.n	800189c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d045      	beq.n	8001866 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 0219 	bic.w	r2, r3, #25
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	4929      	ldr	r1, [pc, #164]	; (800188c <HAL_RCC_OscConfig+0x288>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff f958 	bl	8000aa0 <HAL_GetTick>
 80017f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff f954 	bl	8000aa0 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e307      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	f7ff f973 	bl	8000afc <HAL_GetREVID>
 8001816:	4602      	mov	r2, r0
 8001818:	f241 0303 	movw	r3, #4099	; 0x1003
 800181c:	429a      	cmp	r2, r3
 800181e:	d817      	bhi.n	8001850 <HAL_RCC_OscConfig+0x24c>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	2b40      	cmp	r3, #64	; 0x40
 8001826:	d108      	bne.n	800183a <HAL_RCC_OscConfig+0x236>
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_RCC_OscConfig+0x288>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001836:	6053      	str	r3, [r2, #4]
 8001838:	e030      	b.n	800189c <HAL_RCC_OscConfig+0x298>
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_RCC_OscConfig+0x288>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	031b      	lsls	r3, r3, #12
 8001848:	4910      	ldr	r1, [pc, #64]	; (800188c <HAL_RCC_OscConfig+0x288>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
 800184e:	e025      	b.n	800189c <HAL_RCC_OscConfig+0x298>
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	490b      	ldr	r1, [pc, #44]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
 8001864:	e01a      	b.n	800189c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_OscConfig+0x288>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_RCC_OscConfig+0x288>)
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff f915 	bl	8000aa0 <HAL_GetTick>
 8001876:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff f911 	bl	8000aa0 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d903      	bls.n	8001890 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e2c4      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
 800188c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001890:	4ba4      	ldr	r3, [pc, #656]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ee      	bne.n	800187a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80a9 	beq.w	80019fc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018aa:	4b9e      	ldr	r3, [pc, #632]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018b4:	4b9b      	ldr	r3, [pc, #620]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d007      	beq.n	80018d0 <HAL_RCC_OscConfig+0x2cc>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b18      	cmp	r3, #24
 80018c4:	d13a      	bne.n	800193c <HAL_RCC_OscConfig+0x338>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d135      	bne.n	800193c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018d0:	4b94      	ldr	r3, [pc, #592]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_OscConfig+0x2e4>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b80      	cmp	r3, #128	; 0x80
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e296      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018e8:	f7ff f908 	bl	8000afc <HAL_GetREVID>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d817      	bhi.n	8001926 <HAL_RCC_OscConfig+0x322>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	d108      	bne.n	8001910 <HAL_RCC_OscConfig+0x30c>
 80018fe:	4b89      	ldr	r3, [pc, #548]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001906:	4a87      	ldr	r2, [pc, #540]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800190c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800190e:	e075      	b.n	80019fc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001910:	4b84      	ldr	r3, [pc, #528]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	069b      	lsls	r3, r3, #26
 800191e:	4981      	ldr	r1, [pc, #516]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001924:	e06a      	b.n	80019fc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001926:	4b7f      	ldr	r3, [pc, #508]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	061b      	lsls	r3, r3, #24
 8001934:	497b      	ldr	r1, [pc, #492]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001936:	4313      	orrs	r3, r2
 8001938:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800193a:	e05f      	b.n	80019fc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d042      	beq.n	80019ca <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001944:	4b77      	ldr	r3, [pc, #476]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a76      	ldr	r2, [pc, #472]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 800194a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f8a6 	bl	8000aa0 <HAL_GetTick>
 8001954:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001958:	f7ff f8a2 	bl	8000aa0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e255      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800196a:	4b6e      	ldr	r3, [pc, #440]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001976:	f7ff f8c1 	bl	8000afc <HAL_GetREVID>
 800197a:	4602      	mov	r2, r0
 800197c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001980:	429a      	cmp	r2, r3
 8001982:	d817      	bhi.n	80019b4 <HAL_RCC_OscConfig+0x3b0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	2b20      	cmp	r3, #32
 800198a:	d108      	bne.n	800199e <HAL_RCC_OscConfig+0x39a>
 800198c:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001994:	4a63      	ldr	r2, [pc, #396]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800199a:	6053      	str	r3, [r2, #4]
 800199c:	e02e      	b.n	80019fc <HAL_RCC_OscConfig+0x3f8>
 800199e:	4b61      	ldr	r3, [pc, #388]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	069b      	lsls	r3, r3, #26
 80019ac:	495d      	ldr	r1, [pc, #372]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
 80019b2:	e023      	b.n	80019fc <HAL_RCC_OscConfig+0x3f8>
 80019b4:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	4958      	ldr	r1, [pc, #352]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
 80019c8:	e018      	b.n	80019fc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019ca:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a55      	ldr	r2, [pc, #340]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 80019d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff f863 	bl	8000aa0 <HAL_GetTick>
 80019da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80019de:	f7ff f85f 	bl	8000aa0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e212      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019f0:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d036      	beq.n	8001a76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d019      	beq.n	8001a44 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a10:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a14:	4a43      	ldr	r2, [pc, #268]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f840 	bl	8000aa0 <HAL_GetTick>
 8001a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff f83c 	bl	8000aa0 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1ef      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x420>
 8001a42:	e018      	b.n	8001a76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a44:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a48:	4a36      	ldr	r2, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f826 	bl	8000aa0 <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff f822 	bl	8000aa0 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e1d5      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d036      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d019      	beq.n	8001abe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a25      	ldr	r2, [pc, #148]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a96:	f7ff f803 	bl	8000aa0 <HAL_GetTick>
 8001a9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a9e:	f7fe ffff 	bl	8000aa0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1b2      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x49a>
 8001abc:	e018      	b.n	8001af0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001aca:	f7fe ffe9 	bl	8000aa0 <HAL_GetTick>
 8001ace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ad2:	f7fe ffe5 	bl	8000aa0 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e198      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_RCC_OscConfig+0x520>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8085 	beq.w	8001c08 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_OscConfig+0x524>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_RCC_OscConfig+0x524>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b0a:	f7fe ffc9 	bl	8000aa0 <HAL_GetTick>
 8001b0e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b10:	e00c      	b.n	8001b2c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b12:	f7fe ffc5 	bl	8000aa0 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b64      	cmp	r3, #100	; 0x64
 8001b1e:	d905      	bls.n	8001b2c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e178      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
 8001b24:	58024400 	.word	0x58024400
 8001b28:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b2c:	4b96      	ldr	r3, [pc, #600]	; (8001d88 <HAL_RCC_OscConfig+0x784>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ec      	beq.n	8001b12 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x54a>
 8001b40:	4b92      	ldr	r3, [pc, #584]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a91      	ldr	r2, [pc, #580]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4c:	e02d      	b.n	8001baa <HAL_RCC_OscConfig+0x5a6>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x56c>
 8001b56:	4b8d      	ldr	r3, [pc, #564]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	4a8c      	ldr	r2, [pc, #560]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
 8001b62:	4b8a      	ldr	r3, [pc, #552]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	4a89      	ldr	r2, [pc, #548]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6e:	e01c      	b.n	8001baa <HAL_RCC_OscConfig+0x5a6>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d10c      	bne.n	8001b92 <HAL_RCC_OscConfig+0x58e>
 8001b78:	4b84      	ldr	r3, [pc, #528]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	4a83      	ldr	r2, [pc, #524]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6713      	str	r3, [r2, #112]	; 0x70
 8001b84:	4b81      	ldr	r3, [pc, #516]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	4a80      	ldr	r2, [pc, #512]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b90:	e00b      	b.n	8001baa <HAL_RCC_OscConfig+0x5a6>
 8001b92:	4b7e      	ldr	r3, [pc, #504]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b96:	4a7d      	ldr	r2, [pc, #500]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9e:	4b7b      	ldr	r3, [pc, #492]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	4a7a      	ldr	r2, [pc, #488]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d015      	beq.n	8001bde <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb2:	f7fe ff75 	bl	8000aa0 <HAL_GetTick>
 8001bb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7fe ff71 	bl	8000aa0 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e122      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bd0:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ee      	beq.n	8001bba <HAL_RCC_OscConfig+0x5b6>
 8001bdc:	e014      	b.n	8001c08 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7fe ff5f 	bl	8000aa0 <HAL_GetTick>
 8001be2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7fe ff5b 	bl	8000aa0 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e10c      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bfc:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ee      	bne.n	8001be6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8101 	beq.w	8001e14 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c12:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c1a:	2b18      	cmp	r3, #24
 8001c1c:	f000 80bc 	beq.w	8001d98 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	f040 8095 	bne.w	8001d54 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b58      	ldr	r3, [pc, #352]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a57      	ldr	r2, [pc, #348]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7fe ff33 	bl	8000aa0 <HAL_GetTick>
 8001c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7fe ff2f 	bl	8000aa0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e0e2      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c50:	4b4e      	ldr	r3, [pc, #312]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5c:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c60:	4b4b      	ldr	r3, [pc, #300]	; (8001d90 <HAL_RCC_OscConfig+0x78c>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	4946      	ldr	r1, [pc, #280]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	628b      	str	r3, [r1, #40]	; 0x28
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c84:	3b01      	subs	r3, #1
 8001c86:	025b      	lsls	r3, r3, #9
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c90:	3b01      	subs	r3, #1
 8001c92:	041b      	lsls	r3, r3, #16
 8001c94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ca6:	4939      	ldr	r1, [pc, #228]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001cac:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	4a36      	ldr	r2, [pc, #216]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cb8:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_RCC_OscConfig+0x790>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cc4:	00d2      	lsls	r2, r2, #3
 8001cc6:	4931      	ldr	r1, [pc, #196]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	f023 020c 	bic.w	r2, r3, #12
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	492c      	ldr	r1, [pc, #176]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001cde:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f023 0202 	bic.w	r2, r3, #2
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4928      	ldr	r1, [pc, #160]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cf0:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7fe feb8 	bl	8000aa0 <HAL_GetTick>
 8001d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d34:	f7fe feb4 	bl	8000aa0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e067      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x730>
 8001d52:	e05f      	b.n	8001e14 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0c      	ldr	r2, [pc, #48]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7fe fe9e 	bl	8000aa0 <HAL_GetTick>
 8001d64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe fe9a 	bl	8000aa0 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e04d      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HAL_RCC_OscConfig+0x788>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x764>
 8001d86:	e045      	b.n	8001e14 <HAL_RCC_OscConfig+0x810>
 8001d88:	58024800 	.word	0x58024800
 8001d8c:	58024400 	.word	0x58024400
 8001d90:	fffffc0c 	.word	0xfffffc0c
 8001d94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HAL_RCC_OscConfig+0x81c>)
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_RCC_OscConfig+0x81c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d031      	beq.n	8001e10 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f003 0203 	and.w	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d12a      	bne.n	8001e10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d122      	bne.n	8001e10 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d11a      	bne.n	8001e10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	0a5b      	lsrs	r3, r3, #9
 8001dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d111      	bne.n	8001e10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	0c1b      	lsrs	r3, r3, #16
 8001df0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d108      	bne.n	8001e10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	0e1b      	lsrs	r3, r3, #24
 8001e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3730      	adds	r7, #48	; 0x30
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	58024400 	.word	0x58024400

08001e24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e19c      	b.n	8002172 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e38:	4b8a      	ldr	r3, [pc, #552]	; (8002064 <HAL_RCC_ClockConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d910      	bls.n	8001e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b87      	ldr	r3, [pc, #540]	; (8002064 <HAL_RCC_ClockConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 020f 	bic.w	r2, r3, #15
 8001e4e:	4985      	ldr	r1, [pc, #532]	; (8002064 <HAL_RCC_ClockConfig+0x240>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b83      	ldr	r3, [pc, #524]	; (8002064 <HAL_RCC_ClockConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e184      	b.n	8002172 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d010      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d908      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e84:	4b78      	ldr	r3, [pc, #480]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	4975      	ldr	r1, [pc, #468]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d010      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	4b70      	ldr	r3, [pc, #448]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d908      	bls.n	8001ec4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	496a      	ldr	r1, [pc, #424]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d010      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	4b64      	ldr	r3, [pc, #400]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d908      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ee0:	4b61      	ldr	r3, [pc, #388]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	495e      	ldr	r1, [pc, #376]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d010      	beq.n	8001f20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	4b59      	ldr	r3, [pc, #356]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d908      	bls.n	8001f20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f0e:	4b56      	ldr	r3, [pc, #344]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4953      	ldr	r1, [pc, #332]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d010      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d908      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f023 020f 	bic.w	r2, r3, #15
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4947      	ldr	r1, [pc, #284]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d055      	beq.n	8002006 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f5a:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4940      	ldr	r1, [pc, #256]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f74:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d121      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0f6      	b.n	8002172 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d115      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0ea      	b.n	8002172 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d109      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0de      	b.n	8002172 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0d6      	b.n	8002172 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc4:	4b28      	ldr	r3, [pc, #160]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f023 0207 	bic.w	r2, r3, #7
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4925      	ldr	r1, [pc, #148]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd6:	f7fe fd63 	bl	8000aa0 <HAL_GetTick>
 8001fda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fde:	f7fe fd5f 	bl	8000aa0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0be      	b.n	8002172 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	429a      	cmp	r2, r3
 8002004:	d1eb      	bne.n	8001fde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d010      	beq.n	8002034 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	429a      	cmp	r2, r3
 8002020:	d208      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f023 020f 	bic.w	r2, r3, #15
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	490e      	ldr	r1, [pc, #56]	; (8002068 <HAL_RCC_ClockConfig+0x244>)
 8002030:	4313      	orrs	r3, r2
 8002032:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_ClockConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d214      	bcs.n	800206c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_RCC_ClockConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 020f 	bic.w	r2, r3, #15
 800204a:	4906      	ldr	r1, [pc, #24]	; (8002064 <HAL_RCC_ClockConfig+0x240>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <HAL_RCC_ClockConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e086      	b.n	8002172 <HAL_RCC_ClockConfig+0x34e>
 8002064:	52002000 	.word	0x52002000
 8002068:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	4b3f      	ldr	r3, [pc, #252]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002084:	429a      	cmp	r2, r3
 8002086:	d208      	bcs.n	800209a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002088:	4b3c      	ldr	r3, [pc, #240]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	4939      	ldr	r1, [pc, #228]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 8002096:	4313      	orrs	r3, r2
 8002098:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	4b34      	ldr	r3, [pc, #208]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d208      	bcs.n	80020c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020b6:	4b31      	ldr	r3, [pc, #196]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	492e      	ldr	r1, [pc, #184]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d010      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d208      	bcs.n	80020f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4922      	ldr	r1, [pc, #136]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d010      	beq.n	8002124 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800210e:	429a      	cmp	r2, r3
 8002110:	d208      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4917      	ldr	r1, [pc, #92]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 8002120:	4313      	orrs	r3, r2
 8002122:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002124:	f000 f834 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8002128:	4601      	mov	r1, r0
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	4a12      	ldr	r2, [pc, #72]	; (8002180 <HAL_RCC_ClockConfig+0x35c>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	fa21 f303 	lsr.w	r3, r1, r3
 8002140:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_RCC_ClockConfig+0x358>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <HAL_RCC_ClockConfig+0x35c>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_RCC_ClockConfig+0x360>)
 800215a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_RCC_ClockConfig+0x364>)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x368>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fc50 	bl	8000a0c <HAL_InitTick>
 800216c:	4603      	mov	r3, r0
 800216e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002170:	7bfb      	ldrb	r3, [r7, #15]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	58024400 	.word	0x58024400
 8002180:	08002ed8 	.word	0x08002ed8
 8002184:	20000004 	.word	0x20000004
 8002188:	20000000 	.word	0x20000000
 800218c:	2000000c 	.word	0x2000000c

08002190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002196:	4baf      	ldr	r3, [pc, #700]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800219e:	2b18      	cmp	r3, #24
 80021a0:	f200 814e 	bhi.w	8002440 <HAL_RCC_GetSysClockFreq+0x2b0>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	08002211 	.word	0x08002211
 80021b0:	08002441 	.word	0x08002441
 80021b4:	08002441 	.word	0x08002441
 80021b8:	08002441 	.word	0x08002441
 80021bc:	08002441 	.word	0x08002441
 80021c0:	08002441 	.word	0x08002441
 80021c4:	08002441 	.word	0x08002441
 80021c8:	08002441 	.word	0x08002441
 80021cc:	08002237 	.word	0x08002237
 80021d0:	08002441 	.word	0x08002441
 80021d4:	08002441 	.word	0x08002441
 80021d8:	08002441 	.word	0x08002441
 80021dc:	08002441 	.word	0x08002441
 80021e0:	08002441 	.word	0x08002441
 80021e4:	08002441 	.word	0x08002441
 80021e8:	08002441 	.word	0x08002441
 80021ec:	0800223d 	.word	0x0800223d
 80021f0:	08002441 	.word	0x08002441
 80021f4:	08002441 	.word	0x08002441
 80021f8:	08002441 	.word	0x08002441
 80021fc:	08002441 	.word	0x08002441
 8002200:	08002441 	.word	0x08002441
 8002204:	08002441 	.word	0x08002441
 8002208:	08002441 	.word	0x08002441
 800220c:	08002243 	.word	0x08002243
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002210:	4b90      	ldr	r3, [pc, #576]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800221c:	4b8d      	ldr	r3, [pc, #564]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	4a8c      	ldr	r2, [pc, #560]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800222e:	e10a      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002230:	4b89      	ldr	r3, [pc, #548]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002232:	61bb      	str	r3, [r7, #24]
    break;
 8002234:	e107      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002236:	4b89      	ldr	r3, [pc, #548]	; (800245c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002238:	61bb      	str	r3, [r7, #24]
    break;
 800223a:	e104      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800223c:	4b88      	ldr	r3, [pc, #544]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800223e:	61bb      	str	r3, [r7, #24]
    break;
 8002240:	e101      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002242:	4b84      	ldr	r3, [pc, #528]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800224c:	4b81      	ldr	r3, [pc, #516]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002256:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002258:	4b7e      	ldr	r3, [pc, #504]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002262:	4b7c      	ldr	r3, [pc, #496]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002266:	08db      	lsrs	r3, r3, #3
 8002268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80da 	beq.w	800243a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d05a      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0x1b2>
 800228c:	2b01      	cmp	r3, #1
 800228e:	d302      	bcc.n	8002296 <HAL_RCC_GetSysClockFreq+0x106>
 8002290:	2b02      	cmp	r3, #2
 8002292:	d078      	beq.n	8002386 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002294:	e099      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002296:	4b6f      	ldr	r3, [pc, #444]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d02d      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022a2:	4b6c      	ldr	r3, [pc, #432]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	08db      	lsrs	r3, r3, #3
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	4a6a      	ldr	r2, [pc, #424]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022cc:	4b61      	ldr	r3, [pc, #388]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d4:	ee07 3a90 	vmov	s15, r3
 80022d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80022e0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002464 <HAL_RCC_GetSysClockFreq+0x2d4>
 80022e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80022fc:	e087      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	ee07 3a90 	vmov	s15, r3
 8002304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002308:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002468 <HAL_RCC_GetSysClockFreq+0x2d8>
 800230c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002310:	4b50      	ldr	r3, [pc, #320]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002318:	ee07 3a90 	vmov	s15, r3
 800231c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002320:	ed97 6a02 	vldr	s12, [r7, #8]
 8002324:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002464 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800232c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002340:	e065      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800246c <HAL_RCC_GetSysClockFreq+0x2dc>
 8002350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002354:	4b3f      	ldr	r3, [pc, #252]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002364:	ed97 6a02 	vldr	s12, [r7, #8]
 8002368:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002464 <HAL_RCC_GetSysClockFreq+0x2d4>
 800236c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800237c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002380:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002384:	e043      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002390:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002470 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002398:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ac:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002464 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023c8:	e021      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800246c <HAL_RCC_GetSysClockFreq+0x2dc>
 80023d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80023f0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002464 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800240c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	0a5b      	lsrs	r3, r3, #9
 8002414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002418:	3301      	adds	r3, #1
 800241a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002426:	edd7 6a07 	vldr	s13, [r7, #28]
 800242a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800242e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002432:	ee17 3a90 	vmov	r3, s15
 8002436:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002438:	e005      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
    break;
 800243e:	e002      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002442:	61bb      	str	r3, [r7, #24]
    break;
 8002444:	bf00      	nop
  }

  return sysclockfreq;
 8002446:	69bb      	ldr	r3, [r7, #24]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3724      	adds	r7, #36	; 0x24
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	58024400 	.word	0x58024400
 8002458:	03d09000 	.word	0x03d09000
 800245c:	003d0900 	.word	0x003d0900
 8002460:	017d7840 	.word	0x017d7840
 8002464:	46000000 	.word	0x46000000
 8002468:	4c742400 	.word	0x4c742400
 800246c:	4a742400 	.word	0x4a742400
 8002470:	4bbebc20 	.word	0x4bbebc20

08002474 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e0e2      	b.n	8002650 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a70      	ldr	r2, [pc, #448]	; (8002658 <HAL_SPI_Init+0x1e4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00f      	beq.n	80024ba <HAL_SPI_Init+0x46>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6f      	ldr	r2, [pc, #444]	; (800265c <HAL_SPI_Init+0x1e8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00a      	beq.n	80024ba <HAL_SPI_Init+0x46>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a6d      	ldr	r2, [pc, #436]	; (8002660 <HAL_SPI_Init+0x1ec>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d005      	beq.n	80024ba <HAL_SPI_Init+0x46>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	d901      	bls.n	80024ba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0ca      	b.n	8002650 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fcc0 	bl	8002e40 <SPI_GetPacketSize>
 80024c0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a64      	ldr	r2, [pc, #400]	; (8002658 <HAL_SPI_Init+0x1e4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00c      	beq.n	80024e6 <HAL_SPI_Init+0x72>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a62      	ldr	r2, [pc, #392]	; (800265c <HAL_SPI_Init+0x1e8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <HAL_SPI_Init+0x72>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a61      	ldr	r2, [pc, #388]	; (8002660 <HAL_SPI_Init+0x1ec>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d002      	beq.n	80024e6 <HAL_SPI_Init+0x72>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d811      	bhi.n	800250a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80024ea:	4a5b      	ldr	r2, [pc, #364]	; (8002658 <HAL_SPI_Init+0x1e4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d009      	beq.n	8002504 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a59      	ldr	r2, [pc, #356]	; (800265c <HAL_SPI_Init+0x1e8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d004      	beq.n	8002504 <HAL_SPI_Init+0x90>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_SPI_Init+0x1ec>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d104      	bne.n	800250e <HAL_SPI_Init+0x9a>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b10      	cmp	r3, #16
 8002508:	d901      	bls.n	800250e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0a0      	b.n	8002650 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe f960 	bl	80007e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002548:	d110      	bne.n	800256c <HAL_SPI_Init+0xf8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002552:	d10b      	bne.n	800256c <HAL_SPI_Init+0xf8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800256a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69da      	ldr	r2, [r3, #28]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	431a      	orrs	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	ea42 0103 	orr.w	r1, r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025cc:	ea42 0103 	orr.w	r1, r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d113      	bne.n	800260c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025f6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800260a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40013000 	.word	0x40013000
 800265c:	40003800 	.word	0x40003800
 8002660:	40003c00 	.word	0x40003c00

08002664 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_SPI_Transmit_IT+0x20>
 8002680:	2302      	movs	r3, #2
 8002682:	e08d      	b.n	80027a0 <HAL_SPI_Transmit_IT+0x13c>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if ((pData == NULL) || (Size == 0UL))
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_SPI_Transmit_IT+0x34>
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	e07b      	b.n	80027a0 <HAL_SPI_Transmit_IT+0x13c>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d007      	beq.n	80026c4 <HAL_SPI_Transmit_IT+0x60>
  {
    errorcode = HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
 80026b6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	e06d      	b.n	80027a0 <HAL_SPI_Transmit_IT+0x13c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2203      	movs	r2, #3
 80026c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	88fa      	ldrh	r2, [r7, #6]
 80026e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	671a      	str	r2, [r3, #112]	; 0x70

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b0f      	cmp	r3, #15
 800270c:	d903      	bls.n	8002716 <HAL_SPI_Transmit_IT+0xb2>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <HAL_SPI_Transmit_IT+0x148>)
 8002712:	675a      	str	r2, [r3, #116]	; 0x74
 8002714:	e00a      	b.n	800272c <HAL_SPI_Transmit_IT+0xc8>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b07      	cmp	r3, #7
 800271c:	d903      	bls.n	8002726 <HAL_SPI_Transmit_IT+0xc2>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a23      	ldr	r2, [pc, #140]	; (80027b0 <HAL_SPI_Transmit_IT+0x14c>)
 8002722:	675a      	str	r2, [r3, #116]	; 0x74
 8002724:	e002      	b.n	800272c <HAL_SPI_Transmit_IT+0xc8>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a22      	ldr	r2, [pc, #136]	; (80027b4 <HAL_SPI_Transmit_IT+0x150>)
 800272a:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002734:	d107      	bne.n	8002746 <HAL_SPI_Transmit_IT+0xe2>
  {
    SPI_1LINE_TX(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <HAL_SPI_Transmit_IT+0x154>)
 800274e:	4013      	ands	r3, r2
 8002750:	88f9      	ldrh	r1, [r7, #6]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	430b      	orrs	r3, r1
 8002758:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6919      	ldr	r1, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	f240 732a 	movw	r3, #1834	; 0x72a
 8002778:	430b      	orrs	r3, r1
 800277a:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002784:	d107      	bne.n	8002796 <HAL_SPI_Transmit_IT+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002794:	601a      	str	r2, [r3, #0]
  }

  __HAL_UNLOCK(hspi);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800279e:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	08002ca9 	.word	0x08002ca9
 80027b0:	08002c4b 	.word	0x08002c4b
 80027b4:	08002bf1 	.word	0x08002bf1
 80027b8:	ffff0000 	.word	0xffff0000

080027bc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	; 0x28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80027d4:	6a3a      	ldr	r2, [r7, #32]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80027ee:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3330      	adds	r3, #48	; 0x30
 80027f6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d113      	bne.n	800282a <HAL_SPI_IRQHandler+0x6e>
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10e      	bne.n	800282a <HAL_SPI_IRQHandler+0x6e>
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
    handled = 1UL;
 8002826:	2301      	movs	r3, #1
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10f      	bne.n	8002854 <HAL_SPI_IRQHandler+0x98>
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_SPI_IRQHandler+0x98>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
    handled = 1UL;
 8002850:	2301      	movs	r3, #1
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10f      	bne.n	800287e <HAL_SPI_IRQHandler+0xc2>
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_SPI_IRQHandler+0xc2>
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d105      	bne.n	800287e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
    handled = 1UL;
 800287a:	2301      	movs	r3, #1
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	2b00      	cmp	r3, #0
 8002882:	f040 8170 	bne.w	8002b66 <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80a0 	beq.w	80029d2 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699a      	ldr	r2, [r3, #24]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0208 	orr.w	r2, r2, #8
 80028a0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699a      	ldr	r2, [r3, #24]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0210 	orr.w	r2, r2, #16
 80028b0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028c0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0208 	bic.w	r2, r2, #8
 80028d0:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00f      	beq.n	80028fc <HAL_SPI_IRQHandler+0x140>
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d004      	beq.n	80028ec <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <HAL_SPI_IRQHandler+0x140>
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d059      	beq.n	80029a6 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d154      	bne.n	80029a6 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d13d      	bne.n	8002986 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800290a:	e036      	b.n	800297a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b0f      	cmp	r3, #15
 8002912:	d90b      	bls.n	800292c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800291c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800291e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002924:	1d1a      	adds	r2, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	665a      	str	r2, [r3, #100]	; 0x64
 800292a:	e01d      	b.n	8002968 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b07      	cmp	r3, #7
 8002932:	d90b      	bls.n	800294c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	8812      	ldrh	r2, [r2, #0]
 800293c:	b292      	uxth	r2, r2
 800293e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002944:	1c9a      	adds	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	665a      	str	r2, [r3, #100]	; 0x64
 800294a:	e00d      	b.n	8002968 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002958:	7812      	ldrb	r2, [r2, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1c2      	bne.n	800290c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f9ba 	bl	8002d00 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f902 	bl	8002ba8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80029a4:	e0e4      	b.n	8002b70 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d103      	bne.n	80029b4 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f8f1 	bl	8002b94 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 80029b2:	e0da      	b.n	8002b6a <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d103      	bne.n	80029c2 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8e0 	bl	8002b80 <HAL_SPI_RxCpltCallback>
    return;
 80029c0:	e0d3      	b.n	8002b6a <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80029c2:	7cfb      	ldrb	r3, [r7, #19]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	f040 80d0 	bne.w	8002b6a <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fd fdbe 	bl	800054c <HAL_SPI_TxCpltCallback>
    return;
 80029d0:	e0cb      	b.n	8002b6a <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <HAL_SPI_IRQHandler+0x23c>
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f4:	619a      	str	r2, [r3, #24]

    return;
 80029f6:	e0bb      	b.n	8002b70 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80b6 	beq.w	8002b70 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00f      	beq.n	8002a2e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a14:	f043 0204 	orr.w	r2, r3, #4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699a      	ldr	r2, [r3, #24]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a2c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00f      	beq.n	8002a58 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a56:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00f      	beq.n	8002a82 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a68:	f043 0208 	orr.w	r2, r3, #8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a80:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00f      	beq.n	8002aac <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0220 	orr.w	r2, r2, #32
 8002aaa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d05b      	beq.n	8002b6e <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6919      	ldr	r1, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_SPI_IRQHandler+0x3bc>)
 8002ad2:	400b      	ands	r3, r1
 8002ad4:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002adc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ae0:	d138      	bne.n	8002b54 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002af0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d013      	beq.n	8002b22 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afe:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <HAL_SPI_IRQHandler+0x3c0>)
 8002b00:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe f914 	bl	8000d34 <HAL_DMA_Abort_IT>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d021      	beq.n	8002b6e <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b2e:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <HAL_SPI_IRQHandler+0x3c0>)
 8002b30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f8fc 	bl	8000d34 <HAL_DMA_Abort_IT>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d015      	beq.n	8002b6e <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b52:	e00c      	b.n	8002b6e <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f823 	bl	8002ba8 <HAL_SPI_ErrorCallback>
    return;
 8002b62:	bf00      	nop
 8002b64:	e003      	b.n	8002b6e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8002b6e:	bf00      	nop
  }
}
 8002b70:	3728      	adds	r7, #40	; 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	fffffc94 	.word	0xfffffc94
 8002b7c:	08002bbd 	.word	0x08002bbd

08002b80 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff ffe0 	bl	8002ba8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3320      	adds	r3, #32
 8002c02:	7812      	ldrb	r2, [r2, #0]
 8002c04:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else 
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0202 	bic.w	r2, r2, #2
 8002c3c:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3320      	adds	r3, #32
 8002c58:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	881a      	ldrh	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c68:	1c9a      	adds	r2, r3, #2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else 
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0202 	bic.w	r2, r2, #2
 8002c9a:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	1d1a      	adds	r2, r3, #4
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else 
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0202 	bic.w	r2, r2, #2
 8002cf2:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0208 	orr.w	r2, r2, #8
 8002d1e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0210 	orr.w	r2, r2, #16
 8002d2e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6919      	ldr	r1, [r3, #16]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b3c      	ldr	r3, [pc, #240]	; (8002e3c <SPI_CloseTransfer+0x13c>)
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002d5e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d014      	beq.n	8002d96 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00f      	beq.n	8002d96 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0220 	orr.w	r2, r2, #32
 8002d94:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d014      	beq.n	8002dcc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00f      	beq.n	8002dcc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db2:	f043 0204 	orr.w	r2, r3, #4
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00f      	beq.n	8002df6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00f      	beq.n	8002e20 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e06:	f043 0208 	orr.w	r2, r3, #8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	fffffc90 	.word	0xfffffc90

08002e40 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	3301      	adds	r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3307      	adds	r3, #7
 8002e5e:	08db      	lsrs	r3, r3, #3
 8002e60:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <__libc_init_array>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4e0d      	ldr	r6, [pc, #52]	; (8002eb0 <__libc_init_array+0x38>)
 8002e7c:	4c0d      	ldr	r4, [pc, #52]	; (8002eb4 <__libc_init_array+0x3c>)
 8002e7e:	1ba4      	subs	r4, r4, r6
 8002e80:	10a4      	asrs	r4, r4, #2
 8002e82:	2500      	movs	r5, #0
 8002e84:	42a5      	cmp	r5, r4
 8002e86:	d109      	bne.n	8002e9c <__libc_init_array+0x24>
 8002e88:	4e0b      	ldr	r6, [pc, #44]	; (8002eb8 <__libc_init_array+0x40>)
 8002e8a:	4c0c      	ldr	r4, [pc, #48]	; (8002ebc <__libc_init_array+0x44>)
 8002e8c:	f000 f818 	bl	8002ec0 <_init>
 8002e90:	1ba4      	subs	r4, r4, r6
 8002e92:	10a4      	asrs	r4, r4, #2
 8002e94:	2500      	movs	r5, #0
 8002e96:	42a5      	cmp	r5, r4
 8002e98:	d105      	bne.n	8002ea6 <__libc_init_array+0x2e>
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}
 8002e9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ea0:	4798      	blx	r3
 8002ea2:	3501      	adds	r5, #1
 8002ea4:	e7ee      	b.n	8002e84 <__libc_init_array+0xc>
 8002ea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eaa:	4798      	blx	r3
 8002eac:	3501      	adds	r5, #1
 8002eae:	e7f2      	b.n	8002e96 <__libc_init_array+0x1e>
 8002eb0:	08002ee8 	.word	0x08002ee8
 8002eb4:	08002ee8 	.word	0x08002ee8
 8002eb8:	08002ee8 	.word	0x08002ee8
 8002ebc:	08002eec 	.word	0x08002eec

08002ec0 <_init>:
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	bf00      	nop
 8002ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec6:	bc08      	pop	{r3}
 8002ec8:	469e      	mov	lr, r3
 8002eca:	4770      	bx	lr

08002ecc <_fini>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	bf00      	nop
 8002ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed2:	bc08      	pop	{r3}
 8002ed4:	469e      	mov	lr, r3
 8002ed6:	4770      	bx	lr
