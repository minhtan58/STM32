
L152RB_W5500_DHCP_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005234  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054d8  080054d8  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080054d8  080054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054e0  080054e0  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080054e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200000b8  080055a0  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080055a0  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfe9  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002378  00000000  00000000  0002c0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b88  00000000  00000000  0002e448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  0002efd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013002  00000000  00000000  0002fa40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000943d  00000000  00000000  00042a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ce0c  00000000  00000000  0004be7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c8c8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000357c  00000000  00000000  000c8d08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b8 	.word	0x200000b8
 8000158:	00000000 	.word	0x00000000
 800015c:	08005358 	.word	0x08005358

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000bc 	.word	0x200000bc
 8000178:	08005358 	.word	0x08005358

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000488:	4b22      	ldr	r3, [pc, #136]	; (8000514 <WIZCHIP_READ+0x94>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800048e:	4b21      	ldr	r3, [pc, #132]	; (8000514 <WIZCHIP_READ+0x94>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000494:	4b1f      	ldr	r3, [pc, #124]	; (8000514 <WIZCHIP_READ+0x94>)
 8000496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000498:	2b00      	cmp	r3, #0
 800049a:	d003      	beq.n	80004a4 <WIZCHIP_READ+0x24>
 800049c:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <WIZCHIP_READ+0x94>)
 800049e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d114      	bne.n	80004ce <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <WIZCHIP_READ+0x94>)
 80004a6:	6a1b      	ldr	r3, [r3, #32]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	0c12      	lsrs	r2, r2, #16
 80004ac:	b2d2      	uxtb	r2, r2
 80004ae:	4610      	mov	r0, r2
 80004b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <WIZCHIP_READ+0x94>)
 80004b4:	6a1b      	ldr	r3, [r3, #32]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	0a12      	lsrs	r2, r2, #8
 80004ba:	b2d2      	uxtb	r2, r2
 80004bc:	4610      	mov	r0, r2
 80004be:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <WIZCHIP_READ+0x94>)
 80004c2:	6a1b      	ldr	r3, [r3, #32]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	b2d2      	uxtb	r2, r2
 80004c8:	4610      	mov	r0, r2
 80004ca:	4798      	blx	r3
 80004cc:	e011      	b.n	80004f2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	0c1b      	lsrs	r3, r3, #16
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	0a1b      	lsrs	r3, r3, #8
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <WIZCHIP_READ+0x94>)
 80004e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004e8:	f107 020c 	add.w	r2, r7, #12
 80004ec:	2103      	movs	r1, #3
 80004ee:	4610      	mov	r0, r2
 80004f0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <WIZCHIP_READ+0x94>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4798      	blx	r3
 80004f8:	4603      	mov	r3, r0
 80004fa:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <WIZCHIP_READ+0x94>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000502:	4b04      	ldr	r3, [pc, #16]	; (8000514 <WIZCHIP_READ+0x94>)
 8000504:	691b      	ldr	r3, [r3, #16]
 8000506:	4798      	blx	r3
   return ret;
 8000508:	7bfb      	ldrb	r3, [r7, #15]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000004 	.word	0x20000004

08000518 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <WIZCHIP_WRITE+0x98>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	4798      	blx	r3
   WIZCHIP.CS._select();
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <WIZCHIP_WRITE+0x98>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <WIZCHIP_WRITE+0x98>)
 800053a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800053c:	2b00      	cmp	r3, #0
 800053e:	d119      	bne.n	8000574 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <WIZCHIP_WRITE+0x98>)
 8000542:	6a1b      	ldr	r3, [r3, #32]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	0c12      	lsrs	r2, r2, #16
 8000548:	b2d2      	uxtb	r2, r2
 800054a:	4610      	mov	r0, r2
 800054c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <WIZCHIP_WRITE+0x98>)
 8000550:	6a1b      	ldr	r3, [r3, #32]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	0a12      	lsrs	r2, r2, #8
 8000556:	b2d2      	uxtb	r2, r2
 8000558:	4610      	mov	r0, r2
 800055a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <WIZCHIP_WRITE+0x98>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	b2d2      	uxtb	r2, r2
 8000564:	4610      	mov	r0, r2
 8000566:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <WIZCHIP_WRITE+0x98>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	78fa      	ldrb	r2, [r7, #3]
 800056e:	4610      	mov	r0, r2
 8000570:	4798      	blx	r3
 8000572:	e013      	b.n	800059c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	0c1b      	lsrs	r3, r3, #16
 8000578:	b2db      	uxtb	r3, r3
 800057a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	0a1b      	lsrs	r3, r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800058a:	78fb      	ldrb	r3, [r7, #3]
 800058c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <WIZCHIP_WRITE+0x98>)
 8000590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000592:	f107 020c 	add.w	r2, r7, #12
 8000596:	2104      	movs	r1, #4
 8000598:	4610      	mov	r0, r2
 800059a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <WIZCHIP_WRITE+0x98>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80005a2:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <WIZCHIP_WRITE+0x98>)
 80005a4:	691b      	ldr	r3, [r3, #16]
 80005a6:	4798      	blx	r3
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000004 	.word	0x20000004

080005b4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	4613      	mov	r3, r2
 80005c0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80005ce:	4b28      	ldr	r3, [pc, #160]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 80005d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d003      	beq.n	80005de <WIZCHIP_READ_BUF+0x2a>
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 80005d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d126      	bne.n	800062c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80005de:	4b24      	ldr	r3, [pc, #144]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 80005e0:	6a1b      	ldr	r3, [r3, #32]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	0c12      	lsrs	r2, r2, #16
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	4610      	mov	r0, r2
 80005ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 80005ee:	6a1b      	ldr	r3, [r3, #32]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	0a12      	lsrs	r2, r2, #8
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	4610      	mov	r0, r2
 80005f8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 80005fc:	6a1b      	ldr	r3, [r3, #32]
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	4610      	mov	r0, r2
 8000604:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000606:	2300      	movs	r3, #0
 8000608:	82fb      	strh	r3, [r7, #22]
 800060a:	e00a      	b.n	8000622 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	8afa      	ldrh	r2, [r7, #22]
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	188c      	adds	r4, r1, r2
 8000616:	4798      	blx	r3
 8000618:	4603      	mov	r3, r0
 800061a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800061c:	8afb      	ldrh	r3, [r7, #22]
 800061e:	3301      	adds	r3, #1
 8000620:	82fb      	strh	r3, [r7, #22]
 8000622:	8afa      	ldrh	r2, [r7, #22]
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	429a      	cmp	r2, r3
 8000628:	d3f0      	bcc.n	800060c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800062a:	e017      	b.n	800065c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	0c1b      	lsrs	r3, r3, #16
 8000630:	b2db      	uxtb	r3, r3
 8000632:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	0a1b      	lsrs	r3, r3, #8
 8000638:	b2db      	uxtb	r3, r3
 800063a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 8000644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000646:	f107 0210 	add.w	r2, r7, #16
 800064a:	2103      	movs	r1, #3
 800064c:	4610      	mov	r0, r2
 800064e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 8000652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000654:	88fa      	ldrh	r2, [r7, #6]
 8000656:	4611      	mov	r1, r2
 8000658:	68b8      	ldr	r0, [r7, #8]
 800065a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000662:	4b03      	ldr	r3, [pc, #12]	; (8000670 <WIZCHIP_READ_BUF+0xbc>)
 8000664:	691b      	ldr	r3, [r3, #16]
 8000666:	4798      	blx	r3
}
 8000668:	bf00      	nop
 800066a:	371c      	adds	r7, #28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000004 	.word	0x20000004

08000674 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	4613      	mov	r3, r2
 8000680:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <WIZCHIP_WRITE_BUF+0xbc>)
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <WIZCHIP_WRITE_BUF+0xbc>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <WIZCHIP_WRITE_BUF+0xbc>)
 8000698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069a:	2b00      	cmp	r3, #0
 800069c:	d126      	bne.n	80006ec <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <WIZCHIP_WRITE_BUF+0xbc>)
 80006a0:	6a1b      	ldr	r3, [r3, #32]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	0c12      	lsrs	r2, r2, #16
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	4610      	mov	r0, r2
 80006aa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <WIZCHIP_WRITE_BUF+0xbc>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	0a12      	lsrs	r2, r2, #8
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	4610      	mov	r0, r2
 80006b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <WIZCHIP_WRITE_BUF+0xbc>)
 80006bc:	6a1b      	ldr	r3, [r3, #32]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	4610      	mov	r0, r2
 80006c4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	82fb      	strh	r3, [r7, #22]
 80006ca:	e00a      	b.n	80006e2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <WIZCHIP_WRITE_BUF+0xbc>)
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	8afa      	ldrh	r2, [r7, #22]
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	440a      	add	r2, r1
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	4610      	mov	r0, r2
 80006da:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80006dc:	8afb      	ldrh	r3, [r7, #22]
 80006de:	3301      	adds	r3, #1
 80006e0:	82fb      	strh	r3, [r7, #22]
 80006e2:	8afa      	ldrh	r2, [r7, #22]
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d3f0      	bcc.n	80006cc <WIZCHIP_WRITE_BUF+0x58>
 80006ea:	e017      	b.n	800071c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	0c1b      	lsrs	r3, r3, #16
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	0a1b      	lsrs	r3, r3, #8
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <WIZCHIP_WRITE_BUF+0xbc>)
 8000704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000706:	f107 0210 	add.w	r2, r7, #16
 800070a:	2103      	movs	r1, #3
 800070c:	4610      	mov	r0, r2
 800070e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <WIZCHIP_WRITE_BUF+0xbc>)
 8000712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000714:	88fa      	ldrh	r2, [r7, #6]
 8000716:	4611      	mov	r1, r2
 8000718:	68b8      	ldr	r0, [r7, #8]
 800071a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <WIZCHIP_WRITE_BUF+0xbc>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000722:	4b03      	ldr	r3, [pc, #12]	; (8000730 <WIZCHIP_WRITE_BUF+0xbc>)
 8000724:	691b      	ldr	r3, [r3, #16]
 8000726:	4798      	blx	r3
}
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000004 	.word	0x20000004

08000734 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800073e:	2300      	movs	r3, #0
 8000740:	81fb      	strh	r3, [r7, #14]
 8000742:	2300      	movs	r3, #0
 8000744:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	3301      	adds	r3, #1
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe94 	bl	8000480 <WIZCHIP_READ>
 8000758:	4603      	mov	r3, r0
 800075a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800075c:	89bb      	ldrh	r3, [r7, #12]
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	b29c      	uxth	r4, r3
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	3301      	adds	r3, #1
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fe86 	bl	8000480 <WIZCHIP_READ>
 8000774:	4603      	mov	r3, r0
 8000776:	b29b      	uxth	r3, r3
 8000778:	4423      	add	r3, r4
 800077a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800077c:	89bb      	ldrh	r3, [r7, #12]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d01a      	beq.n	80007b8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	3301      	adds	r3, #1
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fe76 	bl	8000480 <WIZCHIP_READ>
 8000794:	4603      	mov	r3, r0
 8000796:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	021b      	lsls	r3, r3, #8
 800079c:	b29c      	uxth	r4, r3
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	3301      	adds	r3, #1
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe68 	bl	8000480 <WIZCHIP_READ>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	4423      	add	r3, r4
 80007b6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80007b8:	89fa      	ldrh	r2, [r7, #14]
 80007ba:	89bb      	ldrh	r3, [r7, #12]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d1c2      	bne.n	8000746 <getSn_TX_FSR+0x12>
   return val;
 80007c0:	89fb      	ldrh	r3, [r7, #14]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd90      	pop	{r4, r7, pc}

080007ca <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80007ca:	b590      	push	{r4, r7, lr}
 80007cc:	b085      	sub	sp, #20
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	6039      	str	r1, [r7, #0]
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	4613      	mov	r3, r2
 80007d8:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80007e2:	88bb      	ldrh	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d048      	beq.n	800087a <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	3301      	adds	r3, #1
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fe43 	bl	8000480 <WIZCHIP_READ>
 80007fa:	4603      	mov	r3, r0
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b29c      	uxth	r4, r3
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	3301      	adds	r3, #1
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fe36 	bl	8000480 <WIZCHIP_READ>
 8000814:	4603      	mov	r3, r0
 8000816:	b29b      	uxth	r3, r3
 8000818:	4423      	add	r3, r4
 800081a:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	79fa      	ldrb	r2, [r7, #7]
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	3202      	adds	r2, #2
 8000826:	00d2      	lsls	r2, r2, #3
 8000828:	4413      	add	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800082c:	88bb      	ldrh	r3, [r7, #4]
 800082e:	461a      	mov	r2, r3
 8000830:	6839      	ldr	r1, [r7, #0]
 8000832:	68b8      	ldr	r0, [r7, #8]
 8000834:	f7ff ff1e 	bl	8000674 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8000838:	89fa      	ldrh	r2, [r7, #14]
 800083a:	88bb      	ldrh	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	3301      	adds	r3, #1
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800084c:	461a      	mov	r2, r3
 800084e:	89fb      	ldrh	r3, [r7, #14]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	b29b      	uxth	r3, r3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	4610      	mov	r0, r2
 800085a:	f7ff fe5d 	bl	8000518 <WIZCHIP_WRITE>
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	3301      	adds	r3, #1
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800086a:	461a      	mov	r2, r3
 800086c:	89fb      	ldrh	r3, [r7, #14]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4619      	mov	r1, r3
 8000872:	4610      	mov	r0, r2
 8000874:	f7ff fe50 	bl	8000518 <WIZCHIP_WRITE>
 8000878:	e000      	b.n	800087c <wiz_send_data+0xb2>
   if(len == 0)  return;
 800087a:	bf00      	nop
}
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bd90      	pop	{r4, r7, pc}
	...

08000884 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	4604      	mov	r4, r0
 800088c:	4608      	mov	r0, r1
 800088e:	4611      	mov	r1, r2
 8000890:	461a      	mov	r2, r3
 8000892:	4623      	mov	r3, r4
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	4603      	mov	r3, r0
 8000898:	71bb      	strb	r3, [r7, #6]
 800089a:	460b      	mov	r3, r1
 800089c:	80bb      	strh	r3, [r7, #4]
 800089e:	4613      	mov	r3, r2
 80008a0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	d902      	bls.n	80008ae <socket+0x2a>
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	e0f1      	b.n	8000a92 <socket+0x20e>
	switch(protocol)
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d004      	beq.n	80008be <socket+0x3a>
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	db10      	blt.n	80008da <socket+0x56>
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	dc0e      	bgt.n	80008da <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80008bc:	e010      	b.n	80008e0 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2204      	movs	r2, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80008ca:	f7ff fe73 	bl	80005b4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d105      	bne.n	80008e0 <socket+0x5c>
 80008d4:	f06f 0302 	mvn.w	r3, #2
 80008d8:	e0db      	b.n	8000a92 <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80008da:	f06f 0304 	mvn.w	r3, #4
 80008de:	e0d8      	b.n	8000a92 <socket+0x20e>
         break;
 80008e0:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <socket+0x6e>
 80008ec:	f06f 0305 	mvn.w	r3, #5
 80008f0:	e0cf      	b.n	8000a92 <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d025      	beq.n	8000944 <socket+0xc0>
	{
   	switch(protocol)
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d002      	beq.n	8000904 <socket+0x80>
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d008      	beq.n	8000914 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000902:	e024      	b.n	800094e <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11c      	bne.n	8000948 <socket+0xc4>
 800090e:	f06f 0305 	mvn.w	r3, #5
 8000912:	e0be      	b.n	8000a92 <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	f003 0320 	and.w	r3, r3, #32
 800091a:	2b00      	cmp	r3, #0
 800091c:	d006      	beq.n	800092c <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800091e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db02      	blt.n	800092c <socket+0xa8>
 8000926:	f06f 0305 	mvn.w	r3, #5
 800092a:	e0b2      	b.n	8000a92 <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 800092c:	78fb      	ldrb	r3, [r7, #3]
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00a      	beq.n	800094c <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db06      	blt.n	800094c <socket+0xc8>
 800093e:	f06f 0305 	mvn.w	r3, #5
 8000942:	e0a6      	b.n	8000a92 <socket+0x20e>
   	}
   }
 8000944:	bf00      	nop
 8000946:	e002      	b.n	800094e <socket+0xca>
   	      break;
 8000948:	bf00      	nop
 800094a:	e000      	b.n	800094e <socket+0xca>
   	      break;
 800094c:	bf00      	nop
	close(sn);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f8ad 	bl	8000ab0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	3301      	adds	r3, #1
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	4618      	mov	r0, r3
 8000960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000964:	f023 030f 	bic.w	r3, r3, #15
 8000968:	b25a      	sxtb	r2, r3
 800096a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800096e:	4313      	orrs	r3, r2
 8000970:	b25b      	sxtb	r3, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4619      	mov	r1, r3
 8000976:	f7ff fdcf 	bl	8000518 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d110      	bne.n	80009a2 <socket+0x11e>
	{
	   port = sock_any_port++;
 8000980:	4b46      	ldr	r3, [pc, #280]	; (8000a9c <socket+0x218>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	b291      	uxth	r1, r2
 8000988:	4a44      	ldr	r2, [pc, #272]	; (8000a9c <socket+0x218>)
 800098a:	8011      	strh	r1, [r2, #0]
 800098c:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800098e:	4b43      	ldr	r3, [pc, #268]	; (8000a9c <socket+0x218>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000996:	4293      	cmp	r3, r2
 8000998:	d103      	bne.n	80009a2 <socket+0x11e>
 800099a:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <socket+0x218>)
 800099c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80009a0:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	3301      	adds	r3, #1
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009ae:	461a      	mov	r2, r3
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	4610      	mov	r0, r2
 80009bc:	f7ff fdac 	bl	8000518 <WIZCHIP_WRITE>
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	3301      	adds	r3, #1
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80009cc:	461a      	mov	r2, r3
 80009ce:	88bb      	ldrh	r3, [r7, #4]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4619      	mov	r1, r3
 80009d4:	4610      	mov	r0, r2
 80009d6:	f7ff fd9f 	bl	8000518 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	3301      	adds	r3, #1
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009e6:	2101      	movs	r1, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fd95 	bl	8000518 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80009ee:	bf00      	nop
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	3301      	adds	r3, #1
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fd3f 	bl	8000480 <WIZCHIP_READ>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1f3      	bne.n	80009f0 <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <socket+0x21c>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	b21b      	sxth	r3, r3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <socket+0x21c>)
 8000a24:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	f003 0201 	and.w	r2, r3, #1
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	b21a      	sxth	r2, r3
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <socket+0x21c>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <socket+0x21c>)
 8000a42:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2201      	movs	r2, #1
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <socket+0x220>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	4013      	ands	r3, r2
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <socket+0x220>)
 8000a60:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <socket+0x224>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <socket+0x228>)
 8000a70:	2100      	movs	r1, #0
 8000a72:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000a74:	bf00      	nop
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fcfc 	bl	8000480 <WIZCHIP_READ>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f3      	beq.n	8000a76 <socket+0x1f2>
   return (int8_t)sn;
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	200000d4 	.word	0x200000d4
 8000aa4:	200000d6 	.word	0x200000d6
 8000aa8:	200000d8 	.word	0x200000d8
 8000aac:	200000e8 	.word	0x200000e8

08000ab0 <close>:

int8_t close(uint8_t sn)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b08      	cmp	r3, #8
 8000abe:	d902      	bls.n	8000ac6 <close+0x16>
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac4:	e055      	b.n	8000b72 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	3301      	adds	r3, #1
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fd1f 	bl	8000518 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000ada:	bf00      	nop
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fcc9 	bl	8000480 <WIZCHIP_READ>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f3      	bne.n	8000adc <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	3301      	adds	r3, #1
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b00:	211f      	movs	r1, #31
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fd08 	bl	8000518 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <close+0xcc>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <close+0xcc>)
 8000b24:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <close+0xd0>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <close+0xd0>)
 8000b42:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <close+0xd4>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <close+0xd8>)
 8000b52:	2100      	movs	r1, #0
 8000b54:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000b56:	bf00      	nop
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fc8b 	bl	8000480 <WIZCHIP_READ>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1f3      	bne.n	8000b58 <close+0xa8>
	return SOCK_OK;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000d4 	.word	0x200000d4
 8000b80:	200000d6 	.word	0x200000d6
 8000b84:	200000d8 	.word	0x200000d8
 8000b88:	200000e8 	.word	0x200000e8

08000b8c <listen>:

int8_t listen(uint8_t sn)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d902      	bls.n	8000ba2 <listen+0x16>
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	e049      	b.n	8000c36 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fc68 	bl	8000480 <WIZCHIP_READ>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d002      	beq.n	8000bc0 <listen+0x34>
 8000bba:	f06f 0304 	mvn.w	r3, #4
 8000bbe:	e03a      	b.n	8000c36 <listen+0xaa>
	CHECK_SOCKINIT();
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc57 	bl	8000480 <WIZCHIP_READ>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b13      	cmp	r3, #19
 8000bd6:	d002      	beq.n	8000bde <listen+0x52>
 8000bd8:	f06f 0302 	mvn.w	r3, #2
 8000bdc:	e02b      	b.n	8000c36 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	3301      	adds	r3, #1
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000bea:	2102      	movs	r1, #2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fc93 	bl	8000518 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000bf2:	bf00      	nop
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fc3d 	bl	8000480 <WIZCHIP_READ>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1f3      	bne.n	8000bf4 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000c0c:	e006      	b.n	8000c1c <listen+0x90>
   {
         close(sn);
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff4d 	bl	8000ab0 <close>
         return SOCKERR_SOCKCLOSED;
 8000c16:	f06f 0303 	mvn.w	r3, #3
 8000c1a:	e00c      	b.n	8000c36 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	3301      	adds	r3, #1
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fc29 	bl	8000480 <WIZCHIP_READ>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b14      	cmp	r3, #20
 8000c32:	d1ec      	bne.n	8000c0e <listen+0x82>
   }
   return SOCK_OK;
 8000c34:	2301      	movs	r3, #1
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d902      	bls.n	8000c64 <send+0x24>
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e0de      	b.n	8000e22 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	3301      	adds	r3, #1
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fc07 	bl	8000480 <WIZCHIP_READ>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d002      	beq.n	8000c82 <send+0x42>
 8000c7c:	f06f 0304 	mvn.w	r3, #4
 8000c80:	e0cf      	b.n	8000e22 <send+0x1e2>
   CHECK_SOCKDATA();
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <send+0x4e>
 8000c88:	f06f 030d 	mvn.w	r3, #13
 8000c8c:	e0c9      	b.n	8000e22 <send+0x1e2>
   tmp = getSn_SR(sn);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	3301      	adds	r3, #1
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fbf0 	bl	8000480 <WIZCHIP_READ>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	2b17      	cmp	r3, #23
 8000ca8:	d005      	beq.n	8000cb6 <send+0x76>
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	2b1c      	cmp	r3, #28
 8000cae:	d002      	beq.n	8000cb6 <send+0x76>
 8000cb0:	f06f 0306 	mvn.w	r3, #6
 8000cb4:	e0b5      	b.n	8000e22 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8000cb6:	4b5d      	ldr	r3, [pc, #372]	; (8000e2c <send+0x1ec>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	fa42 f303 	asr.w	r3, r2, r3
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d039      	beq.n	8000d3e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	3301      	adds	r3, #1
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fbd2 	bl	8000480 <WIZCHIP_READ>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f003 031f 	and.w	r3, r3, #31
 8000ce2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d019      	beq.n	8000d22 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc0b 	bl	8000518 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2201      	movs	r2, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	4b46      	ldr	r3, [pc, #280]	; (8000e2c <send+0x1ec>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	4013      	ands	r3, r2
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <send+0x1ec>)
 8000d1e:	801a      	strh	r2, [r3, #0]
 8000d20:	e00d      	b.n	8000d3e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d006      	beq.n	8000d3a <send+0xfa>
      {
         close(sn);
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff febe 	bl	8000ab0 <close>
         return SOCKERR_TIMEOUT;
 8000d34:	f06f 030c 	mvn.w	r3, #12
 8000d38:	e073      	b.n	8000e22 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e071      	b.n	8000e22 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	3301      	adds	r3, #1
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fb98 	bl	8000480 <WIZCHIP_READ>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	029b      	lsls	r3, r3, #10
 8000d56:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000d58:	88ba      	ldrh	r2, [r7, #4]
 8000d5a:	89bb      	ldrh	r3, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d901      	bls.n	8000d64 <send+0x124>
 8000d60:	89bb      	ldrh	r3, [r7, #12]
 8000d62:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fce4 	bl	8000734 <getSn_TX_FSR>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	3301      	adds	r3, #1
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fb7f 	bl	8000480 <WIZCHIP_READ>
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b17      	cmp	r3, #23
 8000d8a:	d009      	beq.n	8000da0 <send+0x160>
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b1c      	cmp	r3, #28
 8000d90:	d006      	beq.n	8000da0 <send+0x160>
      {
         close(sn);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fe8b 	bl	8000ab0 <close>
         return SOCKERR_SOCKSTATUS;
 8000d9a:	f06f 0306 	mvn.w	r3, #6
 8000d9e:	e040      	b.n	8000e22 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <send+0x1f0>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	fa42 f303 	asr.w	r3, r2, r3
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d005      	beq.n	8000dc0 <send+0x180>
 8000db4:	88ba      	ldrh	r2, [r7, #4]
 8000db6:	89bb      	ldrh	r3, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d901      	bls.n	8000dc0 <send+0x180>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e030      	b.n	8000e22 <send+0x1e2>
      if(len <= freesize) break;
 8000dc0:	88ba      	ldrh	r2, [r7, #4]
 8000dc2:	89bb      	ldrh	r3, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d900      	bls.n	8000dca <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8000dc8:	e7cc      	b.n	8000d64 <send+0x124>
      if(len <= freesize) break;
 8000dca:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000dcc:	88ba      	ldrh	r2, [r7, #4]
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	6839      	ldr	r1, [r7, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fcf9 	bl	80007ca <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	3301      	adds	r3, #1
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000de4:	2120      	movs	r1, #32
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fb96 	bl	8000518 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000dec:	bf00      	nop
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	3301      	adds	r3, #1
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fb40 	bl	8000480 <WIZCHIP_READ>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f3      	bne.n	8000dee <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <send+0x1ec>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <send+0x1ec>)
 8000e1e:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000e20:	88bb      	ldrh	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000d6 	.word	0x200000d6
 8000e30:	200000d4 	.word	0x200000d4

08000e34 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	78fa      	ldrb	r2, [r7, #3]
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr

08000ea6 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
	...

08000ebc <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <reg_wizchip_cs_cbfunc+0x16>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <reg_wizchip_cs_cbfunc+0x3c>)
 8000ed4:	4a09      	ldr	r2, [pc, #36]	; (8000efc <reg_wizchip_cs_cbfunc+0x40>)
 8000ed6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <reg_wizchip_cs_cbfunc+0x3c>)
 8000eda:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <reg_wizchip_cs_cbfunc+0x44>)
 8000edc:	619a      	str	r2, [r3, #24]
 8000ede:	e005      	b.n	8000eec <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8000ee0:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <reg_wizchip_cs_cbfunc+0x3c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <reg_wizchip_cs_cbfunc+0x3c>)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	6193      	str	r3, [r2, #24]
   }
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000004 	.word	0x20000004
 8000efc:	08000e4d 	.word	0x08000e4d
 8000f00:	08000e59 	.word	0x08000e59

08000f04 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8000f0e:	bf00      	nop
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <reg_wizchip_spi_cbfunc+0x48>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f9      	beq.n	8000f10 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <reg_wizchip_spi_cbfunc+0x24>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d106      	bne.n	8000f36 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <reg_wizchip_spi_cbfunc+0x48>)
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <reg_wizchip_spi_cbfunc+0x4c>)
 8000f2c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <reg_wizchip_spi_cbfunc+0x48>)
 8000f30:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <reg_wizchip_spi_cbfunc+0x50>)
 8000f32:	621a      	str	r2, [r3, #32]
 8000f34:	e005      	b.n	8000f42 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <reg_wizchip_spi_cbfunc+0x48>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8000f3c:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <reg_wizchip_spi_cbfunc+0x48>)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	6213      	str	r3, [r2, #32]
   }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000004 	.word	0x20000004
 8000f50:	08000e99 	.word	0x08000e99
 8000f54:	08000ea7 	.word	0x08000ea7

08000f58 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	f200 80c2 	bhi.w	80010fc <ctlwizchip+0x1a4>
 8000f78:	a201      	add	r2, pc, #4	; (adr r2, 8000f80 <ctlwizchip+0x28>)
 8000f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7e:	bf00      	nop
 8000f80:	08000fc1 	.word	0x08000fc1
 8000f84:	08000fc7 	.word	0x08000fc7
 8000f88:	08000ff3 	.word	0x08000ff3
 8000f8c:	08000fe7 	.word	0x08000fe7
 8000f90:	08001001 	.word	0x08001001
 8000f94:	0800100d 	.word	0x0800100d
 8000f98:	0800101b 	.word	0x0800101b
 8000f9c:	08001041 	.word	0x08001041
 8000fa0:	08001067 	.word	0x08001067
 8000fa4:	080010a1 	.word	0x080010a1
 8000fa8:	080010a7 	.word	0x080010a7
 8000fac:	080010af 	.word	0x080010af
 8000fb0:	08001103 	.word	0x08001103
 8000fb4:	080010b7 	.word	0x080010b7
 8000fb8:	080010c5 	.word	0x080010c5
 8000fbc:	080010e1 	.word	0x080010e1
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8000fc0:	f000 f8a8 	bl	8001114 <wizchip_sw_reset>
         break;
 8000fc4:	e09e      	b.n	8001104 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3308      	adds	r3, #8
 8000fd4:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f8e5 	bl	80011ac <wizchip_init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	e08f      	b.n	8001106 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f96a 	bl	80012c4 <wizchip_clrinterrupt>
         break;
 8000ff0:	e088      	b.n	8001104 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8000ff2:	f000 f985 	bl	8001300 <wizchip_getinterrupt>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	801a      	strh	r2, [r3, #0]
         break;
 8000ffe:	e081      	b.n	8001104 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f9a0 	bl	800134a <wizchip_setinterruptmask>
         break;         
 800100a:	e07b      	b.n	8001104 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800100c:	f000 f9b8 	bl	8001380 <wizchip_getinterruptmask>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	801a      	strh	r2, [r3, #0]
         break;
 8001018:	e074      	b.n	8001104 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	b29b      	uxth	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800102a:	f7ff fa75 	bl	8000518 <WIZCHIP_WRITE>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800103a:	f7ff fa6d 	bl	8000518 <WIZCHIP_WRITE>
         break;
 800103e:	e061      	b.n	8001104 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8001040:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001044:	f7ff fa1c 	bl	8000480 <WIZCHIP_READ>
 8001048:	4603      	mov	r3, r0
 800104a:	b29b      	uxth	r3, r3
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b29c      	uxth	r4, r3
 8001050:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001054:	f7ff fa14 	bl	8000480 <WIZCHIP_READ>
 8001058:	4603      	mov	r3, r0
 800105a:	b29b      	uxth	r3, r3
 800105c:	4423      	add	r3, r4
 800105e:	b29a      	uxth	r2, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	801a      	strh	r2, [r3, #0]
         break;
 8001064:	e04e      	b.n	8001104 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <ctlwizchip+0x1b8>)
 8001068:	789a      	ldrb	r2, [r3, #2]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	4a27      	ldr	r2, [pc, #156]	; (8001110 <ctlwizchip+0x1b8>)
 8001074:	78d2      	ldrb	r2, [r2, #3]
 8001076:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	3302      	adds	r3, #2
 800107c:	4a24      	ldr	r2, [pc, #144]	; (8001110 <ctlwizchip+0x1b8>)
 800107e:	7912      	ldrb	r2, [r2, #4]
 8001080:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3303      	adds	r3, #3
 8001086:	4a22      	ldr	r2, [pc, #136]	; (8001110 <ctlwizchip+0x1b8>)
 8001088:	7952      	ldrb	r2, [r2, #5]
 800108a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3304      	adds	r3, #4
 8001090:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <ctlwizchip+0x1b8>)
 8001092:	7992      	ldrb	r2, [r2, #6]
 8001094:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3305      	adds	r3, #5
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
         break;
 800109e:	e031      	b.n	8001104 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80010a0:	f000 f9c0 	bl	8001424 <wizphy_reset>
         break;
 80010a4:	e02e      	b.n	8001104 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f000 f9e3 	bl	8001472 <wizphy_setphyconf>
         break;
 80010ac:	e02a      	b.n	8001104 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80010ae:	6838      	ldr	r0, [r7, #0]
 80010b0:	f000 fa21 	bl	80014f6 <wizphy_getphyconf>
         break;
 80010b4:	e026      	b.n	8001104 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fa64 	bl	8001588 <wizphy_setphypmode>
 80010c0:	4603      	mov	r3, r0
 80010c2:	e020      	b.n	8001106 <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80010c4:	f000 f995 	bl	80013f2 <wizphy_getphypmode>
 80010c8:	4603      	mov	r3, r0
 80010ca:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	2bff      	cmp	r3, #255	; 0xff
 80010d0:	d102      	bne.n	80010d8 <ctlwizchip+0x180>
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	e016      	b.n	8001106 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	7dfa      	ldrb	r2, [r7, #23]
 80010dc:	701a      	strb	r2, [r3, #0]
         break;
 80010de:	e011      	b.n	8001104 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80010e0:	f000 f971 	bl	80013c6 <wizphy_getphylink>
 80010e4:	4603      	mov	r3, r0
 80010e6:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	2bff      	cmp	r3, #255	; 0xff
 80010ec:	d102      	bne.n	80010f4 <ctlwizchip+0x19c>
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e008      	b.n	8001106 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	7dfa      	ldrb	r2, [r7, #23]
 80010f8:	701a      	strb	r2, [r3, #0]
         break;
 80010fa:	e003      	b.n	8001104 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	e001      	b.n	8001106 <ctlwizchip+0x1ae>
         break;
 8001102:	bf00      	nop
   }
   return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop
 8001110:	20000004 	.word	0x20000004

08001114 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2206      	movs	r2, #6
 800111e:	4619      	mov	r1, r3
 8001120:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001124:	f7ff fa46 	bl	80005b4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2204      	movs	r2, #4
 800112e:	4619      	mov	r1, r3
 8001130:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001134:	f7ff fa3e 	bl	80005b4 <WIZCHIP_READ_BUF>
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	2204      	movs	r2, #4
 800113e:	4619      	mov	r1, r3
 8001140:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001144:	f7ff fa36 	bl	80005b4 <WIZCHIP_READ_BUF>
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2204      	movs	r2, #4
 800114e:	4619      	mov	r1, r3
 8001150:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001154:	f7ff fa2e 	bl	80005b4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff f9dc 	bl	8000518 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff f98d 	bl	8000480 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2206      	movs	r2, #6
 800116a:	4619      	mov	r1, r3
 800116c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001170:	f7ff fa80 	bl	8000674 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2204      	movs	r2, #4
 800117a:	4619      	mov	r1, r3
 800117c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001180:	f7ff fa78 	bl	8000674 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2204      	movs	r2, #4
 800118a:	4619      	mov	r1, r3
 800118c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001190:	f7ff fa70 	bl	8000674 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2204      	movs	r2, #4
 800119a:	4619      	mov	r1, r3
 800119c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80011a0:	f7ff fa68 	bl	8000674 <WIZCHIP_WRITE_BUF>
}
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80011ba:	f7ff ffab 	bl	8001114 <wizchip_sw_reset>
   if(txsize)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d03b      	beq.n	800123c <wizchip_init+0x90>
   {
      tmp = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e015      	b.n	80011fa <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	4413      	add	r3, r2
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80011e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011e4:	2b10      	cmp	r3, #16
 80011e6:	dd02      	ble.n	80011ee <wizchip_init+0x42>
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	e066      	b.n	80012bc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	2b07      	cmp	r3, #7
 8001200:	dde5      	ble.n	80011ce <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	e015      	b.n	8001234 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	3301      	adds	r3, #1
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001216:	4618      	mov	r0, r3
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff f978 	bl	8000518 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3301      	adds	r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001238:	2b07      	cmp	r3, #7
 800123a:	dde5      	ble.n	8001208 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d03b      	beq.n	80012ba <wizchip_init+0x10e>
   {
      tmp = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e015      	b.n	8001278 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800124c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	4413      	add	r3, r2
 800125a:	b2db      	uxtb	r3, r3
 800125c:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800125e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001262:	2b10      	cmp	r3, #16
 8001264:	dd02      	ble.n	800126c <wizchip_init+0xc0>
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	e027      	b.n	80012bc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800126c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3301      	adds	r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127c:	2b07      	cmp	r3, #7
 800127e:	dde5      	ble.n	800124c <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	e015      	b.n	80012b2 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	3301      	adds	r3, #1
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001294:	4618      	mov	r0, r3
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f7ff f939 	bl	8000518 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	3301      	adds	r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	2b07      	cmp	r3, #7
 80012b8:	dde5      	ble.n	8001286 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	f023 030f 	bic.w	r3, r3, #15
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80012e8:	f7ff f916 	bl	8000518 <WIZCHIP_WRITE>
   setSIR(sir);
 80012ec:	7bbb      	ldrb	r3, [r7, #14]
 80012ee:	4619      	mov	r1, r3
 80012f0:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80012f4:	f7ff f910 	bl	8000518 <WIZCHIP_WRITE>
#endif   
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8001312:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001316:	f7ff f8b3 	bl	8000480 <WIZCHIP_READ>
 800131a:	4603      	mov	r3, r0
 800131c:	f023 030f 	bic.w	r3, r3, #15
 8001320:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8001322:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8001326:	f7ff f8ab 	bl	8000480 <WIZCHIP_READ>
 800132a:	4603      	mov	r3, r0
 800132c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b29a      	uxth	r2, r3
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4413      	add	r3, r2
 800133e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001340:	88bb      	ldrh	r3, [r7, #4]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	b29b      	uxth	r3, r3
 800135e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	4619      	mov	r1, r3
 8001364:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001368:	f7ff f8d6 	bl	8000518 <WIZCHIP_WRITE>
   setSIMR(simr);
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	4619      	mov	r1, r3
 8001370:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001374:	f7ff f8d0 	bl	8000518 <WIZCHIP_WRITE>
#endif   
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8001392:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001396:	f7ff f873 	bl	8000480 <WIZCHIP_READ>
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800139e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80013a2:	f7ff f86d 	bl	8000480 <WIZCHIP_READ>
 80013a6:	4603      	mov	r3, r0
 80013a8:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80013bc:	88bb      	ldrh	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80013cc:	2300      	movs	r3, #0
 80013ce:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80013d0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80013d4:	f7ff f854 	bl	8000480 <WIZCHIP_READ>
 80013d8:	4603      	mov	r3, r0
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80013e2:	2301      	movs	r3, #1
 80013e4:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80013fc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001400:	f7ff f83e 	bl	8000480 <WIZCHIP_READ>
 8001404:	4603      	mov	r3, r0
 8001406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800140a:	2b30      	cmp	r3, #48	; 0x30
 800140c:	d102      	bne.n	8001414 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800140e:	2301      	movs	r3, #1
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	e001      	b.n	8001418 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8001414:	2300      	movs	r3, #0
 8001416:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800142a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800142e:	f7ff f827 	bl	8000480 <WIZCHIP_READ>
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800143c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001446:	f7ff f867 	bl	8000518 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800144a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800144e:	f7ff f817 	bl	8000480 <WIZCHIP_READ>
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800145c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001466:	f7ff f857 	bl	8000518 <WIZCHIP_WRITE>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d104      	bne.n	8001490 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e003      	b.n	8001498 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001496:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	785b      	ldrb	r3, [r3, #1]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d104      	bne.n	80014aa <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e019      	b.n	80014de <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	78db      	ldrb	r3, [r3, #3]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d10d      	bne.n	80014ce <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d104      	bne.n	80014c4 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	f043 0318 	orr.w	r3, r3, #24
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	e00c      	b.n	80014de <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e007      	b.n	80014de <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	789b      	ldrb	r3, [r3, #2]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d103      	bne.n	80014de <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80014e6:	f7ff f817 	bl	8000518 <WIZCHIP_WRITE>
   wizphy_reset();
 80014ea:	f7ff ff9b 	bl	8001424 <wizphy_reset>
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001502:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001506:	f7fe ffbb 	bl	8000480 <WIZCHIP_READ>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	119b      	asrs	r3, r3, #6
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001524:	2b20      	cmp	r3, #32
 8001526:	d001      	beq.n	800152c <wizphy_getphyconf+0x36>
 8001528:	2b38      	cmp	r3, #56	; 0x38
 800152a:	d103      	bne.n	8001534 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	705a      	strb	r2, [r3, #1]
         break;
 8001532:	e003      	b.n	800153c <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	705a      	strb	r2, [r3, #1]
         break;
 800153a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001542:	2b18      	cmp	r3, #24
 8001544:	d003      	beq.n	800154e <wizphy_getphyconf+0x58>
 8001546:	2b20      	cmp	r3, #32
 8001548:	d001      	beq.n	800154e <wizphy_getphyconf+0x58>
 800154a:	2b10      	cmp	r3, #16
 800154c:	d103      	bne.n	8001556 <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	709a      	strb	r2, [r3, #2]
         break;
 8001554:	e003      	b.n	800155e <wizphy_getphyconf+0x68>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	709a      	strb	r2, [r3, #2]
         break;
 800155c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001564:	2b18      	cmp	r3, #24
 8001566:	d003      	beq.n	8001570 <wizphy_getphyconf+0x7a>
 8001568:	2b20      	cmp	r3, #32
 800156a:	d001      	beq.n	8001570 <wizphy_getphyconf+0x7a>
 800156c:	2b08      	cmp	r3, #8
 800156e:	d103      	bne.n	8001578 <wizphy_getphyconf+0x82>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	70da      	strb	r2, [r3, #3]
         break;
 8001576:	e003      	b.n	8001580 <wizphy_getphyconf+0x8a>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	70da      	strb	r2, [r3, #3]
         break;
 800157e:	bf00      	nop
   }
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001596:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800159a:	f7fe ff71 	bl	8000480 <WIZCHIP_READ>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <wizphy_setphypmode+0x2a>
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
 80015b0:	e030      	b.n	8001614 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80015b8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d104      	bne.n	80015ca <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e003      	b.n	80015d2 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80015d0:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80015da:	f7fe ff9d 	bl	8000518 <WIZCHIP_WRITE>
   wizphy_reset();
 80015de:	f7ff ff21 	bl	8001424 <wizphy_reset>
   tmp = getPHYCFGR();
 80015e2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80015e6:	f7fe ff4b 	bl	8000480 <WIZCHIP_READ>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d106      	bne.n	8001602 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <wizphy_setphypmode+0x88>
 80015fe:	2300      	movs	r3, #0
 8001600:	e008      	b.n	8001614 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <wizphy_setphypmode+0x88>
 800160c:	2300      	movs	r3, #0
 800160e:	e001      	b.n	8001614 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2206      	movs	r2, #6
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800162e:	f7ff f821 	bl	8000674 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	330e      	adds	r3, #14
 8001636:	2204      	movs	r2, #4
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800163e:	f7ff f819 	bl	8000674 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	330a      	adds	r3, #10
 8001646:	2204      	movs	r2, #4
 8001648:	4619      	mov	r1, r3
 800164a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800164e:	f7ff f811 	bl	8000674 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3306      	adds	r3, #6
 8001656:	2204      	movs	r2, #4
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800165e:	f7ff f809 	bl	8000674 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7c9a      	ldrb	r2, [r3, #18]
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <wizchip_setnetinfo+0x78>)
 8001668:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7cda      	ldrb	r2, [r3, #19]
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <wizchip_setnetinfo+0x78>)
 8001670:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7d1a      	ldrb	r2, [r3, #20]
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <wizchip_setnetinfo+0x78>)
 8001678:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7d5a      	ldrb	r2, [r3, #21]
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <wizchip_setnetinfo+0x78>)
 8001680:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7d9a      	ldrb	r2, [r3, #22]
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <wizchip_setnetinfo+0x7c>)
 8001688:	701a      	strb	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000f0 	.word	0x200000f0
 8001698:	200000f4 	.word	0x200000f4

0800169c <__io_putchar>:
uint8_t UART1_TxBuffer[] = "I'm UART1\r\n";
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar (int ch) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 100);
 80016aa:	f107 010f 	add.w	r1, r7, #15
 80016ae:	2364      	movs	r3, #100	; 0x64
 80016b0:	2201      	movs	r2, #1
 80016b2:	4804      	ldr	r0, [pc, #16]	; (80016c4 <__io_putchar+0x28>)
 80016b4:	f002 fad3 	bl	8003c5e <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*)&UART1_TxBuffer, countof(UART1_TxBuffer)-1);
	return ch;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000108 	.word	0x20000108

080016c8 <main>:
//  return len;
//}


int main(void)
{
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
	uint8_t w5500_s0_status = 0x10;
 80016ce:	2310      	movs	r3, #16
 80016d0:	77fb      	strb	r3, [r7, #31]
	uint8_t w5500_s1_status = 0x10;
 80016d2:	2310      	movs	r3, #16
 80016d4:	77bb      	strb	r3, [r7, #30]

	uint8_t buf[]   = "This is DTU-3000 using W5500";
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <main+0xa0>)
 80016d8:	463c      	mov	r4, r7
 80016da:	461d      	mov	r5, r3
 80016dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016e4:	c407      	stmia	r4!, {r0, r1, r2}
 80016e6:	7023      	strb	r3, [r4, #0]
	//uint8_t address_target[]  = {192,168,11,101};
	//uint8_t count = 0;

	HAL_Init();
 80016e8:	f000 fc0f 	bl	8001f0a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016ec:	f000 f85a 	bl	80017a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016f0:	f000 f906 	bl	8001900 <MX_GPIO_Init>
	MX_SPI1_Init();
 80016f4:	f000 f8a4 	bl	8001840 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80016f8:	f000 f8d8 	bl	80018ac <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */
	W5500_hw_Rst();
 80016fc:	f000 fb6e 	bl	8001ddc <W5500_hw_Rst>
	W5500_init();
 8001700:	f000 fb8a 	bl	8001e18 <W5500_init>

	socket(0, Sn_MR_TCP, 5000, SF_TCP_NODELAY);
 8001704:	2320      	movs	r3, #32
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	2101      	movs	r1, #1
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff f8b9 	bl	8000884 <socket>
	listen(0);
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff fa3a 	bl	8000b8c <listen>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001718:	2140      	movs	r1, #64	; 0x40
 800171a:	4814      	ldr	r0, [pc, #80]	; (800176c <main+0xa4>)
 800171c:	f000 ff6a 	bl	80025f4 <HAL_GPIO_TogglePin>
		//printf("0x0A \r \n");
		HAL_Delay(500);
 8001720:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001724:	f000 fc60 	bl	8001fe8 <HAL_Delay>

		//updateWatchdog();
		//socket(0, Sn_MR_TCP, 5000, SF_TCP_NODELAY);
		//listen(0);

		w5500_s0_status = getSn_SR(0);
 8001728:	f44f 7042 	mov.w	r0, #776	; 0x308
 800172c:	f7fe fea8 	bl	8000480 <WIZCHIP_READ>
 8001730:	4603      	mov	r3, r0
 8001732:	77fb      	strb	r3, [r7, #31]
		w5500_s1_status = getSn_SR(1);
 8001734:	f44f 704a 	mov.w	r0, #808	; 0x328
 8001738:	f7fe fea2 	bl	8000480 <WIZCHIP_READ>
 800173c:	4603      	mov	r3, r0
 800173e:	77bb      	strb	r3, [r7, #30]

		if(w5500_s0_status == SOCK_ESTABLISHED)
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	2b17      	cmp	r3, #23
 8001744:	d109      	bne.n	800175a <main+0x92>
		{
			printf("Welcome to W5500 \r \n");
 8001746:	480a      	ldr	r0, [pc, #40]	; (8001770 <main+0xa8>)
 8001748:	f002 ffce 	bl	80046e8 <puts>
			send(0, buf, sizeof(buf));
 800174c:	463b      	mov	r3, r7
 800174e:	221d      	movs	r2, #29
 8001750:	4619      	mov	r1, r3
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff fa74 	bl	8000c40 <send>
 8001758:	e7de      	b.n	8001718 <main+0x50>
			//send(0, &count,1);
			//count++;
		}
		else
		{
			printf("W5500 Status Socket0 == 0x%X Socket1 == 0x%X \r \n", w5500_s0_status , w5500_s1_status);
 800175a:	7ffb      	ldrb	r3, [r7, #31]
 800175c:	7fba      	ldrb	r2, [r7, #30]
 800175e:	4619      	mov	r1, r3
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <main+0xac>)
 8001762:	f002 ff4d 	bl	8004600 <iprintf>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001766:	e7d7      	b.n	8001718 <main+0x50>
 8001768:	080053b8 	.word	0x080053b8
 800176c:	40020400 	.word	0x40020400
 8001770:	08005370 	.word	0x08005370
 8001774:	08005384 	.word	0x08005384

08001778 <HAL_UART_TxCpltCallback>:
		}
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_UART_TxCpltCallback+0x24>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d103      	bne.n	8001794 <HAL_UART_TxCpltCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 800178c:	2140      	movs	r1, #64	; 0x40
 800178e:	4804      	ldr	r0, [pc, #16]	; (80017a0 <HAL_UART_TxCpltCallback+0x28>)
 8001790:	f000 ff30 	bl	80025f4 <HAL_GPIO_TogglePin>
	}
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000108 	.word	0x20000108
 80017a0:	40020400 	.word	0x40020400

080017a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b092      	sub	sp, #72	; 0x48
 80017a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	2234      	movs	r2, #52	; 0x34
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 fe76 	bl	80044a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b8:	463b      	mov	r3, r7
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <SystemClock_Config+0x98>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <SystemClock_Config+0x98>)
 80017d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d4:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d6:	2302      	movs	r3, #2
 80017d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017da:	2301      	movs	r3, #1
 80017dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017de:	2310      	movs	r3, #16
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e2:	2302      	movs	r3, #2
 80017e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017e6:	2300      	movs	r3, #0
 80017e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80017ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80017f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 ff14 	bl	8002628 <HAL_RCC_OscConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001806:	f000 f8db 	bl	80019c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180a:	230f      	movs	r3, #15
 800180c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180e:	2303      	movs	r3, #3
 8001810:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800181e:	463b      	mov	r3, r7
 8001820:	2101      	movs	r1, #1
 8001822:	4618      	mov	r0, r3
 8001824:	f001 fa30 	bl	8002c88 <HAL_RCC_ClockConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800182e:	f000 f8c7 	bl	80019c0 <Error_Handler>
  }
}
 8001832:	bf00      	nop
 8001834:	3748      	adds	r7, #72	; 0x48
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40007000 	.word	0x40007000

08001840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <MX_SPI1_Init+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_SPI1_Init+0x64>)
 800184c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_SPI1_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_SPI1_Init+0x64>)
 800186c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001874:	2210      	movs	r2, #16
 8001876:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <MX_SPI1_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_SPI1_Init+0x64>)
 800188c:	220a      	movs	r2, #10
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001892:	f001 fc61 	bl	8003158 <HAL_SPI_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800189c:	f000 f890 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000148 	.word	0x20000148
 80018a8:	40013000 	.word	0x40013000

080018ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <MX_USART1_UART_Init+0x50>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018e4:	f002 f96e 	bl	8003bc4 <HAL_UART_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018ee:	f000 f867 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000108 	.word	0x20000108
 80018fc:	40013800 	.word	0x40013800

08001900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <MX_GPIO_Init+0xb4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <MX_GPIO_Init+0xb4>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <MX_GPIO_Init+0xb4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800192e:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <MX_GPIO_Init+0xb4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a20      	ldr	r2, [pc, #128]	; (80019b4 <MX_GPIO_Init+0xb4>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <MX_GPIO_Init+0xb4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_GPIO_Init+0xb4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a1a      	ldr	r2, [pc, #104]	; (80019b4 <MX_GPIO_Init+0xb4>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_GPIO_Init+0xb4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2104      	movs	r1, #4
 8001962:	4815      	ldr	r0, [pc, #84]	; (80019b8 <MX_GPIO_Init+0xb8>)
 8001964:	f000 fe2e 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	21c0      	movs	r1, #192	; 0xc0
 800196c:	4813      	ldr	r0, [pc, #76]	; (80019bc <MX_GPIO_Init+0xbc>)
 800196e:	f000 fe29 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001972:	2304      	movs	r3, #4
 8001974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4619      	mov	r1, r3
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <MX_GPIO_Init+0xb8>)
 800198a:	f000 fc9d 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800198e:	23c0      	movs	r3, #192	; 0xc0
 8001990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_GPIO_Init+0xbc>)
 80019a6:	f000 fc8f 	bl	80022c8 <HAL_GPIO_Init>

}
 80019aa:	bf00      	nop
 80019ac:	3720      	adds	r7, #32
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40020400 	.word	0x40020400

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_MspInit+0x58>)
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <HAL_MspInit+0x58>)
 80019d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019dc:	6253      	str	r3, [r2, #36]	; 0x24
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_MspInit+0x58>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_MspInit+0x58>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_MspInit+0x58>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_MspInit+0x58>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_MspInit+0x58>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_MspInit+0x58>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6253      	str	r3, [r2, #36]	; 0x24
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_MspInit+0x58>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_SPI_MspInit+0x8c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d12f      	bne.n	8001aaa <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_SPI_MspInit+0x90>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_SPI_MspInit+0x90>)
 8001a50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_SPI_MspInit+0x90>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_SPI_MspInit+0x90>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_SPI_MspInit+0x90>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_SPI_MspInit+0x90>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a7a:	2338      	movs	r3, #56	; 0x38
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <HAL_SPI_MspInit+0x94>)
 8001a96:	f000 fc17 	bl	80022c8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2023      	movs	r0, #35	; 0x23
 8001aa0:	f000 fb9b 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001aa4:	2023      	movs	r0, #35	; 0x23
 8001aa6:	f000 fbb4 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40013000 	.word	0x40013000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020400 	.word	0x40020400

08001ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <HAL_UART_MspInit+0x8c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d130      	bne.n	8001b44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b24:	2307      	movs	r3, #7
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <HAL_UART_MspInit+0x94>)
 8001b30:	f000 fbca 	bl	80022c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2025      	movs	r0, #37	; 0x25
 8001b3a:	f000 fb4e 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b3e:	2025      	movs	r0, #37	; 0x25
 8001b40:	f000 fb67 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b44:	bf00      	nop
 8001b46:	3728      	adds	r7, #40	; 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40013800 	.word	0x40013800
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020000 	.word	0x40020000

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <HardFault_Handler+0x4>

08001b6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <MemManage_Handler+0x4>

08001b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <BusFault_Handler+0x4>

08001b76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <UsageFault_Handler+0x4>

08001b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 fa04 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <SPI1_IRQHandler+0x10>)
 8001bb2:	f001 fe2b 	bl	800380c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000148 	.word	0x20000148

08001bc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <USART1_IRQHandler+0x10>)
 8001bc6:	f002 f8e3 	bl	8003d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000108 	.word	0x20000108

08001bd4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e00a      	b.n	8001bfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001be6:	f3af 8000 	nop.w
 8001bea:	4601      	mov	r1, r0
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	60ba      	str	r2, [r7, #8]
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf0      	blt.n	8001be6 <_read+0x12>
	}

return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e009      	b.n	8001c34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60ba      	str	r2, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fd37 	bl	800169c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf1      	blt.n	8001c20 <_write+0x12>
	}
	return len;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_close>:

int _close(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6c:	605a      	str	r2, [r3, #4]
	return 0;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <_isatty>:

int _isatty(int file)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
	return 1;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
	return 0;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
	...

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f002 fbba 	bl	8004450 <__errno>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	230c      	movs	r3, #12
 8001ce0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20004000 	.word	0x20004000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	200000f8 	.word	0x200000f8
 8001d10:	200001a8 	.word	0x200001a8

08001d14 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <SystemInit+0x14>)
 8001d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d1e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <W5500_dataRead>:

static uint32_t randomKey;


uint8_t W5500_dataRead() // SPI ������ ����
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af02      	add	r7, sp, #8
	uint8_t Dummy = 0xFF;
 8001d32:	23ff      	movs	r3, #255	; 0xff
 8001d34:	71fb      	strb	r3, [r7, #7]
	uint8_t RxData;
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001d36:	bf00      	nop
 8001d38:	4809      	ldr	r0, [pc, #36]	; (8001d60 <W5500_dataRead+0x34>)
 8001d3a:	f001 fe58 	bl	80039ee <HAL_SPI_GetState>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d1f9      	bne.n	8001d38 <W5500_dataRead+0xc>
	HAL_SPI_TransmitReceive(&hspi1,&Dummy,&RxData,1,10); // SPI�� ���Ž� ���̵����͸� ������� Ŭ���� �����ǰ� �����̺갡 ���� �ش�.
 8001d44:	1dba      	adds	r2, r7, #6
 8001d46:	1df9      	adds	r1, r7, #7
 8001d48:	230a      	movs	r3, #10
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	4804      	ldr	r0, [pc, #16]	; (8001d60 <W5500_dataRead+0x34>)
 8001d50:	f001 fbba 	bl	80034c8 <HAL_SPI_TransmitReceive>
	return RxData;
 8001d54:	79bb      	ldrb	r3, [r7, #6]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000148 	.word	0x20000148

08001d64 <W5500_dataSend>:
void W5500_dataSend(uint8_t Txdata) // SPI ������ �۽�
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	 while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001d6e:	bf00      	nop
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <W5500_dataSend+0x2c>)
 8001d72:	f001 fe3c 	bl	80039ee <HAL_SPI_GetState>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d1f9      	bne.n	8001d70 <W5500_dataSend+0xc>
	 HAL_SPI_Transmit(&hspi1, (uint8_t *) &Txdata, 1, 10);
 8001d7c:	1df9      	adds	r1, r7, #7
 8001d7e:	230a      	movs	r3, #10
 8001d80:	2201      	movs	r2, #1
 8001d82:	4803      	ldr	r0, [pc, #12]	; (8001d90 <W5500_dataSend+0x2c>)
 8001d84:	f001 fa64 	bl	8003250 <HAL_SPI_Transmit>
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000148 	.word	0x20000148

08001d94 <W5500_CS_select>:

void W5500_CS_select()
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	//GPIOA->BRR = GPIO_PIN_3; // CS���� Low
  //GPIOA->BRR = GPIO_PIN_4;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <W5500_CS_select+0x14>)
 8001d9e:	f000 fc11 	bl	80025c4 <HAL_GPIO_WritePin>
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40020c00 	.word	0x40020c00

08001dac <W5500_CS_deselect>:

void W5500_CS_deselect()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	//GPIOA->BSRR = GPIO_PIN_3; // CS���� High
  //GPIOA->BSRR = GPIO_PIN_4;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001db0:	2201      	movs	r2, #1
 8001db2:	2104      	movs	r1, #4
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <W5500_CS_deselect+0x14>)
 8001db6:	f000 fc05 	bl	80025c4 <HAL_GPIO_WritePin>
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40020c00 	.word	0x40020c00

08001dc4 <isLinked>:

int isLinked(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	return (getPHYCFGR() & PHYCFGR_LNK_ON);
 8001dc8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001dcc:	f7fe fb58 	bl	8000480 <WIZCHIP_READ>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f003 0301 	and.w	r3, r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <W5500_hw_Rst>:

void W5500_hw_Rst(void) // �ϵ���� ����
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
  uint32_t tempTick;
  //GPIOA->BRR = GPIO_PIN_4; // RST ���� Low�� ����
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2104      	movs	r1, #4
 8001de6:	480b      	ldr	r0, [pc, #44]	; (8001e14 <W5500_hw_Rst+0x38>)
 8001de8:	f000 fbec 	bl	80025c4 <HAL_GPIO_WritePin>
  //GPIOC->BRR = GPIO_PIN_4;

  tempTick = HAL_GetTick();
 8001dec:	f000 f8f2 	bl	8001fd4 <HAL_GetTick>
 8001df0:	6078      	str	r0, [r7, #4]
  while((HAL_GetTick() - tempTick) < 1 ); // 1ms �� ������
 8001df2:	bf00      	nop
 8001df4:	f000 f8ee 	bl	8001fd4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d0f9      	beq.n	8001df4 <W5500_hw_Rst+0x18>

  //GPIOA->BSRR = GPIO_PIN_4; // RST ���� High ��.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
 8001e02:	2104      	movs	r1, #4
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <W5500_hw_Rst+0x38>)
 8001e06:	f000 fbdd 	bl	80025c4 <HAL_GPIO_WritePin>
  //GPIOC->BSRR = GPIO_PIN_4;
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40020c00 	.word	0x40020c00

08001e18 <W5500_init>:
{
	wizchip_getnetinfo(&gWIZNETINFO); // W5500 ���� ���� ��������
}

uint8_t W5500_init() // �ʱ�ȭ �Լ�
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
	uint8_t W5500SockBufSize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <W5500_init+0x84>)
 8001e20:	1d3c      	adds	r4, r7, #4
 8001e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t tickStart;

	reg_wizchip_spi_cbfunc(W5500_dataRead, W5500_dataSend); // SPI ��� ����, �۽� ��ɵ�� (�ݹ��Լ�)
 8001e28:	491d      	ldr	r1, [pc, #116]	; (8001ea0 <W5500_init+0x88>)
 8001e2a:	481e      	ldr	r0, [pc, #120]	; (8001ea4 <W5500_init+0x8c>)
 8001e2c:	f7ff f86a 	bl	8000f04 <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(W5500_CS_select, W5500_CS_deselect); // CS �� ���� ��ɵ�� (�ݹ��Լ�)
 8001e30:	491d      	ldr	r1, [pc, #116]	; (8001ea8 <W5500_init+0x90>)
 8001e32:	481e      	ldr	r0, [pc, #120]	; (8001eac <W5500_init+0x94>)
 8001e34:	f7ff f842 	bl	8000ebc <reg_wizchip_cs_cbfunc>

	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)W5500SockBufSize) == -1)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f7ff f88b 	bl	8000f58 <ctlwizchip>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d104      	bne.n	8001e54 <W5500_init+0x3c>
		{
			printf("W5500 initialized fail.\r\n");
 8001e4a:	4819      	ldr	r0, [pc, #100]	; (8001eb0 <W5500_init+0x98>)
 8001e4c:	f002 fc4c 	bl	80046e8 <puts>
			return -1; // �ʱ�ȭ ����
 8001e50:	23ff      	movs	r3, #255	; 0xff
 8001e52:	e01e      	b.n	8001e92 <W5500_init+0x7a>
		}
		/*Set network information by default*/
		wizchip_setnetinfo(&gWIZNETINFO);
 8001e54:	4817      	ldr	r0, [pc, #92]	; (8001eb4 <W5500_init+0x9c>)
 8001e56:	f7ff fbe1 	bl	800161c <wizchip_setnetinfo>
		tickStart = HAL_GetTick();
 8001e5a:	f000 f8bb 	bl	8001fd4 <HAL_GetTick>
 8001e5e:	6178      	str	r0, [r7, #20]
		do{ // PHY ����üũ
			randomKey++;
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <W5500_init+0xa0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <W5500_init+0xa0>)
 8001e68:	6013      	str	r3, [r2, #0]
			if((HAL_GetTick() - tickStart) > 3000 )
 8001e6a:	f000 f8b3 	bl	8001fd4 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d904      	bls.n	8001e86 <W5500_init+0x6e>
			{
				printf("Ethernet Link timeout.\r\n");
 8001e7c:	480f      	ldr	r0, [pc, #60]	; (8001ebc <W5500_init+0xa4>)
 8001e7e:	f002 fc33 	bl	80046e8 <puts>
				return -1; // �̴��� Ÿ�Ӿƿ� ����
 8001e82:	23ff      	movs	r3, #255	; 0xff
 8001e84:	e005      	b.n	8001e92 <W5500_init+0x7a>
			}
		}while(!isLinked());
 8001e86:	f7ff ff9d 	bl	8001dc4 <isLinked>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0e7      	beq.n	8001e60 <W5500_init+0x48>
		return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd90      	pop	{r4, r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	0800540c 	.word	0x0800540c
 8001ea0:	08001d65 	.word	0x08001d65
 8001ea4:	08001d2d 	.word	0x08001d2d
 8001ea8:	08001dad 	.word	0x08001dad
 8001eac:	08001d95 	.word	0x08001d95
 8001eb0:	080053d8 	.word	0x080053d8
 8001eb4:	20000030 	.word	0x20000030
 8001eb8:	200000fc 	.word	0x200000fc
 8001ebc:	080053f4 	.word	0x080053f4

08001ec0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ec0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ec2:	e003      	b.n	8001ecc <LoopCopyDataInit>

08001ec4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001ec6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ec8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001eca:	3104      	adds	r1, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ecc:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ed0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001ed2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ed4:	d3f6      	bcc.n	8001ec4 <CopyDataInit>
  ldr r2, =_sbss
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ed8:	e002      	b.n	8001ee0 <LoopFillZerobss>

08001eda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001edc:	f842 3b04 	str.w	r3, [r2], #4

08001ee0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001ee2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ee4:	d3f9      	bcc.n	8001eda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ee6:	f7ff ff15 	bl	8001d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eea:	f002 fab7 	bl	800445c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eee:	f7ff fbeb 	bl	80016c8 <main>
  bx lr
 8001ef2:	4770      	bx	lr
  ldr r3, =_sidata
 8001ef4:	080054e8 	.word	0x080054e8
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001efc:	200000b8 	.word	0x200000b8
  ldr r2, =_sbss
 8001f00:	200000b8 	.word	0x200000b8
  ldr r3, = _ebss
 8001f04:	200001a8 	.word	0x200001a8

08001f08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC1_IRQHandler>

08001f0a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f955 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f80e 	bl	8001f3c <HAL_InitTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	71fb      	strb	r3, [r7, #7]
 8001f2a:	e001      	b.n	8001f30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f2c:	f7ff fd4e 	bl	80019cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_InitTick+0x68>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d022      	beq.n	8001f96 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_InitTick+0x6c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_InitTick+0x68>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f962 	bl	800222e <HAL_SYSTICK_Config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10f      	bne.n	8001f90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	d809      	bhi.n	8001f8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f76:	2200      	movs	r2, #0
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7e:	f000 f92c 	bl	80021da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_InitTick+0x70>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	e007      	b.n	8001f9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	e004      	b.n	8001f9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e001      	b.n	8001f9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000050 	.word	0x20000050
 8001fa8:	20000048 	.word	0x20000048
 8001fac:	2000004c 	.word	0x2000004c

08001fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_IncTick+0x1c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a03      	ldr	r2, [pc, #12]	; (8001fcc <HAL_IncTick+0x1c>)
 8001fc0:	6013      	str	r3, [r2, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	200001a0 	.word	0x200001a0
 8001fd0:	20000050 	.word	0x20000050

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b02      	ldr	r3, [pc, #8]	; (8001fe4 <HAL_GetTick+0x10>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	200001a0 	.word	0x200001a0

08001fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff fff0 	bl	8001fd4 <HAL_GetTick>
 8001ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d004      	beq.n	800200c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_Delay+0x40>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4413      	add	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800200c:	bf00      	nop
 800200e:	f7ff ffe1 	bl	8001fd4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	429a      	cmp	r2, r3
 800201c:	d8f7      	bhi.n	800200e <HAL_Delay+0x26>
  {
  }
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000050 	.word	0x20000050

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4906      	ldr	r1, [pc, #24]	; (80020c4 <__NVIC_EnableIRQ+0x34>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff90 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff2d 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff42 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff90 	bl	800211c <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5f 	bl	80020c8 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff35 	bl	8002090 <__NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffa2 	bl	8002180 <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d005      	beq.n	800226a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2204      	movs	r2, #4
 8002262:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	e029      	b.n	80022be <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 020e 	bic.w	r2, r2, #14
 8002278:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 021c 	and.w	r2, r3, #28
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f202 	lsl.w	r2, r1, r2
 800229c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	4798      	blx	r3
    }
  }
  return status;
 80022be:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80022de:	e154      	b.n	800258a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8146 	beq.w	8002584 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d00b      	beq.n	8002318 <HAL_GPIO_Init+0x50>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d007      	beq.n	8002318 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800230c:	2b11      	cmp	r3, #17
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b12      	cmp	r3, #18
 8002316:	d130      	bne.n	800237a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800234e:	2201      	movs	r2, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 0201 	and.w	r2, r3, #1
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2203      	movs	r2, #3
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0xf2>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b12      	cmp	r3, #18
 80023b8:	d123      	bne.n	8002402 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	08da      	lsrs	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3208      	adds	r2, #8
 80023c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	220f      	movs	r2, #15
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	6939      	ldr	r1, [r7, #16]
 80023fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0203 	and.w	r2, r3, #3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80a0 	beq.w	8002584 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002444:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <HAL_GPIO_Init+0x2dc>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a56      	ldr	r2, [pc, #344]	; (80025a4 <HAL_GPIO_Init+0x2dc>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <HAL_GPIO_Init+0x2dc>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800245c:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_GPIO_Init+0x2e0>)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002468:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a4a      	ldr	r2, [pc, #296]	; (80025ac <HAL_GPIO_Init+0x2e4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d019      	beq.n	80024bc <HAL_GPIO_Init+0x1f4>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a49      	ldr	r2, [pc, #292]	; (80025b0 <HAL_GPIO_Init+0x2e8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d013      	beq.n	80024b8 <HAL_GPIO_Init+0x1f0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a48      	ldr	r2, [pc, #288]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d00d      	beq.n	80024b4 <HAL_GPIO_Init+0x1ec>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a47      	ldr	r2, [pc, #284]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d007      	beq.n	80024b0 <HAL_GPIO_Init+0x1e8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a46      	ldr	r2, [pc, #280]	; (80025bc <HAL_GPIO_Init+0x2f4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d101      	bne.n	80024ac <HAL_GPIO_Init+0x1e4>
 80024a8:	2304      	movs	r3, #4
 80024aa:	e008      	b.n	80024be <HAL_GPIO_Init+0x1f6>
 80024ac:	2305      	movs	r3, #5
 80024ae:	e006      	b.n	80024be <HAL_GPIO_Init+0x1f6>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e004      	b.n	80024be <HAL_GPIO_Init+0x1f6>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e002      	b.n	80024be <HAL_GPIO_Init+0x1f6>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_GPIO_Init+0x1f6>
 80024bc:	2300      	movs	r3, #0
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	f002 0203 	and.w	r2, r2, #3
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	4093      	lsls	r3, r2
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024ce:	4936      	ldr	r1, [pc, #216]	; (80025a8 <HAL_GPIO_Init+0x2e0>)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3302      	adds	r3, #2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024dc:	4b38      	ldr	r3, [pc, #224]	; (80025c0 <HAL_GPIO_Init+0x2f8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002500:	4a2f      	ldr	r2, [pc, #188]	; (80025c0 <HAL_GPIO_Init+0x2f8>)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002506:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_GPIO_Init+0x2f8>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800252a:	4a25      	ldr	r2, [pc, #148]	; (80025c0 <HAL_GPIO_Init+0x2f8>)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_GPIO_Init+0x2f8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002554:	4a1a      	ldr	r2, [pc, #104]	; (80025c0 <HAL_GPIO_Init+0x2f8>)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_GPIO_Init+0x2f8>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_GPIO_Init+0x2f8>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3301      	adds	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	f47f aea3 	bne.w	80022e0 <HAL_GPIO_Init+0x18>
  }
}
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40010000 	.word	0x40010000
 80025ac:	40020000 	.word	0x40020000
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020c00 	.word	0x40020c00
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4013      	ands	r3, r2
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43d9      	mvns	r1, r3
 8002612:	887b      	ldrh	r3, [r7, #2]
 8002614:	400b      	ands	r3, r1
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
	...

08002628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e31d      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800263a:	4b94      	ldr	r3, [pc, #592]	; (800288c <HAL_RCC_OscConfig+0x264>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002644:	4b91      	ldr	r3, [pc, #580]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d07b      	beq.n	8002752 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b08      	cmp	r3, #8
 800265e:	d006      	beq.n	800266e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d10f      	bne.n	8002686 <HAL_RCC_OscConfig+0x5e>
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266c:	d10b      	bne.n	8002686 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266e:	4b87      	ldr	r3, [pc, #540]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d06a      	beq.n	8002750 <HAL_RCC_OscConfig+0x128>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d166      	bne.n	8002750 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e2f7      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x74>
 800268e:	4b7f      	ldr	r3, [pc, #508]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a7e      	ldr	r2, [pc, #504]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e02d      	b.n	80026f8 <HAL_RCC_OscConfig+0xd0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10c      	bne.n	80026be <HAL_RCC_OscConfig+0x96>
 80026a4:	4b79      	ldr	r3, [pc, #484]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a78      	ldr	r2, [pc, #480]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b76      	ldr	r3, [pc, #472]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a75      	ldr	r2, [pc, #468]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	e01c      	b.n	80026f8 <HAL_RCC_OscConfig+0xd0>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0xb8>
 80026c6:	4b71      	ldr	r3, [pc, #452]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a70      	ldr	r2, [pc, #448]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b6e      	ldr	r3, [pc, #440]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6d      	ldr	r2, [pc, #436]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xd0>
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a69      	ldr	r2, [pc, #420]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a66      	ldr	r2, [pc, #408]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fc68 	bl	8001fd4 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff fc64 	bl	8001fd4 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e2ad      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800271a:	4b5c      	ldr	r3, [pc, #368]	; (800288c <HAL_RCC_OscConfig+0x264>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0xe0>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff fc54 	bl	8001fd4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff fc50 	bl	8001fd4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e299      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002742:	4b52      	ldr	r3, [pc, #328]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x108>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d05a      	beq.n	8002814 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d005      	beq.n	8002770 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d119      	bne.n	800279e <HAL_RCC_OscConfig+0x176>
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d116      	bne.n	800279e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002770:	4b46      	ldr	r3, [pc, #280]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_OscConfig+0x160>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d001      	beq.n	8002788 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e276      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4b40      	ldr	r3, [pc, #256]	; (800288c <HAL_RCC_OscConfig+0x264>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	493d      	ldr	r1, [pc, #244]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279c:	e03a      	b.n	8002814 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d020      	beq.n	80027e8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a6:	4b3a      	ldr	r3, [pc, #232]	; (8002890 <HAL_RCC_OscConfig+0x268>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7ff fc12 	bl	8001fd4 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b4:	f7ff fc0e 	bl	8001fd4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e257      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027c6:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	492a      	ldr	r1, [pc, #168]	; (800288c <HAL_RCC_OscConfig+0x264>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
 80027e6:	e015      	b.n	8002814 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e8:	4b29      	ldr	r3, [pc, #164]	; (8002890 <HAL_RCC_OscConfig+0x268>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7ff fbf1 	bl	8001fd4 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f6:	f7ff fbed 	bl	8001fd4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e236      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002808:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_RCC_OscConfig+0x264>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80b8 	beq.w	8002992 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d170      	bne.n	800290a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_RCC_OscConfig+0x264>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x218>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e21a      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1a      	ldr	r2, [r3, #32]
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800284c:	429a      	cmp	r2, r3
 800284e:	d921      	bls.n	8002894 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fc1f 	bl	8003098 <RCC_SetFlashLatencyFromMSIRange>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e208      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	4906      	ldr	r1, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	4901      	ldr	r1, [pc, #4]	; (800288c <HAL_RCC_OscConfig+0x264>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
 800288a:	e020      	b.n	80028ce <HAL_RCC_OscConfig+0x2a6>
 800288c:	40023800 	.word	0x40023800
 8002890:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002894:	4ba4      	ldr	r3, [pc, #656]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	49a1      	ldr	r1, [pc, #644]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a6:	4ba0      	ldr	r3, [pc, #640]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	061b      	lsls	r3, r3, #24
 80028b4:	499c      	ldr	r1, [pc, #624]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fbea 	bl	8003098 <RCC_SetFlashLatencyFromMSIRange>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e1d3      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	0b5b      	lsrs	r3, r3, #13
 80028d4:	3301      	adds	r3, #1
 80028d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028de:	4a92      	ldr	r2, [pc, #584]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 80028e0:	6892      	ldr	r2, [r2, #8]
 80028e2:	0912      	lsrs	r2, r2, #4
 80028e4:	f002 020f 	and.w	r2, r2, #15
 80028e8:	4990      	ldr	r1, [pc, #576]	; (8002b2c <HAL_RCC_OscConfig+0x504>)
 80028ea:	5c8a      	ldrb	r2, [r1, r2]
 80028ec:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028ee:	4a90      	ldr	r2, [pc, #576]	; (8002b30 <HAL_RCC_OscConfig+0x508>)
 80028f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028f2:	4b90      	ldr	r3, [pc, #576]	; (8002b34 <HAL_RCC_OscConfig+0x50c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fb20 	bl	8001f3c <HAL_InitTick>
 80028fc:	4603      	mov	r3, r0
 80028fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d045      	beq.n	8002992 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	e1b5      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d029      	beq.n	8002966 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002912:	4b89      	ldr	r3, [pc, #548]	; (8002b38 <HAL_RCC_OscConfig+0x510>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff fb5c 	bl	8001fd4 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002920:	f7ff fb58 	bl	8001fd4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1a1      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002932:	4b7d      	ldr	r3, [pc, #500]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293e:	4b7a      	ldr	r3, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4977      	ldr	r1, [pc, #476]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002950:	4b75      	ldr	r3, [pc, #468]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	4972      	ldr	r1, [pc, #456]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002966:	4b74      	ldr	r3, [pc, #464]	; (8002b38 <HAL_RCC_OscConfig+0x510>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff fb32 	bl	8001fd4 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002974:	f7ff fb2e 	bl	8001fd4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e177      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002986:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d030      	beq.n	8002a00 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d016      	beq.n	80029d4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b65      	ldr	r3, [pc, #404]	; (8002b3c <HAL_RCC_OscConfig+0x514>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ac:	f7ff fb12 	bl	8001fd4 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b4:	f7ff fb0e 	bl	8001fd4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e157      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029c6:	4b58      	ldr	r3, [pc, #352]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 80029c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x38c>
 80029d2:	e015      	b.n	8002a00 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d4:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <HAL_RCC_OscConfig+0x514>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7ff fafb 	bl	8001fd4 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e2:	f7ff faf7 	bl	8001fd4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e140      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029f4:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 80029f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80b5 	beq.w	8002b78 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a12:	4b45      	ldr	r3, [pc, #276]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10d      	bne.n	8002a3a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	4b42      	ldr	r3, [pc, #264]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	4a41      	ldr	r2, [pc, #260]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a28:	6253      	str	r3, [r2, #36]	; 0x24
 8002a2a:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a36:	2301      	movs	r3, #1
 8002a38:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_RCC_OscConfig+0x518>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d118      	bne.n	8002a78 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a46:	4b3e      	ldr	r3, [pc, #248]	; (8002b40 <HAL_RCC_OscConfig+0x518>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a3d      	ldr	r2, [pc, #244]	; (8002b40 <HAL_RCC_OscConfig+0x518>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a52:	f7ff fabf 	bl	8001fd4 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7ff fabb 	bl	8001fd4 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b64      	cmp	r3, #100	; 0x64
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e104      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <HAL_RCC_OscConfig+0x518>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x466>
 8002a80:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	4a28      	ldr	r2, [pc, #160]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8a:	6353      	str	r3, [r2, #52]	; 0x34
 8002a8c:	e02d      	b.n	8002aea <HAL_RCC_OscConfig+0x4c2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x488>
 8002a96:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa0:	6353      	str	r3, [r2, #52]	; 0x34
 8002aa2:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa6:	4a20      	ldr	r2, [pc, #128]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aac:	6353      	str	r3, [r2, #52]	; 0x34
 8002aae:	e01c      	b.n	8002aea <HAL_RCC_OscConfig+0x4c2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4aa>
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abc:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac2:	6353      	str	r3, [r2, #52]	; 0x34
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac8:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ace:	6353      	str	r3, [r2, #52]	; 0x34
 8002ad0:	e00b      	b.n	8002aea <HAL_RCC_OscConfig+0x4c2>
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad6:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002adc:	6353      	str	r3, [r2, #52]	; 0x34
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ae8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d015      	beq.n	8002b1e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7ff fa6f 	bl	8001fd4 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7ff fa6b 	bl	8001fd4 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e0b2      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ee      	beq.n	8002afa <HAL_RCC_OscConfig+0x4d2>
 8002b1c:	e023      	b.n	8002b66 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7ff fa59 	bl	8001fd4 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b24:	e019      	b.n	8002b5a <HAL_RCC_OscConfig+0x532>
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	08005428 	.word	0x08005428
 8002b30:	20000048 	.word	0x20000048
 8002b34:	2000004c 	.word	0x2000004c
 8002b38:	42470020 	.word	0x42470020
 8002b3c:	42470680 	.word	0x42470680
 8002b40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7ff fa46 	bl	8001fd4 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e08d      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b5a:	4b49      	ldr	r3, [pc, #292]	; (8002c80 <HAL_RCC_OscConfig+0x658>)
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ee      	bne.n	8002b44 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b66:	7ffb      	ldrb	r3, [r7, #31]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6c:	4b44      	ldr	r3, [pc, #272]	; (8002c80 <HAL_RCC_OscConfig+0x658>)
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	4a43      	ldr	r2, [pc, #268]	; (8002c80 <HAL_RCC_OscConfig+0x658>)
 8002b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d079      	beq.n	8002c74 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d056      	beq.n	8002c34 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d13b      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	; (8002c84 <HAL_RCC_OscConfig+0x65c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7ff fa1e 	bl	8001fd4 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7ff fa1a 	bl	8001fd4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e063      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bae:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_RCC_OscConfig+0x658>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_RCC_OscConfig+0x658>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	4319      	orrs	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	492b      	ldr	r1, [pc, #172]	; (8002c80 <HAL_RCC_OscConfig+0x658>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd8:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <HAL_RCC_OscConfig+0x65c>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7ff f9f9 	bl	8001fd4 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be6:	f7ff f9f5 	bl	8001fd4 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e03e      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <HAL_RCC_OscConfig+0x658>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x5be>
 8002c04:	e036      	b.n	8002c74 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c06:	4b1f      	ldr	r3, [pc, #124]	; (8002c84 <HAL_RCC_OscConfig+0x65c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7ff f9e2 	bl	8001fd4 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c14:	f7ff f9de 	bl	8001fd4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e027      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_RCC_OscConfig+0x658>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5ec>
 8002c32:	e01f      	b.n	8002c74 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e01a      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <HAL_RCC_OscConfig+0x658>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d10d      	bne.n	8002c70 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d106      	bne.n	8002c70 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	42470060 	.word	0x42470060

08002c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e11a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b8f      	ldr	r3, [pc, #572]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d919      	bls.n	8002cde <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x34>
 8002cb0:	4b8a      	ldr	r3, [pc, #552]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a89      	ldr	r2, [pc, #548]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b87      	ldr	r3, [pc, #540]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 0201 	bic.w	r2, r3, #1
 8002cc4:	4985      	ldr	r1, [pc, #532]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ccc:	4b83      	ldr	r3, [pc, #524]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d001      	beq.n	8002cde <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0f9      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cea:	4b7d      	ldr	r3, [pc, #500]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	497a      	ldr	r1, [pc, #488]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 808e 	beq.w	8002e26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d12:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d121      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0d7      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d115      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0cb      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d42:	4b67      	ldr	r3, [pc, #412]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0bf      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d52:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0b7      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b5f      	ldr	r3, [pc, #380]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	495c      	ldr	r1, [pc, #368]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d74:	f7ff f92e 	bl	8001fd4 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d112      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d84:	f7ff f926 	bl	8001fd4 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e09b      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d9a:	4b51      	ldr	r3, [pc, #324]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d1ee      	bne.n	8002d84 <HAL_RCC_ClockConfig+0xfc>
 8002da6:	e03e      	b.n	8002e26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d112      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db2:	f7ff f90f 	bl	8001fd4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e084      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc8:	4b45      	ldr	r3, [pc, #276]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_ClockConfig+0x12a>
 8002dd4:	e027      	b.n	8002e26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d11d      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de0:	f7ff f8f8 	bl	8001fd4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e06d      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002df6:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d1ee      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x158>
 8002e02:	e010      	b.n	8002e26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7ff f8e6 	bl	8001fd4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e05b      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e1a:	4b31      	ldr	r3, [pc, #196]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1ee      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e26:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d219      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d105      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x1be>
 8002e3a:	4b28      	ldr	r3, [pc, #160]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002e40:	f043 0304 	orr.w	r3, r3, #4
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 0201 	bic.w	r2, r3, #1
 8002e4e:	4923      	ldr	r1, [pc, #140]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b21      	ldr	r3, [pc, #132]	; (8002edc <HAL_RCC_ClockConfig+0x254>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e034      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4917      	ldr	r1, [pc, #92]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	490f      	ldr	r1, [pc, #60]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ea6:	f000 f823 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002eaa:	4601      	mov	r1, r0
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <HAL_RCC_ClockConfig+0x258>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <HAL_RCC_ClockConfig+0x25c>)
 8002eb8:	5cd3      	ldrb	r3, [r2, r3]
 8002eba:	fa21 f303 	lsr.w	r3, r1, r3
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x264>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f838 	bl	8001f3c <HAL_InitTick>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ed0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023c00 	.word	0x40023c00
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	08005428 	.word	0x08005428
 8002ee8:	20000048 	.word	0x20000048
 8002eec:	2000004c 	.word	0x2000004c

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ef6:	4b4b      	ldr	r3, [pc, #300]	; (8003024 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d006      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x24>
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	d007      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x2a>
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d176      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0x10c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f0e:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f10:	613b      	str	r3, [r7, #16]
      break;
 8002f12:	e081      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f14:	4b45      	ldr	r3, [pc, #276]	; (800302c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f16:	613b      	str	r3, [r7, #16]
      break;
 8002f18:	e07e      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	0c9b      	lsrs	r3, r3, #18
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	4a43      	ldr	r2, [pc, #268]	; (8003030 <HAL_RCC_GetSysClockFreq+0x140>)
 8002f24:	5cd3      	ldrb	r3, [r2, r3]
 8002f26:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	0d9b      	lsrs	r3, r3, #22
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	3301      	adds	r3, #1
 8002f32:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f34:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_GetSysClockFreq+0x134>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d019      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f04f 0400 	mov.w	r4, #0
 8002f46:	4a39      	ldr	r2, [pc, #228]	; (800302c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f48:	fb02 f104 	mul.w	r1, r2, r4
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	fb02 f203 	mul.w	r2, r2, r3
 8002f52:	440a      	add	r2, r1
 8002f54:	4935      	ldr	r1, [pc, #212]	; (800302c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f56:	fba3 0101 	umull	r0, r1, r3, r1
 8002f5a:	1853      	adds	r3, r2, r1
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f04f 0400 	mov.w	r4, #0
 8002f64:	461a      	mov	r2, r3
 8002f66:	4623      	mov	r3, r4
 8002f68:	f7fd f908 	bl	800017c <__aeabi_uldivmod>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e040      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x106>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	461d      	mov	r5, r3
 8002f78:	f04f 0600 	mov.w	r6, #0
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	4632      	mov	r2, r6
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	f04f 0400 	mov.w	r4, #0
 8002f88:	0154      	lsls	r4, r2, #5
 8002f8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f8e:	014b      	lsls	r3, r1, #5
 8002f90:	4619      	mov	r1, r3
 8002f92:	4622      	mov	r2, r4
 8002f94:	1b49      	subs	r1, r1, r5
 8002f96:	eb62 0206 	sbc.w	r2, r2, r6
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	f04f 0400 	mov.w	r4, #0
 8002fa2:	0194      	lsls	r4, r2, #6
 8002fa4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fa8:	018b      	lsls	r3, r1, #6
 8002faa:	1a5b      	subs	r3, r3, r1
 8002fac:	eb64 0402 	sbc.w	r4, r4, r2
 8002fb0:	f04f 0100 	mov.w	r1, #0
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	00e2      	lsls	r2, r4, #3
 8002fba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fbe:	00d9      	lsls	r1, r3, #3
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4614      	mov	r4, r2
 8002fc4:	195b      	adds	r3, r3, r5
 8002fc6:	eb44 0406 	adc.w	r4, r4, r6
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	02a2      	lsls	r2, r4, #10
 8002fd4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fd8:	0299      	lsls	r1, r3, #10
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4614      	mov	r4, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f04f 0400 	mov.w	r4, #0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4623      	mov	r3, r4
 8002fec:	f7fd f8c6 	bl	800017c <__aeabi_uldivmod>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	460c      	mov	r4, r1
 8002ff4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	613b      	str	r3, [r7, #16]
      break;
 8002ffa:	e00d      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002ffc:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0b5b      	lsrs	r3, r3, #13
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	613b      	str	r3, [r7, #16]
      break;
 8003016:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003018:	693b      	ldr	r3, [r7, #16]
}
 800301a:	4618      	mov	r0, r3
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	00f42400 	.word	0x00f42400
 800302c:	016e3600 	.word	0x016e3600
 8003030:	0800541c 	.word	0x0800541c

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b02      	ldr	r3, [pc, #8]	; (8003044 <HAL_RCC_GetHCLKFreq+0x10>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	20000048 	.word	0x20000048

08003048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800304c:	f7ff fff2 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003050:	4601      	mov	r1, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0a1b      	lsrs	r3, r3, #8
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4a03      	ldr	r2, [pc, #12]	; (800306c <HAL_RCC_GetPCLK1Freq+0x24>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	08005438 	.word	0x08005438

08003070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003074:	f7ff ffde 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003078:	4601      	mov	r1, r0
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0adb      	lsrs	r3, r3, #11
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4a03      	ldr	r2, [pc, #12]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003086:	5cd3      	ldrb	r3, [r2, r3]
 8003088:	fa21 f303 	lsr.w	r3, r1, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40023800 	.word	0x40023800
 8003094:	08005438 	.word	0x08005438

08003098 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030a4:	4b29      	ldr	r3, [pc, #164]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d12c      	bne.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030b0:	4b26      	ldr	r3, [pc, #152]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030bc:	4b24      	ldr	r3, [pc, #144]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e016      	b.n	80030f6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c8:	4b20      	ldr	r3, [pc, #128]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	4a1f      	ldr	r2, [pc, #124]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d2:	6253      	str	r3, [r2, #36]	; 0x24
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030e0:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80030e8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80030fc:	d105      	bne.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x72>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003104:	d101      	bne.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003106:	2301      	movs	r3, #1
 8003108:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 0201 	bic.w	r2, r3, #1
 8003124:	490b      	ldr	r1, [pc, #44]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	40007000 	.word	0x40007000
 8003154:	40023c00 	.word	0x40023c00

08003158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06e      	b.n	8003248 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d108      	bne.n	8003184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800317a:	d009      	beq.n	8003190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
 8003182:	e005      	b.n	8003190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fe fc3c 	bl	8001a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	ea42 0103 	orr.w	r1, r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	0c1a      	lsrs	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f002 0204 	and.w	r2, r2, #4
 8003236:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_SPI_Transmit+0x22>
 800326e:	2302      	movs	r3, #2
 8003270:	e126      	b.n	80034c0 <HAL_SPI_Transmit+0x270>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800327a:	f7fe feab 	bl	8001fd4 <HAL_GetTick>
 800327e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d002      	beq.n	8003296 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003290:	2302      	movs	r3, #2
 8003292:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003294:	e10b      	b.n	80034ae <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_SPI_Transmit+0x52>
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032a6:	e102      	b.n	80034ae <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2203      	movs	r2, #3
 80032ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ee:	d10f      	bne.n	8003310 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800330e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d007      	beq.n	800332e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003336:	d14b      	bne.n	80033d0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_SPI_Transmit+0xf6>
 8003340:	8afb      	ldrh	r3, [r7, #22]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d13e      	bne.n	80033c4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	881a      	ldrh	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	1c9a      	adds	r2, r3, #2
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800336a:	e02b      	b.n	80033c4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d112      	bne.n	80033a0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	881a      	ldrh	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	1c9a      	adds	r2, r3, #2
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	86da      	strh	r2, [r3, #54]	; 0x36
 800339e:	e011      	b.n	80033c4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a0:	f7fe fe18 	bl	8001fd4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d803      	bhi.n	80033b8 <HAL_SPI_Transmit+0x168>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d102      	bne.n	80033be <HAL_SPI_Transmit+0x16e>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d102      	bne.n	80033c4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033c2:	e074      	b.n	80034ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ce      	bne.n	800336c <HAL_SPI_Transmit+0x11c>
 80033ce:	e04c      	b.n	800346a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_Transmit+0x18e>
 80033d8:	8afb      	ldrh	r3, [r7, #22]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d140      	bne.n	8003460 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	330c      	adds	r3, #12
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003404:	e02c      	b.n	8003460 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d113      	bne.n	800343c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	7812      	ldrb	r2, [r2, #0]
 8003420:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	86da      	strh	r2, [r3, #54]	; 0x36
 800343a:	e011      	b.n	8003460 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800343c:	f7fe fdca 	bl	8001fd4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d803      	bhi.n	8003454 <HAL_SPI_Transmit+0x204>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d102      	bne.n	800345a <HAL_SPI_Transmit+0x20a>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800345e:	e026      	b.n	80034ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1cd      	bne.n	8003406 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	6839      	ldr	r1, [r7, #0]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fb66 	bl	8003b40 <SPI_EndRxTxTransaction>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	77fb      	strb	r3, [r7, #31]
 80034aa:	e000      	b.n	80034ae <HAL_SPI_Transmit+0x25e>
  }

error:
 80034ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034be:	7ffb      	ldrb	r3, [r7, #31]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	; 0x30
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034d6:	2301      	movs	r3, #1
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x26>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e18a      	b.n	8003804 <HAL_SPI_TransmitReceive+0x33c>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034f6:	f7fe fd6d 	bl	8001fd4 <HAL_GetTick>
 80034fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800350c:	887b      	ldrh	r3, [r7, #2]
 800350e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003514:	2b01      	cmp	r3, #1
 8003516:	d00f      	beq.n	8003538 <HAL_SPI_TransmitReceive+0x70>
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351e:	d107      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d103      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x68>
 8003528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800352c:	2b04      	cmp	r3, #4
 800352e:	d003      	beq.n	8003538 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003530:	2302      	movs	r3, #2
 8003532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003536:	e15b      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_SPI_TransmitReceive+0x82>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_SPI_TransmitReceive+0x82>
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003550:	e14e      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b04      	cmp	r3, #4
 800355c:	d003      	beq.n	8003566 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2205      	movs	r2, #5
 8003562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	887a      	ldrh	r2, [r7, #2]
 8003576:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	887a      	ldrh	r2, [r7, #2]
 800358e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	d007      	beq.n	80035ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c2:	d178      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_SPI_TransmitReceive+0x10a>
 80035cc:	8b7b      	ldrh	r3, [r7, #26]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d166      	bne.n	80036a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	881a      	ldrh	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	1c9a      	adds	r2, r3, #2
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035f6:	e053      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d11b      	bne.n	800363e <HAL_SPI_TransmitReceive+0x176>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d016      	beq.n	800363e <HAL_SPI_TransmitReceive+0x176>
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	2b01      	cmp	r3, #1
 8003614:	d113      	bne.n	800363e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	881a      	ldrh	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	1c9a      	adds	r2, r3, #2
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d119      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x1b8>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d014      	beq.n	8003680 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	b292      	uxth	r2, r2
 8003662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	1c9a      	adds	r2, r3, #2
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800367c:	2301      	movs	r3, #1
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003680:	f7fe fca8 	bl	8001fd4 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800368c:	429a      	cmp	r2, r3
 800368e:	d807      	bhi.n	80036a0 <HAL_SPI_TransmitReceive+0x1d8>
 8003690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003696:	d003      	beq.n	80036a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800369e:	e0a7      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1a6      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x130>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1a1      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x130>
 80036b4:	e07c      	b.n	80037b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_SPI_TransmitReceive+0x1fc>
 80036be:	8b7b      	ldrh	r3, [r7, #26]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d16b      	bne.n	800379c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ea:	e057      	b.n	800379c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d11c      	bne.n	8003734 <HAL_SPI_TransmitReceive+0x26c>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d017      	beq.n	8003734 <HAL_SPI_TransmitReceive+0x26c>
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d114      	bne.n	8003734 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b01      	cmp	r3, #1
 8003740:	d119      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x2ae>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d014      	beq.n	8003776 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003772:	2301      	movs	r3, #1
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003776:	f7fe fc2d 	bl	8001fd4 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003782:	429a      	cmp	r2, r3
 8003784:	d803      	bhi.n	800378e <HAL_SPI_TransmitReceive+0x2c6>
 8003786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d102      	bne.n	8003794 <HAL_SPI_TransmitReceive+0x2cc>
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800379a:	e029      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1a2      	bne.n	80036ec <HAL_SPI_TransmitReceive+0x224>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d19d      	bne.n	80036ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f9c3 	bl	8003b40 <SPI_EndRxTxTransaction>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037cc:	e010      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	e000      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003804:	4618      	mov	r0, r3
 8003806:	3730      	adds	r7, #48	; 0x30
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	099b      	lsrs	r3, r3, #6
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10f      	bne.n	8003850 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
    return;
 800384e:	e0bf      	b.n	80039d0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_SPI_IRQHandler+0x66>
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	09db      	lsrs	r3, r3, #7
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
    return;
 8003870:	e0ae      	b.n	80039d0 <HAL_SPI_IRQHandler+0x1c4>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_SPI_IRQHandler+0x80>
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	099b      	lsrs	r3, r3, #6
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 80a2 	beq.w	80039d0 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 809b 	beq.w	80039d0 <HAL_SPI_IRQHandler+0x1c4>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	099b      	lsrs	r3, r3, #6
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d023      	beq.n	80038ee <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d011      	beq.n	80038d6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	f043 0204 	orr.w	r2, r3, #4
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	e00b      	b.n	80038ee <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	693b      	ldr	r3, [r7, #16]
        return;
 80038ec:	e070      	b.n	80039d0 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d014      	beq.n	8003924 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	f043 0201 	orr.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	2b00      	cmp	r3, #0
 800392a:	d050      	beq.n	80039ce <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800393a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d104      	bne.n	8003958 <HAL_SPI_IRQHandler+0x14c>
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d034      	beq.n	80039c2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0203 	bic.w	r2, r2, #3
 8003966:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d011      	beq.n	8003994 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_SPI_IRQHandler+0x1cc>)
 8003976:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fc62 	bl	8002246 <HAL_DMA_Abort_IT>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	2b00      	cmp	r3, #0
 800399a:	d016      	beq.n	80039ca <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <HAL_SPI_IRQHandler+0x1cc>)
 80039a2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe fc4c 	bl	8002246 <HAL_DMA_Abort_IT>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80039c0:	e003      	b.n	80039ca <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f80a 	bl	80039dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80039c8:	e000      	b.n	80039cc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80039ca:	bf00      	nop
    return;
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
  }
}
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	08003a09 	.word	0x08003a09

080039dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039fc:	b2db      	uxtb	r3, r3
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff ffda 	bl	80039dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a40:	f7fe fac8 	bl	8001fd4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a50:	f7fe fac0 	bl	8001fd4 <HAL_GetTick>
 8003a54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a56:	4b39      	ldr	r3, [pc, #228]	; (8003b3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	015b      	lsls	r3, r3, #5
 8003a5c:	0d1b      	lsrs	r3, r3, #20
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	fb02 f303 	mul.w	r3, r2, r3
 8003a64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a66:	e054      	b.n	8003b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6e:	d050      	beq.n	8003b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a70:	f7fe fab0 	bl	8001fd4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d902      	bls.n	8003a86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d13d      	bne.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a9e:	d111      	bne.n	8003ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa8:	d004      	beq.n	8003ab4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab2:	d107      	bne.n	8003ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003acc:	d10f      	bne.n	8003aee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e017      	b.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	bf0c      	ite	eq
 8003b22:	2301      	moveq	r3, #1
 8003b24:	2300      	movne	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d19b      	bne.n	8003a68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000048 	.word	0x20000048

08003b40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <SPI_EndRxTxTransaction+0x7c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1b      	ldr	r2, [pc, #108]	; (8003bc0 <SPI_EndRxTxTransaction+0x80>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	0d5b      	lsrs	r3, r3, #21
 8003b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b5c:	fb02 f303 	mul.w	r3, r2, r3
 8003b60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6a:	d112      	bne.n	8003b92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2180      	movs	r1, #128	; 0x80
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff ff5a 	bl	8003a30 <SPI_WaitFlagStateUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d016      	beq.n	8003bb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	f043 0220 	orr.w	r2, r3, #32
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e00f      	b.n	8003bb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	2b80      	cmp	r3, #128	; 0x80
 8003baa:	d0f2      	beq.n	8003b92 <SPI_EndRxTxTransaction+0x52>
 8003bac:	e000      	b.n	8003bb0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003bae:	bf00      	nop
  }

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000048 	.word	0x20000048
 8003bc0:	165e9f81 	.word	0x165e9f81

08003bc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e03f      	b.n	8003c56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd ff68 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2224      	movs	r2, #36	; 0x24
 8003bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fb3d 	bl	8004288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b088      	sub	sp, #32
 8003c62:	af02      	add	r7, sp, #8
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	f040 8083 	bne.w	8003d86 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_UART_Transmit+0x2e>
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e07b      	b.n	8003d88 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_UART_Transmit+0x40>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e074      	b.n	8003d88 <HAL_UART_Transmit+0x12a>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2221      	movs	r2, #33	; 0x21
 8003cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003cb4:	f7fe f98e 	bl	8001fd4 <HAL_GetTick>
 8003cb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003cce:	e042      	b.n	8003d56 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce6:	d122      	bne.n	8003d2e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f95e 	bl	8003fb4 <UART_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e042      	b.n	8003d88 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d14:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	3302      	adds	r3, #2
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	e017      	b.n	8003d56 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	e013      	b.n	8003d56 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2200      	movs	r2, #0
 8003d36:	2180      	movs	r1, #128	; 0x80
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f93b 	bl	8003fb4 <UART_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e01f      	b.n	8003d88 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	60ba      	str	r2, [r7, #8]
 8003d4e:	781a      	ldrb	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1b7      	bne.n	8003cd0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2200      	movs	r2, #0
 8003d68:	2140      	movs	r1, #64	; 0x40
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f922 	bl	8003fb4 <UART_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e006      	b.n	8003d88 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_UART_IRQHandler+0x52>
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f9d2 	bl	8004184 <UART_Receive_IT>
      return;
 8003de0:	e0d1      	b.n	8003f86 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80b0 	beq.w	8003f4a <HAL_UART_IRQHandler+0x1ba>
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <HAL_UART_IRQHandler+0x70>
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80a5 	beq.w	8003f4a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_UART_IRQHandler+0x90>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	f043 0201 	orr.w	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_UART_IRQHandler+0xb0>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	f043 0202 	orr.w	r2, r3, #2
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_UART_IRQHandler+0xd0>
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	f043 0204 	orr.w	r2, r3, #4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00f      	beq.n	8003e8a <HAL_UART_IRQHandler+0xfa>
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <HAL_UART_IRQHandler+0xee>
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	f043 0208 	orr.w	r2, r3, #8
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d078      	beq.n	8003f84 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <HAL_UART_IRQHandler+0x11c>
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f96c 	bl	8004184 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	2b40      	cmp	r3, #64	; 0x40
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x144>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d031      	beq.n	8003f38 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f8b7 	bl	8004048 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d123      	bne.n	8003f30 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d013      	beq.n	8003f28 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	4a21      	ldr	r2, [pc, #132]	; (8003f8c <HAL_UART_IRQHandler+0x1fc>)
 8003f06:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe f99a 	bl	8002246 <HAL_DMA_Abort_IT>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d016      	beq.n	8003f46 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f22:	4610      	mov	r0, r2
 8003f24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f26:	e00e      	b.n	8003f46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f83a 	bl	8003fa2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2e:	e00a      	b.n	8003f46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f836 	bl	8003fa2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f36:	e006      	b.n	8003f46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f832 	bl	8003fa2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003f44:	e01e      	b.n	8003f84 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f46:	bf00      	nop
    return;
 8003f48:	e01c      	b.n	8003f84 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_UART_IRQHandler+0x1d6>
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f8a3 	bl	80040aa <UART_Transmit_IT>
    return;
 8003f64:	e00f      	b.n	8003f86 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_UART_IRQHandler+0x1f6>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8ea 	bl	8004154 <UART_EndTransmit_IT>
    return;
 8003f80:	bf00      	nop
 8003f82:	e000      	b.n	8003f86 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003f84:	bf00      	nop
  }
}
 8003f86:	3720      	adds	r7, #32
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	08004083 	.word	0x08004083

08003f90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc4:	e02c      	b.n	8004020 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d028      	beq.n	8004020 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd4:	f7fd fffe 	bl	8001fd4 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d21d      	bcs.n	8004020 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ff2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e00f      	b.n	8004040 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4013      	ands	r3, r2
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	429a      	cmp	r2, r3
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	429a      	cmp	r2, r3
 800403c:	d0c3      	beq.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800405e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff ff80 	bl	8003fa2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b085      	sub	sp, #20
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b21      	cmp	r3, #33	; 0x21
 80040bc:	d144      	bne.n	8004148 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c6:	d11a      	bne.n	80040fe <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040dc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d105      	bne.n	80040f2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	1c9a      	adds	r2, r3, #2
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	621a      	str	r2, [r3, #32]
 80040f0:	e00e      	b.n	8004110 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]
 80040fc:	e008      	b.n	8004110 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	1c59      	adds	r1, r3, #1
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6211      	str	r1, [r2, #32]
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29b      	uxth	r3, r3
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4619      	mov	r1, r3
 800411e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10f      	bne.n	8004144 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004132:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004142:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800416a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fd faff 	bl	8001778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b22      	cmp	r3, #34	; 0x22
 8004196:	d171      	bne.n	800427c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a0:	d123      	bne.n	80041ea <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10e      	bne.n	80041ce <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	1c9a      	adds	r2, r3, #2
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
 80041cc:	e029      	b.n	8004222 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
 80041e8:	e01b      	b.n	8004222 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6858      	ldr	r0, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	1c59      	adds	r1, r3, #1
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6291      	str	r1, [r2, #40]	; 0x28
 8004202:	b2c2      	uxtb	r2, r0
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e00c      	b.n	8004222 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	b2da      	uxtb	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	1c58      	adds	r0, r3, #1
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	6288      	str	r0, [r1, #40]	; 0x28
 800421a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29b      	uxth	r3, r3
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4619      	mov	r1, r3
 8004230:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004232:	2b00      	cmp	r3, #0
 8004234:	d120      	bne.n	8004278 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0220 	bic.w	r2, r2, #32
 8004244:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004254:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fe8e 	bl	8003f90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	e002      	b.n	800427e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042c8:	f023 030c 	bic.w	r3, r3, #12
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	430b      	orrs	r3, r1
 80042d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a55      	ldr	r2, [pc, #340]	; (8004448 <UART_SetConfig+0x1c0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d103      	bne.n	80042fe <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042f6:	f7fe febb 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	e002      	b.n	8004304 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042fe:	f7fe fea3 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8004302:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430c:	d14c      	bne.n	80043a8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	009a      	lsls	r2, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	4a49      	ldr	r2, [pc, #292]	; (800444c <UART_SetConfig+0x1c4>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	0119      	lsls	r1, r3, #4
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009a      	lsls	r2, r3, #2
 8004338:	441a      	add	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fbb2 f2f3 	udiv	r2, r2, r3
 8004344:	4b41      	ldr	r3, [pc, #260]	; (800444c <UART_SetConfig+0x1c4>)
 8004346:	fba3 0302 	umull	r0, r3, r3, r2
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2064      	movs	r0, #100	; 0x64
 800434e:	fb00 f303 	mul.w	r3, r0, r3
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	3332      	adds	r3, #50	; 0x32
 8004358:	4a3c      	ldr	r2, [pc, #240]	; (800444c <UART_SetConfig+0x1c4>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004366:	4419      	add	r1, r3
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	009a      	lsls	r2, r3, #2
 8004372:	441a      	add	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fbb2 f2f3 	udiv	r2, r2, r3
 800437e:	4b33      	ldr	r3, [pc, #204]	; (800444c <UART_SetConfig+0x1c4>)
 8004380:	fba3 0302 	umull	r0, r3, r3, r2
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	2064      	movs	r0, #100	; 0x64
 8004388:	fb00 f303 	mul.w	r3, r0, r3
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	3332      	adds	r3, #50	; 0x32
 8004392:	4a2e      	ldr	r2, [pc, #184]	; (800444c <UART_SetConfig+0x1c4>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	f003 0207 	and.w	r2, r3, #7
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	440a      	add	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043a6:	e04a      	b.n	800443e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009a      	lsls	r2, r3, #2
 80043b2:	441a      	add	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	4a23      	ldr	r2, [pc, #140]	; (800444c <UART_SetConfig+0x1c4>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	0119      	lsls	r1, r3, #4
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009a      	lsls	r2, r3, #2
 80043d2:	441a      	add	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	fbb2 f2f3 	udiv	r2, r2, r3
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <UART_SetConfig+0x1c4>)
 80043e0:	fba3 0302 	umull	r0, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	2064      	movs	r0, #100	; 0x64
 80043e8:	fb00 f303 	mul.w	r3, r0, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	3332      	adds	r3, #50	; 0x32
 80043f2:	4a16      	ldr	r2, [pc, #88]	; (800444c <UART_SetConfig+0x1c4>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043fe:	4419      	add	r1, r3
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009a      	lsls	r2, r3, #2
 800440a:	441a      	add	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	fbb2 f2f3 	udiv	r2, r2, r3
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <UART_SetConfig+0x1c4>)
 8004418:	fba3 0302 	umull	r0, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	2064      	movs	r0, #100	; 0x64
 8004420:	fb00 f303 	mul.w	r3, r0, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	3332      	adds	r3, #50	; 0x32
 800442a:	4a08      	ldr	r2, [pc, #32]	; (800444c <UART_SetConfig+0x1c4>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	f003 020f 	and.w	r2, r3, #15
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	440a      	add	r2, r1
 800443c:	609a      	str	r2, [r3, #8]
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40013800 	.word	0x40013800
 800444c:	51eb851f 	.word	0x51eb851f

08004450 <__errno>:
 8004450:	4b01      	ldr	r3, [pc, #4]	; (8004458 <__errno+0x8>)
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000054 	.word	0x20000054

0800445c <__libc_init_array>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	2500      	movs	r5, #0
 8004460:	4e0c      	ldr	r6, [pc, #48]	; (8004494 <__libc_init_array+0x38>)
 8004462:	4c0d      	ldr	r4, [pc, #52]	; (8004498 <__libc_init_array+0x3c>)
 8004464:	1ba4      	subs	r4, r4, r6
 8004466:	10a4      	asrs	r4, r4, #2
 8004468:	42a5      	cmp	r5, r4
 800446a:	d109      	bne.n	8004480 <__libc_init_array+0x24>
 800446c:	f000 ff74 	bl	8005358 <_init>
 8004470:	2500      	movs	r5, #0
 8004472:	4e0a      	ldr	r6, [pc, #40]	; (800449c <__libc_init_array+0x40>)
 8004474:	4c0a      	ldr	r4, [pc, #40]	; (80044a0 <__libc_init_array+0x44>)
 8004476:	1ba4      	subs	r4, r4, r6
 8004478:	10a4      	asrs	r4, r4, #2
 800447a:	42a5      	cmp	r5, r4
 800447c:	d105      	bne.n	800448a <__libc_init_array+0x2e>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004484:	4798      	blx	r3
 8004486:	3501      	adds	r5, #1
 8004488:	e7ee      	b.n	8004468 <__libc_init_array+0xc>
 800448a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800448e:	4798      	blx	r3
 8004490:	3501      	adds	r5, #1
 8004492:	e7f2      	b.n	800447a <__libc_init_array+0x1e>
 8004494:	080054e0 	.word	0x080054e0
 8004498:	080054e0 	.word	0x080054e0
 800449c:	080054e0 	.word	0x080054e0
 80044a0:	080054e4 	.word	0x080054e4

080044a4 <memset>:
 80044a4:	4603      	mov	r3, r0
 80044a6:	4402      	add	r2, r0
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d100      	bne.n	80044ae <memset+0xa>
 80044ac:	4770      	bx	lr
 80044ae:	f803 1b01 	strb.w	r1, [r3], #1
 80044b2:	e7f9      	b.n	80044a8 <memset+0x4>

080044b4 <_free_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4605      	mov	r5, r0
 80044b8:	2900      	cmp	r1, #0
 80044ba:	d043      	beq.n	8004544 <_free_r+0x90>
 80044bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c0:	1f0c      	subs	r4, r1, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfb8      	it	lt
 80044c6:	18e4      	addlt	r4, r4, r3
 80044c8:	f000 fc3c 	bl	8004d44 <__malloc_lock>
 80044cc:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <_free_r+0x94>)
 80044ce:	6813      	ldr	r3, [r2, #0]
 80044d0:	4610      	mov	r0, r2
 80044d2:	b933      	cbnz	r3, 80044e2 <_free_r+0x2e>
 80044d4:	6063      	str	r3, [r4, #4]
 80044d6:	6014      	str	r4, [r2, #0]
 80044d8:	4628      	mov	r0, r5
 80044da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044de:	f000 bc32 	b.w	8004d46 <__malloc_unlock>
 80044e2:	42a3      	cmp	r3, r4
 80044e4:	d90b      	bls.n	80044fe <_free_r+0x4a>
 80044e6:	6821      	ldr	r1, [r4, #0]
 80044e8:	1862      	adds	r2, r4, r1
 80044ea:	4293      	cmp	r3, r2
 80044ec:	bf01      	itttt	eq
 80044ee:	681a      	ldreq	r2, [r3, #0]
 80044f0:	685b      	ldreq	r3, [r3, #4]
 80044f2:	1852      	addeq	r2, r2, r1
 80044f4:	6022      	streq	r2, [r4, #0]
 80044f6:	6063      	str	r3, [r4, #4]
 80044f8:	6004      	str	r4, [r0, #0]
 80044fa:	e7ed      	b.n	80044d8 <_free_r+0x24>
 80044fc:	4613      	mov	r3, r2
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	b10a      	cbz	r2, 8004506 <_free_r+0x52>
 8004502:	42a2      	cmp	r2, r4
 8004504:	d9fa      	bls.n	80044fc <_free_r+0x48>
 8004506:	6819      	ldr	r1, [r3, #0]
 8004508:	1858      	adds	r0, r3, r1
 800450a:	42a0      	cmp	r0, r4
 800450c:	d10b      	bne.n	8004526 <_free_r+0x72>
 800450e:	6820      	ldr	r0, [r4, #0]
 8004510:	4401      	add	r1, r0
 8004512:	1858      	adds	r0, r3, r1
 8004514:	4282      	cmp	r2, r0
 8004516:	6019      	str	r1, [r3, #0]
 8004518:	d1de      	bne.n	80044d8 <_free_r+0x24>
 800451a:	6810      	ldr	r0, [r2, #0]
 800451c:	6852      	ldr	r2, [r2, #4]
 800451e:	4401      	add	r1, r0
 8004520:	6019      	str	r1, [r3, #0]
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	e7d8      	b.n	80044d8 <_free_r+0x24>
 8004526:	d902      	bls.n	800452e <_free_r+0x7a>
 8004528:	230c      	movs	r3, #12
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	e7d4      	b.n	80044d8 <_free_r+0x24>
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	1821      	adds	r1, r4, r0
 8004532:	428a      	cmp	r2, r1
 8004534:	bf01      	itttt	eq
 8004536:	6811      	ldreq	r1, [r2, #0]
 8004538:	6852      	ldreq	r2, [r2, #4]
 800453a:	1809      	addeq	r1, r1, r0
 800453c:	6021      	streq	r1, [r4, #0]
 800453e:	6062      	str	r2, [r4, #4]
 8004540:	605c      	str	r4, [r3, #4]
 8004542:	e7c9      	b.n	80044d8 <_free_r+0x24>
 8004544:	bd38      	pop	{r3, r4, r5, pc}
 8004546:	bf00      	nop
 8004548:	20000100 	.word	0x20000100

0800454c <_malloc_r>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	1ccd      	adds	r5, r1, #3
 8004550:	f025 0503 	bic.w	r5, r5, #3
 8004554:	3508      	adds	r5, #8
 8004556:	2d0c      	cmp	r5, #12
 8004558:	bf38      	it	cc
 800455a:	250c      	movcc	r5, #12
 800455c:	2d00      	cmp	r5, #0
 800455e:	4606      	mov	r6, r0
 8004560:	db01      	blt.n	8004566 <_malloc_r+0x1a>
 8004562:	42a9      	cmp	r1, r5
 8004564:	d903      	bls.n	800456e <_malloc_r+0x22>
 8004566:	230c      	movs	r3, #12
 8004568:	6033      	str	r3, [r6, #0]
 800456a:	2000      	movs	r0, #0
 800456c:	bd70      	pop	{r4, r5, r6, pc}
 800456e:	f000 fbe9 	bl	8004d44 <__malloc_lock>
 8004572:	4a21      	ldr	r2, [pc, #132]	; (80045f8 <_malloc_r+0xac>)
 8004574:	6814      	ldr	r4, [r2, #0]
 8004576:	4621      	mov	r1, r4
 8004578:	b991      	cbnz	r1, 80045a0 <_malloc_r+0x54>
 800457a:	4c20      	ldr	r4, [pc, #128]	; (80045fc <_malloc_r+0xb0>)
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	b91b      	cbnz	r3, 8004588 <_malloc_r+0x3c>
 8004580:	4630      	mov	r0, r6
 8004582:	f000 f8b9 	bl	80046f8 <_sbrk_r>
 8004586:	6020      	str	r0, [r4, #0]
 8004588:	4629      	mov	r1, r5
 800458a:	4630      	mov	r0, r6
 800458c:	f000 f8b4 	bl	80046f8 <_sbrk_r>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d124      	bne.n	80045de <_malloc_r+0x92>
 8004594:	230c      	movs	r3, #12
 8004596:	4630      	mov	r0, r6
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	f000 fbd4 	bl	8004d46 <__malloc_unlock>
 800459e:	e7e4      	b.n	800456a <_malloc_r+0x1e>
 80045a0:	680b      	ldr	r3, [r1, #0]
 80045a2:	1b5b      	subs	r3, r3, r5
 80045a4:	d418      	bmi.n	80045d8 <_malloc_r+0x8c>
 80045a6:	2b0b      	cmp	r3, #11
 80045a8:	d90f      	bls.n	80045ca <_malloc_r+0x7e>
 80045aa:	600b      	str	r3, [r1, #0]
 80045ac:	18cc      	adds	r4, r1, r3
 80045ae:	50cd      	str	r5, [r1, r3]
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 fbc8 	bl	8004d46 <__malloc_unlock>
 80045b6:	f104 000b 	add.w	r0, r4, #11
 80045ba:	1d23      	adds	r3, r4, #4
 80045bc:	f020 0007 	bic.w	r0, r0, #7
 80045c0:	1ac3      	subs	r3, r0, r3
 80045c2:	d0d3      	beq.n	800456c <_malloc_r+0x20>
 80045c4:	425a      	negs	r2, r3
 80045c6:	50e2      	str	r2, [r4, r3]
 80045c8:	e7d0      	b.n	800456c <_malloc_r+0x20>
 80045ca:	684b      	ldr	r3, [r1, #4]
 80045cc:	428c      	cmp	r4, r1
 80045ce:	bf16      	itet	ne
 80045d0:	6063      	strne	r3, [r4, #4]
 80045d2:	6013      	streq	r3, [r2, #0]
 80045d4:	460c      	movne	r4, r1
 80045d6:	e7eb      	b.n	80045b0 <_malloc_r+0x64>
 80045d8:	460c      	mov	r4, r1
 80045da:	6849      	ldr	r1, [r1, #4]
 80045dc:	e7cc      	b.n	8004578 <_malloc_r+0x2c>
 80045de:	1cc4      	adds	r4, r0, #3
 80045e0:	f024 0403 	bic.w	r4, r4, #3
 80045e4:	42a0      	cmp	r0, r4
 80045e6:	d005      	beq.n	80045f4 <_malloc_r+0xa8>
 80045e8:	1a21      	subs	r1, r4, r0
 80045ea:	4630      	mov	r0, r6
 80045ec:	f000 f884 	bl	80046f8 <_sbrk_r>
 80045f0:	3001      	adds	r0, #1
 80045f2:	d0cf      	beq.n	8004594 <_malloc_r+0x48>
 80045f4:	6025      	str	r5, [r4, #0]
 80045f6:	e7db      	b.n	80045b0 <_malloc_r+0x64>
 80045f8:	20000100 	.word	0x20000100
 80045fc:	20000104 	.word	0x20000104

08004600 <iprintf>:
 8004600:	b40f      	push	{r0, r1, r2, r3}
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <iprintf+0x2c>)
 8004604:	b513      	push	{r0, r1, r4, lr}
 8004606:	681c      	ldr	r4, [r3, #0]
 8004608:	b124      	cbz	r4, 8004614 <iprintf+0x14>
 800460a:	69a3      	ldr	r3, [r4, #24]
 800460c:	b913      	cbnz	r3, 8004614 <iprintf+0x14>
 800460e:	4620      	mov	r0, r4
 8004610:	f000 fa98 	bl	8004b44 <__sinit>
 8004614:	ab05      	add	r3, sp, #20
 8004616:	9a04      	ldr	r2, [sp, #16]
 8004618:	68a1      	ldr	r1, [r4, #8]
 800461a:	4620      	mov	r0, r4
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	f000 fbbb 	bl	8004d98 <_vfiprintf_r>
 8004622:	b002      	add	sp, #8
 8004624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004628:	b004      	add	sp, #16
 800462a:	4770      	bx	lr
 800462c:	20000054 	.word	0x20000054

08004630 <_puts_r>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	460e      	mov	r6, r1
 8004634:	4605      	mov	r5, r0
 8004636:	b118      	cbz	r0, 8004640 <_puts_r+0x10>
 8004638:	6983      	ldr	r3, [r0, #24]
 800463a:	b90b      	cbnz	r3, 8004640 <_puts_r+0x10>
 800463c:	f000 fa82 	bl	8004b44 <__sinit>
 8004640:	69ab      	ldr	r3, [r5, #24]
 8004642:	68ac      	ldr	r4, [r5, #8]
 8004644:	b913      	cbnz	r3, 800464c <_puts_r+0x1c>
 8004646:	4628      	mov	r0, r5
 8004648:	f000 fa7c 	bl	8004b44 <__sinit>
 800464c:	4b23      	ldr	r3, [pc, #140]	; (80046dc <_puts_r+0xac>)
 800464e:	429c      	cmp	r4, r3
 8004650:	d117      	bne.n	8004682 <_puts_r+0x52>
 8004652:	686c      	ldr	r4, [r5, #4]
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	071b      	lsls	r3, r3, #28
 8004658:	d51d      	bpl.n	8004696 <_puts_r+0x66>
 800465a:	6923      	ldr	r3, [r4, #16]
 800465c:	b1db      	cbz	r3, 8004696 <_puts_r+0x66>
 800465e:	3e01      	subs	r6, #1
 8004660:	68a3      	ldr	r3, [r4, #8]
 8004662:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004666:	3b01      	subs	r3, #1
 8004668:	60a3      	str	r3, [r4, #8]
 800466a:	b9e9      	cbnz	r1, 80046a8 <_puts_r+0x78>
 800466c:	2b00      	cmp	r3, #0
 800466e:	da2e      	bge.n	80046ce <_puts_r+0x9e>
 8004670:	4622      	mov	r2, r4
 8004672:	210a      	movs	r1, #10
 8004674:	4628      	mov	r0, r5
 8004676:	f000 f893 	bl	80047a0 <__swbuf_r>
 800467a:	3001      	adds	r0, #1
 800467c:	d011      	beq.n	80046a2 <_puts_r+0x72>
 800467e:	200a      	movs	r0, #10
 8004680:	e011      	b.n	80046a6 <_puts_r+0x76>
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <_puts_r+0xb0>)
 8004684:	429c      	cmp	r4, r3
 8004686:	d101      	bne.n	800468c <_puts_r+0x5c>
 8004688:	68ac      	ldr	r4, [r5, #8]
 800468a:	e7e3      	b.n	8004654 <_puts_r+0x24>
 800468c:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <_puts_r+0xb4>)
 800468e:	429c      	cmp	r4, r3
 8004690:	bf08      	it	eq
 8004692:	68ec      	ldreq	r4, [r5, #12]
 8004694:	e7de      	b.n	8004654 <_puts_r+0x24>
 8004696:	4621      	mov	r1, r4
 8004698:	4628      	mov	r0, r5
 800469a:	f000 f8e5 	bl	8004868 <__swsetup_r>
 800469e:	2800      	cmp	r0, #0
 80046a0:	d0dd      	beq.n	800465e <_puts_r+0x2e>
 80046a2:	f04f 30ff 	mov.w	r0, #4294967295
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	da04      	bge.n	80046b6 <_puts_r+0x86>
 80046ac:	69a2      	ldr	r2, [r4, #24]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	dc06      	bgt.n	80046c0 <_puts_r+0x90>
 80046b2:	290a      	cmp	r1, #10
 80046b4:	d004      	beq.n	80046c0 <_puts_r+0x90>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	6022      	str	r2, [r4, #0]
 80046bc:	7019      	strb	r1, [r3, #0]
 80046be:	e7cf      	b.n	8004660 <_puts_r+0x30>
 80046c0:	4622      	mov	r2, r4
 80046c2:	4628      	mov	r0, r5
 80046c4:	f000 f86c 	bl	80047a0 <__swbuf_r>
 80046c8:	3001      	adds	r0, #1
 80046ca:	d1c9      	bne.n	8004660 <_puts_r+0x30>
 80046cc:	e7e9      	b.n	80046a2 <_puts_r+0x72>
 80046ce:	200a      	movs	r0, #10
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	6022      	str	r2, [r4, #0]
 80046d6:	7018      	strb	r0, [r3, #0]
 80046d8:	e7e5      	b.n	80046a6 <_puts_r+0x76>
 80046da:	bf00      	nop
 80046dc:	08005464 	.word	0x08005464
 80046e0:	08005484 	.word	0x08005484
 80046e4:	08005444 	.word	0x08005444

080046e8 <puts>:
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <puts+0xc>)
 80046ea:	4601      	mov	r1, r0
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	f7ff bf9f 	b.w	8004630 <_puts_r>
 80046f2:	bf00      	nop
 80046f4:	20000054 	.word	0x20000054

080046f8 <_sbrk_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	2300      	movs	r3, #0
 80046fc:	4c05      	ldr	r4, [pc, #20]	; (8004714 <_sbrk_r+0x1c>)
 80046fe:	4605      	mov	r5, r0
 8004700:	4608      	mov	r0, r1
 8004702:	6023      	str	r3, [r4, #0]
 8004704:	f7fd fad0 	bl	8001ca8 <_sbrk>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	d102      	bne.n	8004712 <_sbrk_r+0x1a>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	b103      	cbz	r3, 8004712 <_sbrk_r+0x1a>
 8004710:	602b      	str	r3, [r5, #0]
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	200001a4 	.word	0x200001a4

08004718 <__sread>:
 8004718:	b510      	push	{r4, lr}
 800471a:	460c      	mov	r4, r1
 800471c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004720:	f000 fdd8 	bl	80052d4 <_read_r>
 8004724:	2800      	cmp	r0, #0
 8004726:	bfab      	itete	ge
 8004728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800472a:	89a3      	ldrhlt	r3, [r4, #12]
 800472c:	181b      	addge	r3, r3, r0
 800472e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004732:	bfac      	ite	ge
 8004734:	6563      	strge	r3, [r4, #84]	; 0x54
 8004736:	81a3      	strhlt	r3, [r4, #12]
 8004738:	bd10      	pop	{r4, pc}

0800473a <__swrite>:
 800473a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473e:	461f      	mov	r7, r3
 8004740:	898b      	ldrh	r3, [r1, #12]
 8004742:	4605      	mov	r5, r0
 8004744:	05db      	lsls	r3, r3, #23
 8004746:	460c      	mov	r4, r1
 8004748:	4616      	mov	r6, r2
 800474a:	d505      	bpl.n	8004758 <__swrite+0x1e>
 800474c:	2302      	movs	r3, #2
 800474e:	2200      	movs	r2, #0
 8004750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004754:	f000 fa80 	bl	8004c58 <_lseek_r>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	4632      	mov	r2, r6
 800475c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004760:	81a3      	strh	r3, [r4, #12]
 8004762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004766:	463b      	mov	r3, r7
 8004768:	4628      	mov	r0, r5
 800476a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800476e:	f000 b869 	b.w	8004844 <_write_r>

08004772 <__sseek>:
 8004772:	b510      	push	{r4, lr}
 8004774:	460c      	mov	r4, r1
 8004776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477a:	f000 fa6d 	bl	8004c58 <_lseek_r>
 800477e:	1c43      	adds	r3, r0, #1
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	bf15      	itete	ne
 8004784:	6560      	strne	r0, [r4, #84]	; 0x54
 8004786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800478a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800478e:	81a3      	strheq	r3, [r4, #12]
 8004790:	bf18      	it	ne
 8004792:	81a3      	strhne	r3, [r4, #12]
 8004794:	bd10      	pop	{r4, pc}

08004796 <__sclose>:
 8004796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479a:	f000 b8d3 	b.w	8004944 <_close_r>
	...

080047a0 <__swbuf_r>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	460e      	mov	r6, r1
 80047a4:	4614      	mov	r4, r2
 80047a6:	4605      	mov	r5, r0
 80047a8:	b118      	cbz	r0, 80047b2 <__swbuf_r+0x12>
 80047aa:	6983      	ldr	r3, [r0, #24]
 80047ac:	b90b      	cbnz	r3, 80047b2 <__swbuf_r+0x12>
 80047ae:	f000 f9c9 	bl	8004b44 <__sinit>
 80047b2:	4b21      	ldr	r3, [pc, #132]	; (8004838 <__swbuf_r+0x98>)
 80047b4:	429c      	cmp	r4, r3
 80047b6:	d12a      	bne.n	800480e <__swbuf_r+0x6e>
 80047b8:	686c      	ldr	r4, [r5, #4]
 80047ba:	69a3      	ldr	r3, [r4, #24]
 80047bc:	60a3      	str	r3, [r4, #8]
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	071a      	lsls	r2, r3, #28
 80047c2:	d52e      	bpl.n	8004822 <__swbuf_r+0x82>
 80047c4:	6923      	ldr	r3, [r4, #16]
 80047c6:	b363      	cbz	r3, 8004822 <__swbuf_r+0x82>
 80047c8:	6923      	ldr	r3, [r4, #16]
 80047ca:	6820      	ldr	r0, [r4, #0]
 80047cc:	b2f6      	uxtb	r6, r6
 80047ce:	1ac0      	subs	r0, r0, r3
 80047d0:	6963      	ldr	r3, [r4, #20]
 80047d2:	4637      	mov	r7, r6
 80047d4:	4283      	cmp	r3, r0
 80047d6:	dc04      	bgt.n	80047e2 <__swbuf_r+0x42>
 80047d8:	4621      	mov	r1, r4
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 f948 	bl	8004a70 <_fflush_r>
 80047e0:	bb28      	cbnz	r0, 800482e <__swbuf_r+0x8e>
 80047e2:	68a3      	ldr	r3, [r4, #8]
 80047e4:	3001      	adds	r0, #1
 80047e6:	3b01      	subs	r3, #1
 80047e8:	60a3      	str	r3, [r4, #8]
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	6022      	str	r2, [r4, #0]
 80047f0:	701e      	strb	r6, [r3, #0]
 80047f2:	6963      	ldr	r3, [r4, #20]
 80047f4:	4283      	cmp	r3, r0
 80047f6:	d004      	beq.n	8004802 <__swbuf_r+0x62>
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	07db      	lsls	r3, r3, #31
 80047fc:	d519      	bpl.n	8004832 <__swbuf_r+0x92>
 80047fe:	2e0a      	cmp	r6, #10
 8004800:	d117      	bne.n	8004832 <__swbuf_r+0x92>
 8004802:	4621      	mov	r1, r4
 8004804:	4628      	mov	r0, r5
 8004806:	f000 f933 	bl	8004a70 <_fflush_r>
 800480a:	b190      	cbz	r0, 8004832 <__swbuf_r+0x92>
 800480c:	e00f      	b.n	800482e <__swbuf_r+0x8e>
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <__swbuf_r+0x9c>)
 8004810:	429c      	cmp	r4, r3
 8004812:	d101      	bne.n	8004818 <__swbuf_r+0x78>
 8004814:	68ac      	ldr	r4, [r5, #8]
 8004816:	e7d0      	b.n	80047ba <__swbuf_r+0x1a>
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <__swbuf_r+0xa0>)
 800481a:	429c      	cmp	r4, r3
 800481c:	bf08      	it	eq
 800481e:	68ec      	ldreq	r4, [r5, #12]
 8004820:	e7cb      	b.n	80047ba <__swbuf_r+0x1a>
 8004822:	4621      	mov	r1, r4
 8004824:	4628      	mov	r0, r5
 8004826:	f000 f81f 	bl	8004868 <__swsetup_r>
 800482a:	2800      	cmp	r0, #0
 800482c:	d0cc      	beq.n	80047c8 <__swbuf_r+0x28>
 800482e:	f04f 37ff 	mov.w	r7, #4294967295
 8004832:	4638      	mov	r0, r7
 8004834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004836:	bf00      	nop
 8004838:	08005464 	.word	0x08005464
 800483c:	08005484 	.word	0x08005484
 8004840:	08005444 	.word	0x08005444

08004844 <_write_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4605      	mov	r5, r0
 8004848:	4608      	mov	r0, r1
 800484a:	4611      	mov	r1, r2
 800484c:	2200      	movs	r2, #0
 800484e:	4c05      	ldr	r4, [pc, #20]	; (8004864 <_write_r+0x20>)
 8004850:	6022      	str	r2, [r4, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	f7fd f9db 	bl	8001c0e <_write>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d102      	bne.n	8004862 <_write_r+0x1e>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	b103      	cbz	r3, 8004862 <_write_r+0x1e>
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	200001a4 	.word	0x200001a4

08004868 <__swsetup_r>:
 8004868:	4b32      	ldr	r3, [pc, #200]	; (8004934 <__swsetup_r+0xcc>)
 800486a:	b570      	push	{r4, r5, r6, lr}
 800486c:	681d      	ldr	r5, [r3, #0]
 800486e:	4606      	mov	r6, r0
 8004870:	460c      	mov	r4, r1
 8004872:	b125      	cbz	r5, 800487e <__swsetup_r+0x16>
 8004874:	69ab      	ldr	r3, [r5, #24]
 8004876:	b913      	cbnz	r3, 800487e <__swsetup_r+0x16>
 8004878:	4628      	mov	r0, r5
 800487a:	f000 f963 	bl	8004b44 <__sinit>
 800487e:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <__swsetup_r+0xd0>)
 8004880:	429c      	cmp	r4, r3
 8004882:	d10f      	bne.n	80048a4 <__swsetup_r+0x3c>
 8004884:	686c      	ldr	r4, [r5, #4]
 8004886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800488a:	b29a      	uxth	r2, r3
 800488c:	0715      	lsls	r5, r2, #28
 800488e:	d42c      	bmi.n	80048ea <__swsetup_r+0x82>
 8004890:	06d0      	lsls	r0, r2, #27
 8004892:	d411      	bmi.n	80048b8 <__swsetup_r+0x50>
 8004894:	2209      	movs	r2, #9
 8004896:	6032      	str	r2, [r6, #0]
 8004898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489c:	81a3      	strh	r3, [r4, #12]
 800489e:	f04f 30ff 	mov.w	r0, #4294967295
 80048a2:	e03e      	b.n	8004922 <__swsetup_r+0xba>
 80048a4:	4b25      	ldr	r3, [pc, #148]	; (800493c <__swsetup_r+0xd4>)
 80048a6:	429c      	cmp	r4, r3
 80048a8:	d101      	bne.n	80048ae <__swsetup_r+0x46>
 80048aa:	68ac      	ldr	r4, [r5, #8]
 80048ac:	e7eb      	b.n	8004886 <__swsetup_r+0x1e>
 80048ae:	4b24      	ldr	r3, [pc, #144]	; (8004940 <__swsetup_r+0xd8>)
 80048b0:	429c      	cmp	r4, r3
 80048b2:	bf08      	it	eq
 80048b4:	68ec      	ldreq	r4, [r5, #12]
 80048b6:	e7e6      	b.n	8004886 <__swsetup_r+0x1e>
 80048b8:	0751      	lsls	r1, r2, #29
 80048ba:	d512      	bpl.n	80048e2 <__swsetup_r+0x7a>
 80048bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048be:	b141      	cbz	r1, 80048d2 <__swsetup_r+0x6a>
 80048c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048c4:	4299      	cmp	r1, r3
 80048c6:	d002      	beq.n	80048ce <__swsetup_r+0x66>
 80048c8:	4630      	mov	r0, r6
 80048ca:	f7ff fdf3 	bl	80044b4 <_free_r>
 80048ce:	2300      	movs	r3, #0
 80048d0:	6363      	str	r3, [r4, #52]	; 0x34
 80048d2:	89a3      	ldrh	r3, [r4, #12]
 80048d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	2300      	movs	r3, #0
 80048dc:	6063      	str	r3, [r4, #4]
 80048de:	6923      	ldr	r3, [r4, #16]
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	f043 0308 	orr.w	r3, r3, #8
 80048e8:	81a3      	strh	r3, [r4, #12]
 80048ea:	6923      	ldr	r3, [r4, #16]
 80048ec:	b94b      	cbnz	r3, 8004902 <__swsetup_r+0x9a>
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f8:	d003      	beq.n	8004902 <__swsetup_r+0x9a>
 80048fa:	4621      	mov	r1, r4
 80048fc:	4630      	mov	r0, r6
 80048fe:	f000 f9e1 	bl	8004cc4 <__smakebuf_r>
 8004902:	89a2      	ldrh	r2, [r4, #12]
 8004904:	f012 0301 	ands.w	r3, r2, #1
 8004908:	d00c      	beq.n	8004924 <__swsetup_r+0xbc>
 800490a:	2300      	movs	r3, #0
 800490c:	60a3      	str	r3, [r4, #8]
 800490e:	6963      	ldr	r3, [r4, #20]
 8004910:	425b      	negs	r3, r3
 8004912:	61a3      	str	r3, [r4, #24]
 8004914:	6923      	ldr	r3, [r4, #16]
 8004916:	b953      	cbnz	r3, 800492e <__swsetup_r+0xc6>
 8004918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800491c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004920:	d1ba      	bne.n	8004898 <__swsetup_r+0x30>
 8004922:	bd70      	pop	{r4, r5, r6, pc}
 8004924:	0792      	lsls	r2, r2, #30
 8004926:	bf58      	it	pl
 8004928:	6963      	ldrpl	r3, [r4, #20]
 800492a:	60a3      	str	r3, [r4, #8]
 800492c:	e7f2      	b.n	8004914 <__swsetup_r+0xac>
 800492e:	2000      	movs	r0, #0
 8004930:	e7f7      	b.n	8004922 <__swsetup_r+0xba>
 8004932:	bf00      	nop
 8004934:	20000054 	.word	0x20000054
 8004938:	08005464 	.word	0x08005464
 800493c:	08005484 	.word	0x08005484
 8004940:	08005444 	.word	0x08005444

08004944 <_close_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	2300      	movs	r3, #0
 8004948:	4c05      	ldr	r4, [pc, #20]	; (8004960 <_close_r+0x1c>)
 800494a:	4605      	mov	r5, r0
 800494c:	4608      	mov	r0, r1
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	f7fd f979 	bl	8001c46 <_close>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	d102      	bne.n	800495e <_close_r+0x1a>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	b103      	cbz	r3, 800495e <_close_r+0x1a>
 800495c:	602b      	str	r3, [r5, #0]
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	200001a4 	.word	0x200001a4

08004964 <__sflush_r>:
 8004964:	898a      	ldrh	r2, [r1, #12]
 8004966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800496a:	4605      	mov	r5, r0
 800496c:	0710      	lsls	r0, r2, #28
 800496e:	460c      	mov	r4, r1
 8004970:	d458      	bmi.n	8004a24 <__sflush_r+0xc0>
 8004972:	684b      	ldr	r3, [r1, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	dc05      	bgt.n	8004984 <__sflush_r+0x20>
 8004978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	dc02      	bgt.n	8004984 <__sflush_r+0x20>
 800497e:	2000      	movs	r0, #0
 8004980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004986:	2e00      	cmp	r6, #0
 8004988:	d0f9      	beq.n	800497e <__sflush_r+0x1a>
 800498a:	2300      	movs	r3, #0
 800498c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004990:	682f      	ldr	r7, [r5, #0]
 8004992:	6a21      	ldr	r1, [r4, #32]
 8004994:	602b      	str	r3, [r5, #0]
 8004996:	d032      	beq.n	80049fe <__sflush_r+0x9a>
 8004998:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	075a      	lsls	r2, r3, #29
 800499e:	d505      	bpl.n	80049ac <__sflush_r+0x48>
 80049a0:	6863      	ldr	r3, [r4, #4]
 80049a2:	1ac0      	subs	r0, r0, r3
 80049a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049a6:	b10b      	cbz	r3, 80049ac <__sflush_r+0x48>
 80049a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049aa:	1ac0      	subs	r0, r0, r3
 80049ac:	2300      	movs	r3, #0
 80049ae:	4602      	mov	r2, r0
 80049b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049b2:	6a21      	ldr	r1, [r4, #32]
 80049b4:	4628      	mov	r0, r5
 80049b6:	47b0      	blx	r6
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	d106      	bne.n	80049cc <__sflush_r+0x68>
 80049be:	6829      	ldr	r1, [r5, #0]
 80049c0:	291d      	cmp	r1, #29
 80049c2:	d848      	bhi.n	8004a56 <__sflush_r+0xf2>
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <__sflush_r+0x108>)
 80049c6:	40ca      	lsrs	r2, r1
 80049c8:	07d6      	lsls	r6, r2, #31
 80049ca:	d544      	bpl.n	8004a56 <__sflush_r+0xf2>
 80049cc:	2200      	movs	r2, #0
 80049ce:	6062      	str	r2, [r4, #4]
 80049d0:	6922      	ldr	r2, [r4, #16]
 80049d2:	04d9      	lsls	r1, r3, #19
 80049d4:	6022      	str	r2, [r4, #0]
 80049d6:	d504      	bpl.n	80049e2 <__sflush_r+0x7e>
 80049d8:	1c42      	adds	r2, r0, #1
 80049da:	d101      	bne.n	80049e0 <__sflush_r+0x7c>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	b903      	cbnz	r3, 80049e2 <__sflush_r+0x7e>
 80049e0:	6560      	str	r0, [r4, #84]	; 0x54
 80049e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049e4:	602f      	str	r7, [r5, #0]
 80049e6:	2900      	cmp	r1, #0
 80049e8:	d0c9      	beq.n	800497e <__sflush_r+0x1a>
 80049ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049ee:	4299      	cmp	r1, r3
 80049f0:	d002      	beq.n	80049f8 <__sflush_r+0x94>
 80049f2:	4628      	mov	r0, r5
 80049f4:	f7ff fd5e 	bl	80044b4 <_free_r>
 80049f8:	2000      	movs	r0, #0
 80049fa:	6360      	str	r0, [r4, #52]	; 0x34
 80049fc:	e7c0      	b.n	8004980 <__sflush_r+0x1c>
 80049fe:	2301      	movs	r3, #1
 8004a00:	4628      	mov	r0, r5
 8004a02:	47b0      	blx	r6
 8004a04:	1c41      	adds	r1, r0, #1
 8004a06:	d1c8      	bne.n	800499a <__sflush_r+0x36>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0c5      	beq.n	800499a <__sflush_r+0x36>
 8004a0e:	2b1d      	cmp	r3, #29
 8004a10:	d001      	beq.n	8004a16 <__sflush_r+0xb2>
 8004a12:	2b16      	cmp	r3, #22
 8004a14:	d101      	bne.n	8004a1a <__sflush_r+0xb6>
 8004a16:	602f      	str	r7, [r5, #0]
 8004a18:	e7b1      	b.n	800497e <__sflush_r+0x1a>
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a20:	81a3      	strh	r3, [r4, #12]
 8004a22:	e7ad      	b.n	8004980 <__sflush_r+0x1c>
 8004a24:	690f      	ldr	r7, [r1, #16]
 8004a26:	2f00      	cmp	r7, #0
 8004a28:	d0a9      	beq.n	800497e <__sflush_r+0x1a>
 8004a2a:	0793      	lsls	r3, r2, #30
 8004a2c:	bf18      	it	ne
 8004a2e:	2300      	movne	r3, #0
 8004a30:	680e      	ldr	r6, [r1, #0]
 8004a32:	bf08      	it	eq
 8004a34:	694b      	ldreq	r3, [r1, #20]
 8004a36:	eba6 0807 	sub.w	r8, r6, r7
 8004a3a:	600f      	str	r7, [r1, #0]
 8004a3c:	608b      	str	r3, [r1, #8]
 8004a3e:	f1b8 0f00 	cmp.w	r8, #0
 8004a42:	dd9c      	ble.n	800497e <__sflush_r+0x1a>
 8004a44:	4643      	mov	r3, r8
 8004a46:	463a      	mov	r2, r7
 8004a48:	6a21      	ldr	r1, [r4, #32]
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a4e:	47b0      	blx	r6
 8004a50:	2800      	cmp	r0, #0
 8004a52:	dc06      	bgt.n	8004a62 <__sflush_r+0xfe>
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a60:	e78e      	b.n	8004980 <__sflush_r+0x1c>
 8004a62:	4407      	add	r7, r0
 8004a64:	eba8 0800 	sub.w	r8, r8, r0
 8004a68:	e7e9      	b.n	8004a3e <__sflush_r+0xda>
 8004a6a:	bf00      	nop
 8004a6c:	20400001 	.word	0x20400001

08004a70 <_fflush_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	690b      	ldr	r3, [r1, #16]
 8004a74:	4605      	mov	r5, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	b1db      	cbz	r3, 8004ab2 <_fflush_r+0x42>
 8004a7a:	b118      	cbz	r0, 8004a84 <_fflush_r+0x14>
 8004a7c:	6983      	ldr	r3, [r0, #24]
 8004a7e:	b90b      	cbnz	r3, 8004a84 <_fflush_r+0x14>
 8004a80:	f000 f860 	bl	8004b44 <__sinit>
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <_fflush_r+0x48>)
 8004a86:	429c      	cmp	r4, r3
 8004a88:	d109      	bne.n	8004a9e <_fflush_r+0x2e>
 8004a8a:	686c      	ldr	r4, [r5, #4]
 8004a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a90:	b17b      	cbz	r3, 8004ab2 <_fflush_r+0x42>
 8004a92:	4621      	mov	r1, r4
 8004a94:	4628      	mov	r0, r5
 8004a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a9a:	f7ff bf63 	b.w	8004964 <__sflush_r>
 8004a9e:	4b07      	ldr	r3, [pc, #28]	; (8004abc <_fflush_r+0x4c>)
 8004aa0:	429c      	cmp	r4, r3
 8004aa2:	d101      	bne.n	8004aa8 <_fflush_r+0x38>
 8004aa4:	68ac      	ldr	r4, [r5, #8]
 8004aa6:	e7f1      	b.n	8004a8c <_fflush_r+0x1c>
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <_fflush_r+0x50>)
 8004aaa:	429c      	cmp	r4, r3
 8004aac:	bf08      	it	eq
 8004aae:	68ec      	ldreq	r4, [r5, #12]
 8004ab0:	e7ec      	b.n	8004a8c <_fflush_r+0x1c>
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}
 8004ab6:	bf00      	nop
 8004ab8:	08005464 	.word	0x08005464
 8004abc:	08005484 	.word	0x08005484
 8004ac0:	08005444 	.word	0x08005444

08004ac4 <std>:
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	4604      	mov	r4, r0
 8004aca:	e9c0 3300 	strd	r3, r3, [r0]
 8004ace:	6083      	str	r3, [r0, #8]
 8004ad0:	8181      	strh	r1, [r0, #12]
 8004ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ad4:	81c2      	strh	r2, [r0, #14]
 8004ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ada:	6183      	str	r3, [r0, #24]
 8004adc:	4619      	mov	r1, r3
 8004ade:	2208      	movs	r2, #8
 8004ae0:	305c      	adds	r0, #92	; 0x5c
 8004ae2:	f7ff fcdf 	bl	80044a4 <memset>
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <std+0x38>)
 8004ae8:	6224      	str	r4, [r4, #32]
 8004aea:	6263      	str	r3, [r4, #36]	; 0x24
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <std+0x3c>)
 8004aee:	62a3      	str	r3, [r4, #40]	; 0x28
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <std+0x40>)
 8004af2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <std+0x44>)
 8004af6:	6323      	str	r3, [r4, #48]	; 0x30
 8004af8:	bd10      	pop	{r4, pc}
 8004afa:	bf00      	nop
 8004afc:	08004719 	.word	0x08004719
 8004b00:	0800473b 	.word	0x0800473b
 8004b04:	08004773 	.word	0x08004773
 8004b08:	08004797 	.word	0x08004797

08004b0c <_cleanup_r>:
 8004b0c:	4901      	ldr	r1, [pc, #4]	; (8004b14 <_cleanup_r+0x8>)
 8004b0e:	f000 b885 	b.w	8004c1c <_fwalk_reent>
 8004b12:	bf00      	nop
 8004b14:	08004a71 	.word	0x08004a71

08004b18 <__sfmoreglue>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	2568      	movs	r5, #104	; 0x68
 8004b1c:	1e4a      	subs	r2, r1, #1
 8004b1e:	4355      	muls	r5, r2
 8004b20:	460e      	mov	r6, r1
 8004b22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b26:	f7ff fd11 	bl	800454c <_malloc_r>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	b140      	cbz	r0, 8004b40 <__sfmoreglue+0x28>
 8004b2e:	2100      	movs	r1, #0
 8004b30:	e9c0 1600 	strd	r1, r6, [r0]
 8004b34:	300c      	adds	r0, #12
 8004b36:	60a0      	str	r0, [r4, #8]
 8004b38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b3c:	f7ff fcb2 	bl	80044a4 <memset>
 8004b40:	4620      	mov	r0, r4
 8004b42:	bd70      	pop	{r4, r5, r6, pc}

08004b44 <__sinit>:
 8004b44:	6983      	ldr	r3, [r0, #24]
 8004b46:	b510      	push	{r4, lr}
 8004b48:	4604      	mov	r4, r0
 8004b4a:	bb33      	cbnz	r3, 8004b9a <__sinit+0x56>
 8004b4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004b50:	6503      	str	r3, [r0, #80]	; 0x50
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <__sinit+0x58>)
 8004b54:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <__sinit+0x5c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6282      	str	r2, [r0, #40]	; 0x28
 8004b5a:	4298      	cmp	r0, r3
 8004b5c:	bf04      	itt	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	6183      	streq	r3, [r0, #24]
 8004b62:	f000 f81f 	bl	8004ba4 <__sfp>
 8004b66:	6060      	str	r0, [r4, #4]
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f000 f81b 	bl	8004ba4 <__sfp>
 8004b6e:	60a0      	str	r0, [r4, #8]
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 f817 	bl	8004ba4 <__sfp>
 8004b76:	2200      	movs	r2, #0
 8004b78:	60e0      	str	r0, [r4, #12]
 8004b7a:	2104      	movs	r1, #4
 8004b7c:	6860      	ldr	r0, [r4, #4]
 8004b7e:	f7ff ffa1 	bl	8004ac4 <std>
 8004b82:	2201      	movs	r2, #1
 8004b84:	2109      	movs	r1, #9
 8004b86:	68a0      	ldr	r0, [r4, #8]
 8004b88:	f7ff ff9c 	bl	8004ac4 <std>
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	2112      	movs	r1, #18
 8004b90:	68e0      	ldr	r0, [r4, #12]
 8004b92:	f7ff ff97 	bl	8004ac4 <std>
 8004b96:	2301      	movs	r3, #1
 8004b98:	61a3      	str	r3, [r4, #24]
 8004b9a:	bd10      	pop	{r4, pc}
 8004b9c:	08005440 	.word	0x08005440
 8004ba0:	08004b0d 	.word	0x08004b0d

08004ba4 <__sfp>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <__sfp+0x70>)
 8004ba8:	4607      	mov	r7, r0
 8004baa:	681e      	ldr	r6, [r3, #0]
 8004bac:	69b3      	ldr	r3, [r6, #24]
 8004bae:	b913      	cbnz	r3, 8004bb6 <__sfp+0x12>
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	f7ff ffc7 	bl	8004b44 <__sinit>
 8004bb6:	3648      	adds	r6, #72	; 0x48
 8004bb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	d503      	bpl.n	8004bc8 <__sfp+0x24>
 8004bc0:	6833      	ldr	r3, [r6, #0]
 8004bc2:	b133      	cbz	r3, 8004bd2 <__sfp+0x2e>
 8004bc4:	6836      	ldr	r6, [r6, #0]
 8004bc6:	e7f7      	b.n	8004bb8 <__sfp+0x14>
 8004bc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bcc:	b16d      	cbz	r5, 8004bea <__sfp+0x46>
 8004bce:	3468      	adds	r4, #104	; 0x68
 8004bd0:	e7f4      	b.n	8004bbc <__sfp+0x18>
 8004bd2:	2104      	movs	r1, #4
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	f7ff ff9f 	bl	8004b18 <__sfmoreglue>
 8004bda:	6030      	str	r0, [r6, #0]
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d1f1      	bne.n	8004bc4 <__sfp+0x20>
 8004be0:	230c      	movs	r3, #12
 8004be2:	4604      	mov	r4, r0
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	4620      	mov	r0, r4
 8004be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <__sfp+0x74>)
 8004bec:	6665      	str	r5, [r4, #100]	; 0x64
 8004bee:	e9c4 5500 	strd	r5, r5, [r4]
 8004bf2:	60a5      	str	r5, [r4, #8]
 8004bf4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004bf8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004bfc:	2208      	movs	r2, #8
 8004bfe:	4629      	mov	r1, r5
 8004c00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c04:	f7ff fc4e 	bl	80044a4 <memset>
 8004c08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c10:	e7e9      	b.n	8004be6 <__sfp+0x42>
 8004c12:	bf00      	nop
 8004c14:	08005440 	.word	0x08005440
 8004c18:	ffff0001 	.word	0xffff0001

08004c1c <_fwalk_reent>:
 8004c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c20:	4680      	mov	r8, r0
 8004c22:	4689      	mov	r9, r1
 8004c24:	2600      	movs	r6, #0
 8004c26:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c2a:	b914      	cbnz	r4, 8004c32 <_fwalk_reent+0x16>
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004c36:	3f01      	subs	r7, #1
 8004c38:	d501      	bpl.n	8004c3e <_fwalk_reent+0x22>
 8004c3a:	6824      	ldr	r4, [r4, #0]
 8004c3c:	e7f5      	b.n	8004c2a <_fwalk_reent+0xe>
 8004c3e:	89ab      	ldrh	r3, [r5, #12]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d907      	bls.n	8004c54 <_fwalk_reent+0x38>
 8004c44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	d003      	beq.n	8004c54 <_fwalk_reent+0x38>
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4640      	mov	r0, r8
 8004c50:	47c8      	blx	r9
 8004c52:	4306      	orrs	r6, r0
 8004c54:	3568      	adds	r5, #104	; 0x68
 8004c56:	e7ee      	b.n	8004c36 <_fwalk_reent+0x1a>

08004c58 <_lseek_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	2200      	movs	r2, #0
 8004c62:	4c05      	ldr	r4, [pc, #20]	; (8004c78 <_lseek_r+0x20>)
 8004c64:	6022      	str	r2, [r4, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f7fd f811 	bl	8001c8e <_lseek>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_lseek_r+0x1e>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_lseek_r+0x1e>
 8004c74:	602b      	str	r3, [r5, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	200001a4 	.word	0x200001a4

08004c7c <__swhatbuf_r>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	460e      	mov	r6, r1
 8004c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c84:	b096      	sub	sp, #88	; 0x58
 8004c86:	2900      	cmp	r1, #0
 8004c88:	4614      	mov	r4, r2
 8004c8a:	461d      	mov	r5, r3
 8004c8c:	da07      	bge.n	8004c9e <__swhatbuf_r+0x22>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	89b3      	ldrh	r3, [r6, #12]
 8004c94:	061a      	lsls	r2, r3, #24
 8004c96:	d410      	bmi.n	8004cba <__swhatbuf_r+0x3e>
 8004c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c9c:	e00e      	b.n	8004cbc <__swhatbuf_r+0x40>
 8004c9e:	466a      	mov	r2, sp
 8004ca0:	f000 fb2a 	bl	80052f8 <_fstat_r>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	dbf2      	blt.n	8004c8e <__swhatbuf_r+0x12>
 8004ca8:	9a01      	ldr	r2, [sp, #4]
 8004caa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cb2:	425a      	negs	r2, r3
 8004cb4:	415a      	adcs	r2, r3
 8004cb6:	602a      	str	r2, [r5, #0]
 8004cb8:	e7ee      	b.n	8004c98 <__swhatbuf_r+0x1c>
 8004cba:	2340      	movs	r3, #64	; 0x40
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	b016      	add	sp, #88	; 0x58
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}

08004cc4 <__smakebuf_r>:
 8004cc4:	898b      	ldrh	r3, [r1, #12]
 8004cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cc8:	079d      	lsls	r5, r3, #30
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	d507      	bpl.n	8004ce0 <__smakebuf_r+0x1c>
 8004cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	6123      	str	r3, [r4, #16]
 8004cd8:	2301      	movs	r3, #1
 8004cda:	6163      	str	r3, [r4, #20]
 8004cdc:	b002      	add	sp, #8
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	ab01      	add	r3, sp, #4
 8004ce2:	466a      	mov	r2, sp
 8004ce4:	f7ff ffca 	bl	8004c7c <__swhatbuf_r>
 8004ce8:	9900      	ldr	r1, [sp, #0]
 8004cea:	4605      	mov	r5, r0
 8004cec:	4630      	mov	r0, r6
 8004cee:	f7ff fc2d 	bl	800454c <_malloc_r>
 8004cf2:	b948      	cbnz	r0, 8004d08 <__smakebuf_r+0x44>
 8004cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cf8:	059a      	lsls	r2, r3, #22
 8004cfa:	d4ef      	bmi.n	8004cdc <__smakebuf_r+0x18>
 8004cfc:	f023 0303 	bic.w	r3, r3, #3
 8004d00:	f043 0302 	orr.w	r3, r3, #2
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	e7e3      	b.n	8004cd0 <__smakebuf_r+0xc>
 8004d08:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <__smakebuf_r+0x7c>)
 8004d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	6020      	str	r0, [r4, #0]
 8004d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	9b00      	ldr	r3, [sp, #0]
 8004d18:	6120      	str	r0, [r4, #16]
 8004d1a:	6163      	str	r3, [r4, #20]
 8004d1c:	9b01      	ldr	r3, [sp, #4]
 8004d1e:	b15b      	cbz	r3, 8004d38 <__smakebuf_r+0x74>
 8004d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d24:	4630      	mov	r0, r6
 8004d26:	f000 faf9 	bl	800531c <_isatty_r>
 8004d2a:	b128      	cbz	r0, 8004d38 <__smakebuf_r+0x74>
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	81a3      	strh	r3, [r4, #12]
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	431d      	orrs	r5, r3
 8004d3c:	81a5      	strh	r5, [r4, #12]
 8004d3e:	e7cd      	b.n	8004cdc <__smakebuf_r+0x18>
 8004d40:	08004b0d 	.word	0x08004b0d

08004d44 <__malloc_lock>:
 8004d44:	4770      	bx	lr

08004d46 <__malloc_unlock>:
 8004d46:	4770      	bx	lr

08004d48 <__sfputc_r>:
 8004d48:	6893      	ldr	r3, [r2, #8]
 8004d4a:	b410      	push	{r4}
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	6093      	str	r3, [r2, #8]
 8004d52:	da07      	bge.n	8004d64 <__sfputc_r+0x1c>
 8004d54:	6994      	ldr	r4, [r2, #24]
 8004d56:	42a3      	cmp	r3, r4
 8004d58:	db01      	blt.n	8004d5e <__sfputc_r+0x16>
 8004d5a:	290a      	cmp	r1, #10
 8004d5c:	d102      	bne.n	8004d64 <__sfputc_r+0x1c>
 8004d5e:	bc10      	pop	{r4}
 8004d60:	f7ff bd1e 	b.w	80047a0 <__swbuf_r>
 8004d64:	6813      	ldr	r3, [r2, #0]
 8004d66:	1c58      	adds	r0, r3, #1
 8004d68:	6010      	str	r0, [r2, #0]
 8004d6a:	7019      	strb	r1, [r3, #0]
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	bc10      	pop	{r4}
 8004d70:	4770      	bx	lr

08004d72 <__sfputs_r>:
 8004d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d74:	4606      	mov	r6, r0
 8004d76:	460f      	mov	r7, r1
 8004d78:	4614      	mov	r4, r2
 8004d7a:	18d5      	adds	r5, r2, r3
 8004d7c:	42ac      	cmp	r4, r5
 8004d7e:	d101      	bne.n	8004d84 <__sfputs_r+0x12>
 8004d80:	2000      	movs	r0, #0
 8004d82:	e007      	b.n	8004d94 <__sfputs_r+0x22>
 8004d84:	463a      	mov	r2, r7
 8004d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f7ff ffdc 	bl	8004d48 <__sfputc_r>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d1f3      	bne.n	8004d7c <__sfputs_r+0xa>
 8004d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d98 <_vfiprintf_r>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	b09d      	sub	sp, #116	; 0x74
 8004da0:	4617      	mov	r7, r2
 8004da2:	461d      	mov	r5, r3
 8004da4:	4606      	mov	r6, r0
 8004da6:	b118      	cbz	r0, 8004db0 <_vfiprintf_r+0x18>
 8004da8:	6983      	ldr	r3, [r0, #24]
 8004daa:	b90b      	cbnz	r3, 8004db0 <_vfiprintf_r+0x18>
 8004dac:	f7ff feca 	bl	8004b44 <__sinit>
 8004db0:	4b7c      	ldr	r3, [pc, #496]	; (8004fa4 <_vfiprintf_r+0x20c>)
 8004db2:	429c      	cmp	r4, r3
 8004db4:	d158      	bne.n	8004e68 <_vfiprintf_r+0xd0>
 8004db6:	6874      	ldr	r4, [r6, #4]
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	0718      	lsls	r0, r3, #28
 8004dbc:	d55e      	bpl.n	8004e7c <_vfiprintf_r+0xe4>
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d05b      	beq.n	8004e7c <_vfiprintf_r+0xe4>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc8:	2320      	movs	r3, #32
 8004dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dce:	2330      	movs	r3, #48	; 0x30
 8004dd0:	f04f 0b01 	mov.w	fp, #1
 8004dd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dd8:	9503      	str	r5, [sp, #12]
 8004dda:	46b8      	mov	r8, r7
 8004ddc:	4645      	mov	r5, r8
 8004dde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004de2:	b10b      	cbz	r3, 8004de8 <_vfiprintf_r+0x50>
 8004de4:	2b25      	cmp	r3, #37	; 0x25
 8004de6:	d154      	bne.n	8004e92 <_vfiprintf_r+0xfa>
 8004de8:	ebb8 0a07 	subs.w	sl, r8, r7
 8004dec:	d00b      	beq.n	8004e06 <_vfiprintf_r+0x6e>
 8004dee:	4653      	mov	r3, sl
 8004df0:	463a      	mov	r2, r7
 8004df2:	4621      	mov	r1, r4
 8004df4:	4630      	mov	r0, r6
 8004df6:	f7ff ffbc 	bl	8004d72 <__sfputs_r>
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f000 80c2 	beq.w	8004f84 <_vfiprintf_r+0x1ec>
 8004e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e02:	4453      	add	r3, sl
 8004e04:	9309      	str	r3, [sp, #36]	; 0x24
 8004e06:	f898 3000 	ldrb.w	r3, [r8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 80ba 	beq.w	8004f84 <_vfiprintf_r+0x1ec>
 8004e10:	2300      	movs	r3, #0
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295
 8004e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e1a:	9304      	str	r3, [sp, #16]
 8004e1c:	9307      	str	r3, [sp, #28]
 8004e1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e22:	931a      	str	r3, [sp, #104]	; 0x68
 8004e24:	46a8      	mov	r8, r5
 8004e26:	2205      	movs	r2, #5
 8004e28:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004e2c:	485e      	ldr	r0, [pc, #376]	; (8004fa8 <_vfiprintf_r+0x210>)
 8004e2e:	f000 fa85 	bl	800533c <memchr>
 8004e32:	9b04      	ldr	r3, [sp, #16]
 8004e34:	bb78      	cbnz	r0, 8004e96 <_vfiprintf_r+0xfe>
 8004e36:	06d9      	lsls	r1, r3, #27
 8004e38:	bf44      	itt	mi
 8004e3a:	2220      	movmi	r2, #32
 8004e3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e40:	071a      	lsls	r2, r3, #28
 8004e42:	bf44      	itt	mi
 8004e44:	222b      	movmi	r2, #43	; 0x2b
 8004e46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e4a:	782a      	ldrb	r2, [r5, #0]
 8004e4c:	2a2a      	cmp	r2, #42	; 0x2a
 8004e4e:	d02a      	beq.n	8004ea6 <_vfiprintf_r+0x10e>
 8004e50:	46a8      	mov	r8, r5
 8004e52:	2000      	movs	r0, #0
 8004e54:	250a      	movs	r5, #10
 8004e56:	9a07      	ldr	r2, [sp, #28]
 8004e58:	4641      	mov	r1, r8
 8004e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e5e:	3b30      	subs	r3, #48	; 0x30
 8004e60:	2b09      	cmp	r3, #9
 8004e62:	d969      	bls.n	8004f38 <_vfiprintf_r+0x1a0>
 8004e64:	b360      	cbz	r0, 8004ec0 <_vfiprintf_r+0x128>
 8004e66:	e024      	b.n	8004eb2 <_vfiprintf_r+0x11a>
 8004e68:	4b50      	ldr	r3, [pc, #320]	; (8004fac <_vfiprintf_r+0x214>)
 8004e6a:	429c      	cmp	r4, r3
 8004e6c:	d101      	bne.n	8004e72 <_vfiprintf_r+0xda>
 8004e6e:	68b4      	ldr	r4, [r6, #8]
 8004e70:	e7a2      	b.n	8004db8 <_vfiprintf_r+0x20>
 8004e72:	4b4f      	ldr	r3, [pc, #316]	; (8004fb0 <_vfiprintf_r+0x218>)
 8004e74:	429c      	cmp	r4, r3
 8004e76:	bf08      	it	eq
 8004e78:	68f4      	ldreq	r4, [r6, #12]
 8004e7a:	e79d      	b.n	8004db8 <_vfiprintf_r+0x20>
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f7ff fcf2 	bl	8004868 <__swsetup_r>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d09d      	beq.n	8004dc4 <_vfiprintf_r+0x2c>
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	b01d      	add	sp, #116	; 0x74
 8004e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e92:	46a8      	mov	r8, r5
 8004e94:	e7a2      	b.n	8004ddc <_vfiprintf_r+0x44>
 8004e96:	4a44      	ldr	r2, [pc, #272]	; (8004fa8 <_vfiprintf_r+0x210>)
 8004e98:	4645      	mov	r5, r8
 8004e9a:	1a80      	subs	r0, r0, r2
 8004e9c:	fa0b f000 	lsl.w	r0, fp, r0
 8004ea0:	4318      	orrs	r0, r3
 8004ea2:	9004      	str	r0, [sp, #16]
 8004ea4:	e7be      	b.n	8004e24 <_vfiprintf_r+0x8c>
 8004ea6:	9a03      	ldr	r2, [sp, #12]
 8004ea8:	1d11      	adds	r1, r2, #4
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	9103      	str	r1, [sp, #12]
 8004eae:	2a00      	cmp	r2, #0
 8004eb0:	db01      	blt.n	8004eb6 <_vfiprintf_r+0x11e>
 8004eb2:	9207      	str	r2, [sp, #28]
 8004eb4:	e004      	b.n	8004ec0 <_vfiprintf_r+0x128>
 8004eb6:	4252      	negs	r2, r2
 8004eb8:	f043 0302 	orr.w	r3, r3, #2
 8004ebc:	9207      	str	r2, [sp, #28]
 8004ebe:	9304      	str	r3, [sp, #16]
 8004ec0:	f898 3000 	ldrb.w	r3, [r8]
 8004ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ec6:	d10e      	bne.n	8004ee6 <_vfiprintf_r+0x14e>
 8004ec8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ece:	d138      	bne.n	8004f42 <_vfiprintf_r+0x1aa>
 8004ed0:	9b03      	ldr	r3, [sp, #12]
 8004ed2:	f108 0802 	add.w	r8, r8, #2
 8004ed6:	1d1a      	adds	r2, r3, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	9203      	str	r2, [sp, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bfb8      	it	lt
 8004ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ee4:	9305      	str	r3, [sp, #20]
 8004ee6:	4d33      	ldr	r5, [pc, #204]	; (8004fb4 <_vfiprintf_r+0x21c>)
 8004ee8:	2203      	movs	r2, #3
 8004eea:	f898 1000 	ldrb.w	r1, [r8]
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f000 fa24 	bl	800533c <memchr>
 8004ef4:	b140      	cbz	r0, 8004f08 <_vfiprintf_r+0x170>
 8004ef6:	2340      	movs	r3, #64	; 0x40
 8004ef8:	1b40      	subs	r0, r0, r5
 8004efa:	fa03 f000 	lsl.w	r0, r3, r0
 8004efe:	9b04      	ldr	r3, [sp, #16]
 8004f00:	f108 0801 	add.w	r8, r8, #1
 8004f04:	4303      	orrs	r3, r0
 8004f06:	9304      	str	r3, [sp, #16]
 8004f08:	f898 1000 	ldrb.w	r1, [r8]
 8004f0c:	2206      	movs	r2, #6
 8004f0e:	482a      	ldr	r0, [pc, #168]	; (8004fb8 <_vfiprintf_r+0x220>)
 8004f10:	f108 0701 	add.w	r7, r8, #1
 8004f14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f18:	f000 fa10 	bl	800533c <memchr>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d037      	beq.n	8004f90 <_vfiprintf_r+0x1f8>
 8004f20:	4b26      	ldr	r3, [pc, #152]	; (8004fbc <_vfiprintf_r+0x224>)
 8004f22:	bb1b      	cbnz	r3, 8004f6c <_vfiprintf_r+0x1d4>
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	3307      	adds	r3, #7
 8004f28:	f023 0307 	bic.w	r3, r3, #7
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	9303      	str	r3, [sp, #12]
 8004f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f32:	444b      	add	r3, r9
 8004f34:	9309      	str	r3, [sp, #36]	; 0x24
 8004f36:	e750      	b.n	8004dda <_vfiprintf_r+0x42>
 8004f38:	fb05 3202 	mla	r2, r5, r2, r3
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	4688      	mov	r8, r1
 8004f40:	e78a      	b.n	8004e58 <_vfiprintf_r+0xc0>
 8004f42:	2300      	movs	r3, #0
 8004f44:	250a      	movs	r5, #10
 8004f46:	4619      	mov	r1, r3
 8004f48:	f108 0801 	add.w	r8, r8, #1
 8004f4c:	9305      	str	r3, [sp, #20]
 8004f4e:	4640      	mov	r0, r8
 8004f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f54:	3a30      	subs	r2, #48	; 0x30
 8004f56:	2a09      	cmp	r2, #9
 8004f58:	d903      	bls.n	8004f62 <_vfiprintf_r+0x1ca>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0c3      	beq.n	8004ee6 <_vfiprintf_r+0x14e>
 8004f5e:	9105      	str	r1, [sp, #20]
 8004f60:	e7c1      	b.n	8004ee6 <_vfiprintf_r+0x14e>
 8004f62:	fb05 2101 	mla	r1, r5, r1, r2
 8004f66:	2301      	movs	r3, #1
 8004f68:	4680      	mov	r8, r0
 8004f6a:	e7f0      	b.n	8004f4e <_vfiprintf_r+0x1b6>
 8004f6c:	ab03      	add	r3, sp, #12
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	4622      	mov	r2, r4
 8004f72:	4b13      	ldr	r3, [pc, #76]	; (8004fc0 <_vfiprintf_r+0x228>)
 8004f74:	a904      	add	r1, sp, #16
 8004f76:	4630      	mov	r0, r6
 8004f78:	f3af 8000 	nop.w
 8004f7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f80:	4681      	mov	r9, r0
 8004f82:	d1d5      	bne.n	8004f30 <_vfiprintf_r+0x198>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	065b      	lsls	r3, r3, #25
 8004f88:	f53f af7e 	bmi.w	8004e88 <_vfiprintf_r+0xf0>
 8004f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f8e:	e77d      	b.n	8004e8c <_vfiprintf_r+0xf4>
 8004f90:	ab03      	add	r3, sp, #12
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	4622      	mov	r2, r4
 8004f96:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <_vfiprintf_r+0x228>)
 8004f98:	a904      	add	r1, sp, #16
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f000 f888 	bl	80050b0 <_printf_i>
 8004fa0:	e7ec      	b.n	8004f7c <_vfiprintf_r+0x1e4>
 8004fa2:	bf00      	nop
 8004fa4:	08005464 	.word	0x08005464
 8004fa8:	080054a4 	.word	0x080054a4
 8004fac:	08005484 	.word	0x08005484
 8004fb0:	08005444 	.word	0x08005444
 8004fb4:	080054aa 	.word	0x080054aa
 8004fb8:	080054ae 	.word	0x080054ae
 8004fbc:	00000000 	.word	0x00000000
 8004fc0:	08004d73 	.word	0x08004d73

08004fc4 <_printf_common>:
 8004fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc8:	4691      	mov	r9, r2
 8004fca:	461f      	mov	r7, r3
 8004fcc:	688a      	ldr	r2, [r1, #8]
 8004fce:	690b      	ldr	r3, [r1, #16]
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	bfb8      	it	lt
 8004fd6:	4613      	movlt	r3, r2
 8004fd8:	f8c9 3000 	str.w	r3, [r9]
 8004fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fe6:	b112      	cbz	r2, 8004fee <_printf_common+0x2a>
 8004fe8:	3301      	adds	r3, #1
 8004fea:	f8c9 3000 	str.w	r3, [r9]
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	0699      	lsls	r1, r3, #26
 8004ff2:	bf42      	ittt	mi
 8004ff4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ff8:	3302      	addmi	r3, #2
 8004ffa:	f8c9 3000 	strmi.w	r3, [r9]
 8004ffe:	6825      	ldr	r5, [r4, #0]
 8005000:	f015 0506 	ands.w	r5, r5, #6
 8005004:	d107      	bne.n	8005016 <_printf_common+0x52>
 8005006:	f104 0a19 	add.w	sl, r4, #25
 800500a:	68e3      	ldr	r3, [r4, #12]
 800500c:	f8d9 2000 	ldr.w	r2, [r9]
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	42ab      	cmp	r3, r5
 8005014:	dc29      	bgt.n	800506a <_printf_common+0xa6>
 8005016:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	3300      	adds	r3, #0
 800501e:	bf18      	it	ne
 8005020:	2301      	movne	r3, #1
 8005022:	0692      	lsls	r2, r2, #26
 8005024:	d42e      	bmi.n	8005084 <_printf_common+0xc0>
 8005026:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800502a:	4639      	mov	r1, r7
 800502c:	4630      	mov	r0, r6
 800502e:	47c0      	blx	r8
 8005030:	3001      	adds	r0, #1
 8005032:	d021      	beq.n	8005078 <_printf_common+0xb4>
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	68e5      	ldr	r5, [r4, #12]
 8005038:	f003 0306 	and.w	r3, r3, #6
 800503c:	2b04      	cmp	r3, #4
 800503e:	bf18      	it	ne
 8005040:	2500      	movne	r5, #0
 8005042:	f8d9 2000 	ldr.w	r2, [r9]
 8005046:	f04f 0900 	mov.w	r9, #0
 800504a:	bf08      	it	eq
 800504c:	1aad      	subeq	r5, r5, r2
 800504e:	68a3      	ldr	r3, [r4, #8]
 8005050:	6922      	ldr	r2, [r4, #16]
 8005052:	bf08      	it	eq
 8005054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005058:	4293      	cmp	r3, r2
 800505a:	bfc4      	itt	gt
 800505c:	1a9b      	subgt	r3, r3, r2
 800505e:	18ed      	addgt	r5, r5, r3
 8005060:	341a      	adds	r4, #26
 8005062:	454d      	cmp	r5, r9
 8005064:	d11a      	bne.n	800509c <_printf_common+0xd8>
 8005066:	2000      	movs	r0, #0
 8005068:	e008      	b.n	800507c <_printf_common+0xb8>
 800506a:	2301      	movs	r3, #1
 800506c:	4652      	mov	r2, sl
 800506e:	4639      	mov	r1, r7
 8005070:	4630      	mov	r0, r6
 8005072:	47c0      	blx	r8
 8005074:	3001      	adds	r0, #1
 8005076:	d103      	bne.n	8005080 <_printf_common+0xbc>
 8005078:	f04f 30ff 	mov.w	r0, #4294967295
 800507c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005080:	3501      	adds	r5, #1
 8005082:	e7c2      	b.n	800500a <_printf_common+0x46>
 8005084:	2030      	movs	r0, #48	; 0x30
 8005086:	18e1      	adds	r1, r4, r3
 8005088:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005092:	4422      	add	r2, r4
 8005094:	3302      	adds	r3, #2
 8005096:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800509a:	e7c4      	b.n	8005026 <_printf_common+0x62>
 800509c:	2301      	movs	r3, #1
 800509e:	4622      	mov	r2, r4
 80050a0:	4639      	mov	r1, r7
 80050a2:	4630      	mov	r0, r6
 80050a4:	47c0      	blx	r8
 80050a6:	3001      	adds	r0, #1
 80050a8:	d0e6      	beq.n	8005078 <_printf_common+0xb4>
 80050aa:	f109 0901 	add.w	r9, r9, #1
 80050ae:	e7d8      	b.n	8005062 <_printf_common+0x9e>

080050b0 <_printf_i>:
 80050b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80050b8:	460c      	mov	r4, r1
 80050ba:	7e09      	ldrb	r1, [r1, #24]
 80050bc:	b085      	sub	sp, #20
 80050be:	296e      	cmp	r1, #110	; 0x6e
 80050c0:	4617      	mov	r7, r2
 80050c2:	4606      	mov	r6, r0
 80050c4:	4698      	mov	r8, r3
 80050c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050c8:	f000 80b3 	beq.w	8005232 <_printf_i+0x182>
 80050cc:	d822      	bhi.n	8005114 <_printf_i+0x64>
 80050ce:	2963      	cmp	r1, #99	; 0x63
 80050d0:	d036      	beq.n	8005140 <_printf_i+0x90>
 80050d2:	d80a      	bhi.n	80050ea <_printf_i+0x3a>
 80050d4:	2900      	cmp	r1, #0
 80050d6:	f000 80b9 	beq.w	800524c <_printf_i+0x19c>
 80050da:	2958      	cmp	r1, #88	; 0x58
 80050dc:	f000 8083 	beq.w	80051e6 <_printf_i+0x136>
 80050e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050e8:	e032      	b.n	8005150 <_printf_i+0xa0>
 80050ea:	2964      	cmp	r1, #100	; 0x64
 80050ec:	d001      	beq.n	80050f2 <_printf_i+0x42>
 80050ee:	2969      	cmp	r1, #105	; 0x69
 80050f0:	d1f6      	bne.n	80050e0 <_printf_i+0x30>
 80050f2:	6820      	ldr	r0, [r4, #0]
 80050f4:	6813      	ldr	r3, [r2, #0]
 80050f6:	0605      	lsls	r5, r0, #24
 80050f8:	f103 0104 	add.w	r1, r3, #4
 80050fc:	d52a      	bpl.n	8005154 <_printf_i+0xa4>
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6011      	str	r1, [r2, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	da03      	bge.n	800510e <_printf_i+0x5e>
 8005106:	222d      	movs	r2, #45	; 0x2d
 8005108:	425b      	negs	r3, r3
 800510a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800510e:	486f      	ldr	r0, [pc, #444]	; (80052cc <_printf_i+0x21c>)
 8005110:	220a      	movs	r2, #10
 8005112:	e039      	b.n	8005188 <_printf_i+0xd8>
 8005114:	2973      	cmp	r1, #115	; 0x73
 8005116:	f000 809d 	beq.w	8005254 <_printf_i+0x1a4>
 800511a:	d808      	bhi.n	800512e <_printf_i+0x7e>
 800511c:	296f      	cmp	r1, #111	; 0x6f
 800511e:	d020      	beq.n	8005162 <_printf_i+0xb2>
 8005120:	2970      	cmp	r1, #112	; 0x70
 8005122:	d1dd      	bne.n	80050e0 <_printf_i+0x30>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	f043 0320 	orr.w	r3, r3, #32
 800512a:	6023      	str	r3, [r4, #0]
 800512c:	e003      	b.n	8005136 <_printf_i+0x86>
 800512e:	2975      	cmp	r1, #117	; 0x75
 8005130:	d017      	beq.n	8005162 <_printf_i+0xb2>
 8005132:	2978      	cmp	r1, #120	; 0x78
 8005134:	d1d4      	bne.n	80050e0 <_printf_i+0x30>
 8005136:	2378      	movs	r3, #120	; 0x78
 8005138:	4865      	ldr	r0, [pc, #404]	; (80052d0 <_printf_i+0x220>)
 800513a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800513e:	e055      	b.n	80051ec <_printf_i+0x13c>
 8005140:	6813      	ldr	r3, [r2, #0]
 8005142:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005146:	1d19      	adds	r1, r3, #4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6011      	str	r1, [r2, #0]
 800514c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005150:	2301      	movs	r3, #1
 8005152:	e08c      	b.n	800526e <_printf_i+0x1be>
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f010 0f40 	tst.w	r0, #64	; 0x40
 800515a:	6011      	str	r1, [r2, #0]
 800515c:	bf18      	it	ne
 800515e:	b21b      	sxthne	r3, r3
 8005160:	e7cf      	b.n	8005102 <_printf_i+0x52>
 8005162:	6813      	ldr	r3, [r2, #0]
 8005164:	6825      	ldr	r5, [r4, #0]
 8005166:	1d18      	adds	r0, r3, #4
 8005168:	6010      	str	r0, [r2, #0]
 800516a:	0628      	lsls	r0, r5, #24
 800516c:	d501      	bpl.n	8005172 <_printf_i+0xc2>
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	e002      	b.n	8005178 <_printf_i+0xc8>
 8005172:	0668      	lsls	r0, r5, #25
 8005174:	d5fb      	bpl.n	800516e <_printf_i+0xbe>
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	296f      	cmp	r1, #111	; 0x6f
 800517a:	bf14      	ite	ne
 800517c:	220a      	movne	r2, #10
 800517e:	2208      	moveq	r2, #8
 8005180:	4852      	ldr	r0, [pc, #328]	; (80052cc <_printf_i+0x21c>)
 8005182:	2100      	movs	r1, #0
 8005184:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005188:	6865      	ldr	r5, [r4, #4]
 800518a:	2d00      	cmp	r5, #0
 800518c:	60a5      	str	r5, [r4, #8]
 800518e:	f2c0 8095 	blt.w	80052bc <_printf_i+0x20c>
 8005192:	6821      	ldr	r1, [r4, #0]
 8005194:	f021 0104 	bic.w	r1, r1, #4
 8005198:	6021      	str	r1, [r4, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d13d      	bne.n	800521a <_printf_i+0x16a>
 800519e:	2d00      	cmp	r5, #0
 80051a0:	f040 808e 	bne.w	80052c0 <_printf_i+0x210>
 80051a4:	4665      	mov	r5, ip
 80051a6:	2a08      	cmp	r2, #8
 80051a8:	d10b      	bne.n	80051c2 <_printf_i+0x112>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	07db      	lsls	r3, r3, #31
 80051ae:	d508      	bpl.n	80051c2 <_printf_i+0x112>
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	6862      	ldr	r2, [r4, #4]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	bfde      	ittt	le
 80051b8:	2330      	movle	r3, #48	; 0x30
 80051ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051c2:	ebac 0305 	sub.w	r3, ip, r5
 80051c6:	6123      	str	r3, [r4, #16]
 80051c8:	f8cd 8000 	str.w	r8, [sp]
 80051cc:	463b      	mov	r3, r7
 80051ce:	aa03      	add	r2, sp, #12
 80051d0:	4621      	mov	r1, r4
 80051d2:	4630      	mov	r0, r6
 80051d4:	f7ff fef6 	bl	8004fc4 <_printf_common>
 80051d8:	3001      	adds	r0, #1
 80051da:	d14d      	bne.n	8005278 <_printf_i+0x1c8>
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	b005      	add	sp, #20
 80051e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051e6:	4839      	ldr	r0, [pc, #228]	; (80052cc <_printf_i+0x21c>)
 80051e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051ec:	6813      	ldr	r3, [r2, #0]
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	1d1d      	adds	r5, r3, #4
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6015      	str	r5, [r2, #0]
 80051f6:	060a      	lsls	r2, r1, #24
 80051f8:	d50b      	bpl.n	8005212 <_printf_i+0x162>
 80051fa:	07ca      	lsls	r2, r1, #31
 80051fc:	bf44      	itt	mi
 80051fe:	f041 0120 	orrmi.w	r1, r1, #32
 8005202:	6021      	strmi	r1, [r4, #0]
 8005204:	b91b      	cbnz	r3, 800520e <_printf_i+0x15e>
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	f022 0220 	bic.w	r2, r2, #32
 800520c:	6022      	str	r2, [r4, #0]
 800520e:	2210      	movs	r2, #16
 8005210:	e7b7      	b.n	8005182 <_printf_i+0xd2>
 8005212:	064d      	lsls	r5, r1, #25
 8005214:	bf48      	it	mi
 8005216:	b29b      	uxthmi	r3, r3
 8005218:	e7ef      	b.n	80051fa <_printf_i+0x14a>
 800521a:	4665      	mov	r5, ip
 800521c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005220:	fb02 3311 	mls	r3, r2, r1, r3
 8005224:	5cc3      	ldrb	r3, [r0, r3]
 8005226:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800522a:	460b      	mov	r3, r1
 800522c:	2900      	cmp	r1, #0
 800522e:	d1f5      	bne.n	800521c <_printf_i+0x16c>
 8005230:	e7b9      	b.n	80051a6 <_printf_i+0xf6>
 8005232:	6813      	ldr	r3, [r2, #0]
 8005234:	6825      	ldr	r5, [r4, #0]
 8005236:	1d18      	adds	r0, r3, #4
 8005238:	6961      	ldr	r1, [r4, #20]
 800523a:	6010      	str	r0, [r2, #0]
 800523c:	0628      	lsls	r0, r5, #24
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	d501      	bpl.n	8005246 <_printf_i+0x196>
 8005242:	6019      	str	r1, [r3, #0]
 8005244:	e002      	b.n	800524c <_printf_i+0x19c>
 8005246:	066a      	lsls	r2, r5, #25
 8005248:	d5fb      	bpl.n	8005242 <_printf_i+0x192>
 800524a:	8019      	strh	r1, [r3, #0]
 800524c:	2300      	movs	r3, #0
 800524e:	4665      	mov	r5, ip
 8005250:	6123      	str	r3, [r4, #16]
 8005252:	e7b9      	b.n	80051c8 <_printf_i+0x118>
 8005254:	6813      	ldr	r3, [r2, #0]
 8005256:	1d19      	adds	r1, r3, #4
 8005258:	6011      	str	r1, [r2, #0]
 800525a:	681d      	ldr	r5, [r3, #0]
 800525c:	6862      	ldr	r2, [r4, #4]
 800525e:	2100      	movs	r1, #0
 8005260:	4628      	mov	r0, r5
 8005262:	f000 f86b 	bl	800533c <memchr>
 8005266:	b108      	cbz	r0, 800526c <_printf_i+0x1bc>
 8005268:	1b40      	subs	r0, r0, r5
 800526a:	6060      	str	r0, [r4, #4]
 800526c:	6863      	ldr	r3, [r4, #4]
 800526e:	6123      	str	r3, [r4, #16]
 8005270:	2300      	movs	r3, #0
 8005272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005276:	e7a7      	b.n	80051c8 <_printf_i+0x118>
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	462a      	mov	r2, r5
 800527c:	4639      	mov	r1, r7
 800527e:	4630      	mov	r0, r6
 8005280:	47c0      	blx	r8
 8005282:	3001      	adds	r0, #1
 8005284:	d0aa      	beq.n	80051dc <_printf_i+0x12c>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	079b      	lsls	r3, r3, #30
 800528a:	d413      	bmi.n	80052b4 <_printf_i+0x204>
 800528c:	68e0      	ldr	r0, [r4, #12]
 800528e:	9b03      	ldr	r3, [sp, #12]
 8005290:	4298      	cmp	r0, r3
 8005292:	bfb8      	it	lt
 8005294:	4618      	movlt	r0, r3
 8005296:	e7a3      	b.n	80051e0 <_printf_i+0x130>
 8005298:	2301      	movs	r3, #1
 800529a:	464a      	mov	r2, r9
 800529c:	4639      	mov	r1, r7
 800529e:	4630      	mov	r0, r6
 80052a0:	47c0      	blx	r8
 80052a2:	3001      	adds	r0, #1
 80052a4:	d09a      	beq.n	80051dc <_printf_i+0x12c>
 80052a6:	3501      	adds	r5, #1
 80052a8:	68e3      	ldr	r3, [r4, #12]
 80052aa:	9a03      	ldr	r2, [sp, #12]
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	42ab      	cmp	r3, r5
 80052b0:	dcf2      	bgt.n	8005298 <_printf_i+0x1e8>
 80052b2:	e7eb      	b.n	800528c <_printf_i+0x1dc>
 80052b4:	2500      	movs	r5, #0
 80052b6:	f104 0919 	add.w	r9, r4, #25
 80052ba:	e7f5      	b.n	80052a8 <_printf_i+0x1f8>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1ac      	bne.n	800521a <_printf_i+0x16a>
 80052c0:	7803      	ldrb	r3, [r0, #0]
 80052c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ca:	e76c      	b.n	80051a6 <_printf_i+0xf6>
 80052cc:	080054b5 	.word	0x080054b5
 80052d0:	080054c6 	.word	0x080054c6

080052d4 <_read_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4605      	mov	r5, r0
 80052d8:	4608      	mov	r0, r1
 80052da:	4611      	mov	r1, r2
 80052dc:	2200      	movs	r2, #0
 80052de:	4c05      	ldr	r4, [pc, #20]	; (80052f4 <_read_r+0x20>)
 80052e0:	6022      	str	r2, [r4, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f7fc fc76 	bl	8001bd4 <_read>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_read_r+0x1e>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_read_r+0x1e>
 80052f0:	602b      	str	r3, [r5, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	200001a4 	.word	0x200001a4

080052f8 <_fstat_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	2300      	movs	r3, #0
 80052fc:	4c06      	ldr	r4, [pc, #24]	; (8005318 <_fstat_r+0x20>)
 80052fe:	4605      	mov	r5, r0
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	f7fc fca9 	bl	8001c5c <_fstat>
 800530a:	1c43      	adds	r3, r0, #1
 800530c:	d102      	bne.n	8005314 <_fstat_r+0x1c>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	b103      	cbz	r3, 8005314 <_fstat_r+0x1c>
 8005312:	602b      	str	r3, [r5, #0]
 8005314:	bd38      	pop	{r3, r4, r5, pc}
 8005316:	bf00      	nop
 8005318:	200001a4 	.word	0x200001a4

0800531c <_isatty_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	2300      	movs	r3, #0
 8005320:	4c05      	ldr	r4, [pc, #20]	; (8005338 <_isatty_r+0x1c>)
 8005322:	4605      	mov	r5, r0
 8005324:	4608      	mov	r0, r1
 8005326:	6023      	str	r3, [r4, #0]
 8005328:	f7fc fca7 	bl	8001c7a <_isatty>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_isatty_r+0x1a>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	b103      	cbz	r3, 8005336 <_isatty_r+0x1a>
 8005334:	602b      	str	r3, [r5, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200001a4 	.word	0x200001a4

0800533c <memchr>:
 800533c:	b510      	push	{r4, lr}
 800533e:	b2c9      	uxtb	r1, r1
 8005340:	4402      	add	r2, r0
 8005342:	4290      	cmp	r0, r2
 8005344:	4603      	mov	r3, r0
 8005346:	d101      	bne.n	800534c <memchr+0x10>
 8005348:	2300      	movs	r3, #0
 800534a:	e003      	b.n	8005354 <memchr+0x18>
 800534c:	781c      	ldrb	r4, [r3, #0]
 800534e:	3001      	adds	r0, #1
 8005350:	428c      	cmp	r4, r1
 8005352:	d1f6      	bne.n	8005342 <memchr+0x6>
 8005354:	4618      	mov	r0, r3
 8005356:	bd10      	pop	{r4, pc}

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
