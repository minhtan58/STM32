
F103_SPI_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ccc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb0  08003eb0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb0  08003eb0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb0  08003eb0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000074  08003f2c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08003f2c  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a14b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c24  00000000  00000000  0002a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018008  00000000  00000000  0002cff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a91  00000000  00000000  00045000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000855d0  00000000  00000000  0004ea91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4061  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ccc  00000000  00000000  000d40b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003dc0 	.word	0x08003dc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003dc0 	.word	0x08003dc0

0800014c <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar (int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	b2db      	uxtb	r3, r3
 8000158:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
 800015a:	f107 010f 	add.w	r1, r7, #15
 800015e:	f04f 33ff 	mov.w	r3, #4294967295
 8000162:	2201      	movs	r2, #1
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <__io_putchar+0x28>)
 8000166:	f002 fa0e 	bl	8002586 <HAL_UART_Transmit>
	return ch;
 800016a:	687b      	ldr	r3, [r7, #4]
}
 800016c:	4618      	mov	r0, r3
 800016e:	3710      	adds	r7, #16
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}
 8000174:	2000009c 	.word	0x2000009c

08000178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017c:	f000 fb6a 	bl	8000854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000180:	f000 f82a 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000184:	f000 f8f2 	bl	800036c <MX_GPIO_Init>
  MX_DMA_Init();
 8000188:	f000 f8ca 	bl	8000320 <MX_DMA_Init>
  MX_SPI1_Init();
 800018c:	f000 f86a 	bl	8000264 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000190:	f000 f89c 	bl	80002cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_SPI_Receive_DMA(&hspi1, &receive_data, 1);
  HAL_SPI_TransmitReceive_DMA(&hspi1, &send_data, &receive_data, 1);
 8000194:	2301      	movs	r3, #1
 8000196:	4a0c      	ldr	r2, [pc, #48]	; (80001c8 <main+0x50>)
 8000198:	490c      	ldr	r1, [pc, #48]	; (80001cc <main+0x54>)
 800019a:	480d      	ldr	r0, [pc, #52]	; (80001d0 <main+0x58>)
 800019c:	f001 fdae 	bl	8001cfc <HAL_SPI_TransmitReceive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("SPI RX = %d | TX = %d\r\n",receive_data,send_data);
 80001a0:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <main+0x50>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	4619      	mov	r1, r3
 80001a6:	4b09      	ldr	r3, [pc, #36]	; (80001cc <main+0x54>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	461a      	mov	r2, r3
 80001ac:	4809      	ldr	r0, [pc, #36]	; (80001d4 <main+0x5c>)
 80001ae:	f002 fea7 	bl	8002f00 <iprintf>
	  send_data--;
 80001b2:	4b06      	ldr	r3, [pc, #24]	; (80001cc <main+0x54>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	3b01      	subs	r3, #1
 80001b8:	b2da      	uxtb	r2, r3
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <main+0x54>)
 80001bc:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 80001be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c2:	f000 fba9 	bl	8000918 <HAL_Delay>
	  printf("SPI RX = %d | TX = %d\r\n",receive_data,send_data);
 80001c6:	e7eb      	b.n	80001a0 <main+0x28>
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	20000000 	.word	0x20000000
 80001d0:	200000e4 	.word	0x200000e4
 80001d4:	08003dd8 	.word	0x08003dd8

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b090      	sub	sp, #64	; 0x40
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fe82 	bl	8002ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fa:	2301      	movs	r3, #1
 80001fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000202:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000208:	2301      	movs	r3, #1
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020c:	2302      	movs	r3, #2
 800020e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000216:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800021a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021c:	f107 0318 	add.w	r3, r7, #24
 8000220:	4618      	mov	r0, r3
 8000222:	f001 f8cd 	bl	80013c0 <HAL_RCC_OscConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800022c:	f000 f8c0 	bl	80003b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000230:	230f      	movs	r3, #15
 8000232:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000234:	2302      	movs	r3, #2
 8000236:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2102      	movs	r1, #2
 800024a:	4618      	mov	r0, r3
 800024c:	f001 fb38 	bl	80018c0 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000256:	f000 f8ab 	bl	80003b0 <Error_Handler>
  }
}
 800025a:	bf00      	nop
 800025c:	3740      	adds	r7, #64	; 0x40
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000268:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <MX_SPI1_Init+0x60>)
 800026a:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <MX_SPI1_Init+0x64>)
 800026c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800026e:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <MX_SPI1_Init+0x60>)
 8000270:	2200      	movs	r2, #0
 8000272:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <MX_SPI1_Init+0x60>)
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <MX_SPI1_Init+0x60>)
 800027c:	2200      	movs	r2, #0
 800027e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000280:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <MX_SPI1_Init+0x60>)
 8000282:	2200      	movs	r2, #0
 8000284:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000286:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <MX_SPI1_Init+0x60>)
 8000288:	2200      	movs	r2, #0
 800028a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <MX_SPI1_Init+0x60>)
 800028e:	2200      	movs	r2, #0
 8000290:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <MX_SPI1_Init+0x60>)
 8000294:	2218      	movs	r2, #24
 8000296:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <MX_SPI1_Init+0x60>)
 800029a:	2200      	movs	r2, #0
 800029c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <MX_SPI1_Init+0x60>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <MX_SPI1_Init+0x60>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <MX_SPI1_Init+0x60>)
 80002ac:	220a      	movs	r2, #10
 80002ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <MX_SPI1_Init+0x60>)
 80002b2:	f001 fc9f 	bl	8001bf4 <HAL_SPI_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 80002bc:	f000 f878 	bl	80003b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200000e4 	.word	0x200000e4
 80002c8:	40013000 	.word	0x40013000

080002cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002d2:	4a12      	ldr	r2, [pc, #72]	; (800031c <MX_USART1_UART_Init+0x50>)
 80002d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002f2:	220c      	movs	r2, #12
 80002f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 8000304:	f002 f8f2 	bl	80024ec <HAL_UART_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800030e:	f000 f84f 	bl	80003b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	2000009c 	.word	0x2000009c
 800031c:	40013800 	.word	0x40013800

08000320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_DMA_Init+0x48>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a0f      	ldr	r2, [pc, #60]	; (8000368 <MX_DMA_Init+0x48>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <MX_DMA_Init+0x48>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2100      	movs	r1, #0
 8000342:	200c      	movs	r0, #12
 8000344:	f000 fbe3 	bl	8000b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000348:	200c      	movs	r0, #12
 800034a:	f000 fbfc 	bl	8000b46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2100      	movs	r1, #0
 8000352:	200d      	movs	r0, #13
 8000354:	f000 fbdb 	bl	8000b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000358:	200d      	movs	r0, #13
 800035a:	f000 fbf4 	bl	8000b46 <HAL_NVIC_EnableIRQ>

}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_GPIO_Init+0x40>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <MX_GPIO_Init+0x40>)
 8000378:	f043 0320 	orr.w	r3, r3, #32
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <MX_GPIO_Init+0x40>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0320 	and.w	r3, r3, #32
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_GPIO_Init+0x40>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a07      	ldr	r2, [pc, #28]	; (80003ac <MX_GPIO_Init+0x40>)
 8000390:	f043 0304 	orr.w	r3, r3, #4
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <MX_GPIO_Init+0x40>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0304 	and.w	r3, r3, #4
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]

}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000

080003b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a14      	ldr	r2, [pc, #80]	; (8000418 <HAL_MspInit+0x5c>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b12      	ldr	r3, [pc, #72]	; (8000418 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <HAL_MspInit+0x5c>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <HAL_MspInit+0x60>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <HAL_MspInit+0x60>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000
 800041c:	40010000 	.word	0x40010000

08000420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a46      	ldr	r2, [pc, #280]	; (8000554 <HAL_SPI_MspInit+0x134>)
 800043c:	4293      	cmp	r3, r2
 800043e:	f040 8084 	bne.w	800054a <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000442:	4b45      	ldr	r3, [pc, #276]	; (8000558 <HAL_SPI_MspInit+0x138>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a44      	ldr	r2, [pc, #272]	; (8000558 <HAL_SPI_MspInit+0x138>)
 8000448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b42      	ldr	r3, [pc, #264]	; (8000558 <HAL_SPI_MspInit+0x138>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b3f      	ldr	r3, [pc, #252]	; (8000558 <HAL_SPI_MspInit+0x138>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a3e      	ldr	r2, [pc, #248]	; (8000558 <HAL_SPI_MspInit+0x138>)
 8000460:	f043 0304 	orr.w	r3, r3, #4
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b3c      	ldr	r3, [pc, #240]	; (8000558 <HAL_SPI_MspInit+0x138>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000472:	23b0      	movs	r3, #176	; 0xb0
 8000474:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4619      	mov	r1, r3
 8000484:	4835      	ldr	r0, [pc, #212]	; (800055c <HAL_SPI_MspInit+0x13c>)
 8000486:	f000 fe17 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800048a:	2340      	movs	r3, #64	; 0x40
 800048c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048e:	2302      	movs	r3, #2
 8000490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000492:	2303      	movs	r3, #3
 8000494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	482f      	ldr	r0, [pc, #188]	; (800055c <HAL_SPI_MspInit+0x13c>)
 800049e:	f000 fe0b 	bl	80010b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80004a2:	4b2f      	ldr	r3, [pc, #188]	; (8000560 <HAL_SPI_MspInit+0x140>)
 80004a4:	4a2f      	ldr	r2, [pc, #188]	; (8000564 <HAL_SPI_MspInit+0x144>)
 80004a6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004a8:	4b2d      	ldr	r3, [pc, #180]	; (8000560 <HAL_SPI_MspInit+0x140>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004ae:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <HAL_SPI_MspInit+0x140>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80004b4:	4b2a      	ldr	r3, [pc, #168]	; (8000560 <HAL_SPI_MspInit+0x140>)
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004ba:	4b29      	ldr	r3, [pc, #164]	; (8000560 <HAL_SPI_MspInit+0x140>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004c0:	4b27      	ldr	r3, [pc, #156]	; (8000560 <HAL_SPI_MspInit+0x140>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80004c6:	4b26      	ldr	r3, [pc, #152]	; (8000560 <HAL_SPI_MspInit+0x140>)
 80004c8:	2220      	movs	r2, #32
 80004ca:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80004cc:	4b24      	ldr	r3, [pc, #144]	; (8000560 <HAL_SPI_MspInit+0x140>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80004d2:	4823      	ldr	r0, [pc, #140]	; (8000560 <HAL_SPI_MspInit+0x140>)
 80004d4:	f000 fb52 	bl	8000b7c <HAL_DMA_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 80004de:	f7ff ff67 	bl	80003b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a1e      	ldr	r2, [pc, #120]	; (8000560 <HAL_SPI_MspInit+0x140>)
 80004e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80004e8:	4a1d      	ldr	r2, [pc, #116]	; (8000560 <HAL_SPI_MspInit+0x140>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80004ee:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <HAL_SPI_MspInit+0x148>)
 80004f0:	4a1e      	ldr	r2, [pc, #120]	; (800056c <HAL_SPI_MspInit+0x14c>)
 80004f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <HAL_SPI_MspInit+0x148>)
 80004f6:	2210      	movs	r2, #16
 80004f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <HAL_SPI_MspInit+0x148>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <HAL_SPI_MspInit+0x148>)
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <HAL_SPI_MspInit+0x148>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <HAL_SPI_MspInit+0x148>)
 800050e:	2200      	movs	r2, #0
 8000510:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_SPI_MspInit+0x148>)
 8000514:	2220      	movs	r2, #32
 8000516:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <HAL_SPI_MspInit+0x148>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800051e:	4812      	ldr	r0, [pc, #72]	; (8000568 <HAL_SPI_MspInit+0x148>)
 8000520:	f000 fb2c 	bl	8000b7c <HAL_DMA_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 800052a:	f7ff ff41 	bl	80003b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <HAL_SPI_MspInit+0x148>)
 8000532:	649a      	str	r2, [r3, #72]	; 0x48
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <HAL_SPI_MspInit+0x148>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2023      	movs	r0, #35	; 0x23
 8000540:	f000 fae5 	bl	8000b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000544:	2023      	movs	r0, #35	; 0x23
 8000546:	f000 fafe 	bl	8000b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800054a:	bf00      	nop
 800054c:	3720      	adds	r7, #32
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40013000 	.word	0x40013000
 8000558:	40021000 	.word	0x40021000
 800055c:	40010800 	.word	0x40010800
 8000560:	2000013c 	.word	0x2000013c
 8000564:	4002001c 	.word	0x4002001c
 8000568:	20000180 	.word	0x20000180
 800056c:	40020030 	.word	0x40020030

08000570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a20      	ldr	r2, [pc, #128]	; (800060c <HAL_UART_MspInit+0x9c>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d139      	bne.n	8000604 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <HAL_UART_MspInit+0xa0>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <HAL_UART_MspInit+0xa0>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <HAL_UART_MspInit+0xa0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <HAL_UART_MspInit+0xa0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a18      	ldr	r2, [pc, #96]	; (8000610 <HAL_UART_MspInit+0xa0>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_UART_MspInit+0xa0>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	2302      	movs	r3, #2
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	4619      	mov	r1, r3
 80005d4:	480f      	ldr	r0, [pc, #60]	; (8000614 <HAL_UART_MspInit+0xa4>)
 80005d6:	f000 fd6f 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	4809      	ldr	r0, [pc, #36]	; (8000614 <HAL_UART_MspInit+0xa4>)
 80005f0:	f000 fd62 	bl	80010b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	2025      	movs	r0, #37	; 0x25
 80005fa:	f000 fa88 	bl	8000b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005fe:	2025      	movs	r0, #37	; 0x25
 8000600:	f000 faa1 	bl	8000b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40013800 	.word	0x40013800
 8000610:	40021000 	.word	0x40021000
 8000614:	40010800 	.word	0x40010800

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <HardFault_Handler+0x4>

0800062a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <MemManage_Handler+0x4>

08000630 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <BusFault_Handler+0x4>

08000636 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <UsageFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f93c 	bl	80008e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <DMA1_Channel2_IRQHandler+0x10>)
 8000672:	f000 fbed 	bl	8000e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000013c 	.word	0x2000013c

08000680 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <DMA1_Channel3_IRQHandler+0x10>)
 8000686:	f000 fbe3 	bl	8000e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000180 	.word	0x20000180

08000694 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <SPI1_IRQHandler+0x10>)
 800069a:	f001 fc31 	bl	8001f00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000e4 	.word	0x200000e4

080006a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <USART1_IRQHandler+0x10>)
 80006ae:	f001 fffd 	bl	80026ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000009c 	.word	0x2000009c

080006bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e00a      	b.n	80006e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006ce:	f3af 8000 	nop.w
 80006d2:	4601      	mov	r1, r0
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	60ba      	str	r2, [r7, #8]
 80006da:	b2ca      	uxtb	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	3301      	adds	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dbf0      	blt.n	80006ce <_read+0x12>
	}

return len;
 80006ec:	687b      	ldr	r3, [r7, #4]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b086      	sub	sp, #24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	e009      	b.n	800071c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	60ba      	str	r2, [r7, #8]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd1b 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	dbf1      	blt.n	8000708 <_write+0x12>
	}
	return len;
 8000724:	687b      	ldr	r3, [r7, #4]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_close>:

int _close(int file)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	return -1;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800073a:	4618      	mov	r0, r3
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000754:	605a      	str	r2, [r3, #4]
	return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <_isatty>:

int _isatty(int file)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
	return 1;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000776:	b480      	push	{r7}
 8000778:	b085      	sub	sp, #20
 800077a:	af00      	add	r7, sp, #0
 800077c:	60f8      	str	r0, [r7, #12]
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
	return 0;
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
	...

08000790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000798:	4a14      	ldr	r2, [pc, #80]	; (80007ec <_sbrk+0x5c>)
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <_sbrk+0x60>)
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <_sbrk+0x64>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <_sbrk+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d207      	bcs.n	80007d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c0:	f002 fb6c 	bl	8002e9c <__errno>
 80007c4:	4603      	mov	r3, r0
 80007c6:	220c      	movs	r2, #12
 80007c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	e009      	b.n	80007e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <_sbrk+0x64>)
 80007e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20005000 	.word	0x20005000
 80007f0:	00000400 	.word	0x00000400
 80007f4:	20000090 	.word	0x20000090
 80007f8:	200001d8 	.word	0x200001d8

080007fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800080a:	490d      	ldr	r1, [pc, #52]	; (8000840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000820:	4c0a      	ldr	r4, [pc, #40]	; (800084c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800082e:	f7ff ffe5 	bl	80007fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000832:	f002 fb39 	bl	8002ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff fc9f 	bl	8000178 <main>
  bx lr
 800083a:	4770      	bx	lr
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000844:	08003eb8 	.word	0x08003eb8
  ldr r2, =_sbss
 8000848:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800084c:	200001d8 	.word	0x200001d8

08000850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_2_IRQHandler>
	...

08000854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_Init+0x28>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_Init+0x28>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f947 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f808 	bl	8000880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000870:	f7ff fda4 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40022000 	.word	0x40022000

08000880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_InitTick+0x54>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x58>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	fbb3 f3f1 	udiv	r3, r3, r1
 800089a:	fbb2 f3f3 	udiv	r3, r2, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f95f 	bl	8000b62 <HAL_SYSTICK_Config>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00e      	b.n	80008cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d80a      	bhi.n	80008ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b4:	2200      	movs	r2, #0
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f000 f927 	bl	8000b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <HAL_InitTick+0x5c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	e000      	b.n	80008cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000004 	.word	0x20000004
 80008d8:	2000000c 	.word	0x2000000c
 80008dc:	20000008 	.word	0x20000008

080008e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_IncTick+0x1c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_IncTick+0x20>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a03      	ldr	r2, [pc, #12]	; (8000900 <HAL_IncTick+0x20>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	2000000c 	.word	0x2000000c
 8000900:	200001c4 	.word	0x200001c4

08000904 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b02      	ldr	r3, [pc, #8]	; (8000914 <HAL_GetTick+0x10>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	200001c4 	.word	0x200001c4

08000918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000920:	f7ff fff0 	bl	8000904 <HAL_GetTick>
 8000924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000930:	d005      	beq.n	800093e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_Delay+0x44>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800093e:	bf00      	nop
 8000940:	f7ff ffe0 	bl	8000904 <HAL_GetTick>
 8000944:	4602      	mov	r2, r0
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d8f7      	bhi.n	8000940 <HAL_Delay+0x28>
  {
  }
}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000000c 	.word	0x2000000c

08000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0b      	blt.n	80009ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 021f 	and.w	r2, r3, #31
 80009dc:	4906      	ldr	r1, [pc, #24]	; (80009f8 <__NVIC_EnableIRQ+0x34>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f7ff ff90 	bl	80009fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff2d 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff42 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff90 	bl	8000a50 <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5f 	bl	80009fc <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff35 	bl	80009c4 <__NVIC_EnableIRQ>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffa2 	bl	8000ab4 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e043      	b.n	8000c1a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <HAL_DMA_Init+0xa8>)
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <HAL_DMA_Init+0xac>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	091b      	lsrs	r3, r3, #4
 8000ba4:	009a      	lsls	r2, r3, #2
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_DMA_Init+0xb0>)
 8000bae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000bc6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	bffdfff8 	.word	0xbffdfff8
 8000c28:	cccccccd 	.word	0xcccccccd
 8000c2c:	40020000 	.word	0x40020000

08000c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d101      	bne.n	8000c50 <HAL_DMA_Start_IT+0x20>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	e04a      	b.n	8000ce6 <HAL_DMA_Start_IT+0xb6>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2201      	movs	r2, #1
 8000c54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d13a      	bne.n	8000cd8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2202      	movs	r2, #2
 8000c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0201 	bic.w	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f000 f9e8 	bl	800105c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d008      	beq.n	8000ca6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 020e 	orr.w	r2, r2, #14
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	e00f      	b.n	8000cc6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0204 	bic.w	r2, r2, #4
 8000cb4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f042 020a 	orr.w	r2, r2, #10
 8000cc4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f042 0201 	orr.w	r2, r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	e005      	b.n	8000ce4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d008      	beq.n	8000d16 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2204      	movs	r2, #4
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e020      	b.n	8000d58 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 020e 	bic.w	r2, r2, #14
 8000d24:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0201 	bic.w	r2, r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3e:	2101      	movs	r1, #1
 8000d40:	fa01 f202 	lsl.w	r2, r1, r2
 8000d44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
	...

08000d64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d005      	beq.n	8000d86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	e051      	b.n	8000e2a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 020e 	bic.w	r2, r2, #14
 8000d94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0201 	bic.w	r2, r2, #1
 8000da4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <HAL_DMA_Abort_IT+0xd0>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d029      	beq.n	8000e04 <HAL_DMA_Abort_IT+0xa0>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a20      	ldr	r2, [pc, #128]	; (8000e38 <HAL_DMA_Abort_IT+0xd4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d022      	beq.n	8000e00 <HAL_DMA_Abort_IT+0x9c>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <HAL_DMA_Abort_IT+0xd8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d01a      	beq.n	8000dfa <HAL_DMA_Abort_IT+0x96>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <HAL_DMA_Abort_IT+0xdc>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d012      	beq.n	8000df4 <HAL_DMA_Abort_IT+0x90>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	; (8000e44 <HAL_DMA_Abort_IT+0xe0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00a      	beq.n	8000dee <HAL_DMA_Abort_IT+0x8a>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <HAL_DMA_Abort_IT+0xe4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d102      	bne.n	8000de8 <HAL_DMA_Abort_IT+0x84>
 8000de2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000de6:	e00e      	b.n	8000e06 <HAL_DMA_Abort_IT+0xa2>
 8000de8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dec:	e00b      	b.n	8000e06 <HAL_DMA_Abort_IT+0xa2>
 8000dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df2:	e008      	b.n	8000e06 <HAL_DMA_Abort_IT+0xa2>
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	e005      	b.n	8000e06 <HAL_DMA_Abort_IT+0xa2>
 8000dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfe:	e002      	b.n	8000e06 <HAL_DMA_Abort_IT+0xa2>
 8000e00:	2310      	movs	r3, #16
 8000e02:	e000      	b.n	8000e06 <HAL_DMA_Abort_IT+0xa2>
 8000e04:	2301      	movs	r3, #1
 8000e06:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <HAL_DMA_Abort_IT+0xe8>)
 8000e08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	4798      	blx	r3
    } 
  }
  return status;
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40020008 	.word	0x40020008
 8000e38:	4002001c 	.word	0x4002001c
 8000e3c:	40020030 	.word	0x40020030
 8000e40:	40020044 	.word	0x40020044
 8000e44:	40020058 	.word	0x40020058
 8000e48:	4002006c 	.word	0x4002006c
 8000e4c:	40020000 	.word	0x40020000

08000e50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4013      	ands	r3, r2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d04f      	beq.n	8000f18 <HAL_DMA_IRQHandler+0xc8>
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d04a      	beq.n	8000f18 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d107      	bne.n	8000ea0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0204 	bic.w	r2, r2, #4
 8000e9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a66      	ldr	r2, [pc, #408]	; (8001040 <HAL_DMA_IRQHandler+0x1f0>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d029      	beq.n	8000efe <HAL_DMA_IRQHandler+0xae>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a65      	ldr	r2, [pc, #404]	; (8001044 <HAL_DMA_IRQHandler+0x1f4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d022      	beq.n	8000efa <HAL_DMA_IRQHandler+0xaa>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a63      	ldr	r2, [pc, #396]	; (8001048 <HAL_DMA_IRQHandler+0x1f8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d01a      	beq.n	8000ef4 <HAL_DMA_IRQHandler+0xa4>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a62      	ldr	r2, [pc, #392]	; (800104c <HAL_DMA_IRQHandler+0x1fc>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d012      	beq.n	8000eee <HAL_DMA_IRQHandler+0x9e>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a60      	ldr	r2, [pc, #384]	; (8001050 <HAL_DMA_IRQHandler+0x200>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00a      	beq.n	8000ee8 <HAL_DMA_IRQHandler+0x98>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a5f      	ldr	r2, [pc, #380]	; (8001054 <HAL_DMA_IRQHandler+0x204>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d102      	bne.n	8000ee2 <HAL_DMA_IRQHandler+0x92>
 8000edc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee0:	e00e      	b.n	8000f00 <HAL_DMA_IRQHandler+0xb0>
 8000ee2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ee6:	e00b      	b.n	8000f00 <HAL_DMA_IRQHandler+0xb0>
 8000ee8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000eec:	e008      	b.n	8000f00 <HAL_DMA_IRQHandler+0xb0>
 8000eee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ef2:	e005      	b.n	8000f00 <HAL_DMA_IRQHandler+0xb0>
 8000ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef8:	e002      	b.n	8000f00 <HAL_DMA_IRQHandler+0xb0>
 8000efa:	2340      	movs	r3, #64	; 0x40
 8000efc:	e000      	b.n	8000f00 <HAL_DMA_IRQHandler+0xb0>
 8000efe:	2304      	movs	r3, #4
 8000f00:	4a55      	ldr	r2, [pc, #340]	; (8001058 <HAL_DMA_IRQHandler+0x208>)
 8000f02:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 8094 	beq.w	8001036 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f16:	e08e      	b.n	8001036 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d056      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0x186>
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d051      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0320 	and.w	r3, r3, #32
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10b      	bne.n	8000f58 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 020a 	bic.w	r2, r2, #10
 8000f4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a38      	ldr	r2, [pc, #224]	; (8001040 <HAL_DMA_IRQHandler+0x1f0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d029      	beq.n	8000fb6 <HAL_DMA_IRQHandler+0x166>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a37      	ldr	r2, [pc, #220]	; (8001044 <HAL_DMA_IRQHandler+0x1f4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d022      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x162>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a35      	ldr	r2, [pc, #212]	; (8001048 <HAL_DMA_IRQHandler+0x1f8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d01a      	beq.n	8000fac <HAL_DMA_IRQHandler+0x15c>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a34      	ldr	r2, [pc, #208]	; (800104c <HAL_DMA_IRQHandler+0x1fc>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d012      	beq.n	8000fa6 <HAL_DMA_IRQHandler+0x156>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a32      	ldr	r2, [pc, #200]	; (8001050 <HAL_DMA_IRQHandler+0x200>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00a      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x150>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a31      	ldr	r2, [pc, #196]	; (8001054 <HAL_DMA_IRQHandler+0x204>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d102      	bne.n	8000f9a <HAL_DMA_IRQHandler+0x14a>
 8000f94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f98:	e00e      	b.n	8000fb8 <HAL_DMA_IRQHandler+0x168>
 8000f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f9e:	e00b      	b.n	8000fb8 <HAL_DMA_IRQHandler+0x168>
 8000fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa4:	e008      	b.n	8000fb8 <HAL_DMA_IRQHandler+0x168>
 8000fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000faa:	e005      	b.n	8000fb8 <HAL_DMA_IRQHandler+0x168>
 8000fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb0:	e002      	b.n	8000fb8 <HAL_DMA_IRQHandler+0x168>
 8000fb2:	2320      	movs	r3, #32
 8000fb4:	e000      	b.n	8000fb8 <HAL_DMA_IRQHandler+0x168>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	4a27      	ldr	r2, [pc, #156]	; (8001058 <HAL_DMA_IRQHandler+0x208>)
 8000fba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d034      	beq.n	8001036 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fd4:	e02f      	b.n	8001036 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	2208      	movs	r2, #8
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d028      	beq.n	8001038 <HAL_DMA_IRQHandler+0x1e8>
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d023      	beq.n	8001038 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 020e 	bic.w	r2, r2, #14
 8000ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001008:	2101      	movs	r1, #1
 800100a:	fa01 f202 	lsl.w	r2, r1, r2
 800100e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	4798      	blx	r3
    }
  }
  return;
 8001036:	bf00      	nop
 8001038:	bf00      	nop
}
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40020008 	.word	0x40020008
 8001044:	4002001c 	.word	0x4002001c
 8001048:	40020030 	.word	0x40020030
 800104c:	40020044 	.word	0x40020044
 8001050:	40020058 	.word	0x40020058
 8001054:	4002006c 	.word	0x4002006c
 8001058:	40020000 	.word	0x40020000

0800105c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001072:	2101      	movs	r1, #1
 8001074:	fa01 f202 	lsl.w	r2, r1, r2
 8001078:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b10      	cmp	r3, #16
 8001088:	d108      	bne.n	800109c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800109a:	e007      	b.n	80010ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	60da      	str	r2, [r3, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b08b      	sub	sp, #44	; 0x2c
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ca:	e169      	b.n	80013a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010cc:	2201      	movs	r2, #1
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8158 	bne.w	800139a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4a9a      	ldr	r2, [pc, #616]	; (8001358 <HAL_GPIO_Init+0x2a0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d05e      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 80010f4:	4a98      	ldr	r2, [pc, #608]	; (8001358 <HAL_GPIO_Init+0x2a0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d875      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 80010fa:	4a98      	ldr	r2, [pc, #608]	; (800135c <HAL_GPIO_Init+0x2a4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d058      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 8001100:	4a96      	ldr	r2, [pc, #600]	; (800135c <HAL_GPIO_Init+0x2a4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d86f      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 8001106:	4a96      	ldr	r2, [pc, #600]	; (8001360 <HAL_GPIO_Init+0x2a8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d052      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 800110c:	4a94      	ldr	r2, [pc, #592]	; (8001360 <HAL_GPIO_Init+0x2a8>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d869      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 8001112:	4a94      	ldr	r2, [pc, #592]	; (8001364 <HAL_GPIO_Init+0x2ac>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d04c      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 8001118:	4a92      	ldr	r2, [pc, #584]	; (8001364 <HAL_GPIO_Init+0x2ac>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d863      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 800111e:	4a92      	ldr	r2, [pc, #584]	; (8001368 <HAL_GPIO_Init+0x2b0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d046      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
 8001124:	4a90      	ldr	r2, [pc, #576]	; (8001368 <HAL_GPIO_Init+0x2b0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d85d      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 800112a:	2b12      	cmp	r3, #18
 800112c:	d82a      	bhi.n	8001184 <HAL_GPIO_Init+0xcc>
 800112e:	2b12      	cmp	r3, #18
 8001130:	d859      	bhi.n	80011e6 <HAL_GPIO_Init+0x12e>
 8001132:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <HAL_GPIO_Init+0x80>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	080011b3 	.word	0x080011b3
 800113c:	0800118d 	.word	0x0800118d
 8001140:	0800119f 	.word	0x0800119f
 8001144:	080011e1 	.word	0x080011e1
 8001148:	080011e7 	.word	0x080011e7
 800114c:	080011e7 	.word	0x080011e7
 8001150:	080011e7 	.word	0x080011e7
 8001154:	080011e7 	.word	0x080011e7
 8001158:	080011e7 	.word	0x080011e7
 800115c:	080011e7 	.word	0x080011e7
 8001160:	080011e7 	.word	0x080011e7
 8001164:	080011e7 	.word	0x080011e7
 8001168:	080011e7 	.word	0x080011e7
 800116c:	080011e7 	.word	0x080011e7
 8001170:	080011e7 	.word	0x080011e7
 8001174:	080011e7 	.word	0x080011e7
 8001178:	080011e7 	.word	0x080011e7
 800117c:	08001195 	.word	0x08001195
 8001180:	080011a9 	.word	0x080011a9
 8001184:	4a79      	ldr	r2, [pc, #484]	; (800136c <HAL_GPIO_Init+0x2b4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800118a:	e02c      	b.n	80011e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	623b      	str	r3, [r7, #32]
          break;
 8001192:	e029      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	3304      	adds	r3, #4
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e024      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	3308      	adds	r3, #8
 80011a4:	623b      	str	r3, [r7, #32]
          break;
 80011a6:	e01f      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	330c      	adds	r3, #12
 80011ae:	623b      	str	r3, [r7, #32]
          break;
 80011b0:	e01a      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ba:	2304      	movs	r3, #4
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e013      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c8:	2308      	movs	r3, #8
 80011ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	611a      	str	r2, [r3, #16]
          break;
 80011d2:	e009      	b.n	80011e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d4:	2308      	movs	r3, #8
 80011d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	615a      	str	r2, [r3, #20]
          break;
 80011de:	e003      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
          break;
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x130>
          break;
 80011e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2bff      	cmp	r3, #255	; 0xff
 80011ec:	d801      	bhi.n	80011f2 <HAL_GPIO_Init+0x13a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	e001      	b.n	80011f6 <HAL_GPIO_Init+0x13e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3304      	adds	r3, #4
 80011f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2bff      	cmp	r3, #255	; 0xff
 80011fc:	d802      	bhi.n	8001204 <HAL_GPIO_Init+0x14c>
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	e002      	b.n	800120a <HAL_GPIO_Init+0x152>
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	3b08      	subs	r3, #8
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	210f      	movs	r1, #15
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	401a      	ands	r2, r3
 800121c:	6a39      	ldr	r1, [r7, #32]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	431a      	orrs	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80b1 	beq.w	800139a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001238:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a4c      	ldr	r2, [pc, #304]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001250:	4a48      	ldr	r2, [pc, #288]	; (8001374 <HAL_GPIO_Init+0x2bc>)
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a40      	ldr	r2, [pc, #256]	; (8001378 <HAL_GPIO_Init+0x2c0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d013      	beq.n	80012a4 <HAL_GPIO_Init+0x1ec>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a3f      	ldr	r2, [pc, #252]	; (800137c <HAL_GPIO_Init+0x2c4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d00d      	beq.n	80012a0 <HAL_GPIO_Init+0x1e8>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a3e      	ldr	r2, [pc, #248]	; (8001380 <HAL_GPIO_Init+0x2c8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d007      	beq.n	800129c <HAL_GPIO_Init+0x1e4>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a3d      	ldr	r2, [pc, #244]	; (8001384 <HAL_GPIO_Init+0x2cc>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d101      	bne.n	8001298 <HAL_GPIO_Init+0x1e0>
 8001294:	2303      	movs	r3, #3
 8001296:	e006      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 8001298:	2304      	movs	r3, #4
 800129a:	e004      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 800129c:	2302      	movs	r3, #2
 800129e:	e002      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 80012a4:	2300      	movs	r3, #0
 80012a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a8:	f002 0203 	and.w	r2, r2, #3
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	4093      	lsls	r3, r2
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012b6:	492f      	ldr	r1, [pc, #188]	; (8001374 <HAL_GPIO_Init+0x2bc>)
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	492c      	ldr	r1, [pc, #176]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	4928      	ldr	r1, [pc, #160]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4922      	ldr	r1, [pc, #136]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	43db      	mvns	r3, r3
 800130e:	491e      	ldr	r1, [pc, #120]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001310:	4013      	ands	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	4918      	ldr	r1, [pc, #96]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	608b      	str	r3, [r1, #8]
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	43db      	mvns	r3, r3
 8001336:	4914      	ldr	r1, [pc, #80]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001338:	4013      	ands	r3, r2
 800133a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d021      	beq.n	800138c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	490e      	ldr	r1, [pc, #56]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
 8001354:	e021      	b.n	800139a <HAL_GPIO_Init+0x2e2>
 8001356:	bf00      	nop
 8001358:	10320000 	.word	0x10320000
 800135c:	10310000 	.word	0x10310000
 8001360:	10220000 	.word	0x10220000
 8001364:	10210000 	.word	0x10210000
 8001368:	10120000 	.word	0x10120000
 800136c:	10110000 	.word	0x10110000
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000
 8001378:	40010800 	.word	0x40010800
 800137c:	40010c00 	.word	0x40010c00
 8001380:	40011000 	.word	0x40011000
 8001384:	40011400 	.word	0x40011400
 8001388:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_GPIO_Init+0x304>)
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	43db      	mvns	r3, r3
 8001394:	4909      	ldr	r1, [pc, #36]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001396:	4013      	ands	r3, r2
 8001398:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	3301      	adds	r3, #1
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	fa22 f303 	lsr.w	r3, r2, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f47f ae8e 	bne.w	80010cc <HAL_GPIO_Init+0x14>
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	372c      	adds	r7, #44	; 0x2c
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40010400 	.word	0x40010400

080013c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e26c      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8087 	beq.w	80014ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e0:	4b92      	ldr	r3, [pc, #584]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d00c      	beq.n	8001406 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ec:	4b8f      	ldr	r3, [pc, #572]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d112      	bne.n	800141e <HAL_RCC_OscConfig+0x5e>
 80013f8:	4b8c      	ldr	r3, [pc, #560]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d10b      	bne.n	800141e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001406:	4b89      	ldr	r3, [pc, #548]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d06c      	beq.n	80014ec <HAL_RCC_OscConfig+0x12c>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d168      	bne.n	80014ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e246      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x76>
 8001428:	4b80      	ldr	r3, [pc, #512]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a7f      	ldr	r2, [pc, #508]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800142e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e02e      	b.n	8001494 <HAL_RCC_OscConfig+0xd4>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x98>
 800143e:	4b7b      	ldr	r3, [pc, #492]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a7a      	ldr	r2, [pc, #488]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b78      	ldr	r3, [pc, #480]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a77      	ldr	r2, [pc, #476]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e01d      	b.n	8001494 <HAL_RCC_OscConfig+0xd4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0xbc>
 8001462:	4b72      	ldr	r3, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a71      	ldr	r2, [pc, #452]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b6f      	ldr	r3, [pc, #444]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a6e      	ldr	r2, [pc, #440]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0xd4>
 800147c:	4b6b      	ldr	r3, [pc, #428]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a6a      	ldr	r2, [pc, #424]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a67      	ldr	r2, [pc, #412]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fa32 	bl	8000904 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fa2e 	bl	8000904 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e1fa      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4b5d      	ldr	r3, [pc, #372]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0xe4>
 80014c2:	e014      	b.n	80014ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fa1e 	bl	8000904 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fa1a 	bl	8000904 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e1e6      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	4b53      	ldr	r3, [pc, #332]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x10c>
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d063      	beq.n	80015c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fa:	4b4c      	ldr	r3, [pc, #304]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001506:	4b49      	ldr	r3, [pc, #292]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b08      	cmp	r3, #8
 8001510:	d11c      	bne.n	800154c <HAL_RCC_OscConfig+0x18c>
 8001512:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d116      	bne.n	800154c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151e:	4b43      	ldr	r3, [pc, #268]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_RCC_OscConfig+0x176>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d001      	beq.n	8001536 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e1ba      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4939      	ldr	r1, [pc, #228]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	e03a      	b.n	80015c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d020      	beq.n	8001596 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001554:	4b36      	ldr	r3, [pc, #216]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff f9d3 	bl	8000904 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff f9cf 	bl	8000904 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e19b      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4927      	ldr	r1, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001590:	4313      	orrs	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
 8001594:	e015      	b.n	80015c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff f9b2 	bl	8000904 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff f9ae 	bl	8000904 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e17a      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d03a      	beq.n	8001644 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d019      	beq.n	800160a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_RCC_OscConfig+0x274>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff f992 	bl	8000904 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff f98e 	bl	8000904 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e15a      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f000 fad8 	bl	8001bb8 <RCC_Delay>
 8001608:	e01c      	b.n	8001644 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_RCC_OscConfig+0x274>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff f978 	bl	8000904 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001616:	e00f      	b.n	8001638 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff f974 	bl	8000904 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d908      	bls.n	8001638 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e140      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	42420000 	.word	0x42420000
 8001634:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	4b9e      	ldr	r3, [pc, #632]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e9      	bne.n	8001618 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80a6 	beq.w	800179e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001656:	4b97      	ldr	r3, [pc, #604]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10d      	bne.n	800167e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b94      	ldr	r3, [pc, #592]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a93      	ldr	r2, [pc, #588]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b91      	ldr	r3, [pc, #580]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	4b8e      	ldr	r3, [pc, #568]	; (80018b8 <HAL_RCC_OscConfig+0x4f8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d118      	bne.n	80016bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <HAL_RCC_OscConfig+0x4f8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a8a      	ldr	r2, [pc, #552]	; (80018b8 <HAL_RCC_OscConfig+0x4f8>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001696:	f7ff f935 	bl	8000904 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169e:	f7ff f931 	bl	8000904 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b64      	cmp	r3, #100	; 0x64
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e0fd      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <HAL_RCC_OscConfig+0x4f8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x312>
 80016c4:	4b7b      	ldr	r3, [pc, #492]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a7a      	ldr	r2, [pc, #488]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6213      	str	r3, [r2, #32]
 80016d0:	e02d      	b.n	800172e <HAL_RCC_OscConfig+0x36e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x334>
 80016da:	4b76      	ldr	r3, [pc, #472]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a75      	ldr	r2, [pc, #468]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a72      	ldr	r2, [pc, #456]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	e01c      	b.n	800172e <HAL_RCC_OscConfig+0x36e>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x356>
 80016fc:	4b6d      	ldr	r3, [pc, #436]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a6c      	ldr	r2, [pc, #432]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a69      	ldr	r2, [pc, #420]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0x36e>
 8001716:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a66      	ldr	r2, [pc, #408]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	4b64      	ldr	r3, [pc, #400]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a63      	ldr	r2, [pc, #396]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d015      	beq.n	8001762 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001736:	f7ff f8e5 	bl	8000904 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff f8e1 	bl	8000904 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	; 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0ab      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	4b57      	ldr	r3, [pc, #348]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ee      	beq.n	800173e <HAL_RCC_OscConfig+0x37e>
 8001760:	e014      	b.n	800178c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff f8cf 	bl	8000904 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f8cb 	bl	8000904 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e095      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	4b4c      	ldr	r3, [pc, #304]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ee      	bne.n	800176a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d105      	bne.n	800179e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001792:	4b48      	ldr	r3, [pc, #288]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a47      	ldr	r2, [pc, #284]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8081 	beq.w	80018aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a8:	4b42      	ldr	r3, [pc, #264]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d061      	beq.n	8001878 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d146      	bne.n	800184a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <HAL_RCC_OscConfig+0x4fc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff f89f 	bl	8000904 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff f89b 	bl	8000904 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e067      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017dc:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f0:	d108      	bne.n	8001804 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017f2:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	492d      	ldr	r1, [pc, #180]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a19      	ldr	r1, [r3, #32]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	430b      	orrs	r3, r1
 8001816:	4927      	ldr	r1, [pc, #156]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_RCC_OscConfig+0x4fc>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff f86f 	bl	8000904 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff f86b 	bl	8000904 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e037      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x46a>
 8001848:	e02f      	b.n	80018aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <HAL_RCC_OscConfig+0x4fc>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff f858 	bl	8000904 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff f854 	bl	8000904 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e020      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x498>
 8001876:	e018      	b.n	80018aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e013      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	429a      	cmp	r2, r3
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40007000 	.word	0x40007000
 80018bc:	42420060 	.word	0x42420060

080018c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0d0      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d910      	bls.n	8001904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 0207 	bic.w	r2, r3, #7
 80018ea:	4965      	ldr	r1, [pc, #404]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b63      	ldr	r3, [pc, #396]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0b8      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d020      	beq.n	8001952 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800191c:	4b59      	ldr	r3, [pc, #356]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4a58      	ldr	r2, [pc, #352]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001926:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001934:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a52      	ldr	r2, [pc, #328]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800193e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001940:	4b50      	ldr	r3, [pc, #320]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	494d      	ldr	r1, [pc, #308]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d040      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d115      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e07f      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e073      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e06b      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b39      	ldr	r3, [pc, #228]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4936      	ldr	r1, [pc, #216]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b0:	f7fe ffa8 	bl	8000904 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7fe ffa4 	bl	8000904 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e053      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d210      	bcs.n	8001a10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 0207 	bic.w	r2, r3, #7
 80019f6:	4922      	ldr	r1, [pc, #136]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e032      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4916      	ldr	r1, [pc, #88]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	490e      	ldr	r1, [pc, #56]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a4e:	f000 f821 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8001a52:	4602      	mov	r2, r0
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	490a      	ldr	r1, [pc, #40]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a60:	5ccb      	ldrb	r3, [r1, r3]
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_RCC_ClockConfig+0x1cc>)
 8001a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_ClockConfig+0x1d0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe ff06 	bl	8000880 <HAL_InitTick>

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40022000 	.word	0x40022000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	08003e00 	.word	0x08003e00
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	20000008 	.word	0x20000008

08001a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a94:	b490      	push	{r4, r7}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a9c:	1d3c      	adds	r4, r7, #4
 8001a9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001aa4:	f240 2301 	movw	r3, #513	; 0x201
 8001aa8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d002      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d003      	beq.n	8001ada <HAL_RCC_GetSysClockFreq+0x46>
 8001ad2:	e02d      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad6:	623b      	str	r3, [r7, #32]
      break;
 8001ad8:	e02d      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	0c9b      	lsrs	r3, r3, #18
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001aec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0c5b      	lsrs	r3, r3, #17
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b06:	4413      	add	r3, r2
 8001b08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b12:	fb02 f203 	mul.w	r2, r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	e004      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b24:	fb02 f303 	mul.w	r3, r2, r3
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	623b      	str	r3, [r7, #32]
      break;
 8001b2e:	e002      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b32:	623b      	str	r3, [r7, #32]
      break;
 8001b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b36:	6a3b      	ldr	r3, [r7, #32]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc90      	pop	{r4, r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	08003df0 	.word	0x08003df0
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	007a1200 	.word	0x007a1200
 8001b50:	003d0900 	.word	0x003d0900

08001b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b58:	4b02      	ldr	r3, [pc, #8]	; (8001b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b6c:	f7ff fff2 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	08003e10 	.word	0x08003e10

08001b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b94:	f7ff ffde 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	0adb      	lsrs	r3, r3, #11
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	4903      	ldr	r1, [pc, #12]	; (8001bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	08003e10 	.word	0x08003e10

08001bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <RCC_Delay+0x34>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <RCC_Delay+0x38>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0a5b      	lsrs	r3, r3, #9
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bd4:	bf00      	nop
  }
  while (Delay --);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1e5a      	subs	r2, r3, #1
 8001bda:	60fa      	str	r2, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f9      	bne.n	8001bd4 <RCC_Delay+0x1c>
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	10624dd3 	.word	0x10624dd3

08001bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e076      	b.n	8001cf4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d108      	bne.n	8001c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c16:	d009      	beq.n	8001c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
 8001c1e:	e005      	b.n	8001c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe fbea 	bl	8000420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb0:	ea42 0103 	orr.w	r1, r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	0c1a      	lsrs	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f002 0204 	and.w	r2, r2, #4
 8001cd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_SPI_TransmitReceive_DMA+0x20>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e0e3      	b.n	8001ee4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d2a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001d32:	7dbb      	ldrb	r3, [r7, #22]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d00d      	beq.n	8001d54 <HAL_SPI_TransmitReceive_DMA+0x58>
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d3e:	d106      	bne.n	8001d4e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <HAL_SPI_TransmitReceive_DMA+0x52>
 8001d48:	7dbb      	ldrb	r3, [r7, #22]
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d002      	beq.n	8001d54 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d52:	e0c2      	b.n	8001eda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d102      	bne.n	8001d6c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d6a:	e0b6      	b.n	8001eda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d003      	beq.n	8001d80 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2205      	movs	r2, #5
 8001d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	887a      	ldrh	r2, [r7, #2]
 8001da2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d108      	bne.n	8001dd4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a49      	ldr	r2, [pc, #292]	; (8001eec <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a48      	ldr	r2, [pc, #288]	; (8001ef0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8001dd2:	e007      	b.n	8001de4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	4a46      	ldr	r2, [pc, #280]	; (8001ef4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de0:	4a45      	ldr	r2, [pc, #276]	; (8001ef8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de8:	4a44      	ldr	r2, [pc, #272]	; (8001efc <HAL_SPI_TransmitReceive_DMA+0x200>)
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	2200      	movs	r2, #0
 8001df2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	4619      	mov	r1, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e04:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001e0c:	f7fe ff10 	bl	8000c30 <HAL_DMA_Start_IT>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1a:	f043 0210 	orr.w	r2, r3, #16
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001e2e:	e054      	b.n	8001eda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e44:	2200      	movs	r2, #0
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	4619      	mov	r1, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	330c      	adds	r3, #12
 8001e70:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001e78:	f7fe feda 	bl	8000c30 <HAL_DMA_Start_IT>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00c      	beq.n	8001e9c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	f043 0210 	orr.w	r2, r3, #16
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001e9a:	e01e      	b.n	8001eda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea6:	2b40      	cmp	r3, #64	; 0x40
 8001ea8:	d007      	beq.n	8001eba <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0202 	orr.w	r2, r2, #2
 8001ed8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	0800225b 	.word	0x0800225b
 8001ef0:	08002127 	.word	0x08002127
 8001ef4:	08002277 	.word	0x08002277
 8001ef8:	080021cd 	.word	0x080021cd
 8001efc:	08002293 	.word	0x08002293

08001f00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	099b      	lsrs	r3, r3, #6
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10f      	bne.n	8001f44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
    return;
 8001f42:	e0be      	b.n	80020c2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	085b      	lsrs	r3, r3, #1
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_SPI_IRQHandler+0x66>
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	09db      	lsrs	r3, r3, #7
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d004      	beq.n	8001f66 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
    return;
 8001f64:	e0ad      	b.n	80020c2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_SPI_IRQHandler+0x80>
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80a1 	beq.w	80020c2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 809a 	beq.w	80020c2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d023      	beq.n	8001fe2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d011      	beq.n	8001fca <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	f043 0204 	orr.w	r2, r3, #4
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	e00b      	b.n	8001fe2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
        return;
 8001fe0:	e06f      	b.n	80020c2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d014      	beq.n	8002018 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	2b00      	cmp	r3, #0
 800201e:	d04f      	beq.n	80020c0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800202e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d104      	bne.n	800204c <HAL_SPI_IRQHandler+0x14c>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d034      	beq.n	80020b6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0203 	bic.w	r2, r2, #3
 800205a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d011      	beq.n	8002088 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002068:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_SPI_IRQHandler+0x1c8>)
 800206a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fe77 	bl	8000d64 <HAL_DMA_Abort_IT>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208c:	2b00      	cmp	r3, #0
 800208e:	d016      	beq.n	80020be <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_SPI_IRQHandler+0x1c8>)
 8002096:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fe61 	bl	8000d64 <HAL_DMA_Abort_IT>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80020b4:	e003      	b.n	80020be <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f82c 	bl	8002114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80020bc:	e000      	b.n	80020c0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80020be:	bf00      	nop
    return;
 80020c0:	bf00      	nop
  }
}
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	080022d3 	.word	0x080022d3

080020cc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002134:	f7fe fbe6 	bl	8000904 <HAL_GetTick>
 8002138:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b20      	cmp	r3, #32
 8002146:	d03b      	beq.n	80021c0 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0220 	bic.w	r2, r2, #32
 8002156:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10d      	bne.n	800217c <SPI_DMAReceiveCplt+0x56>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002168:	d108      	bne.n	800217c <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0203 	bic.w	r2, r2, #3
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	e007      	b.n	800218c <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	2164      	movs	r1, #100	; 0x64
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f93b 	bl	800240c <SPI_EndRxTransaction>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff ffab 	bl	8002114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80021be:	e002      	b.n	80021c6 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff ff83 	bl	80020cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021da:	f7fe fb93 	bl	8000904 <HAL_GetTick>
 80021de:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d02f      	beq.n	800224e <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0220 	bic.w	r2, r2, #32
 80021fc:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	2164      	movs	r1, #100	; 0x64
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f954 	bl	80024b0 <SPI_EndRxTxTransaction>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f043 0220 	orr.w	r2, r3, #32
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0203 	bic.w	r2, r2, #3
 8002228:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7ff ff64 	bl	8002114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800224c:	e002      	b.n	8002254 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7ff ff45 	bl	80020de <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7ff ff41 	bl	80020f0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7ff ff3c 	bl	8002102 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0203 	bic.w	r2, r2, #3
 80022ae:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff ff25 	bl	8002114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff ff11 	bl	8002114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800230c:	f7fe fafa 	bl	8000904 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	4413      	add	r3, r2
 800231a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800231c:	f7fe faf2 	bl	8000904 <HAL_GetTick>
 8002320:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002322:	4b39      	ldr	r3, [pc, #228]	; (8002408 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	015b      	lsls	r3, r3, #5
 8002328:	0d1b      	lsrs	r3, r3, #20
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002332:	e054      	b.n	80023de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233a:	d050      	beq.n	80023de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800233c:	f7fe fae2 	bl	8000904 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	429a      	cmp	r2, r3
 800234a:	d902      	bls.n	8002352 <SPI_WaitFlagStateUntilTimeout+0x56>
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d13d      	bne.n	80023ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002360:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236a:	d111      	bne.n	8002390 <SPI_WaitFlagStateUntilTimeout+0x94>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002374:	d004      	beq.n	8002380 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237e:	d107      	bne.n	8002390 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002398:	d10f      	bne.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e017      	b.n	80023fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3b01      	subs	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4013      	ands	r3, r2
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d19b      	bne.n	8002334 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000004 	.word	0x20000004

0800240c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002420:	d111      	bne.n	8002446 <SPI_EndRxTransaction+0x3a>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800242a:	d004      	beq.n	8002436 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002434:	d107      	bne.n	8002446 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002444:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800244e:	d117      	bne.n	8002480 <SPI_EndRxTransaction+0x74>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002458:	d112      	bne.n	8002480 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2200      	movs	r2, #0
 8002462:	2101      	movs	r1, #1
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff ff49 	bl	80022fc <SPI_WaitFlagStateUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01a      	beq.n	80024a6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e013      	b.n	80024a8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2200      	movs	r2, #0
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff ff36 	bl	80022fc <SPI_WaitFlagStateUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f043 0220 	orr.w	r2, r3, #32
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e000      	b.n	80024a8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f7ff ff18 	bl	80022fc <SPI_WaitFlagStateUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e000      	b.n	80024e4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e03f      	b.n	800257e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe f82c 	bl	8000570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2224      	movs	r2, #36	; 0x24
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fc25 	bl	8002d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b08a      	sub	sp, #40	; 0x28
 800258a:	af02      	add	r7, sp, #8
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d17c      	bne.n	80026a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_UART_Transmit+0x2c>
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e075      	b.n	80026a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_UART_Transmit+0x3e>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e06e      	b.n	80026a2 <HAL_UART_Transmit+0x11c>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2221      	movs	r2, #33	; 0x21
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025da:	f7fe f993 	bl	8000904 <HAL_GetTick>
 80025de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	88fa      	ldrh	r2, [r7, #6]
 80025e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	88fa      	ldrh	r2, [r7, #6]
 80025ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f4:	d108      	bne.n	8002608 <HAL_UART_Transmit+0x82>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	e003      	b.n	8002610 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002618:	e02a      	b.n	8002670 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2200      	movs	r2, #0
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fa11 	bl	8002a4c <UART_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e036      	b.n	80026a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10b      	bne.n	8002652 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002648:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	3302      	adds	r3, #2
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	e007      	b.n	8002662 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	3301      	adds	r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1cf      	bne.n	800261a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2200      	movs	r2, #0
 8002682:	2140      	movs	r1, #64	; 0x40
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f9e1 	bl	8002a4c <UART_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e006      	b.n	80026a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_UART_IRQHandler+0x52>
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fa99 	bl	8002c2e <UART_Receive_IT>
      return;
 80026fc:	e17b      	b.n	80029f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80b1 	beq.w	8002868 <HAL_UART_IRQHandler+0x1bc>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d105      	bne.n	800271c <HAL_UART_IRQHandler+0x70>
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80a6 	beq.w	8002868 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_UART_IRQHandler+0x90>
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_UART_IRQHandler+0xb0>
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f043 0202 	orr.w	r2, r3, #2
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_UART_IRQHandler+0xd0>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f043 0204 	orr.w	r2, r3, #4
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00f      	beq.n	80027a6 <HAL_UART_IRQHandler+0xfa>
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <HAL_UART_IRQHandler+0xee>
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f043 0208 	orr.w	r2, r3, #8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 811e 	beq.w	80029ec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_UART_IRQHandler+0x11e>
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fa32 	bl	8002c2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <HAL_UART_IRQHandler+0x146>
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d031      	beq.n	8002856 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f974 	bl	8002ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d023      	beq.n	800284e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002814:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	2b00      	cmp	r3, #0
 800281c:	d013      	beq.n	8002846 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	4a76      	ldr	r2, [pc, #472]	; (80029fc <HAL_UART_IRQHandler+0x350>)
 8002824:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fa9a 	bl	8000d64 <HAL_DMA_Abort_IT>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d016      	beq.n	8002864 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002840:	4610      	mov	r0, r2
 8002842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002844:	e00e      	b.n	8002864 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8ec 	bl	8002a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284c:	e00a      	b.n	8002864 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f8e8 	bl	8002a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002854:	e006      	b.n	8002864 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8e4 	bl	8002a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002862:	e0c3      	b.n	80029ec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002864:	bf00      	nop
    return;
 8002866:	e0c1      	b.n	80029ec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	2b01      	cmp	r3, #1
 800286e:	f040 80a1 	bne.w	80029b4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 809b 	beq.w	80029b4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8095 	beq.w	80029b4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d04e      	beq.n	800294c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80028b8:	8a3b      	ldrh	r3, [r7, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8098 	beq.w	80029f0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028c4:	8a3a      	ldrh	r2, [r7, #16]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	f080 8092 	bcs.w	80029f0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8a3a      	ldrh	r2, [r7, #16]
 80028d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d02b      	beq.n	8002934 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800290a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0210 	bic.w	r2, r2, #16
 8002928:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe f9dd 	bl	8000cee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800293c:	b29b      	uxth	r3, r3
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	b29b      	uxth	r3, r3
 8002942:	4619      	mov	r1, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f876 	bl	8002a36 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800294a:	e051      	b.n	80029f0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002954:	b29b      	uxth	r3, r3
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d047      	beq.n	80029f4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002964:	8a7b      	ldrh	r3, [r7, #18]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d044      	beq.n	80029f4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002978:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0210 	bic.w	r2, r2, #16
 80029a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029a8:	8a7b      	ldrh	r3, [r7, #18]
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f842 	bl	8002a36 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80029b2:	e01f      	b.n	80029f4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <HAL_UART_IRQHandler+0x324>
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f8c9 	bl	8002b60 <UART_Transmit_IT>
    return;
 80029ce:	e012      	b.n	80029f6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00d      	beq.n	80029f6 <HAL_UART_IRQHandler+0x34a>
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f90a 	bl	8002bfe <UART_EndTransmit_IT>
    return;
 80029ea:	e004      	b.n	80029f6 <HAL_UART_IRQHandler+0x34a>
    return;
 80029ec:	bf00      	nop
 80029ee:	e002      	b.n	80029f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80029f0:	bf00      	nop
 80029f2:	e000      	b.n	80029f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80029f4:	bf00      	nop
  }
}
 80029f6:	3728      	adds	r7, #40	; 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	08002b39 	.word	0x08002b39

08002a00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a5c:	e02c      	b.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d028      	beq.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a6c:	f7fd ff4a 	bl	8000904 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d21d      	bcs.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0201 	bic.w	r2, r2, #1
 8002a9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e00f      	b.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d0c3      	beq.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002af6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d107      	bne.n	8002b20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0210 	bic.w	r2, r2, #16
 8002b1e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff ff66 	bl	8002a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b21      	cmp	r3, #33	; 0x21
 8002b72:	d13e      	bne.n	8002bf2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7c:	d114      	bne.n	8002ba8 <UART_Transmit_IT+0x48>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d110      	bne.n	8002ba8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	1c9a      	adds	r2, r3, #2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	621a      	str	r2, [r3, #32]
 8002ba6:	e008      	b.n	8002bba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	1c59      	adds	r1, r3, #1
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6211      	str	r1, [r2, #32]
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff feee 	bl	8002a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b22      	cmp	r3, #34	; 0x22
 8002c40:	f040 8099 	bne.w	8002d76 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4c:	d117      	bne.n	8002c7e <UART_Receive_IT+0x50>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d113      	bne.n	8002c7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	1c9a      	adds	r2, r3, #2
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c7c:	e026      	b.n	8002ccc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c90:	d007      	beq.n	8002ca2 <UART_Receive_IT+0x74>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <UART_Receive_IT+0x82>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e008      	b.n	8002cc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d148      	bne.n	8002d72 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0220 	bic.w	r2, r2, #32
 8002cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d123      	bne.n	8002d68 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0210 	bic.w	r2, r2, #16
 8002d34:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d10a      	bne.n	8002d5a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff fe68 	bl	8002a36 <HAL_UARTEx_RxEventCallback>
 8002d66:	e002      	b.n	8002d6e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff fe52 	bl	8002a12 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e002      	b.n	8002d78 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
  }
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002dba:	f023 030c 	bic.w	r3, r3, #12
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a2c      	ldr	r2, [pc, #176]	; (8002e94 <UART_SetConfig+0x114>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d103      	bne.n	8002df0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002de8:	f7fe fed2 	bl	8001b90 <HAL_RCC_GetPCLK2Freq>
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	e002      	b.n	8002df6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002df0:	f7fe feba 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8002df4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009a      	lsls	r2, r3, #2
 8002e00:	441a      	add	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	4a22      	ldr	r2, [pc, #136]	; (8002e98 <UART_SetConfig+0x118>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	0119      	lsls	r1, r3, #4
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009a      	lsls	r2, r3, #2
 8002e20:	441a      	add	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <UART_SetConfig+0x118>)
 8002e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2064      	movs	r0, #100	; 0x64
 8002e36:	fb00 f303 	mul.w	r3, r0, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	3332      	adds	r3, #50	; 0x32
 8002e40:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <UART_SetConfig+0x118>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4c:	4419      	add	r1, r3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	009a      	lsls	r2, r3, #2
 8002e58:	441a      	add	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <UART_SetConfig+0x118>)
 8002e66:	fba3 0302 	umull	r0, r3, r3, r2
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2064      	movs	r0, #100	; 0x64
 8002e6e:	fb00 f303 	mul.w	r3, r0, r3
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	3332      	adds	r3, #50	; 0x32
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <UART_SetConfig+0x118>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	440a      	add	r2, r1
 8002e8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40013800 	.word	0x40013800
 8002e98:	51eb851f 	.word	0x51eb851f

08002e9c <__errno>:
 8002e9c:	4b01      	ldr	r3, [pc, #4]	; (8002ea4 <__errno+0x8>)
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000010 	.word	0x20000010

08002ea8 <__libc_init_array>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	2600      	movs	r6, #0
 8002eac:	4d0c      	ldr	r5, [pc, #48]	; (8002ee0 <__libc_init_array+0x38>)
 8002eae:	4c0d      	ldr	r4, [pc, #52]	; (8002ee4 <__libc_init_array+0x3c>)
 8002eb0:	1b64      	subs	r4, r4, r5
 8002eb2:	10a4      	asrs	r4, r4, #2
 8002eb4:	42a6      	cmp	r6, r4
 8002eb6:	d109      	bne.n	8002ecc <__libc_init_array+0x24>
 8002eb8:	f000 ff82 	bl	8003dc0 <_init>
 8002ebc:	2600      	movs	r6, #0
 8002ebe:	4d0a      	ldr	r5, [pc, #40]	; (8002ee8 <__libc_init_array+0x40>)
 8002ec0:	4c0a      	ldr	r4, [pc, #40]	; (8002eec <__libc_init_array+0x44>)
 8002ec2:	1b64      	subs	r4, r4, r5
 8002ec4:	10a4      	asrs	r4, r4, #2
 8002ec6:	42a6      	cmp	r6, r4
 8002ec8:	d105      	bne.n	8002ed6 <__libc_init_array+0x2e>
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed0:	4798      	blx	r3
 8002ed2:	3601      	adds	r6, #1
 8002ed4:	e7ee      	b.n	8002eb4 <__libc_init_array+0xc>
 8002ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eda:	4798      	blx	r3
 8002edc:	3601      	adds	r6, #1
 8002ede:	e7f2      	b.n	8002ec6 <__libc_init_array+0x1e>
 8002ee0:	08003eb0 	.word	0x08003eb0
 8002ee4:	08003eb0 	.word	0x08003eb0
 8002ee8:	08003eb0 	.word	0x08003eb0
 8002eec:	08003eb4 	.word	0x08003eb4

08002ef0 <memset>:
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4402      	add	r2, r0
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d100      	bne.n	8002efa <memset+0xa>
 8002ef8:	4770      	bx	lr
 8002efa:	f803 1b01 	strb.w	r1, [r3], #1
 8002efe:	e7f9      	b.n	8002ef4 <memset+0x4>

08002f00 <iprintf>:
 8002f00:	b40f      	push	{r0, r1, r2, r3}
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <iprintf+0x2c>)
 8002f04:	b513      	push	{r0, r1, r4, lr}
 8002f06:	681c      	ldr	r4, [r3, #0]
 8002f08:	b124      	cbz	r4, 8002f14 <iprintf+0x14>
 8002f0a:	69a3      	ldr	r3, [r4, #24]
 8002f0c:	b913      	cbnz	r3, 8002f14 <iprintf+0x14>
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f000 f866 	bl	8002fe0 <__sinit>
 8002f14:	ab05      	add	r3, sp, #20
 8002f16:	4620      	mov	r0, r4
 8002f18:	9a04      	ldr	r2, [sp, #16]
 8002f1a:	68a1      	ldr	r1, [r4, #8]
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	f000 f981 	bl	8003224 <_vfiprintf_r>
 8002f22:	b002      	add	sp, #8
 8002f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f28:	b004      	add	sp, #16
 8002f2a:	4770      	bx	lr
 8002f2c:	20000010 	.word	0x20000010

08002f30 <std>:
 8002f30:	2300      	movs	r3, #0
 8002f32:	b510      	push	{r4, lr}
 8002f34:	4604      	mov	r4, r0
 8002f36:	e9c0 3300 	strd	r3, r3, [r0]
 8002f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f3e:	6083      	str	r3, [r0, #8]
 8002f40:	8181      	strh	r1, [r0, #12]
 8002f42:	6643      	str	r3, [r0, #100]	; 0x64
 8002f44:	81c2      	strh	r2, [r0, #14]
 8002f46:	6183      	str	r3, [r0, #24]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	305c      	adds	r0, #92	; 0x5c
 8002f4e:	f7ff ffcf 	bl	8002ef0 <memset>
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <std+0x38>)
 8002f54:	6224      	str	r4, [r4, #32]
 8002f56:	6263      	str	r3, [r4, #36]	; 0x24
 8002f58:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <std+0x3c>)
 8002f5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <std+0x40>)
 8002f5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <std+0x44>)
 8002f62:	6323      	str	r3, [r4, #48]	; 0x30
 8002f64:	bd10      	pop	{r4, pc}
 8002f66:	bf00      	nop
 8002f68:	080037d1 	.word	0x080037d1
 8002f6c:	080037f3 	.word	0x080037f3
 8002f70:	0800382b 	.word	0x0800382b
 8002f74:	0800384f 	.word	0x0800384f

08002f78 <_cleanup_r>:
 8002f78:	4901      	ldr	r1, [pc, #4]	; (8002f80 <_cleanup_r+0x8>)
 8002f7a:	f000 b8af 	b.w	80030dc <_fwalk_reent>
 8002f7e:	bf00      	nop
 8002f80:	08003b29 	.word	0x08003b29

08002f84 <__sfmoreglue>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	2568      	movs	r5, #104	; 0x68
 8002f88:	1e4a      	subs	r2, r1, #1
 8002f8a:	4355      	muls	r5, r2
 8002f8c:	460e      	mov	r6, r1
 8002f8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f92:	f000 f8c5 	bl	8003120 <_malloc_r>
 8002f96:	4604      	mov	r4, r0
 8002f98:	b140      	cbz	r0, 8002fac <__sfmoreglue+0x28>
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	e9c0 1600 	strd	r1, r6, [r0]
 8002fa0:	300c      	adds	r0, #12
 8002fa2:	60a0      	str	r0, [r4, #8]
 8002fa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002fa8:	f7ff ffa2 	bl	8002ef0 <memset>
 8002fac:	4620      	mov	r0, r4
 8002fae:	bd70      	pop	{r4, r5, r6, pc}

08002fb0 <__sfp_lock_acquire>:
 8002fb0:	4801      	ldr	r0, [pc, #4]	; (8002fb8 <__sfp_lock_acquire+0x8>)
 8002fb2:	f000 b8b3 	b.w	800311c <__retarget_lock_acquire_recursive>
 8002fb6:	bf00      	nop
 8002fb8:	200001d0 	.word	0x200001d0

08002fbc <__sfp_lock_release>:
 8002fbc:	4801      	ldr	r0, [pc, #4]	; (8002fc4 <__sfp_lock_release+0x8>)
 8002fbe:	f000 b8ae 	b.w	800311e <__retarget_lock_release_recursive>
 8002fc2:	bf00      	nop
 8002fc4:	200001d0 	.word	0x200001d0

08002fc8 <__sinit_lock_acquire>:
 8002fc8:	4801      	ldr	r0, [pc, #4]	; (8002fd0 <__sinit_lock_acquire+0x8>)
 8002fca:	f000 b8a7 	b.w	800311c <__retarget_lock_acquire_recursive>
 8002fce:	bf00      	nop
 8002fd0:	200001cb 	.word	0x200001cb

08002fd4 <__sinit_lock_release>:
 8002fd4:	4801      	ldr	r0, [pc, #4]	; (8002fdc <__sinit_lock_release+0x8>)
 8002fd6:	f000 b8a2 	b.w	800311e <__retarget_lock_release_recursive>
 8002fda:	bf00      	nop
 8002fdc:	200001cb 	.word	0x200001cb

08002fe0 <__sinit>:
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	f7ff fff0 	bl	8002fc8 <__sinit_lock_acquire>
 8002fe8:	69a3      	ldr	r3, [r4, #24]
 8002fea:	b11b      	cbz	r3, 8002ff4 <__sinit+0x14>
 8002fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff0:	f7ff bff0 	b.w	8002fd4 <__sinit_lock_release>
 8002ff4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ff8:	6523      	str	r3, [r4, #80]	; 0x50
 8002ffa:	4b13      	ldr	r3, [pc, #76]	; (8003048 <__sinit+0x68>)
 8002ffc:	4a13      	ldr	r2, [pc, #76]	; (800304c <__sinit+0x6c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	62a2      	str	r2, [r4, #40]	; 0x28
 8003002:	42a3      	cmp	r3, r4
 8003004:	bf08      	it	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	4620      	mov	r0, r4
 800300a:	bf08      	it	eq
 800300c:	61a3      	streq	r3, [r4, #24]
 800300e:	f000 f81f 	bl	8003050 <__sfp>
 8003012:	6060      	str	r0, [r4, #4]
 8003014:	4620      	mov	r0, r4
 8003016:	f000 f81b 	bl	8003050 <__sfp>
 800301a:	60a0      	str	r0, [r4, #8]
 800301c:	4620      	mov	r0, r4
 800301e:	f000 f817 	bl	8003050 <__sfp>
 8003022:	2200      	movs	r2, #0
 8003024:	2104      	movs	r1, #4
 8003026:	60e0      	str	r0, [r4, #12]
 8003028:	6860      	ldr	r0, [r4, #4]
 800302a:	f7ff ff81 	bl	8002f30 <std>
 800302e:	2201      	movs	r2, #1
 8003030:	2109      	movs	r1, #9
 8003032:	68a0      	ldr	r0, [r4, #8]
 8003034:	f7ff ff7c 	bl	8002f30 <std>
 8003038:	2202      	movs	r2, #2
 800303a:	2112      	movs	r1, #18
 800303c:	68e0      	ldr	r0, [r4, #12]
 800303e:	f7ff ff77 	bl	8002f30 <std>
 8003042:	2301      	movs	r3, #1
 8003044:	61a3      	str	r3, [r4, #24]
 8003046:	e7d1      	b.n	8002fec <__sinit+0xc>
 8003048:	08003e18 	.word	0x08003e18
 800304c:	08002f79 	.word	0x08002f79

08003050 <__sfp>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	4607      	mov	r7, r0
 8003054:	f7ff ffac 	bl	8002fb0 <__sfp_lock_acquire>
 8003058:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <__sfp+0x84>)
 800305a:	681e      	ldr	r6, [r3, #0]
 800305c:	69b3      	ldr	r3, [r6, #24]
 800305e:	b913      	cbnz	r3, 8003066 <__sfp+0x16>
 8003060:	4630      	mov	r0, r6
 8003062:	f7ff ffbd 	bl	8002fe0 <__sinit>
 8003066:	3648      	adds	r6, #72	; 0x48
 8003068:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800306c:	3b01      	subs	r3, #1
 800306e:	d503      	bpl.n	8003078 <__sfp+0x28>
 8003070:	6833      	ldr	r3, [r6, #0]
 8003072:	b30b      	cbz	r3, 80030b8 <__sfp+0x68>
 8003074:	6836      	ldr	r6, [r6, #0]
 8003076:	e7f7      	b.n	8003068 <__sfp+0x18>
 8003078:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800307c:	b9d5      	cbnz	r5, 80030b4 <__sfp+0x64>
 800307e:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <__sfp+0x88>)
 8003080:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003084:	60e3      	str	r3, [r4, #12]
 8003086:	6665      	str	r5, [r4, #100]	; 0x64
 8003088:	f000 f847 	bl	800311a <__retarget_lock_init_recursive>
 800308c:	f7ff ff96 	bl	8002fbc <__sfp_lock_release>
 8003090:	2208      	movs	r2, #8
 8003092:	4629      	mov	r1, r5
 8003094:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003098:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800309c:	6025      	str	r5, [r4, #0]
 800309e:	61a5      	str	r5, [r4, #24]
 80030a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80030a4:	f7ff ff24 	bl	8002ef0 <memset>
 80030a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80030ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80030b0:	4620      	mov	r0, r4
 80030b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030b4:	3468      	adds	r4, #104	; 0x68
 80030b6:	e7d9      	b.n	800306c <__sfp+0x1c>
 80030b8:	2104      	movs	r1, #4
 80030ba:	4638      	mov	r0, r7
 80030bc:	f7ff ff62 	bl	8002f84 <__sfmoreglue>
 80030c0:	4604      	mov	r4, r0
 80030c2:	6030      	str	r0, [r6, #0]
 80030c4:	2800      	cmp	r0, #0
 80030c6:	d1d5      	bne.n	8003074 <__sfp+0x24>
 80030c8:	f7ff ff78 	bl	8002fbc <__sfp_lock_release>
 80030cc:	230c      	movs	r3, #12
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	e7ee      	b.n	80030b0 <__sfp+0x60>
 80030d2:	bf00      	nop
 80030d4:	08003e18 	.word	0x08003e18
 80030d8:	ffff0001 	.word	0xffff0001

080030dc <_fwalk_reent>:
 80030dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030e0:	4606      	mov	r6, r0
 80030e2:	4688      	mov	r8, r1
 80030e4:	2700      	movs	r7, #0
 80030e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80030ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030ee:	f1b9 0901 	subs.w	r9, r9, #1
 80030f2:	d505      	bpl.n	8003100 <_fwalk_reent+0x24>
 80030f4:	6824      	ldr	r4, [r4, #0]
 80030f6:	2c00      	cmp	r4, #0
 80030f8:	d1f7      	bne.n	80030ea <_fwalk_reent+0xe>
 80030fa:	4638      	mov	r0, r7
 80030fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003100:	89ab      	ldrh	r3, [r5, #12]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d907      	bls.n	8003116 <_fwalk_reent+0x3a>
 8003106:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800310a:	3301      	adds	r3, #1
 800310c:	d003      	beq.n	8003116 <_fwalk_reent+0x3a>
 800310e:	4629      	mov	r1, r5
 8003110:	4630      	mov	r0, r6
 8003112:	47c0      	blx	r8
 8003114:	4307      	orrs	r7, r0
 8003116:	3568      	adds	r5, #104	; 0x68
 8003118:	e7e9      	b.n	80030ee <_fwalk_reent+0x12>

0800311a <__retarget_lock_init_recursive>:
 800311a:	4770      	bx	lr

0800311c <__retarget_lock_acquire_recursive>:
 800311c:	4770      	bx	lr

0800311e <__retarget_lock_release_recursive>:
 800311e:	4770      	bx	lr

08003120 <_malloc_r>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	1ccd      	adds	r5, r1, #3
 8003124:	f025 0503 	bic.w	r5, r5, #3
 8003128:	3508      	adds	r5, #8
 800312a:	2d0c      	cmp	r5, #12
 800312c:	bf38      	it	cc
 800312e:	250c      	movcc	r5, #12
 8003130:	2d00      	cmp	r5, #0
 8003132:	4606      	mov	r6, r0
 8003134:	db01      	blt.n	800313a <_malloc_r+0x1a>
 8003136:	42a9      	cmp	r1, r5
 8003138:	d903      	bls.n	8003142 <_malloc_r+0x22>
 800313a:	230c      	movs	r3, #12
 800313c:	6033      	str	r3, [r6, #0]
 800313e:	2000      	movs	r0, #0
 8003140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003142:	f000 fdb1 	bl	8003ca8 <__malloc_lock>
 8003146:	4921      	ldr	r1, [pc, #132]	; (80031cc <_malloc_r+0xac>)
 8003148:	680a      	ldr	r2, [r1, #0]
 800314a:	4614      	mov	r4, r2
 800314c:	b99c      	cbnz	r4, 8003176 <_malloc_r+0x56>
 800314e:	4f20      	ldr	r7, [pc, #128]	; (80031d0 <_malloc_r+0xb0>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	b923      	cbnz	r3, 800315e <_malloc_r+0x3e>
 8003154:	4621      	mov	r1, r4
 8003156:	4630      	mov	r0, r6
 8003158:	f000 fb2a 	bl	80037b0 <_sbrk_r>
 800315c:	6038      	str	r0, [r7, #0]
 800315e:	4629      	mov	r1, r5
 8003160:	4630      	mov	r0, r6
 8003162:	f000 fb25 	bl	80037b0 <_sbrk_r>
 8003166:	1c43      	adds	r3, r0, #1
 8003168:	d123      	bne.n	80031b2 <_malloc_r+0x92>
 800316a:	230c      	movs	r3, #12
 800316c:	4630      	mov	r0, r6
 800316e:	6033      	str	r3, [r6, #0]
 8003170:	f000 fda0 	bl	8003cb4 <__malloc_unlock>
 8003174:	e7e3      	b.n	800313e <_malloc_r+0x1e>
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	1b5b      	subs	r3, r3, r5
 800317a:	d417      	bmi.n	80031ac <_malloc_r+0x8c>
 800317c:	2b0b      	cmp	r3, #11
 800317e:	d903      	bls.n	8003188 <_malloc_r+0x68>
 8003180:	6023      	str	r3, [r4, #0]
 8003182:	441c      	add	r4, r3
 8003184:	6025      	str	r5, [r4, #0]
 8003186:	e004      	b.n	8003192 <_malloc_r+0x72>
 8003188:	6863      	ldr	r3, [r4, #4]
 800318a:	42a2      	cmp	r2, r4
 800318c:	bf0c      	ite	eq
 800318e:	600b      	streq	r3, [r1, #0]
 8003190:	6053      	strne	r3, [r2, #4]
 8003192:	4630      	mov	r0, r6
 8003194:	f000 fd8e 	bl	8003cb4 <__malloc_unlock>
 8003198:	f104 000b 	add.w	r0, r4, #11
 800319c:	1d23      	adds	r3, r4, #4
 800319e:	f020 0007 	bic.w	r0, r0, #7
 80031a2:	1ac2      	subs	r2, r0, r3
 80031a4:	d0cc      	beq.n	8003140 <_malloc_r+0x20>
 80031a6:	1a1b      	subs	r3, r3, r0
 80031a8:	50a3      	str	r3, [r4, r2]
 80031aa:	e7c9      	b.n	8003140 <_malloc_r+0x20>
 80031ac:	4622      	mov	r2, r4
 80031ae:	6864      	ldr	r4, [r4, #4]
 80031b0:	e7cc      	b.n	800314c <_malloc_r+0x2c>
 80031b2:	1cc4      	adds	r4, r0, #3
 80031b4:	f024 0403 	bic.w	r4, r4, #3
 80031b8:	42a0      	cmp	r0, r4
 80031ba:	d0e3      	beq.n	8003184 <_malloc_r+0x64>
 80031bc:	1a21      	subs	r1, r4, r0
 80031be:	4630      	mov	r0, r6
 80031c0:	f000 faf6 	bl	80037b0 <_sbrk_r>
 80031c4:	3001      	adds	r0, #1
 80031c6:	d1dd      	bne.n	8003184 <_malloc_r+0x64>
 80031c8:	e7cf      	b.n	800316a <_malloc_r+0x4a>
 80031ca:	bf00      	nop
 80031cc:	20000094 	.word	0x20000094
 80031d0:	20000098 	.word	0x20000098

080031d4 <__sfputc_r>:
 80031d4:	6893      	ldr	r3, [r2, #8]
 80031d6:	b410      	push	{r4}
 80031d8:	3b01      	subs	r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	6093      	str	r3, [r2, #8]
 80031de:	da07      	bge.n	80031f0 <__sfputc_r+0x1c>
 80031e0:	6994      	ldr	r4, [r2, #24]
 80031e2:	42a3      	cmp	r3, r4
 80031e4:	db01      	blt.n	80031ea <__sfputc_r+0x16>
 80031e6:	290a      	cmp	r1, #10
 80031e8:	d102      	bne.n	80031f0 <__sfputc_r+0x1c>
 80031ea:	bc10      	pop	{r4}
 80031ec:	f000 bb34 	b.w	8003858 <__swbuf_r>
 80031f0:	6813      	ldr	r3, [r2, #0]
 80031f2:	1c58      	adds	r0, r3, #1
 80031f4:	6010      	str	r0, [r2, #0]
 80031f6:	7019      	strb	r1, [r3, #0]
 80031f8:	4608      	mov	r0, r1
 80031fa:	bc10      	pop	{r4}
 80031fc:	4770      	bx	lr

080031fe <__sfputs_r>:
 80031fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003200:	4606      	mov	r6, r0
 8003202:	460f      	mov	r7, r1
 8003204:	4614      	mov	r4, r2
 8003206:	18d5      	adds	r5, r2, r3
 8003208:	42ac      	cmp	r4, r5
 800320a:	d101      	bne.n	8003210 <__sfputs_r+0x12>
 800320c:	2000      	movs	r0, #0
 800320e:	e007      	b.n	8003220 <__sfputs_r+0x22>
 8003210:	463a      	mov	r2, r7
 8003212:	4630      	mov	r0, r6
 8003214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003218:	f7ff ffdc 	bl	80031d4 <__sfputc_r>
 800321c:	1c43      	adds	r3, r0, #1
 800321e:	d1f3      	bne.n	8003208 <__sfputs_r+0xa>
 8003220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003224 <_vfiprintf_r>:
 8003224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003228:	460d      	mov	r5, r1
 800322a:	4614      	mov	r4, r2
 800322c:	4698      	mov	r8, r3
 800322e:	4606      	mov	r6, r0
 8003230:	b09d      	sub	sp, #116	; 0x74
 8003232:	b118      	cbz	r0, 800323c <_vfiprintf_r+0x18>
 8003234:	6983      	ldr	r3, [r0, #24]
 8003236:	b90b      	cbnz	r3, 800323c <_vfiprintf_r+0x18>
 8003238:	f7ff fed2 	bl	8002fe0 <__sinit>
 800323c:	4b89      	ldr	r3, [pc, #548]	; (8003464 <_vfiprintf_r+0x240>)
 800323e:	429d      	cmp	r5, r3
 8003240:	d11b      	bne.n	800327a <_vfiprintf_r+0x56>
 8003242:	6875      	ldr	r5, [r6, #4]
 8003244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003246:	07d9      	lsls	r1, r3, #31
 8003248:	d405      	bmi.n	8003256 <_vfiprintf_r+0x32>
 800324a:	89ab      	ldrh	r3, [r5, #12]
 800324c:	059a      	lsls	r2, r3, #22
 800324e:	d402      	bmi.n	8003256 <_vfiprintf_r+0x32>
 8003250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003252:	f7ff ff63 	bl	800311c <__retarget_lock_acquire_recursive>
 8003256:	89ab      	ldrh	r3, [r5, #12]
 8003258:	071b      	lsls	r3, r3, #28
 800325a:	d501      	bpl.n	8003260 <_vfiprintf_r+0x3c>
 800325c:	692b      	ldr	r3, [r5, #16]
 800325e:	b9eb      	cbnz	r3, 800329c <_vfiprintf_r+0x78>
 8003260:	4629      	mov	r1, r5
 8003262:	4630      	mov	r0, r6
 8003264:	f000 fb5c 	bl	8003920 <__swsetup_r>
 8003268:	b1c0      	cbz	r0, 800329c <_vfiprintf_r+0x78>
 800326a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800326c:	07dc      	lsls	r4, r3, #31
 800326e:	d50e      	bpl.n	800328e <_vfiprintf_r+0x6a>
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	b01d      	add	sp, #116	; 0x74
 8003276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800327a:	4b7b      	ldr	r3, [pc, #492]	; (8003468 <_vfiprintf_r+0x244>)
 800327c:	429d      	cmp	r5, r3
 800327e:	d101      	bne.n	8003284 <_vfiprintf_r+0x60>
 8003280:	68b5      	ldr	r5, [r6, #8]
 8003282:	e7df      	b.n	8003244 <_vfiprintf_r+0x20>
 8003284:	4b79      	ldr	r3, [pc, #484]	; (800346c <_vfiprintf_r+0x248>)
 8003286:	429d      	cmp	r5, r3
 8003288:	bf08      	it	eq
 800328a:	68f5      	ldreq	r5, [r6, #12]
 800328c:	e7da      	b.n	8003244 <_vfiprintf_r+0x20>
 800328e:	89ab      	ldrh	r3, [r5, #12]
 8003290:	0598      	lsls	r0, r3, #22
 8003292:	d4ed      	bmi.n	8003270 <_vfiprintf_r+0x4c>
 8003294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003296:	f7ff ff42 	bl	800311e <__retarget_lock_release_recursive>
 800329a:	e7e9      	b.n	8003270 <_vfiprintf_r+0x4c>
 800329c:	2300      	movs	r3, #0
 800329e:	9309      	str	r3, [sp, #36]	; 0x24
 80032a0:	2320      	movs	r3, #32
 80032a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032a6:	2330      	movs	r3, #48	; 0x30
 80032a8:	f04f 0901 	mov.w	r9, #1
 80032ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80032b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003470 <_vfiprintf_r+0x24c>
 80032b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032b8:	4623      	mov	r3, r4
 80032ba:	469a      	mov	sl, r3
 80032bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032c0:	b10a      	cbz	r2, 80032c6 <_vfiprintf_r+0xa2>
 80032c2:	2a25      	cmp	r2, #37	; 0x25
 80032c4:	d1f9      	bne.n	80032ba <_vfiprintf_r+0x96>
 80032c6:	ebba 0b04 	subs.w	fp, sl, r4
 80032ca:	d00b      	beq.n	80032e4 <_vfiprintf_r+0xc0>
 80032cc:	465b      	mov	r3, fp
 80032ce:	4622      	mov	r2, r4
 80032d0:	4629      	mov	r1, r5
 80032d2:	4630      	mov	r0, r6
 80032d4:	f7ff ff93 	bl	80031fe <__sfputs_r>
 80032d8:	3001      	adds	r0, #1
 80032da:	f000 80aa 	beq.w	8003432 <_vfiprintf_r+0x20e>
 80032de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032e0:	445a      	add	r2, fp
 80032e2:	9209      	str	r2, [sp, #36]	; 0x24
 80032e4:	f89a 3000 	ldrb.w	r3, [sl]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80a2 	beq.w	8003432 <_vfiprintf_r+0x20e>
 80032ee:	2300      	movs	r3, #0
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295
 80032f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032f8:	f10a 0a01 	add.w	sl, sl, #1
 80032fc:	9304      	str	r3, [sp, #16]
 80032fe:	9307      	str	r3, [sp, #28]
 8003300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003304:	931a      	str	r3, [sp, #104]	; 0x68
 8003306:	4654      	mov	r4, sl
 8003308:	2205      	movs	r2, #5
 800330a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800330e:	4858      	ldr	r0, [pc, #352]	; (8003470 <_vfiprintf_r+0x24c>)
 8003310:	f000 fcbc 	bl	8003c8c <memchr>
 8003314:	9a04      	ldr	r2, [sp, #16]
 8003316:	b9d8      	cbnz	r0, 8003350 <_vfiprintf_r+0x12c>
 8003318:	06d1      	lsls	r1, r2, #27
 800331a:	bf44      	itt	mi
 800331c:	2320      	movmi	r3, #32
 800331e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003322:	0713      	lsls	r3, r2, #28
 8003324:	bf44      	itt	mi
 8003326:	232b      	movmi	r3, #43	; 0x2b
 8003328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800332c:	f89a 3000 	ldrb.w	r3, [sl]
 8003330:	2b2a      	cmp	r3, #42	; 0x2a
 8003332:	d015      	beq.n	8003360 <_vfiprintf_r+0x13c>
 8003334:	4654      	mov	r4, sl
 8003336:	2000      	movs	r0, #0
 8003338:	f04f 0c0a 	mov.w	ip, #10
 800333c:	9a07      	ldr	r2, [sp, #28]
 800333e:	4621      	mov	r1, r4
 8003340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003344:	3b30      	subs	r3, #48	; 0x30
 8003346:	2b09      	cmp	r3, #9
 8003348:	d94e      	bls.n	80033e8 <_vfiprintf_r+0x1c4>
 800334a:	b1b0      	cbz	r0, 800337a <_vfiprintf_r+0x156>
 800334c:	9207      	str	r2, [sp, #28]
 800334e:	e014      	b.n	800337a <_vfiprintf_r+0x156>
 8003350:	eba0 0308 	sub.w	r3, r0, r8
 8003354:	fa09 f303 	lsl.w	r3, r9, r3
 8003358:	4313      	orrs	r3, r2
 800335a:	46a2      	mov	sl, r4
 800335c:	9304      	str	r3, [sp, #16]
 800335e:	e7d2      	b.n	8003306 <_vfiprintf_r+0xe2>
 8003360:	9b03      	ldr	r3, [sp, #12]
 8003362:	1d19      	adds	r1, r3, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	9103      	str	r1, [sp, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	bfbb      	ittet	lt
 800336c:	425b      	neglt	r3, r3
 800336e:	f042 0202 	orrlt.w	r2, r2, #2
 8003372:	9307      	strge	r3, [sp, #28]
 8003374:	9307      	strlt	r3, [sp, #28]
 8003376:	bfb8      	it	lt
 8003378:	9204      	strlt	r2, [sp, #16]
 800337a:	7823      	ldrb	r3, [r4, #0]
 800337c:	2b2e      	cmp	r3, #46	; 0x2e
 800337e:	d10c      	bne.n	800339a <_vfiprintf_r+0x176>
 8003380:	7863      	ldrb	r3, [r4, #1]
 8003382:	2b2a      	cmp	r3, #42	; 0x2a
 8003384:	d135      	bne.n	80033f2 <_vfiprintf_r+0x1ce>
 8003386:	9b03      	ldr	r3, [sp, #12]
 8003388:	3402      	adds	r4, #2
 800338a:	1d1a      	adds	r2, r3, #4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	9203      	str	r2, [sp, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	bfb8      	it	lt
 8003394:	f04f 33ff 	movlt.w	r3, #4294967295
 8003398:	9305      	str	r3, [sp, #20]
 800339a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003480 <_vfiprintf_r+0x25c>
 800339e:	2203      	movs	r2, #3
 80033a0:	4650      	mov	r0, sl
 80033a2:	7821      	ldrb	r1, [r4, #0]
 80033a4:	f000 fc72 	bl	8003c8c <memchr>
 80033a8:	b140      	cbz	r0, 80033bc <_vfiprintf_r+0x198>
 80033aa:	2340      	movs	r3, #64	; 0x40
 80033ac:	eba0 000a 	sub.w	r0, r0, sl
 80033b0:	fa03 f000 	lsl.w	r0, r3, r0
 80033b4:	9b04      	ldr	r3, [sp, #16]
 80033b6:	3401      	adds	r4, #1
 80033b8:	4303      	orrs	r3, r0
 80033ba:	9304      	str	r3, [sp, #16]
 80033bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c0:	2206      	movs	r2, #6
 80033c2:	482c      	ldr	r0, [pc, #176]	; (8003474 <_vfiprintf_r+0x250>)
 80033c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033c8:	f000 fc60 	bl	8003c8c <memchr>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d03f      	beq.n	8003450 <_vfiprintf_r+0x22c>
 80033d0:	4b29      	ldr	r3, [pc, #164]	; (8003478 <_vfiprintf_r+0x254>)
 80033d2:	bb1b      	cbnz	r3, 800341c <_vfiprintf_r+0x1f8>
 80033d4:	9b03      	ldr	r3, [sp, #12]
 80033d6:	3307      	adds	r3, #7
 80033d8:	f023 0307 	bic.w	r3, r3, #7
 80033dc:	3308      	adds	r3, #8
 80033de:	9303      	str	r3, [sp, #12]
 80033e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033e2:	443b      	add	r3, r7
 80033e4:	9309      	str	r3, [sp, #36]	; 0x24
 80033e6:	e767      	b.n	80032b8 <_vfiprintf_r+0x94>
 80033e8:	460c      	mov	r4, r1
 80033ea:	2001      	movs	r0, #1
 80033ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80033f0:	e7a5      	b.n	800333e <_vfiprintf_r+0x11a>
 80033f2:	2300      	movs	r3, #0
 80033f4:	f04f 0c0a 	mov.w	ip, #10
 80033f8:	4619      	mov	r1, r3
 80033fa:	3401      	adds	r4, #1
 80033fc:	9305      	str	r3, [sp, #20]
 80033fe:	4620      	mov	r0, r4
 8003400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003404:	3a30      	subs	r2, #48	; 0x30
 8003406:	2a09      	cmp	r2, #9
 8003408:	d903      	bls.n	8003412 <_vfiprintf_r+0x1ee>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0c5      	beq.n	800339a <_vfiprintf_r+0x176>
 800340e:	9105      	str	r1, [sp, #20]
 8003410:	e7c3      	b.n	800339a <_vfiprintf_r+0x176>
 8003412:	4604      	mov	r4, r0
 8003414:	2301      	movs	r3, #1
 8003416:	fb0c 2101 	mla	r1, ip, r1, r2
 800341a:	e7f0      	b.n	80033fe <_vfiprintf_r+0x1da>
 800341c:	ab03      	add	r3, sp, #12
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	462a      	mov	r2, r5
 8003422:	4630      	mov	r0, r6
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <_vfiprintf_r+0x258>)
 8003426:	a904      	add	r1, sp, #16
 8003428:	f3af 8000 	nop.w
 800342c:	4607      	mov	r7, r0
 800342e:	1c78      	adds	r0, r7, #1
 8003430:	d1d6      	bne.n	80033e0 <_vfiprintf_r+0x1bc>
 8003432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003434:	07d9      	lsls	r1, r3, #31
 8003436:	d405      	bmi.n	8003444 <_vfiprintf_r+0x220>
 8003438:	89ab      	ldrh	r3, [r5, #12]
 800343a:	059a      	lsls	r2, r3, #22
 800343c:	d402      	bmi.n	8003444 <_vfiprintf_r+0x220>
 800343e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003440:	f7ff fe6d 	bl	800311e <__retarget_lock_release_recursive>
 8003444:	89ab      	ldrh	r3, [r5, #12]
 8003446:	065b      	lsls	r3, r3, #25
 8003448:	f53f af12 	bmi.w	8003270 <_vfiprintf_r+0x4c>
 800344c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800344e:	e711      	b.n	8003274 <_vfiprintf_r+0x50>
 8003450:	ab03      	add	r3, sp, #12
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	462a      	mov	r2, r5
 8003456:	4630      	mov	r0, r6
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <_vfiprintf_r+0x258>)
 800345a:	a904      	add	r1, sp, #16
 800345c:	f000 f882 	bl	8003564 <_printf_i>
 8003460:	e7e4      	b.n	800342c <_vfiprintf_r+0x208>
 8003462:	bf00      	nop
 8003464:	08003e3c 	.word	0x08003e3c
 8003468:	08003e5c 	.word	0x08003e5c
 800346c:	08003e1c 	.word	0x08003e1c
 8003470:	08003e7c 	.word	0x08003e7c
 8003474:	08003e86 	.word	0x08003e86
 8003478:	00000000 	.word	0x00000000
 800347c:	080031ff 	.word	0x080031ff
 8003480:	08003e82 	.word	0x08003e82

08003484 <_printf_common>:
 8003484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003488:	4616      	mov	r6, r2
 800348a:	4699      	mov	r9, r3
 800348c:	688a      	ldr	r2, [r1, #8]
 800348e:	690b      	ldr	r3, [r1, #16]
 8003490:	4607      	mov	r7, r0
 8003492:	4293      	cmp	r3, r2
 8003494:	bfb8      	it	lt
 8003496:	4613      	movlt	r3, r2
 8003498:	6033      	str	r3, [r6, #0]
 800349a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800349e:	460c      	mov	r4, r1
 80034a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034a4:	b10a      	cbz	r2, 80034aa <_printf_common+0x26>
 80034a6:	3301      	adds	r3, #1
 80034a8:	6033      	str	r3, [r6, #0]
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	0699      	lsls	r1, r3, #26
 80034ae:	bf42      	ittt	mi
 80034b0:	6833      	ldrmi	r3, [r6, #0]
 80034b2:	3302      	addmi	r3, #2
 80034b4:	6033      	strmi	r3, [r6, #0]
 80034b6:	6825      	ldr	r5, [r4, #0]
 80034b8:	f015 0506 	ands.w	r5, r5, #6
 80034bc:	d106      	bne.n	80034cc <_printf_common+0x48>
 80034be:	f104 0a19 	add.w	sl, r4, #25
 80034c2:	68e3      	ldr	r3, [r4, #12]
 80034c4:	6832      	ldr	r2, [r6, #0]
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	42ab      	cmp	r3, r5
 80034ca:	dc28      	bgt.n	800351e <_printf_common+0x9a>
 80034cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034d0:	1e13      	subs	r3, r2, #0
 80034d2:	6822      	ldr	r2, [r4, #0]
 80034d4:	bf18      	it	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	0692      	lsls	r2, r2, #26
 80034da:	d42d      	bmi.n	8003538 <_printf_common+0xb4>
 80034dc:	4649      	mov	r1, r9
 80034de:	4638      	mov	r0, r7
 80034e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034e4:	47c0      	blx	r8
 80034e6:	3001      	adds	r0, #1
 80034e8:	d020      	beq.n	800352c <_printf_common+0xa8>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	68e5      	ldr	r5, [r4, #12]
 80034ee:	f003 0306 	and.w	r3, r3, #6
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	bf18      	it	ne
 80034f6:	2500      	movne	r5, #0
 80034f8:	6832      	ldr	r2, [r6, #0]
 80034fa:	f04f 0600 	mov.w	r6, #0
 80034fe:	68a3      	ldr	r3, [r4, #8]
 8003500:	bf08      	it	eq
 8003502:	1aad      	subeq	r5, r5, r2
 8003504:	6922      	ldr	r2, [r4, #16]
 8003506:	bf08      	it	eq
 8003508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800350c:	4293      	cmp	r3, r2
 800350e:	bfc4      	itt	gt
 8003510:	1a9b      	subgt	r3, r3, r2
 8003512:	18ed      	addgt	r5, r5, r3
 8003514:	341a      	adds	r4, #26
 8003516:	42b5      	cmp	r5, r6
 8003518:	d11a      	bne.n	8003550 <_printf_common+0xcc>
 800351a:	2000      	movs	r0, #0
 800351c:	e008      	b.n	8003530 <_printf_common+0xac>
 800351e:	2301      	movs	r3, #1
 8003520:	4652      	mov	r2, sl
 8003522:	4649      	mov	r1, r9
 8003524:	4638      	mov	r0, r7
 8003526:	47c0      	blx	r8
 8003528:	3001      	adds	r0, #1
 800352a:	d103      	bne.n	8003534 <_printf_common+0xb0>
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003534:	3501      	adds	r5, #1
 8003536:	e7c4      	b.n	80034c2 <_printf_common+0x3e>
 8003538:	2030      	movs	r0, #48	; 0x30
 800353a:	18e1      	adds	r1, r4, r3
 800353c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003546:	4422      	add	r2, r4
 8003548:	3302      	adds	r3, #2
 800354a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800354e:	e7c5      	b.n	80034dc <_printf_common+0x58>
 8003550:	2301      	movs	r3, #1
 8003552:	4622      	mov	r2, r4
 8003554:	4649      	mov	r1, r9
 8003556:	4638      	mov	r0, r7
 8003558:	47c0      	blx	r8
 800355a:	3001      	adds	r0, #1
 800355c:	d0e6      	beq.n	800352c <_printf_common+0xa8>
 800355e:	3601      	adds	r6, #1
 8003560:	e7d9      	b.n	8003516 <_printf_common+0x92>
	...

08003564 <_printf_i>:
 8003564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003568:	460c      	mov	r4, r1
 800356a:	7e27      	ldrb	r7, [r4, #24]
 800356c:	4691      	mov	r9, r2
 800356e:	2f78      	cmp	r7, #120	; 0x78
 8003570:	4680      	mov	r8, r0
 8003572:	469a      	mov	sl, r3
 8003574:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800357a:	d807      	bhi.n	800358c <_printf_i+0x28>
 800357c:	2f62      	cmp	r7, #98	; 0x62
 800357e:	d80a      	bhi.n	8003596 <_printf_i+0x32>
 8003580:	2f00      	cmp	r7, #0
 8003582:	f000 80d9 	beq.w	8003738 <_printf_i+0x1d4>
 8003586:	2f58      	cmp	r7, #88	; 0x58
 8003588:	f000 80a4 	beq.w	80036d4 <_printf_i+0x170>
 800358c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003594:	e03a      	b.n	800360c <_printf_i+0xa8>
 8003596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800359a:	2b15      	cmp	r3, #21
 800359c:	d8f6      	bhi.n	800358c <_printf_i+0x28>
 800359e:	a001      	add	r0, pc, #4	; (adr r0, 80035a4 <_printf_i+0x40>)
 80035a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80035a4:	080035fd 	.word	0x080035fd
 80035a8:	08003611 	.word	0x08003611
 80035ac:	0800358d 	.word	0x0800358d
 80035b0:	0800358d 	.word	0x0800358d
 80035b4:	0800358d 	.word	0x0800358d
 80035b8:	0800358d 	.word	0x0800358d
 80035bc:	08003611 	.word	0x08003611
 80035c0:	0800358d 	.word	0x0800358d
 80035c4:	0800358d 	.word	0x0800358d
 80035c8:	0800358d 	.word	0x0800358d
 80035cc:	0800358d 	.word	0x0800358d
 80035d0:	0800371f 	.word	0x0800371f
 80035d4:	08003641 	.word	0x08003641
 80035d8:	08003701 	.word	0x08003701
 80035dc:	0800358d 	.word	0x0800358d
 80035e0:	0800358d 	.word	0x0800358d
 80035e4:	08003741 	.word	0x08003741
 80035e8:	0800358d 	.word	0x0800358d
 80035ec:	08003641 	.word	0x08003641
 80035f0:	0800358d 	.word	0x0800358d
 80035f4:	0800358d 	.word	0x0800358d
 80035f8:	08003709 	.word	0x08003709
 80035fc:	680b      	ldr	r3, [r1, #0]
 80035fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003602:	1d1a      	adds	r2, r3, #4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	600a      	str	r2, [r1, #0]
 8003608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800360c:	2301      	movs	r3, #1
 800360e:	e0a4      	b.n	800375a <_printf_i+0x1f6>
 8003610:	6825      	ldr	r5, [r4, #0]
 8003612:	6808      	ldr	r0, [r1, #0]
 8003614:	062e      	lsls	r6, r5, #24
 8003616:	f100 0304 	add.w	r3, r0, #4
 800361a:	d50a      	bpl.n	8003632 <_printf_i+0xce>
 800361c:	6805      	ldr	r5, [r0, #0]
 800361e:	600b      	str	r3, [r1, #0]
 8003620:	2d00      	cmp	r5, #0
 8003622:	da03      	bge.n	800362c <_printf_i+0xc8>
 8003624:	232d      	movs	r3, #45	; 0x2d
 8003626:	426d      	negs	r5, r5
 8003628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800362c:	230a      	movs	r3, #10
 800362e:	485e      	ldr	r0, [pc, #376]	; (80037a8 <_printf_i+0x244>)
 8003630:	e019      	b.n	8003666 <_printf_i+0x102>
 8003632:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003636:	6805      	ldr	r5, [r0, #0]
 8003638:	600b      	str	r3, [r1, #0]
 800363a:	bf18      	it	ne
 800363c:	b22d      	sxthne	r5, r5
 800363e:	e7ef      	b.n	8003620 <_printf_i+0xbc>
 8003640:	680b      	ldr	r3, [r1, #0]
 8003642:	6825      	ldr	r5, [r4, #0]
 8003644:	1d18      	adds	r0, r3, #4
 8003646:	6008      	str	r0, [r1, #0]
 8003648:	0628      	lsls	r0, r5, #24
 800364a:	d501      	bpl.n	8003650 <_printf_i+0xec>
 800364c:	681d      	ldr	r5, [r3, #0]
 800364e:	e002      	b.n	8003656 <_printf_i+0xf2>
 8003650:	0669      	lsls	r1, r5, #25
 8003652:	d5fb      	bpl.n	800364c <_printf_i+0xe8>
 8003654:	881d      	ldrh	r5, [r3, #0]
 8003656:	2f6f      	cmp	r7, #111	; 0x6f
 8003658:	bf0c      	ite	eq
 800365a:	2308      	moveq	r3, #8
 800365c:	230a      	movne	r3, #10
 800365e:	4852      	ldr	r0, [pc, #328]	; (80037a8 <_printf_i+0x244>)
 8003660:	2100      	movs	r1, #0
 8003662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003666:	6866      	ldr	r6, [r4, #4]
 8003668:	2e00      	cmp	r6, #0
 800366a:	bfa8      	it	ge
 800366c:	6821      	ldrge	r1, [r4, #0]
 800366e:	60a6      	str	r6, [r4, #8]
 8003670:	bfa4      	itt	ge
 8003672:	f021 0104 	bicge.w	r1, r1, #4
 8003676:	6021      	strge	r1, [r4, #0]
 8003678:	b90d      	cbnz	r5, 800367e <_printf_i+0x11a>
 800367a:	2e00      	cmp	r6, #0
 800367c:	d04d      	beq.n	800371a <_printf_i+0x1b6>
 800367e:	4616      	mov	r6, r2
 8003680:	fbb5 f1f3 	udiv	r1, r5, r3
 8003684:	fb03 5711 	mls	r7, r3, r1, r5
 8003688:	5dc7      	ldrb	r7, [r0, r7]
 800368a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800368e:	462f      	mov	r7, r5
 8003690:	42bb      	cmp	r3, r7
 8003692:	460d      	mov	r5, r1
 8003694:	d9f4      	bls.n	8003680 <_printf_i+0x11c>
 8003696:	2b08      	cmp	r3, #8
 8003698:	d10b      	bne.n	80036b2 <_printf_i+0x14e>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	07df      	lsls	r7, r3, #31
 800369e:	d508      	bpl.n	80036b2 <_printf_i+0x14e>
 80036a0:	6923      	ldr	r3, [r4, #16]
 80036a2:	6861      	ldr	r1, [r4, #4]
 80036a4:	4299      	cmp	r1, r3
 80036a6:	bfde      	ittt	le
 80036a8:	2330      	movle	r3, #48	; 0x30
 80036aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036b2:	1b92      	subs	r2, r2, r6
 80036b4:	6122      	str	r2, [r4, #16]
 80036b6:	464b      	mov	r3, r9
 80036b8:	4621      	mov	r1, r4
 80036ba:	4640      	mov	r0, r8
 80036bc:	f8cd a000 	str.w	sl, [sp]
 80036c0:	aa03      	add	r2, sp, #12
 80036c2:	f7ff fedf 	bl	8003484 <_printf_common>
 80036c6:	3001      	adds	r0, #1
 80036c8:	d14c      	bne.n	8003764 <_printf_i+0x200>
 80036ca:	f04f 30ff 	mov.w	r0, #4294967295
 80036ce:	b004      	add	sp, #16
 80036d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d4:	4834      	ldr	r0, [pc, #208]	; (80037a8 <_printf_i+0x244>)
 80036d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036da:	680e      	ldr	r6, [r1, #0]
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	f856 5b04 	ldr.w	r5, [r6], #4
 80036e2:	061f      	lsls	r7, r3, #24
 80036e4:	600e      	str	r6, [r1, #0]
 80036e6:	d514      	bpl.n	8003712 <_printf_i+0x1ae>
 80036e8:	07d9      	lsls	r1, r3, #31
 80036ea:	bf44      	itt	mi
 80036ec:	f043 0320 	orrmi.w	r3, r3, #32
 80036f0:	6023      	strmi	r3, [r4, #0]
 80036f2:	b91d      	cbnz	r5, 80036fc <_printf_i+0x198>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	f023 0320 	bic.w	r3, r3, #32
 80036fa:	6023      	str	r3, [r4, #0]
 80036fc:	2310      	movs	r3, #16
 80036fe:	e7af      	b.n	8003660 <_printf_i+0xfc>
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	f043 0320 	orr.w	r3, r3, #32
 8003706:	6023      	str	r3, [r4, #0]
 8003708:	2378      	movs	r3, #120	; 0x78
 800370a:	4828      	ldr	r0, [pc, #160]	; (80037ac <_printf_i+0x248>)
 800370c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003710:	e7e3      	b.n	80036da <_printf_i+0x176>
 8003712:	065e      	lsls	r6, r3, #25
 8003714:	bf48      	it	mi
 8003716:	b2ad      	uxthmi	r5, r5
 8003718:	e7e6      	b.n	80036e8 <_printf_i+0x184>
 800371a:	4616      	mov	r6, r2
 800371c:	e7bb      	b.n	8003696 <_printf_i+0x132>
 800371e:	680b      	ldr	r3, [r1, #0]
 8003720:	6826      	ldr	r6, [r4, #0]
 8003722:	1d1d      	adds	r5, r3, #4
 8003724:	6960      	ldr	r0, [r4, #20]
 8003726:	600d      	str	r5, [r1, #0]
 8003728:	0635      	lsls	r5, r6, #24
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	d501      	bpl.n	8003732 <_printf_i+0x1ce>
 800372e:	6018      	str	r0, [r3, #0]
 8003730:	e002      	b.n	8003738 <_printf_i+0x1d4>
 8003732:	0671      	lsls	r1, r6, #25
 8003734:	d5fb      	bpl.n	800372e <_printf_i+0x1ca>
 8003736:	8018      	strh	r0, [r3, #0]
 8003738:	2300      	movs	r3, #0
 800373a:	4616      	mov	r6, r2
 800373c:	6123      	str	r3, [r4, #16]
 800373e:	e7ba      	b.n	80036b6 <_printf_i+0x152>
 8003740:	680b      	ldr	r3, [r1, #0]
 8003742:	1d1a      	adds	r2, r3, #4
 8003744:	600a      	str	r2, [r1, #0]
 8003746:	681e      	ldr	r6, [r3, #0]
 8003748:	2100      	movs	r1, #0
 800374a:	4630      	mov	r0, r6
 800374c:	6862      	ldr	r2, [r4, #4]
 800374e:	f000 fa9d 	bl	8003c8c <memchr>
 8003752:	b108      	cbz	r0, 8003758 <_printf_i+0x1f4>
 8003754:	1b80      	subs	r0, r0, r6
 8003756:	6060      	str	r0, [r4, #4]
 8003758:	6863      	ldr	r3, [r4, #4]
 800375a:	6123      	str	r3, [r4, #16]
 800375c:	2300      	movs	r3, #0
 800375e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003762:	e7a8      	b.n	80036b6 <_printf_i+0x152>
 8003764:	4632      	mov	r2, r6
 8003766:	4649      	mov	r1, r9
 8003768:	4640      	mov	r0, r8
 800376a:	6923      	ldr	r3, [r4, #16]
 800376c:	47d0      	blx	sl
 800376e:	3001      	adds	r0, #1
 8003770:	d0ab      	beq.n	80036ca <_printf_i+0x166>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	079b      	lsls	r3, r3, #30
 8003776:	d413      	bmi.n	80037a0 <_printf_i+0x23c>
 8003778:	68e0      	ldr	r0, [r4, #12]
 800377a:	9b03      	ldr	r3, [sp, #12]
 800377c:	4298      	cmp	r0, r3
 800377e:	bfb8      	it	lt
 8003780:	4618      	movlt	r0, r3
 8003782:	e7a4      	b.n	80036ce <_printf_i+0x16a>
 8003784:	2301      	movs	r3, #1
 8003786:	4632      	mov	r2, r6
 8003788:	4649      	mov	r1, r9
 800378a:	4640      	mov	r0, r8
 800378c:	47d0      	blx	sl
 800378e:	3001      	adds	r0, #1
 8003790:	d09b      	beq.n	80036ca <_printf_i+0x166>
 8003792:	3501      	adds	r5, #1
 8003794:	68e3      	ldr	r3, [r4, #12]
 8003796:	9903      	ldr	r1, [sp, #12]
 8003798:	1a5b      	subs	r3, r3, r1
 800379a:	42ab      	cmp	r3, r5
 800379c:	dcf2      	bgt.n	8003784 <_printf_i+0x220>
 800379e:	e7eb      	b.n	8003778 <_printf_i+0x214>
 80037a0:	2500      	movs	r5, #0
 80037a2:	f104 0619 	add.w	r6, r4, #25
 80037a6:	e7f5      	b.n	8003794 <_printf_i+0x230>
 80037a8:	08003e8d 	.word	0x08003e8d
 80037ac:	08003e9e 	.word	0x08003e9e

080037b0 <_sbrk_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	2300      	movs	r3, #0
 80037b4:	4d05      	ldr	r5, [pc, #20]	; (80037cc <_sbrk_r+0x1c>)
 80037b6:	4604      	mov	r4, r0
 80037b8:	4608      	mov	r0, r1
 80037ba:	602b      	str	r3, [r5, #0]
 80037bc:	f7fc ffe8 	bl	8000790 <_sbrk>
 80037c0:	1c43      	adds	r3, r0, #1
 80037c2:	d102      	bne.n	80037ca <_sbrk_r+0x1a>
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	b103      	cbz	r3, 80037ca <_sbrk_r+0x1a>
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	bd38      	pop	{r3, r4, r5, pc}
 80037cc:	200001d4 	.word	0x200001d4

080037d0 <__sread>:
 80037d0:	b510      	push	{r4, lr}
 80037d2:	460c      	mov	r4, r1
 80037d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d8:	f000 fabe 	bl	8003d58 <_read_r>
 80037dc:	2800      	cmp	r0, #0
 80037de:	bfab      	itete	ge
 80037e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037e2:	89a3      	ldrhlt	r3, [r4, #12]
 80037e4:	181b      	addge	r3, r3, r0
 80037e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037ea:	bfac      	ite	ge
 80037ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80037ee:	81a3      	strhlt	r3, [r4, #12]
 80037f0:	bd10      	pop	{r4, pc}

080037f2 <__swrite>:
 80037f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f6:	461f      	mov	r7, r3
 80037f8:	898b      	ldrh	r3, [r1, #12]
 80037fa:	4605      	mov	r5, r0
 80037fc:	05db      	lsls	r3, r3, #23
 80037fe:	460c      	mov	r4, r1
 8003800:	4616      	mov	r6, r2
 8003802:	d505      	bpl.n	8003810 <__swrite+0x1e>
 8003804:	2302      	movs	r3, #2
 8003806:	2200      	movs	r2, #0
 8003808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380c:	f000 f9c8 	bl	8003ba0 <_lseek_r>
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	4632      	mov	r2, r6
 8003814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003818:	81a3      	strh	r3, [r4, #12]
 800381a:	4628      	mov	r0, r5
 800381c:	463b      	mov	r3, r7
 800381e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003826:	f000 b869 	b.w	80038fc <_write_r>

0800382a <__sseek>:
 800382a:	b510      	push	{r4, lr}
 800382c:	460c      	mov	r4, r1
 800382e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003832:	f000 f9b5 	bl	8003ba0 <_lseek_r>
 8003836:	1c43      	adds	r3, r0, #1
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	bf15      	itete	ne
 800383c:	6560      	strne	r0, [r4, #84]	; 0x54
 800383e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003846:	81a3      	strheq	r3, [r4, #12]
 8003848:	bf18      	it	ne
 800384a:	81a3      	strhne	r3, [r4, #12]
 800384c:	bd10      	pop	{r4, pc}

0800384e <__sclose>:
 800384e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003852:	f000 b8d3 	b.w	80039fc <_close_r>
	...

08003858 <__swbuf_r>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	460e      	mov	r6, r1
 800385c:	4614      	mov	r4, r2
 800385e:	4605      	mov	r5, r0
 8003860:	b118      	cbz	r0, 800386a <__swbuf_r+0x12>
 8003862:	6983      	ldr	r3, [r0, #24]
 8003864:	b90b      	cbnz	r3, 800386a <__swbuf_r+0x12>
 8003866:	f7ff fbbb 	bl	8002fe0 <__sinit>
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <__swbuf_r+0x98>)
 800386c:	429c      	cmp	r4, r3
 800386e:	d12b      	bne.n	80038c8 <__swbuf_r+0x70>
 8003870:	686c      	ldr	r4, [r5, #4]
 8003872:	69a3      	ldr	r3, [r4, #24]
 8003874:	60a3      	str	r3, [r4, #8]
 8003876:	89a3      	ldrh	r3, [r4, #12]
 8003878:	071a      	lsls	r2, r3, #28
 800387a:	d52f      	bpl.n	80038dc <__swbuf_r+0x84>
 800387c:	6923      	ldr	r3, [r4, #16]
 800387e:	b36b      	cbz	r3, 80038dc <__swbuf_r+0x84>
 8003880:	6923      	ldr	r3, [r4, #16]
 8003882:	6820      	ldr	r0, [r4, #0]
 8003884:	b2f6      	uxtb	r6, r6
 8003886:	1ac0      	subs	r0, r0, r3
 8003888:	6963      	ldr	r3, [r4, #20]
 800388a:	4637      	mov	r7, r6
 800388c:	4283      	cmp	r3, r0
 800388e:	dc04      	bgt.n	800389a <__swbuf_r+0x42>
 8003890:	4621      	mov	r1, r4
 8003892:	4628      	mov	r0, r5
 8003894:	f000 f948 	bl	8003b28 <_fflush_r>
 8003898:	bb30      	cbnz	r0, 80038e8 <__swbuf_r+0x90>
 800389a:	68a3      	ldr	r3, [r4, #8]
 800389c:	3001      	adds	r0, #1
 800389e:	3b01      	subs	r3, #1
 80038a0:	60a3      	str	r3, [r4, #8]
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	6022      	str	r2, [r4, #0]
 80038a8:	701e      	strb	r6, [r3, #0]
 80038aa:	6963      	ldr	r3, [r4, #20]
 80038ac:	4283      	cmp	r3, r0
 80038ae:	d004      	beq.n	80038ba <__swbuf_r+0x62>
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	07db      	lsls	r3, r3, #31
 80038b4:	d506      	bpl.n	80038c4 <__swbuf_r+0x6c>
 80038b6:	2e0a      	cmp	r6, #10
 80038b8:	d104      	bne.n	80038c4 <__swbuf_r+0x6c>
 80038ba:	4621      	mov	r1, r4
 80038bc:	4628      	mov	r0, r5
 80038be:	f000 f933 	bl	8003b28 <_fflush_r>
 80038c2:	b988      	cbnz	r0, 80038e8 <__swbuf_r+0x90>
 80038c4:	4638      	mov	r0, r7
 80038c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <__swbuf_r+0x9c>)
 80038ca:	429c      	cmp	r4, r3
 80038cc:	d101      	bne.n	80038d2 <__swbuf_r+0x7a>
 80038ce:	68ac      	ldr	r4, [r5, #8]
 80038d0:	e7cf      	b.n	8003872 <__swbuf_r+0x1a>
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <__swbuf_r+0xa0>)
 80038d4:	429c      	cmp	r4, r3
 80038d6:	bf08      	it	eq
 80038d8:	68ec      	ldreq	r4, [r5, #12]
 80038da:	e7ca      	b.n	8003872 <__swbuf_r+0x1a>
 80038dc:	4621      	mov	r1, r4
 80038de:	4628      	mov	r0, r5
 80038e0:	f000 f81e 	bl	8003920 <__swsetup_r>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d0cb      	beq.n	8003880 <__swbuf_r+0x28>
 80038e8:	f04f 37ff 	mov.w	r7, #4294967295
 80038ec:	e7ea      	b.n	80038c4 <__swbuf_r+0x6c>
 80038ee:	bf00      	nop
 80038f0:	08003e3c 	.word	0x08003e3c
 80038f4:	08003e5c 	.word	0x08003e5c
 80038f8:	08003e1c 	.word	0x08003e1c

080038fc <_write_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4604      	mov	r4, r0
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	2200      	movs	r2, #0
 8003906:	4d05      	ldr	r5, [pc, #20]	; (800391c <_write_r+0x20>)
 8003908:	602a      	str	r2, [r5, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	f7fc fef3 	bl	80006f6 <_write>
 8003910:	1c43      	adds	r3, r0, #1
 8003912:	d102      	bne.n	800391a <_write_r+0x1e>
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	b103      	cbz	r3, 800391a <_write_r+0x1e>
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	bd38      	pop	{r3, r4, r5, pc}
 800391c:	200001d4 	.word	0x200001d4

08003920 <__swsetup_r>:
 8003920:	4b32      	ldr	r3, [pc, #200]	; (80039ec <__swsetup_r+0xcc>)
 8003922:	b570      	push	{r4, r5, r6, lr}
 8003924:	681d      	ldr	r5, [r3, #0]
 8003926:	4606      	mov	r6, r0
 8003928:	460c      	mov	r4, r1
 800392a:	b125      	cbz	r5, 8003936 <__swsetup_r+0x16>
 800392c:	69ab      	ldr	r3, [r5, #24]
 800392e:	b913      	cbnz	r3, 8003936 <__swsetup_r+0x16>
 8003930:	4628      	mov	r0, r5
 8003932:	f7ff fb55 	bl	8002fe0 <__sinit>
 8003936:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <__swsetup_r+0xd0>)
 8003938:	429c      	cmp	r4, r3
 800393a:	d10f      	bne.n	800395c <__swsetup_r+0x3c>
 800393c:	686c      	ldr	r4, [r5, #4]
 800393e:	89a3      	ldrh	r3, [r4, #12]
 8003940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003944:	0719      	lsls	r1, r3, #28
 8003946:	d42c      	bmi.n	80039a2 <__swsetup_r+0x82>
 8003948:	06dd      	lsls	r5, r3, #27
 800394a:	d411      	bmi.n	8003970 <__swsetup_r+0x50>
 800394c:	2309      	movs	r3, #9
 800394e:	6033      	str	r3, [r6, #0]
 8003950:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	81a3      	strh	r3, [r4, #12]
 800395a:	e03e      	b.n	80039da <__swsetup_r+0xba>
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <__swsetup_r+0xd4>)
 800395e:	429c      	cmp	r4, r3
 8003960:	d101      	bne.n	8003966 <__swsetup_r+0x46>
 8003962:	68ac      	ldr	r4, [r5, #8]
 8003964:	e7eb      	b.n	800393e <__swsetup_r+0x1e>
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <__swsetup_r+0xd8>)
 8003968:	429c      	cmp	r4, r3
 800396a:	bf08      	it	eq
 800396c:	68ec      	ldreq	r4, [r5, #12]
 800396e:	e7e6      	b.n	800393e <__swsetup_r+0x1e>
 8003970:	0758      	lsls	r0, r3, #29
 8003972:	d512      	bpl.n	800399a <__swsetup_r+0x7a>
 8003974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003976:	b141      	cbz	r1, 800398a <__swsetup_r+0x6a>
 8003978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800397c:	4299      	cmp	r1, r3
 800397e:	d002      	beq.n	8003986 <__swsetup_r+0x66>
 8003980:	4630      	mov	r0, r6
 8003982:	f000 f99d 	bl	8003cc0 <_free_r>
 8003986:	2300      	movs	r3, #0
 8003988:	6363      	str	r3, [r4, #52]	; 0x34
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003990:	81a3      	strh	r3, [r4, #12]
 8003992:	2300      	movs	r3, #0
 8003994:	6063      	str	r3, [r4, #4]
 8003996:	6923      	ldr	r3, [r4, #16]
 8003998:	6023      	str	r3, [r4, #0]
 800399a:	89a3      	ldrh	r3, [r4, #12]
 800399c:	f043 0308 	orr.w	r3, r3, #8
 80039a0:	81a3      	strh	r3, [r4, #12]
 80039a2:	6923      	ldr	r3, [r4, #16]
 80039a4:	b94b      	cbnz	r3, 80039ba <__swsetup_r+0x9a>
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b0:	d003      	beq.n	80039ba <__swsetup_r+0x9a>
 80039b2:	4621      	mov	r1, r4
 80039b4:	4630      	mov	r0, r6
 80039b6:	f000 f929 	bl	8003c0c <__smakebuf_r>
 80039ba:	89a0      	ldrh	r0, [r4, #12]
 80039bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039c0:	f010 0301 	ands.w	r3, r0, #1
 80039c4:	d00a      	beq.n	80039dc <__swsetup_r+0xbc>
 80039c6:	2300      	movs	r3, #0
 80039c8:	60a3      	str	r3, [r4, #8]
 80039ca:	6963      	ldr	r3, [r4, #20]
 80039cc:	425b      	negs	r3, r3
 80039ce:	61a3      	str	r3, [r4, #24]
 80039d0:	6923      	ldr	r3, [r4, #16]
 80039d2:	b943      	cbnz	r3, 80039e6 <__swsetup_r+0xc6>
 80039d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80039d8:	d1ba      	bne.n	8003950 <__swsetup_r+0x30>
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	0781      	lsls	r1, r0, #30
 80039de:	bf58      	it	pl
 80039e0:	6963      	ldrpl	r3, [r4, #20]
 80039e2:	60a3      	str	r3, [r4, #8]
 80039e4:	e7f4      	b.n	80039d0 <__swsetup_r+0xb0>
 80039e6:	2000      	movs	r0, #0
 80039e8:	e7f7      	b.n	80039da <__swsetup_r+0xba>
 80039ea:	bf00      	nop
 80039ec:	20000010 	.word	0x20000010
 80039f0:	08003e3c 	.word	0x08003e3c
 80039f4:	08003e5c 	.word	0x08003e5c
 80039f8:	08003e1c 	.word	0x08003e1c

080039fc <_close_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	2300      	movs	r3, #0
 8003a00:	4d05      	ldr	r5, [pc, #20]	; (8003a18 <_close_r+0x1c>)
 8003a02:	4604      	mov	r4, r0
 8003a04:	4608      	mov	r0, r1
 8003a06:	602b      	str	r3, [r5, #0]
 8003a08:	f7fc fe91 	bl	800072e <_close>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d102      	bne.n	8003a16 <_close_r+0x1a>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	b103      	cbz	r3, 8003a16 <_close_r+0x1a>
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	200001d4 	.word	0x200001d4

08003a1c <__sflush_r>:
 8003a1c:	898a      	ldrh	r2, [r1, #12]
 8003a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a22:	4605      	mov	r5, r0
 8003a24:	0710      	lsls	r0, r2, #28
 8003a26:	460c      	mov	r4, r1
 8003a28:	d458      	bmi.n	8003adc <__sflush_r+0xc0>
 8003a2a:	684b      	ldr	r3, [r1, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	dc05      	bgt.n	8003a3c <__sflush_r+0x20>
 8003a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	dc02      	bgt.n	8003a3c <__sflush_r+0x20>
 8003a36:	2000      	movs	r0, #0
 8003a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a3e:	2e00      	cmp	r6, #0
 8003a40:	d0f9      	beq.n	8003a36 <__sflush_r+0x1a>
 8003a42:	2300      	movs	r3, #0
 8003a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a48:	682f      	ldr	r7, [r5, #0]
 8003a4a:	602b      	str	r3, [r5, #0]
 8003a4c:	d032      	beq.n	8003ab4 <__sflush_r+0x98>
 8003a4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	075a      	lsls	r2, r3, #29
 8003a54:	d505      	bpl.n	8003a62 <__sflush_r+0x46>
 8003a56:	6863      	ldr	r3, [r4, #4]
 8003a58:	1ac0      	subs	r0, r0, r3
 8003a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a5c:	b10b      	cbz	r3, 8003a62 <__sflush_r+0x46>
 8003a5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a60:	1ac0      	subs	r0, r0, r3
 8003a62:	2300      	movs	r3, #0
 8003a64:	4602      	mov	r2, r0
 8003a66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a68:	4628      	mov	r0, r5
 8003a6a:	6a21      	ldr	r1, [r4, #32]
 8003a6c:	47b0      	blx	r6
 8003a6e:	1c43      	adds	r3, r0, #1
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	d106      	bne.n	8003a82 <__sflush_r+0x66>
 8003a74:	6829      	ldr	r1, [r5, #0]
 8003a76:	291d      	cmp	r1, #29
 8003a78:	d82c      	bhi.n	8003ad4 <__sflush_r+0xb8>
 8003a7a:	4a2a      	ldr	r2, [pc, #168]	; (8003b24 <__sflush_r+0x108>)
 8003a7c:	40ca      	lsrs	r2, r1
 8003a7e:	07d6      	lsls	r6, r2, #31
 8003a80:	d528      	bpl.n	8003ad4 <__sflush_r+0xb8>
 8003a82:	2200      	movs	r2, #0
 8003a84:	6062      	str	r2, [r4, #4]
 8003a86:	6922      	ldr	r2, [r4, #16]
 8003a88:	04d9      	lsls	r1, r3, #19
 8003a8a:	6022      	str	r2, [r4, #0]
 8003a8c:	d504      	bpl.n	8003a98 <__sflush_r+0x7c>
 8003a8e:	1c42      	adds	r2, r0, #1
 8003a90:	d101      	bne.n	8003a96 <__sflush_r+0x7a>
 8003a92:	682b      	ldr	r3, [r5, #0]
 8003a94:	b903      	cbnz	r3, 8003a98 <__sflush_r+0x7c>
 8003a96:	6560      	str	r0, [r4, #84]	; 0x54
 8003a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a9a:	602f      	str	r7, [r5, #0]
 8003a9c:	2900      	cmp	r1, #0
 8003a9e:	d0ca      	beq.n	8003a36 <__sflush_r+0x1a>
 8003aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003aa4:	4299      	cmp	r1, r3
 8003aa6:	d002      	beq.n	8003aae <__sflush_r+0x92>
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f000 f909 	bl	8003cc0 <_free_r>
 8003aae:	2000      	movs	r0, #0
 8003ab0:	6360      	str	r0, [r4, #52]	; 0x34
 8003ab2:	e7c1      	b.n	8003a38 <__sflush_r+0x1c>
 8003ab4:	6a21      	ldr	r1, [r4, #32]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	4628      	mov	r0, r5
 8003aba:	47b0      	blx	r6
 8003abc:	1c41      	adds	r1, r0, #1
 8003abe:	d1c7      	bne.n	8003a50 <__sflush_r+0x34>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0c4      	beq.n	8003a50 <__sflush_r+0x34>
 8003ac6:	2b1d      	cmp	r3, #29
 8003ac8:	d001      	beq.n	8003ace <__sflush_r+0xb2>
 8003aca:	2b16      	cmp	r3, #22
 8003acc:	d101      	bne.n	8003ad2 <__sflush_r+0xb6>
 8003ace:	602f      	str	r7, [r5, #0]
 8003ad0:	e7b1      	b.n	8003a36 <__sflush_r+0x1a>
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad8:	81a3      	strh	r3, [r4, #12]
 8003ada:	e7ad      	b.n	8003a38 <__sflush_r+0x1c>
 8003adc:	690f      	ldr	r7, [r1, #16]
 8003ade:	2f00      	cmp	r7, #0
 8003ae0:	d0a9      	beq.n	8003a36 <__sflush_r+0x1a>
 8003ae2:	0793      	lsls	r3, r2, #30
 8003ae4:	bf18      	it	ne
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	680e      	ldr	r6, [r1, #0]
 8003aea:	bf08      	it	eq
 8003aec:	694b      	ldreq	r3, [r1, #20]
 8003aee:	eba6 0807 	sub.w	r8, r6, r7
 8003af2:	600f      	str	r7, [r1, #0]
 8003af4:	608b      	str	r3, [r1, #8]
 8003af6:	f1b8 0f00 	cmp.w	r8, #0
 8003afa:	dd9c      	ble.n	8003a36 <__sflush_r+0x1a>
 8003afc:	4643      	mov	r3, r8
 8003afe:	463a      	mov	r2, r7
 8003b00:	4628      	mov	r0, r5
 8003b02:	6a21      	ldr	r1, [r4, #32]
 8003b04:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b06:	47b0      	blx	r6
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	dc06      	bgt.n	8003b1a <__sflush_r+0xfe>
 8003b0c:	89a3      	ldrh	r3, [r4, #12]
 8003b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b16:	81a3      	strh	r3, [r4, #12]
 8003b18:	e78e      	b.n	8003a38 <__sflush_r+0x1c>
 8003b1a:	4407      	add	r7, r0
 8003b1c:	eba8 0800 	sub.w	r8, r8, r0
 8003b20:	e7e9      	b.n	8003af6 <__sflush_r+0xda>
 8003b22:	bf00      	nop
 8003b24:	20400001 	.word	0x20400001

08003b28 <_fflush_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	690b      	ldr	r3, [r1, #16]
 8003b2c:	4605      	mov	r5, r0
 8003b2e:	460c      	mov	r4, r1
 8003b30:	b913      	cbnz	r3, 8003b38 <_fflush_r+0x10>
 8003b32:	2500      	movs	r5, #0
 8003b34:	4628      	mov	r0, r5
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
 8003b38:	b118      	cbz	r0, 8003b42 <_fflush_r+0x1a>
 8003b3a:	6983      	ldr	r3, [r0, #24]
 8003b3c:	b90b      	cbnz	r3, 8003b42 <_fflush_r+0x1a>
 8003b3e:	f7ff fa4f 	bl	8002fe0 <__sinit>
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <_fflush_r+0x6c>)
 8003b44:	429c      	cmp	r4, r3
 8003b46:	d11b      	bne.n	8003b80 <_fflush_r+0x58>
 8003b48:	686c      	ldr	r4, [r5, #4]
 8003b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0ef      	beq.n	8003b32 <_fflush_r+0xa>
 8003b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b54:	07d0      	lsls	r0, r2, #31
 8003b56:	d404      	bmi.n	8003b62 <_fflush_r+0x3a>
 8003b58:	0599      	lsls	r1, r3, #22
 8003b5a:	d402      	bmi.n	8003b62 <_fflush_r+0x3a>
 8003b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b5e:	f7ff fadd 	bl	800311c <__retarget_lock_acquire_recursive>
 8003b62:	4628      	mov	r0, r5
 8003b64:	4621      	mov	r1, r4
 8003b66:	f7ff ff59 	bl	8003a1c <__sflush_r>
 8003b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	07da      	lsls	r2, r3, #31
 8003b70:	d4e0      	bmi.n	8003b34 <_fflush_r+0xc>
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	059b      	lsls	r3, r3, #22
 8003b76:	d4dd      	bmi.n	8003b34 <_fflush_r+0xc>
 8003b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b7a:	f7ff fad0 	bl	800311e <__retarget_lock_release_recursive>
 8003b7e:	e7d9      	b.n	8003b34 <_fflush_r+0xc>
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <_fflush_r+0x70>)
 8003b82:	429c      	cmp	r4, r3
 8003b84:	d101      	bne.n	8003b8a <_fflush_r+0x62>
 8003b86:	68ac      	ldr	r4, [r5, #8]
 8003b88:	e7df      	b.n	8003b4a <_fflush_r+0x22>
 8003b8a:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <_fflush_r+0x74>)
 8003b8c:	429c      	cmp	r4, r3
 8003b8e:	bf08      	it	eq
 8003b90:	68ec      	ldreq	r4, [r5, #12]
 8003b92:	e7da      	b.n	8003b4a <_fflush_r+0x22>
 8003b94:	08003e3c 	.word	0x08003e3c
 8003b98:	08003e5c 	.word	0x08003e5c
 8003b9c:	08003e1c 	.word	0x08003e1c

08003ba0 <_lseek_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	2200      	movs	r2, #0
 8003baa:	4d05      	ldr	r5, [pc, #20]	; (8003bc0 <_lseek_r+0x20>)
 8003bac:	602a      	str	r2, [r5, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f7fc fde1 	bl	8000776 <_lseek>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d102      	bne.n	8003bbe <_lseek_r+0x1e>
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	b103      	cbz	r3, 8003bbe <_lseek_r+0x1e>
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
 8003bc0:	200001d4 	.word	0x200001d4

08003bc4 <__swhatbuf_r>:
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	460e      	mov	r6, r1
 8003bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bcc:	4614      	mov	r4, r2
 8003bce:	2900      	cmp	r1, #0
 8003bd0:	461d      	mov	r5, r3
 8003bd2:	b096      	sub	sp, #88	; 0x58
 8003bd4:	da07      	bge.n	8003be6 <__swhatbuf_r+0x22>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	89b3      	ldrh	r3, [r6, #12]
 8003bdc:	061a      	lsls	r2, r3, #24
 8003bde:	d410      	bmi.n	8003c02 <__swhatbuf_r+0x3e>
 8003be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be4:	e00e      	b.n	8003c04 <__swhatbuf_r+0x40>
 8003be6:	466a      	mov	r2, sp
 8003be8:	f000 f8c8 	bl	8003d7c <_fstat_r>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	dbf2      	blt.n	8003bd6 <__swhatbuf_r+0x12>
 8003bf0:	9a01      	ldr	r2, [sp, #4]
 8003bf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003bf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003bfa:	425a      	negs	r2, r3
 8003bfc:	415a      	adcs	r2, r3
 8003bfe:	602a      	str	r2, [r5, #0]
 8003c00:	e7ee      	b.n	8003be0 <__swhatbuf_r+0x1c>
 8003c02:	2340      	movs	r3, #64	; 0x40
 8003c04:	2000      	movs	r0, #0
 8003c06:	6023      	str	r3, [r4, #0]
 8003c08:	b016      	add	sp, #88	; 0x58
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}

08003c0c <__smakebuf_r>:
 8003c0c:	898b      	ldrh	r3, [r1, #12]
 8003c0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c10:	079d      	lsls	r5, r3, #30
 8003c12:	4606      	mov	r6, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	d507      	bpl.n	8003c28 <__smakebuf_r+0x1c>
 8003c18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	6123      	str	r3, [r4, #16]
 8003c20:	2301      	movs	r3, #1
 8003c22:	6163      	str	r3, [r4, #20]
 8003c24:	b002      	add	sp, #8
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	466a      	mov	r2, sp
 8003c2a:	ab01      	add	r3, sp, #4
 8003c2c:	f7ff ffca 	bl	8003bc4 <__swhatbuf_r>
 8003c30:	9900      	ldr	r1, [sp, #0]
 8003c32:	4605      	mov	r5, r0
 8003c34:	4630      	mov	r0, r6
 8003c36:	f7ff fa73 	bl	8003120 <_malloc_r>
 8003c3a:	b948      	cbnz	r0, 8003c50 <__smakebuf_r+0x44>
 8003c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c40:	059a      	lsls	r2, r3, #22
 8003c42:	d4ef      	bmi.n	8003c24 <__smakebuf_r+0x18>
 8003c44:	f023 0303 	bic.w	r3, r3, #3
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	81a3      	strh	r3, [r4, #12]
 8003c4e:	e7e3      	b.n	8003c18 <__smakebuf_r+0xc>
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <__smakebuf_r+0x7c>)
 8003c52:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c54:	89a3      	ldrh	r3, [r4, #12]
 8003c56:	6020      	str	r0, [r4, #0]
 8003c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5c:	81a3      	strh	r3, [r4, #12]
 8003c5e:	9b00      	ldr	r3, [sp, #0]
 8003c60:	6120      	str	r0, [r4, #16]
 8003c62:	6163      	str	r3, [r4, #20]
 8003c64:	9b01      	ldr	r3, [sp, #4]
 8003c66:	b15b      	cbz	r3, 8003c80 <__smakebuf_r+0x74>
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c6e:	f000 f897 	bl	8003da0 <_isatty_r>
 8003c72:	b128      	cbz	r0, 8003c80 <__smakebuf_r+0x74>
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	89a0      	ldrh	r0, [r4, #12]
 8003c82:	4305      	orrs	r5, r0
 8003c84:	81a5      	strh	r5, [r4, #12]
 8003c86:	e7cd      	b.n	8003c24 <__smakebuf_r+0x18>
 8003c88:	08002f79 	.word	0x08002f79

08003c8c <memchr>:
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	b510      	push	{r4, lr}
 8003c90:	b2c9      	uxtb	r1, r1
 8003c92:	4402      	add	r2, r0
 8003c94:	4293      	cmp	r3, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	d101      	bne.n	8003c9e <memchr+0x12>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e003      	b.n	8003ca6 <memchr+0x1a>
 8003c9e:	7804      	ldrb	r4, [r0, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	428c      	cmp	r4, r1
 8003ca4:	d1f6      	bne.n	8003c94 <memchr+0x8>
 8003ca6:	bd10      	pop	{r4, pc}

08003ca8 <__malloc_lock>:
 8003ca8:	4801      	ldr	r0, [pc, #4]	; (8003cb0 <__malloc_lock+0x8>)
 8003caa:	f7ff ba37 	b.w	800311c <__retarget_lock_acquire_recursive>
 8003cae:	bf00      	nop
 8003cb0:	200001cc 	.word	0x200001cc

08003cb4 <__malloc_unlock>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	; (8003cbc <__malloc_unlock+0x8>)
 8003cb6:	f7ff ba32 	b.w	800311e <__retarget_lock_release_recursive>
 8003cba:	bf00      	nop
 8003cbc:	200001cc 	.word	0x200001cc

08003cc0 <_free_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4605      	mov	r5, r0
 8003cc4:	2900      	cmp	r1, #0
 8003cc6:	d043      	beq.n	8003d50 <_free_r+0x90>
 8003cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ccc:	1f0c      	subs	r4, r1, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bfb8      	it	lt
 8003cd2:	18e4      	addlt	r4, r4, r3
 8003cd4:	f7ff ffe8 	bl	8003ca8 <__malloc_lock>
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <_free_r+0x94>)
 8003cda:	6813      	ldr	r3, [r2, #0]
 8003cdc:	4610      	mov	r0, r2
 8003cde:	b933      	cbnz	r3, 8003cee <_free_r+0x2e>
 8003ce0:	6063      	str	r3, [r4, #4]
 8003ce2:	6014      	str	r4, [r2, #0]
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cea:	f7ff bfe3 	b.w	8003cb4 <__malloc_unlock>
 8003cee:	42a3      	cmp	r3, r4
 8003cf0:	d90a      	bls.n	8003d08 <_free_r+0x48>
 8003cf2:	6821      	ldr	r1, [r4, #0]
 8003cf4:	1862      	adds	r2, r4, r1
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	bf01      	itttt	eq
 8003cfa:	681a      	ldreq	r2, [r3, #0]
 8003cfc:	685b      	ldreq	r3, [r3, #4]
 8003cfe:	1852      	addeq	r2, r2, r1
 8003d00:	6022      	streq	r2, [r4, #0]
 8003d02:	6063      	str	r3, [r4, #4]
 8003d04:	6004      	str	r4, [r0, #0]
 8003d06:	e7ed      	b.n	8003ce4 <_free_r+0x24>
 8003d08:	461a      	mov	r2, r3
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	b10b      	cbz	r3, 8003d12 <_free_r+0x52>
 8003d0e:	42a3      	cmp	r3, r4
 8003d10:	d9fa      	bls.n	8003d08 <_free_r+0x48>
 8003d12:	6811      	ldr	r1, [r2, #0]
 8003d14:	1850      	adds	r0, r2, r1
 8003d16:	42a0      	cmp	r0, r4
 8003d18:	d10b      	bne.n	8003d32 <_free_r+0x72>
 8003d1a:	6820      	ldr	r0, [r4, #0]
 8003d1c:	4401      	add	r1, r0
 8003d1e:	1850      	adds	r0, r2, r1
 8003d20:	4283      	cmp	r3, r0
 8003d22:	6011      	str	r1, [r2, #0]
 8003d24:	d1de      	bne.n	8003ce4 <_free_r+0x24>
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4401      	add	r1, r0
 8003d2c:	6011      	str	r1, [r2, #0]
 8003d2e:	6053      	str	r3, [r2, #4]
 8003d30:	e7d8      	b.n	8003ce4 <_free_r+0x24>
 8003d32:	d902      	bls.n	8003d3a <_free_r+0x7a>
 8003d34:	230c      	movs	r3, #12
 8003d36:	602b      	str	r3, [r5, #0]
 8003d38:	e7d4      	b.n	8003ce4 <_free_r+0x24>
 8003d3a:	6820      	ldr	r0, [r4, #0]
 8003d3c:	1821      	adds	r1, r4, r0
 8003d3e:	428b      	cmp	r3, r1
 8003d40:	bf01      	itttt	eq
 8003d42:	6819      	ldreq	r1, [r3, #0]
 8003d44:	685b      	ldreq	r3, [r3, #4]
 8003d46:	1809      	addeq	r1, r1, r0
 8003d48:	6021      	streq	r1, [r4, #0]
 8003d4a:	6063      	str	r3, [r4, #4]
 8003d4c:	6054      	str	r4, [r2, #4]
 8003d4e:	e7c9      	b.n	8003ce4 <_free_r+0x24>
 8003d50:	bd38      	pop	{r3, r4, r5, pc}
 8003d52:	bf00      	nop
 8003d54:	20000094 	.word	0x20000094

08003d58 <_read_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	2200      	movs	r2, #0
 8003d62:	4d05      	ldr	r5, [pc, #20]	; (8003d78 <_read_r+0x20>)
 8003d64:	602a      	str	r2, [r5, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f7fc fca8 	bl	80006bc <_read>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	d102      	bne.n	8003d76 <_read_r+0x1e>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	b103      	cbz	r3, 8003d76 <_read_r+0x1e>
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
 8003d78:	200001d4 	.word	0x200001d4

08003d7c <_fstat_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	2300      	movs	r3, #0
 8003d80:	4d06      	ldr	r5, [pc, #24]	; (8003d9c <_fstat_r+0x20>)
 8003d82:	4604      	mov	r4, r0
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	602b      	str	r3, [r5, #0]
 8003d8a:	f7fc fcdb 	bl	8000744 <_fstat>
 8003d8e:	1c43      	adds	r3, r0, #1
 8003d90:	d102      	bne.n	8003d98 <_fstat_r+0x1c>
 8003d92:	682b      	ldr	r3, [r5, #0]
 8003d94:	b103      	cbz	r3, 8003d98 <_fstat_r+0x1c>
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	bd38      	pop	{r3, r4, r5, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200001d4 	.word	0x200001d4

08003da0 <_isatty_r>:
 8003da0:	b538      	push	{r3, r4, r5, lr}
 8003da2:	2300      	movs	r3, #0
 8003da4:	4d05      	ldr	r5, [pc, #20]	; (8003dbc <_isatty_r+0x1c>)
 8003da6:	4604      	mov	r4, r0
 8003da8:	4608      	mov	r0, r1
 8003daa:	602b      	str	r3, [r5, #0]
 8003dac:	f7fc fcd9 	bl	8000762 <_isatty>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d102      	bne.n	8003dba <_isatty_r+0x1a>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	b103      	cbz	r3, 8003dba <_isatty_r+0x1a>
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
 8003dbc:	200001d4 	.word	0x200001d4

08003dc0 <_init>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	bf00      	nop
 8003dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc6:	bc08      	pop	{r3}
 8003dc8:	469e      	mov	lr, r3
 8003dca:	4770      	bx	lr

08003dcc <_fini>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	bf00      	nop
 8003dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd2:	bc08      	pop	{r3}
 8003dd4:	469e      	mov	lr, r3
 8003dd6:	4770      	bx	lr
